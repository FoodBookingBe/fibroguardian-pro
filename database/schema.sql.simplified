-- This is a simplified version of the schema focusing on the reflecties table
-- with the pijn_score and vermoeidheid_score fields added

-- Drop the reflecties table if it exists
DROP TABLE IF EXISTS reflecties CASCADE;

-- Create the reflecties table with the new fields
CREATE TABLE reflecties (
  id uuid DEFAULT uuid_generate_v4() PRIMARY KEY,
  user_id uuid REFERENCES auth.users ON DELETE CASCADE NOT NULL,
  datum date NOT NULL,
  stemming text,
  notitie text,
  ai_validatie text,
  pijn_score integer CHECK (pijn_score BETWEEN 1 AND 20),
  vermoeidheid_score integer CHECK (vermoeidheid_score BETWEEN 1 AND 20),
  created_at timestamptz DEFAULT now() NOT NULL
);

-- Enable RLS for the reflecties table
ALTER TABLE reflecties ENABLE ROW LEVEL SECURITY;

-- RLS policies for reflecties
CREATE POLICY "Reflecties_policy"
ON reflecties
FOR SELECT
USING (
  (SELECT auth.uid()) = user_id
  OR EXISTS (
    SELECT 1 FROM specialist_patienten
    WHERE specialist_id = (SELECT auth.uid())
    AND patient_id = user_id
    AND 'view_reflecties' = ANY(toegangsrechten)
  )
  OR (SELECT public.is_admin())
);

CREATE POLICY "Reflecties_insert_policy"
ON reflecties
FOR INSERT
WITH CHECK (
  (SELECT auth.uid()) = user_id
  OR (SELECT public.is_admin())
);

CREATE POLICY "Reflecties_update_policy"
ON reflecties
FOR UPDATE
USING (
  (SELECT auth.uid()) = user_id
  OR (SELECT public.is_admin())
);

CREATE POLICY "Reflecties_delete_policy"
ON reflecties
FOR DELETE
USING (
  (SELECT auth.uid()) = user_id
  OR (SELECT public.is_admin())
);

-- If you need to update an existing table instead of recreating it, use this:
/*
ALTER TABLE reflecties 
ADD COLUMN pijn_score integer CHECK (pijn_score BETWEEN 1 AND 20),
ADD COLUMN vermoeidheid_score integer CHECK (vermoeidheid_score BETWEEN 1 AND 20);
*/
