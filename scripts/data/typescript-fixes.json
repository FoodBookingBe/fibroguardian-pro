[
  {
    "errorCode": "18046",
    "errorMessage": "'e' is of type 'unknown'",
    "description": "This error occurs when an event parameter 'e' is used without a type annotation",
    "fix": "Add appropriate type annotation to the event parameter",
    "examples": [
      {
        "before": "onChange={(e) => setValue(e.target.value)}",
        "after": "onChange={(e: React.ChangeEvent<HTMLInputElement>) => setValue(e.target.value)}"
      },
      {
        "before": "onClick={e => handleClick(e)}",
        "after": "onClick={(e: React.MouseEvent<HTMLElement>) => handleClick(e)}"
      }
    ]
  },
  {
    "errorCode": "71004",
    "errorMessage": "The `\"use client\"` directive must be put at the top of the file",
    "description": "This error occurs when the 'use client' directive is not at the top of the file",
    "fix": "Move the 'use client' directive to the top of the file, before any imports or declarations",
    "examples": [
      {
        "before": "import React from 'react';\n\n'use client';",
        "after": "'use client';\n\nimport React from 'react';"
      }
    ]
  },
  {
    "errorCode": "7019",
    "errorMessage": "Rest parameter implicitly has an 'any[]' type",
    "description": "This error occurs when a rest parameter is used without a type annotation",
    "fix": "Add an explicit type annotation to the rest parameter",
    "examples": [
      {
        "before": "function combineClasses(...classes) {",
        "after": "function combineClasses(...classes: string[]) {"
      },
      {
        "before": "const merge = (...objects) => {",
        "after": "const merge = (...objects: Record<string, unknown>[]) => {"
      }
    ]
  },
  {
    "errorCode": "2532",
    "errorMessage": "Object is possibly 'undefined'",
    "description": "This error occurs when accessing a property on an object that might be undefined",
    "fix": "Use optional chaining (?.) to safely access properties on potentially undefined objects",
    "examples": [
      {
        "before": "const name = user.profile.name;",
        "after": "const name = user?.profile?.name;"
      },
      {
        "before": "if (data.results.length > 0) {",
        "after": "if (data?.results?.length > 0) {"
      }
    ]
  },
  {
    "errorCode": "18048",
    "errorMessage": "Property is possibly 'undefined'",
    "description": "This error occurs when accessing a property that might be undefined",
    "fix": "Use optional chaining (?.) or nullish coalescing (??) to handle potentially undefined properties",
    "examples": [
      {
        "before": "const count = items.length;",
        "after": "const count = items?.length ?? 0;"
      },
      {
        "before": "return data.value * 2;",
        "after": "return data?.value ? data.value * 2 : 0;"
      }
    ]
  },
  {
    "errorCode": "2339",
    "errorMessage": "Property does not exist on type",
    "description": "This error occurs when accessing a property that doesn't exist on the given type",
    "fix": "Add the property to the type definition or use a type assertion if appropriate",
    "examples": [
      {
        "before": "interface User { name: string; }\nconst user: User = { name: 'John' };\nconsole.log(user.age);",
        "after": "interface User { name: string; age?: number; }\nconst user: User = { name: 'John' };\nconsole.log(user.age);"
      },
      {
        "before": "function process(data: any) { return data.process(); }",
        "after": "function process<T extends { process: () => any }>(data: T) { return data.process(); }"
      }
    ]
  },
  {
    "errorCode": "2304",
    "errorMessage": "Cannot find name 'React'",
    "description": "This error occurs when using React without importing it",
    "fix": "Add an import statement for React",
    "examples": [
      {
        "before": "const element = <div>Hello</div>;",
        "after": "import React from 'react';\n\nconst element = <div>Hello</div>;"
      }
    ]
  },
  {
    "errorCode": "6133",
    "errorMessage": "is declared but its value is never read",
    "description": "This error occurs when a variable is declared but never used",
    "fix": "Remove the unused variable or prefix it with an underscore to indicate it's intentionally unused",
    "examples": [
      {
        "before": "function process(data, options) { return data.map(item => item * 2); }",
        "after": "function process(data, _options) { return data.map(item => item * 2); }"
      },
      {
        "before": "const result = fetchData();\nreturn <div>Done</div>;",
        "after": "fetchData();\nreturn <div>Done</div>;"
      }
    ]
  }
]
