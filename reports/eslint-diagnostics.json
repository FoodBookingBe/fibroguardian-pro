[{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\admin\\changelog\\page.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":11,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":11,"endColumn":49},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":52,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":52,"endColumn":73,"fix":{"range":[1649,1695],"text":"text-2xl font-bold text-purple-800 md:text-3xl"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import React from 'react';\r\n\r\nimport ChangelogViewer from '@/components/admin/ChangelogViewer';\r\nimport DashboardLayout from '@/components/layout/DashboardLayout';\r\nimport { getSupabaseServerComponentClient } from '@/lib/supabase-server';\r\n\r\n/**\r\n * Admin Changelog Page\r\n * Displays a filterable view of all system changes\r\n */\r\nexport default async function AdminChangelogPage() {\r\n  const supabase = getSupabaseServerComponentClient();\r\n  \r\n  // Get user data\r\n  const { data: { user }, error: userError } = await supabase.auth.getUser();\r\n  \r\n  if (userError || !user) {\r\n    console.error('Admin Changelog Page: User not found or error fetching user.', userError);\r\n    return null;\r\n  }\r\n  \r\n  // Fetch user profile to determine role\r\n  const { data: profile, error: profileError } = await supabase\r\n    .from('profiles')\r\n    .select('*')\r\n    .eq('id', user.id)\r\n    .single();\r\n  \r\n  if (profileError) {\r\n    console.error('Error fetching user profile:', profileError);\r\n    return null;\r\n  }\r\n  \r\n  // Only admins can access this page\r\n  if (profile.type !== 'admin') {\r\n    return (\r\n      <DashboardLayout>\r\n        <div className=\"container mx-auto px-4 py-6\">\r\n          <div className=\"rounded-lg bg-red-50 p-4 text-red-800\">\r\n            <h2 className=\"text-lg font-medium\">Toegang geweigerd</h2>\r\n            <p>U heeft geen toegang tot deze pagina. Deze pagina is alleen toegankelijk voor beheerders.</p>\r\n          </div>\r\n        </div>\r\n      </DashboardLayout>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <DashboardLayout>\r\n      <div className=\"container mx-auto px-4 py-6\">\r\n        <header className=\"mb-6\">\r\n          <h1 className=\"text-2xl md:text-3xl font-bold text-purple-800\">\r\n            Systeem Changelog\r\n          </h1>\r\n          <p className=\"text-gray-600\">\r\n            Overzicht van alle wijzigingen aan het FibroGuardian Pro systeem\r\n          </p>\r\n        </header>\r\n        \r\n        <ChangelogViewer />\r\n      </div>\r\n    </DashboardLayout>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\admin\\layout.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":44,"fix":{"range":[43,43],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":74,"fix":{"range":[118,118],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":35,"fix":{"range":[154,154],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`react` import should occur before import of `next/navigation`","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":35,"fix":{"range":[0,156],"text":"import { ReactNode } from 'react';\r\nimport { redirect } from 'next/navigation';\r\nimport { getSupabaseServerComponentClient } from '@/lib/supabase-server';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/components/layout/DashboardLayout` import should occur before import of `@/lib/supabase-server`","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":67,"fix":{"range":[45,259],"text":"import DashboardLayout from '@/components/layout/DashboardLayout'; // Import the main DashboardLayout\r\nimport { getSupabaseServerComponentClient } from '@/lib/supabase-server';\r\nimport { ReactNode } from 'react';\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":6,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":6,"endColumn":42}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":5,"fixableWarningCount":0,"source":"import { redirect } from 'next/navigation';\r\nimport { getSupabaseServerComponentClient } from '@/lib/supabase-server';\r\nimport { ReactNode } from 'react';\r\nimport DashboardLayout from '@/components/layout/DashboardLayout'; // Import the main DashboardLayout\r\n\r\nexport default async function AdminLayout({ children }: { children: ReactNode }) {\r\n  const supabase = getSupabaseServerComponentClient();\r\n  const { data: { user }, error } = await supabase.auth.getUser();\r\n  \r\n  if (error || !user) {\r\n    redirect('/auth/login');\r\n    // return null; // redirect() throws an error, so this is unreachable\r\n  }\r\n  \r\n  // Fetch profile to check admin status\r\n  const { data: profile, error: profileError } = await supabase\r\n    .from('profiles')\r\n    .select('type')\r\n    .eq('id', user.id)\r\n    .single();\r\n  \r\n  // Redirect if not admin or profile error\r\n  if (profileError || profile?.type !== 'admin') {\r\n    // Log the error or profile type for debugging if needed\r\n    if (profileError) console.error('[AdminLayout] Profile fetch error:', profileError.message);\r\n    else console.warn(`[AdminLayout] User ${user.id} is not admin. Profile type: ${profile?.type}`);\r\n    redirect('/dashboard'); // Redirect to a general dashboard or an \"unauthorized\" page\r\n  }\r\n  \r\n  // If user is admin, render the children within the main DashboardLayout\r\n  // The DashboardLayout's SidebarContainer will need to be aware of the admin role\r\n  // to show appropriate admin navigation links.\r\n  return (\r\n    <DashboardLayout>\r\n      {children}\r\n    </DashboardLayout>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\admin\\page.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":12,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":12,"endColumn":49},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":62,"column":11,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":62,"endColumn":76,"fix":{"range":[2340,2393],"text":"mb-8 text-3xl font-bold text-gray-800 dark:text-white"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":65,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":65,"endColumn":80,"fix":{"range":[2511,2567],"text":"mt-10 rounded-lg bg-white p-6 shadow-xl dark:bg-gray-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":66,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":66,"endColumn":84,"fix":{"range":[2627,2686],"text":"mb-4 text-xl font-semibold text-gray-700 dark:text-gray-200"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":3,"source":"import { AdminStatsCards, RecentUsersTable } from '@/components/admin/DynamicAdminComponents';\r\nimport { getSupabaseServerComponentClient } from '@/lib/supabase-server';\r\nimport { Profile } from '@/types';\r\n\r\n// Ensure consistent casing for Supabase table/column names if needed\r\n// For example, if your tables are 'Tasks' not 'tasks', adjust accordingly.\r\n// Based on schema.sql, names are lowercase.\r\n\r\n// Next.js config option for dynamic data\r\nexport const dynamic = 'force-dynamic'; // Ensure fresh data on each request\r\n\r\nexport default async function AdminDashboardPage() {\r\n  const supabase = getSupabaseServerComponentClient();\r\n  \r\n  // Fetch basic stats\r\n  // Note: Supabase count returns { count: number | null, data: null, error: null }\r\n  // or { count: null, data: PostgrestResponse['data'], error: PostgrestError | null }\r\n  // We should handle potential errors for each query.\r\n  \r\n  let totalUsers = 0;\r\n  let totalTasks = 0;\r\n  let totalLogs = 0;\r\n  let recentUsers: Profile[] = [];\r\n\r\n  try {\r\n    const usersQuery = await supabase.from('profiles').select('id', { count: 'exact', head: true });\r\n    if (usersQuery.error) throw usersQuery.error;\r\n    totalUsers = usersQuery.count || 0;\r\n\r\n    const tasksQuery = await supabase.from('tasks').select('id', { count: 'exact', head: true });\r\n    if (tasksQuery.error) throw tasksQuery.error;\r\n    totalTasks = tasksQuery.count || 0;\r\n\r\n    const logsQuery = await supabase.from('task_logs').select('id', { count: 'exact', head: true });\r\n    if (logsQuery.error) throw logsQuery.error;\r\n    totalLogs = logsQuery.count || 0;\r\n    \r\n    // Fetch recent users (for table)\r\n    const { data: usersData, error: recentUsersError } = await supabase\r\n      .from('profiles')\r\n      .select('*') // Select all profile fields\r\n      .order('created_at', { ascending: false })\r\n      .limit(5);\r\n      \r\n    if (recentUsersError) throw recentUsersError;\r\n    recentUsers = (usersData as Profile[]) || [];\r\n\r\n  } catch (error: unknown) {\r\n    console.error(\"[AdminDashboardPage] Error fetching dashboard data:\", \r\n      error instanceof Error ? error.message : 'Unknown error');\r\n    // Optionally, render an error state or pass error to components\r\n  }\r\n   \r\n  const stats = {\r\n    totalUsers,\r\n    totalTasks,\r\n    totalLogs,\r\n  };\r\n   \r\n  return (\r\n    <div>\r\n      <h1 className=\"text-3xl font-bold text-gray-800 dark:text-white mb-8\">Admin Dashboard</h1> {/* Enhanced title */}\r\n      <AdminStatsCards stats={stats} />\r\n      \r\n      <div className=\"mt-10 bg-white dark:bg-gray-800 shadow-xl rounded-lg p-6\"> {/* Enhanced section styling */}\r\n        <h2 className=\"text-xl font-semibold text-gray-700 dark:text-gray-200 mb-4\">Recente Gebruikers</h2>\r\n        <RecentUsersTable users={recentUsers} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\admin\\statistics\\page.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":74,"fix":{"range":[107,107],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/lib/supabase-server` import should occur after import of `@/components/admin/charts/TaskCompletionChart`","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":74,"fix":{"range":[34,334],"text":"import Link from 'next/link'; \r\nimport UserSignupsChart from '@/components/admin/charts/UserSignupsChart';\r\nimport TaskCompletionChart from '@/components/admin/charts/TaskCompletionChart'; // Import the new chart component\r\nimport { getSupabaseServerComponentClient } from '@/lib/supabase-server'; \r\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":30,"fix":{"range":[139,139],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/components/admin/charts/UserSignupsChart` import should occur after import of `@/components/admin/charts/TaskCompletionChart`","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":75,"fix":{"range":[142,334],"text":"import TaskCompletionChart from '@/components/admin/charts/TaskCompletionChart'; // Import the new chart component\r\nimport UserSignupsChart from '@/components/admin/charts/UserSignupsChart';\r\n"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2480,2483],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2480,2483],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":128,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":128,"endColumn":50},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":132,"column":10,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":132,"endColumn":102,"fix":{"range":[5016,5096],"text":"flex flex-col justify-between rounded-lg bg-white p-6 shadow-md dark:bg-gray-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":161,"column":11,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":161,"endColumn":76,"fix":{"range":[6090,6143],"text":"mb-8 text-3xl font-bold text-gray-800 dark:text-white"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":164,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":164,"endColumn":111,"fix":{"range":[6236,6321],"text":"mb-4 rounded-lg bg-red-100 p-4 text-sm text-red-700 dark:bg-red-200 dark:text-red-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":169,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":169,"endColumn":74,"fix":{"range":[6484,6534],"text":"rounded-lg bg-white p-6 shadow-xl dark:bg-gray-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":170,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":170,"endColumn":84,"fix":{"range":[6561,6620],"text":"mb-4 text-xl font-semibold text-gray-700 dark:text-gray-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":171,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":171,"endColumn":83,"fix":{"range":[6663,6720],"text":"mb-8 grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":178,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":178,"endColumn":84,"fix":{"range":[7225,7284],"text":"mb-4 text-xl font-semibold text-gray-700 dark:text-gray-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":179,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":179,"endColumn":83,"fix":{"range":[7329,7386],"text":"mb-8 grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":192,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":192,"endColumn":84,"fix":{"range":[7971,8030],"text":"mb-4 text-xl font-semibold text-gray-700 dark:text-gray-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":193,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":193,"endColumn":83,"fix":{"range":[8073,8130],"text":"mb-8 grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":198,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":198,"endColumn":86,"fix":{"range":[8294,8353],"text":"mb-4 text-xl font-semibold text-gray-700 dark:text-gray-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":201,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":201,"endColumn":86,"fix":{"range":[8453,8510],"text":"mb-2 text-lg font-medium text-gray-600 dark:text-gray-300"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":202,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":202,"endColumn":86,"fix":{"range":[8576,8632],"text":"min-h-[300px] rounded-lg bg-gray-50 p-4 dark:bg-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":206,"column":20,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":206,"endColumn":104,"fix":{"range":[8841,8913],"text":"flex h-full items-center justify-center text-gray-400 dark:text-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":212,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":212,"endColumn":86,"fix":{"range":[9069,9126],"text":"mb-2 text-lg font-medium text-gray-600 dark:text-gray-300"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":213,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":213,"endColumn":86,"fix":{"range":[9185,9241],"text":"min-h-[300px] rounded-lg bg-gray-50 p-4 dark:bg-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":217,"column":20,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":217,"endColumn":104,"fix":{"range":[9465,9537],"text":"flex h-full items-center justify-center text-gray-400 dark:text-gray-500"}}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":4,"fixableWarningCount":17,"source":"// app/admin/statistics/page.tsx\r\nimport { getSupabaseServerComponentClient } from '@/lib/supabase-server'; \r\nimport Link from 'next/link'; \r\nimport UserSignupsChart from '@/components/admin/charts/UserSignupsChart';\r\nimport TaskCompletionChart from '@/components/admin/charts/TaskCompletionChart'; // Import the new chart component\r\n\r\nexport const dynamic = 'force-dynamic';\r\n\r\ninterface SubscriptionPlanCount {\r\n  plan_type: string | null;\r\n  count: number;\r\n}\r\ninterface StatData {\r\n  totalUsers: number | null;\r\n  patientCount: number | null;\r\n  specialistCount: number | null;\r\n  adminCount: number | null;\r\n  totalSubscriptions: number | null;\r\n  subscriptionCountsByPlan: SubscriptionPlanCount[];\r\n  totalTaskLogs: number | null;\r\n  userSignupsByMonth?: { month: string; count: number }[]; \r\n  taskCompletionsByMonth?: { month: string; count: number }[]; // Added for task chart\r\n  fetchError?: string;\r\n}\r\n\r\nasync function getStats(): Promise<StatData> {\r\n  const supabase = getSupabaseServerComponentClient();\r\n  try {\r\n    const { data: profilesData, error: profilesError } = await supabase\r\n      .from('profiles')\r\n      .select('type, created_at'); \r\n\r\n    if (profilesError) throw new Error(`Error fetching profiles data: ${profilesError.message}`);\r\n    \r\n    let patientCount = 0;\r\n    let specialistCount = 0;\r\n    let adminCount = 0;\r\n    profilesData?.forEach(p => {\r\n      if (p.type === 'patient') patientCount++;\r\n      if (p.type === 'specialist') specialistCount++;\r\n      if (p.type === 'admin') adminCount++;\r\n    });\r\n    const totalUsers = profilesData?.length ?? 0;\r\n\r\n    const signupsByMonth: { [key: string]: number } = {};\r\n    if (profilesData) {\r\n      profilesData.forEach(profile => {\r\n        if (profile.created_at) {\r\n          const month = new Date(profile.created_at).toISOString().substring(0, 7); \r\n          signupsByMonth[month] = (signupsByMonth[month] || 0) + 1;\r\n        }\r\n      });\r\n    }\r\n    const userSignupsByMonthData = Object.entries(signupsByMonth)\r\n      .map(([month, count]) => ({ month, count }))\r\n      .sort((a, b) => a.month.localeCompare(b.month)); \r\n\r\n    const { data: abonnementenRawData, error: abonnementenError } = await supabase\r\n      .from('abonnementen')\r\n      .select('plan_type'); \r\n\r\n    if (abonnementenError) throw new Error(`Error fetching subscription data: ${abonnementenError.message}`);\r\n\r\n    const planCounts: { [key: string]: number } = {};\r\n    (abonnementenRawData || []).forEach((item: any) => {\r\n        const plan = item.plan_type || 'onbekend';\r\n        planCounts[plan] = (planCounts[plan] || 0) + 1;\r\n    });\r\n    const subsByTypeData = Object.entries(planCounts).map(([plan_type, count]) => ({ plan_type, count }));\r\n    const totalSubscriptions = abonnementenRawData?.length ?? 0;\r\n\r\n    const { data: taskLogsRawData, error: taskLogsError } = await supabase\r\n      .from('task_logs')\r\n      .select('created_at'); // Select created_at for grouping by month\r\n\r\n    if (taskLogsError) throw new Error(`Error fetching task logs data: ${taskLogsError.message}`);\r\n    \r\n    const totalTaskLogs = taskLogsRawData?.length ?? 0;\r\n\r\n    // Process task completions by month\r\n    const completionsByMonth: { [key: string]: number } = {};\r\n    if (taskLogsRawData) {\r\n      taskLogsRawData.forEach(log => {\r\n        if (log.created_at) {\r\n          const month = new Date(log.created_at).toISOString().substring(0, 7); // YYYY-MM\r\n          completionsByMonth[month] = (completionsByMonth[month] || 0) + 1;\r\n        }\r\n      });\r\n    }\r\n    const taskCompletionsByMonthData = Object.entries(completionsByMonth)\r\n      .map(([month, count]) => ({ month, count }))\r\n      .sort((a, b) => a.month.localeCompare(b.month));\r\n\r\n    return {\r\n      totalUsers,\r\n      patientCount,\r\n      specialistCount,\r\n      adminCount,\r\n      totalSubscriptions,\r\n      subscriptionCountsByPlan: subsByTypeData || [],\r\n      totalTaskLogs: totalTaskLogs, // Use the count from iterated data\r\n      userSignupsByMonth: userSignupsByMonthData,\r\n      taskCompletionsByMonth: taskCompletionsByMonthData, // Add to return\r\n    };\r\n  } catch (error: unknown) { \r\n    console.error(\"Error fetching statistics:\", error);\r\n    let message = \"Kon statistieken niet laden.\";\r\n    if (error instanceof Error) {\r\n      message = error.message;\r\n    } else if (typeof error === 'string') {\r\n      message = error;\r\n    }\r\n    return {\r\n      totalUsers: null,\r\n      patientCount: null,\r\n      specialistCount: null,\r\n      adminCount: null,\r\n      totalSubscriptions: null,\r\n      subscriptionCountsByPlan: [],\r\n      totalTaskLogs: null,\r\n      userSignupsByMonth: [], \r\n      taskCompletionsByMonth: [], // Default to empty array on error\r\n      fetchError: message,\r\n    };\r\n  }\r\n}\r\n\r\nexport default async function AdminStatisticsPage() {\r\n  const stats = await getStats();\r\n\r\n  const StatCard: React.FC<{ title: string; value: string | number | null; link?: string; linkText?: string }> = ({ title, value, link, linkText }) => (\r\n    <div className=\"bg-white dark:bg-gray-800 shadow-md rounded-lg p-6 flex flex-col justify-between\">\r\n      <div>\r\n        <h3 className=\"text-lg font-semibold text-gray-500 dark:text-gray-400\">{title}</h3>\r\n        <p className=\"text-3xl font-bold text-blue-600 dark:text-blue-400\">{value ?? 'N/A'}</p>\r\n      </div>\r\n      {link && linkText && (\r\n        <div className=\"mt-4\">\r\n          <Link href={link} className=\"text-sm text-blue-500 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300\">\r\n            {linkText} &rarr;\r\n          </Link>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n  \r\n  const getPlanDisplayName = (planType: string | null | undefined) => {\r\n    if (!planType) return 'Onbekend Plan';\r\n    const safePlanType = String(planType).toLowerCase();\r\n    switch (safePlanType) {\r\n      case 'basis': return 'Basis Plan';\r\n      case 'premium': return 'Premium Plan';\r\n      case 'enterprise': return 'Enterprise Plan';\r\n      case 'onbekend': return 'Onbekend Plan'; \r\n      default: return planType;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1 className=\"text-3xl font-bold text-gray-800 dark:text-white mb-8\">Statistieken Overzicht</h1>\r\n      \r\n      {stats.fetchError && (\r\n        <div className=\"mb-4 p-4 text-sm text-red-700 bg-red-100 rounded-lg dark:bg-red-200 dark:text-red-800\" role=\"alert\">\r\n          <span className=\"font-medium\">Fout bij laden statistieken:</span> {stats.fetchError}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"bg-white dark:bg-gray-800 shadow-xl rounded-lg p-6\">\r\n        <h2 className=\"text-xl font-semibold text-gray-700 dark:text-gray-200 mb-4\">Gebruikers</h2>\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\r\n          <StatCard title=\"Totaal Gebruikers\" value={stats.totalUsers} link=\"/admin/users\" linkText=\"Beheer Gebruikers\" />\r\n          <StatCard title=\"Patiënten\" value={stats.patientCount} link=\"/admin/users?type=patient\" linkText=\"Bekijk Patiënten\" />\r\n          <StatCard title=\"Specialisten\" value={stats.specialistCount} link=\"/admin/users?type=specialist\" linkText=\"Bekijk Specialisten\" />\r\n          <StatCard title=\"Admins\" value={stats.adminCount} />\r\n        </div>\r\n\r\n        <h2 className=\"text-xl font-semibold text-gray-700 dark:text-gray-200 mb-4\">Abonnementen</h2>\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\r\n          <StatCard title=\"Totaal Abonnementen\" value={stats.totalSubscriptions} link=\"/admin/subscriptions\" linkText=\"Beheer Abonnementen\" />\r\n          {stats.subscriptionCountsByPlan.map(plan => (\r\n            <StatCard \r\n              key={plan.plan_type || 'unknown_plan_key'} \r\n              title={getPlanDisplayName(plan.plan_type)} \r\n              value={plan.count} \r\n              link={`/admin/subscriptions?plan=${plan.plan_type || 'onbekend'}`}\r\n              linkText=\"Bekijk Details\"\r\n            />\r\n          ))}\r\n        </div>\r\n        \r\n        <h2 className=\"text-xl font-semibold text-gray-700 dark:text-gray-200 mb-4\">Activiteit</h2>\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\r\n          <StatCard title=\"Totaal Taak Logs\" value={stats.totalTaskLogs} />\r\n        </div>\r\n        \r\n        <div className=\"mt-8\">\r\n          <h2 className=\"text-xl font-semibold text-gray-700 dark:text-gray-200 mb-4\">Data Visualisaties</h2>\r\n          \r\n          <div className=\"mb-8\">\r\n            <h3 className=\"text-lg font-medium text-gray-600 dark:text-gray-300 mb-2\">Nieuwe Gebruikers Per Periode</h3>\r\n            <div className=\"bg-gray-50 dark:bg-gray-700 p-4 rounded-lg min-h-[300px]\">\r\n              {stats.userSignupsByMonth && stats.userSignupsByMonth.length > 0 ? (\r\n                <UserSignupsChart data={stats.userSignupsByMonth} />\r\n              ) : (\r\n                <p className=\"text-gray-400 dark:text-gray-500 flex items-center justify-center h-full\">Geen data voor gebruikersaanmeldingen grafiek.</p>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          <div>\r\n            <h3 className=\"text-lg font-medium text-gray-600 dark:text-gray-300 mb-2\">Taak Voltooiing Trends</h3>\r\n            <div className=\"bg-gray-50 dark:bg-gray-700 p-4 rounded-lg min-h-[300px]\">\r\n              {stats.taskCompletionsByMonth && stats.taskCompletionsByMonth.length > 0 ? (\r\n                <TaskCompletionChart data={stats.taskCompletionsByMonth} />\r\n              ) : (\r\n                <p className=\"text-gray-400 dark:text-gray-500 flex items-center justify-center h-full\">Geen data voor taakvoltooiing grafiek.</p>\r\n              )}\r\n            </div>\r\n          </div>\r\n           <p className=\"mt-6 text-sm text-gray-500 dark:text-gray-400\">\r\n            Meer gedetailleerde grafieken en data analyses worden hier geïmplementeerd.\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\admin\\subscriptions\\page.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"`@/components/admin/AdminSubscriptionsList` import should occur before import of `@/lib/supabase-server`","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":113,"fix":{"range":[37,226],"text":"import AdminSubscriptionsList, { SubscriptionWithUserProfile } from '@/components/admin/AdminSubscriptionsList';\r\nimport { getSupabaseServerComponentClient } from '@/lib/supabase-server';\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":8,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":8,"endColumn":53},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":55,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2343,2346],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2343,2346],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":62,"column":11,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":62,"endColumn":76,"fix":{"range":[2539,2592],"text":"mb-8 text-3xl font-bold text-gray-800 dark:text-white"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":63,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":63,"endColumn":74,"fix":{"range":[2668,2718],"text":"rounded-lg bg-white p-6 shadow-xl dark:bg-gray-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":65,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":65,"endColumn":113,"fix":{"range":[2809,2894],"text":"mb-4 rounded-lg bg-red-100 p-4 text-sm text-red-700 dark:bg-red-200 dark:text-red-800"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":1,"fixableWarningCount":3,"source":"// app/admin/subscriptions/page.tsx\r\nimport { getSupabaseServerComponentClient } from '@/lib/supabase-server';\r\nimport AdminSubscriptionsList, { SubscriptionWithUserProfile } from '@/components/admin/AdminSubscriptionsList';\r\nimport { Profile } from '@/types'; // Import the Profile type\r\n\r\nexport const dynamic = 'force-dynamic';\r\n\r\nexport default async function AdminSubscriptionsPage() {\r\n  const supabase = getSupabaseServerComponentClient();\r\n  let subscriptions: SubscriptionWithUserProfile[] = [];\r\n  let fetchError: string | null = null;\r\n\r\n  try {\r\n    // Step 1: Fetch all subscriptions\r\n    const { data: abonnementsData, error: abonnementsError } = await supabase\r\n      .from('abonnementen')\r\n      .select('*')\r\n      .order('created_at', { ascending: false });\r\n\r\n    if (abonnementsError) {\r\n      console.error(\"Error fetching subscriptions:\", abonnementsError);\r\n      throw abonnementsError; // Throw to be caught by the outer catch block\r\n    }\r\n\r\n    if (abonnementsData && abonnementsData.length > 0) {\r\n      // Step 2: Fetch all profiles\r\n      // In a real-world scenario with many users, you'd fetch only relevant profiles based on user_ids from subscriptions.\r\n      // For simplicity here, fetching all. Consider optimizing if performance becomes an issue.\r\n      const { data: profilesData, error: profilesError } = await supabase\r\n        .from('profiles')\r\n        .select('id, voornaam, achternaam'); // Only select needed fields\r\n\r\n      if (profilesError) {\r\n        console.error(\"Error fetching profiles:\", profilesError);\r\n        // Continue with subscriptions but profiles will be empty/default\r\n      }\r\n\r\n      const profilesMap = new Map<string, Pick<Profile, 'id' | 'voornaam' | 'achternaam'>>();\r\n      if (profilesData) {\r\n        profilesData.forEach(p => profilesMap.set(p.id, p));\r\n      }\r\n\r\n      // Step 3: Join data in application code\r\n      subscriptions = abonnementsData.map(sub => {\r\n        const profile = profilesMap.get(sub.user_id);\r\n        return {\r\n          ...sub,\r\n          profiles: profile \r\n            ? { voornaam: profile.voornaam, achternaam: profile.achternaam } \r\n            : { voornaam: null, achternaam: null }, // Default if no profile found\r\n        };\r\n      }) as SubscriptionWithUserProfile[]; // Cast needed as 'profiles' is added\r\n    }\r\n\r\n  } catch (e: any) {\r\n    console.error(\"Error in data fetching for subscriptions page:\", e);\r\n    fetchError = e.message || \"An unexpected error occurred.\";\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1 className=\"text-3xl font-bold text-gray-800 dark:text-white mb-8\">Abonnementenbeheer</h1> {/* Consistent heading */}\r\n      <div className=\"bg-white dark:bg-gray-800 shadow-xl rounded-lg p-6\"> {/* Consistent content wrapper */}\r\n        {fetchError && (\r\n          <div className=\"mb-4 p-4 text-sm text-red-700 bg-red-100 rounded-lg dark:bg-red-200 dark:text-red-800\" role=\"alert\">\r\n            <span className=\"font-medium\">Fout bij ophalen abonnementen:</span> {fetchError}\r\n          </div>\r\n        )}\r\n        <AdminSubscriptionsList subscriptions={subscriptions} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\admin\\users\\page.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"`@/components/admin/UsersPageClientView` import should occur before import of `@/lib/supabase-server`","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":74,"fix":{"range":[29,262],"text":"import UsersPageClientView from '@/components/admin/UsersPageClientView'; \r\nimport { getSupabaseServerComponentClient } from '@/lib/supabase-server';\r\n// AdminUsersList and UserManagementControls are now part of UsersPageClientView\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":9,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":9,"endColumn":45},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[896,899],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[896,899],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"// app/admin/users/page.tsx\r\nimport { getSupabaseServerComponentClient } from '@/lib/supabase-server';\r\n// AdminUsersList and UserManagementControls are now part of UsersPageClientView\r\nimport UsersPageClientView from '@/components/admin/UsersPageClientView'; \r\nimport { Profile } from '@/types'; \r\n\r\nexport const dynamic = 'force-dynamic'; // Ensures fresh data on each request\r\n\r\nexport default async function AdminUsersPage() {\r\n  const supabase = getSupabaseServerComponentClient();\r\n  let users: Profile[] = [];\r\n  let fetchError: string | null = null;\r\n\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('profiles')\r\n      .select('*')\r\n      .order('created_at', { ascending: false });\r\n\r\n    if (error) {\r\n      console.error(\"Error fetching users for admin page:\", error);\r\n      fetchError = error.message;\r\n    } else {\r\n      users = data || [];\r\n    }\r\n  } catch (e: any) {\r\n    console.error(\"Unexpected error fetching users:\", e);\r\n    fetchError = e.message || \"An unexpected error occurred.\";\r\n  }\r\n\r\n  return (\r\n    // UsersPageClientView will handle the layout of controls and the list\r\n    <UsersPageClientView initialUsers={users} fetchError={fetchError} />\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\api\\ai-insights\\route.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":32,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":32,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":163,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":163,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":201,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":201,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { z } from 'zod';\r\n\r\nimport { getSupabaseRouteHandlerClient } from '@/lib/supabase-server';\r\nimport { generateAIInsights } from '@/utils/ai-insights';\r\n\r\n// Schema for GET request query parameters\r\nconst GetInsightsQuerySchema = z.object({\r\n  patientId: z.string().uuid().optional(),\r\n  type: z.enum(['symptom_patterns', 'treatment_efficacy', 'activity_correlation', 'all']).default('all'),\r\n  timeframe: z.enum(['week', 'month', 'quarter', 'year']).default('month'),\r\n  limit: z.coerce.number().min(1).max(50).default(10)\r\n});\r\n\r\n// Schema for POST request body\r\nconst CreateInsightSchema = z.object({\r\n  patientId: z.string().uuid(),\r\n  specialistId: z.string().uuid(),\r\n  insightType: z.enum(['symptom_patterns', 'treatment_efficacy', 'activity_correlation']),\r\n  title: z.string().min(3).max(100),\r\n  description: z.string().min(10).max(1000),\r\n  data: z.record(z.any()).optional(),\r\n  confidence: z.number().min(0).max(1).optional(),\r\n  recommendations: z.array(z.string()).optional(),\r\n  metadata: z.record(z.any()).optional()\r\n});\r\n\r\n/**\r\n * GET /api/ai-insights\r\n * Retrieve AI-generated insights based on patient data\r\n */\r\nexport async function GET(request: NextRequest) {\r\n  const supabase = getSupabaseRouteHandlerClient();\r\n  \r\n  // Authenticate user\r\n  const { data: { user }, error: authError } = await supabase.auth.getUser();\r\n  if (authError || !user) {\r\n    return NextResponse.json(\r\n      { error: 'Unauthorized', message: 'You must be logged in to access this resource' },\r\n      { status: 401 }\r\n    );\r\n  }\r\n  \r\n  // Get and validate query parameters\r\n  const url = new URL(request.url);\r\n  const queryParams = {\r\n    patientId: url.searchParams.get('patientId') || undefined,\r\n    type: url.searchParams.get('type') || 'all',\r\n    timeframe: url.searchParams.get('timeframe') || 'month',\r\n    limit: url.searchParams.get('limit') ? parseInt(url.searchParams.get('limit')!) : 10\r\n  };\r\n  \r\n  const queryParamsResult = GetInsightsQuerySchema.safeParse(queryParams);\r\n  if (!queryParamsResult.success) {\r\n    return NextResponse.json(\r\n      { error: 'Invalid parameters', details: queryParamsResult.error.format() },\r\n      { status: 400 }\r\n    );\r\n  }\r\n  \r\n  // Get user profile to check permissions\r\n  const { data: profile, error: profileError } = await supabase\r\n    .from('profiles')\r\n    .select('id, type')\r\n    .eq('id', user.id)\r\n    .single();\r\n  \r\n  if (profileError) {\r\n    return NextResponse.json(\r\n      { error: 'Database error', message: 'Error fetching user profile' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n  \r\n  // Check if user is a specialist or admin\r\n  const isSpecialistOrAdmin = profile.type === 'specialist' || profile.type === 'admin';\r\n  \r\n  // If user is not a specialist or admin and trying to access another patient's data\r\n  if (!isSpecialistOrAdmin && queryParamsResult.data.patientId && queryParamsResult.data.patientId !== user.id) {\r\n    return NextResponse.json(\r\n      { error: 'Forbidden', message: 'You do not have permission to access this resource' },\r\n      { status: 403 }\r\n    );\r\n  }\r\n  \r\n  try {\r\n    // If patientId is provided, check if specialist has access to this patient\r\n    if (profile.type === 'specialist' && queryParamsResult.data.patientId) {\r\n      const { data: connection, error: connectionError } = await supabase\r\n        .from('specialist_patient_connections')\r\n        .select('*')\r\n        .eq('specialist_id', user.id)\r\n        .eq('patient_id', queryParamsResult.data.patientId)\r\n        .eq('status', 'accepted')\r\n        .single();\r\n      \r\n      if (connectionError || !connection) {\r\n        return NextResponse.json(\r\n          { error: 'Forbidden', message: 'You do not have permission to access this patient\\'s data' },\r\n          { status: 403 }\r\n        );\r\n      }\r\n    }\r\n    \r\n    // Generate insights based on parameters\r\n    const patientId = queryParamsResult.data.patientId || (profile.type === 'patient' ? user.id : null);\r\n    \r\n    if (!patientId && profile.type === 'specialist') {\r\n      // If no patientId is provided and user is a specialist, return insights for all their patients\r\n      const { data: connections, error: connectionsError } = await supabase\r\n        .from('specialist_patient_connections')\r\n        .select('patient_id')\r\n        .eq('specialist_id', user.id)\r\n        .eq('status', 'accepted');\r\n      \r\n      if (connectionsError) {\r\n        return NextResponse.json(\r\n          { error: 'Database error', message: 'Error fetching patient connections' },\r\n          { status: 500 }\r\n        );\r\n      }\r\n      \r\n      const patientIds = connections.map(conn => conn.patient_id);\r\n      \r\n      // Generate insights for all patients\r\n      const insights = await generateAIInsights({\r\n        patientIds,\r\n        insightType: queryParamsResult.data.type,\r\n        timeframe: queryParamsResult.data.timeframe,\r\n        limit: queryParamsResult.data.limit\r\n      });\r\n      \r\n      return NextResponse.json({ insights });\r\n    } else if (patientId) {\r\n      // Generate insights for a specific patient\r\n      const insights = await generateAIInsights({\r\n        patientIds: [patientId],\r\n        insightType: queryParamsResult.data.type,\r\n        timeframe: queryParamsResult.data.timeframe,\r\n        limit: queryParamsResult.data.limit\r\n      });\r\n      \r\n      return NextResponse.json({ insights });\r\n    } else {\r\n      return NextResponse.json(\r\n        { error: 'Bad Request', message: 'No patient ID provided' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n  } catch (error) {\r\n    console.error('Error generating insights:', error);\r\n    return NextResponse.json(\r\n      { error: 'Internal Server Error', message: 'Error generating insights' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * POST /api/ai-insights\r\n * Create a new AI insight (usually by specialists)\r\n */\r\nexport async function POST(request: NextRequest) {\r\n  const supabase = getSupabaseRouteHandlerClient();\r\n  \r\n  // Authenticate user\r\n  const { data: { user }, error: authError } = await supabase.auth.getUser();\r\n  if (authError || !user) {\r\n    return NextResponse.json(\r\n      { error: 'Unauthorized', message: 'You must be logged in to access this resource' },\r\n      { status: 401 }\r\n    );\r\n  }\r\n  \r\n  // Get user profile to check permissions\r\n  const { data: profile, error: profileError } = await supabase\r\n    .from('profiles')\r\n    .select('id, type')\r\n    .eq('id', user.id)\r\n    .single();\r\n  \r\n  if (profileError) {\r\n    return NextResponse.json(\r\n      { error: 'Database error', message: 'Error fetching user profile' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n  \r\n  // Only specialists and admins can create insights\r\n  if (profile.type !== 'specialist' && profile.type !== 'admin') {\r\n    return NextResponse.json(\r\n      { error: 'Forbidden', message: 'Only specialists and admins can create insights' },\r\n      { status: 403 }\r\n    );\r\n  }\r\n  \r\n  // Parse and validate request body\r\n  let body;\r\n  try {\r\n    body = await request.json();\r\n  } catch (error) {\r\n    return NextResponse.json(\r\n      { error: 'Invalid JSON', message: 'Request body must be valid JSON' },\r\n      { status: 400 }\r\n    );\r\n  }\r\n  \r\n  const bodyResult = CreateInsightSchema.safeParse(body);\r\n  if (!bodyResult.success) {\r\n    return NextResponse.json(\r\n      { error: 'Invalid request body', details: bodyResult.error.format() },\r\n      { status: 400 }\r\n    );\r\n  }\r\n  \r\n  // Check if specialist has access to this patient\r\n  if (profile.type === 'specialist') {\r\n    const { data: connection, error: connectionError } = await supabase\r\n      .from('specialist_patient_connections')\r\n      .select('*')\r\n      .eq('specialist_id', user.id)\r\n      .eq('patient_id', bodyResult.data.patientId)\r\n      .eq('status', 'accepted')\r\n      .single();\r\n    \r\n    if (connectionError || !connection) {\r\n      return NextResponse.json(\r\n        { error: 'Forbidden', message: 'You do not have permission to create insights for this patient' },\r\n        { status: 403 }\r\n      );\r\n    }\r\n  }\r\n  \r\n  try {\r\n    // Insert the insight into the database\r\n    const { data: insight, error: insertError } = await supabase\r\n      .from('ai_insights')\r\n      .insert({\r\n        patient_id: bodyResult.data.patientId,\r\n        specialist_id: bodyResult.data.specialistId,\r\n        insight_type: bodyResult.data.insightType,\r\n        title: bodyResult.data.title,\r\n        description: bodyResult.data.description,\r\n        data: bodyResult.data.data || {},\r\n        confidence: bodyResult.data.confidence || 0.7,\r\n        recommendations: bodyResult.data.recommendations || [],\r\n        metadata: bodyResult.data.metadata || {},\r\n        created_by: user.id\r\n      })\r\n      .select()\r\n      .single();\r\n    \r\n    if (insertError) {\r\n      return NextResponse.json(\r\n        { error: 'Database error', message: 'Error creating insight', details: insertError.message },\r\n        { status: 500 }\r\n      );\r\n    }\r\n    \r\n    return NextResponse.json({ insight }, { status: 201 });\r\n  } catch (error) {\r\n    console.error('Error creating insight:', error);\r\n    return NextResponse.json(\r\n      { error: 'Internal Server Error', message: 'Error creating insight' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\api\\ai-recommendations\\route.ts","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":48,"fix":{"range":[255,255],"text":"\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AIService' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":19},{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'AIService' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":19,"fix":{"range":[208,257],"text":""}},{"ruleId":"import/order","severity":2,"message":"`zod` import should occur before import of `@/lib/error-handler`","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":25,"fix":{"range":[60,283],"text":"import { z } from 'zod';\r\nimport { formatApiError, handleSupabaseError } from '@/lib/error-handler';\r\nimport { getSupabaseRouteHandlerClient } from '@/lib/supabase-server';\r\nimport { AIService } from '@/utils/ai-service';\r\n"}}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":3,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\n\r\nimport { formatApiError, handleSupabaseError } from '@/lib/error-handler';\r\nimport { getSupabaseRouteHandlerClient } from '@/lib/supabase-server';\r\nimport { AIService } from '@/utils/ai-service';\r\nimport { z } from 'zod';\r\n\r\n// Schema for GET request query parameters\r\nconst getRecommendationsSchema = z.object({\r\n  limit: z.string().optional().transform(val => (val ? parseInt(val, 10) : 5)),\r\n  context_type: z.enum(['task_suggestion', 'symptom_alert', 'pattern_insight']).optional(),\r\n  user_id: z.string().uuid().optional(),\r\n});\r\n\r\n// Schema for POST request body\r\nconst createRecommendationSchema = z.object({\r\n  user_id: z.string().uuid(),\r\n  context_type: z.enum(['task_suggestion', 'symptom_alert', 'pattern_insight']),\r\n  recommendation_text: z.string().min(1),\r\n  confidence_score: z.number().min(0).max(1).optional(),\r\n  source_knowledge_ids: z.array(z.string().uuid()).optional(),\r\n});\r\n\r\n// Schema for PATCH request body\r\nconst updateRecommendationSchema = z.object({\r\n  id: z.string().uuid(),\r\n  is_dismissed: z.boolean().optional(),\r\n  recommendation_text: z.string().min(1).optional(),\r\n  confidence_score: z.number().min(0).max(1).optional(),\r\n});\r\n\r\n// GET handler for retrieving AI recommendations\r\nexport async function GET(req: NextRequest): Promise<NextResponse> {\r\n  const supabase = getSupabaseRouteHandlerClient();\r\n  \r\n  try {\r\n    // Auth check\r\n    const { data: { user }, error: getUserError } = await supabase.auth.getUser();\r\n    \r\n    if (getUserError || !user) {\r\n      if (getUserError) console.error('[API AI Recommendations GET] Error fetching user:', getUserError.message);\r\n      return NextResponse.json(\r\n        formatApiError(401, 'Niet geautoriseerd'),\r\n        { status: 401 }\r\n      );\r\n    }\r\n    \r\n    // Parse query parameters\r\n    const { searchParams } = new URL(req.url);\r\n    const validationResult = getRecommendationsSchema.safeParse({\r\n      limit: searchParams.get('limit'),\r\n      context_type: searchParams.get('context_type'),\r\n      user_id: searchParams.get('user_id'),\r\n    });\r\n    \r\n    if (!validationResult.success) {\r\n      return NextResponse.json(\r\n        formatApiError(400, `Ongeldige parameters: ${validationResult.error.message}`),\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    const { limit, context_type, user_id } = validationResult.data;\r\n    \r\n    // Check if requesting recommendations for another user (specialists only)\r\n    let targetUserId = user.id;\r\n    \r\n    if (user_id && user_id !== user.id) {\r\n      // Check if the current user is a specialist with access to the target user\r\n      const { data: profile, error: profileError } = await supabase\r\n        .from('profiles')\r\n        .select('type')\r\n        .eq('id', user.id)\r\n        .single();\r\n      \r\n      if (profileError || !profile || profile.type !== 'specialist') {\r\n        return NextResponse.json(\r\n          formatApiError(403, 'Geen toegang tot aanbevelingen van deze gebruiker'),\r\n          { status: 403 }\r\n        );\r\n      }\r\n      \r\n      // Check if the specialist has a relationship with the patient\r\n      const { data: relationship, error: relationshipError } = await supabase\r\n        .from('specialist_patienten')\r\n        .select('*')\r\n        .eq('specialist_id', user.id)\r\n        .eq('patient_id', user_id)\r\n        .single();\r\n      \r\n      if (relationshipError || !relationship) {\r\n        return NextResponse.json(\r\n          formatApiError(403, 'Geen toegang tot aanbevelingen van deze patiënt'),\r\n          { status: 403 }\r\n        );\r\n      }\r\n      \r\n      targetUserId = user_id;\r\n    }\r\n    \r\n    // Build query\r\n    let query = supabase\r\n      .from('ai_recommendations')\r\n      .select('*')\r\n      .eq('user_id', targetUserId)\r\n      .order('created_at', { ascending: false })\r\n      .limit(limit);\r\n    \r\n    // Add context type filter if provided\r\n    if (context_type) {\r\n      query = query.eq('context_type', context_type);\r\n    }\r\n    \r\n    // Execute query\r\n    const { data, error } = await query;\r\n    \r\n    if (error) throw error;\r\n    \r\n    return NextResponse.json(data);\r\n  } catch (error) {\r\n    const errorInfo = handleSupabaseError(error, 'ai-aanbevelingen-ophalen');\r\n    \r\n    return NextResponse.json(\r\n      formatApiError(500, errorInfo.userMessage),\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// POST handler for creating a new AI recommendation\r\nexport async function POST(req: NextRequest): Promise<NextResponse> {\r\n  const supabase = getSupabaseRouteHandlerClient();\r\n  \r\n  try {\r\n    // Auth check\r\n    const { data: { user }, error: authError } = await supabase.auth.getUser();\r\n    \r\n    if (authError || !user) {\r\n      if (authError) console.error('[API AI Recommendations POST] Error fetching user:', authError.message);\r\n      return NextResponse.json(\r\n        formatApiError(401, 'Niet geautoriseerd'),\r\n        { status: 401 }\r\n      );\r\n    }\r\n    \r\n    // Check if user is admin or specialist\r\n    const { data: profile, error: profileError } = await supabase\r\n      .from('profiles')\r\n      .select('type')\r\n      .eq('id', user.id)\r\n      .single();\r\n    \r\n    if (profileError || !profile || (profile.type !== 'specialist' && profile.type !== 'admin')) {\r\n      return NextResponse.json(\r\n        formatApiError(403, 'Alleen specialisten en admins kunnen aanbevelingen aanmaken'),\r\n        { status: 403 }\r\n      );\r\n    }\r\n    \r\n    // Parse request body\r\n    const requestData = await req.json();\r\n    const validationResult = createRecommendationSchema.safeParse(requestData);\r\n    \r\n    if (!validationResult.success) {\r\n      return NextResponse.json(\r\n        formatApiError(400, `Validatiefout: ${validationResult.error.message}`),\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    const recommendationData = validationResult.data;\r\n    \r\n    // If specialist, check if they have a relationship with the patient\r\n    if (profile.type === 'specialist' && recommendationData.user_id !== user.id) {\r\n      const { data: relationship, error: relationshipError } = await supabase\r\n        .from('specialist_patienten')\r\n        .select('*')\r\n        .eq('specialist_id', user.id)\r\n        .eq('patient_id', recommendationData.user_id)\r\n        .single();\r\n      \r\n      if (relationshipError || !relationship) {\r\n        return NextResponse.json(\r\n          formatApiError(403, 'Geen toegang tot deze patiënt'),\r\n          { status: 403 }\r\n        );\r\n      }\r\n    }\r\n    \r\n    // Insert recommendation\r\n    const { data, error } = await supabase\r\n      .from('ai_recommendations')\r\n      .insert({\r\n        ...recommendationData,\r\n        is_dismissed: false,\r\n        created_at: new Date().toISOString(),\r\n      })\r\n      .select()\r\n      .single();\r\n    \r\n    if (error) throw error;\r\n    \r\n    return NextResponse.json(data, { status: 201 });\r\n  } catch (error) {\r\n    const errorInfo = handleSupabaseError(error, 'ai-aanbeveling-opslaan');\r\n    \r\n    return NextResponse.json(\r\n      formatApiError(500, errorInfo.userMessage),\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// PATCH handler for updating an AI recommendation (e.g., dismissing it)\r\nexport async function PATCH(req: NextRequest): Promise<NextResponse> {\r\n  const supabase = getSupabaseRouteHandlerClient();\r\n  \r\n  try {\r\n    // Auth check\r\n    const { data: { user }, error: authError } = await supabase.auth.getUser();\r\n    \r\n    if (authError || !user) {\r\n      if (authError) console.error('[API AI Recommendations PATCH] Error fetching user:', authError.message);\r\n      return NextResponse.json(\r\n        formatApiError(401, 'Niet geautoriseerd'),\r\n        { status: 401 }\r\n      );\r\n    }\r\n    \r\n    // Parse request body\r\n    const requestData = await req.json();\r\n    const validationResult = updateRecommendationSchema.safeParse(requestData);\r\n    \r\n    if (!validationResult.success) {\r\n      return NextResponse.json(\r\n        formatApiError(400, `Validatiefout: ${validationResult.error.message}`),\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    const { id, ...updateData } = validationResult.data;\r\n    \r\n    // Check if the recommendation exists and belongs to the user\r\n    const { data: recommendation, error: getError } = await supabase\r\n      .from('ai_recommendations')\r\n      .select('user_id')\r\n      .eq('id', id)\r\n      .single();\r\n    \r\n    if (getError || !recommendation) {\r\n      return NextResponse.json(\r\n        formatApiError(404, 'Aanbeveling niet gevonden'),\r\n        { status: 404 }\r\n      );\r\n    }\r\n    \r\n    // Check if the user has permission to update this recommendation\r\n    if (recommendation.user_id !== user.id) {\r\n      // Check if the user is a specialist with access to the patient\r\n      const { data: profile, error: profileError } = await supabase\r\n        .from('profiles')\r\n        .select('type')\r\n        .eq('id', user.id)\r\n        .single();\r\n      \r\n      if (profileError || !profile || profile.type !== 'specialist') {\r\n        return NextResponse.json(\r\n          formatApiError(403, 'Geen toegang tot deze aanbeveling'),\r\n          { status: 403 }\r\n        );\r\n      }\r\n      \r\n      // Check if the specialist has a relationship with the patient\r\n      const { data: relationship, error: relationshipError } = await supabase\r\n        .from('specialist_patienten')\r\n        .select('*')\r\n        .eq('specialist_id', user.id)\r\n        .eq('patient_id', recommendation.user_id)\r\n        .single();\r\n      \r\n      if (relationshipError || !relationship) {\r\n        return NextResponse.json(\r\n          formatApiError(403, 'Geen toegang tot deze patiënt'),\r\n          { status: 403 }\r\n        );\r\n      }\r\n    }\r\n    \r\n    // Update recommendation\r\n    const { data, error } = await supabase\r\n      .from('ai_recommendations')\r\n      .update(updateData)\r\n      .eq('id', id)\r\n      .select()\r\n      .single();\r\n    \r\n    if (error) throw error;\r\n    \r\n    return NextResponse.json(data);\r\n  } catch (error) {\r\n    const errorInfo = handleSupabaseError(error, 'ai-aanbeveling-bijwerken');\r\n    \r\n    return NextResponse.json(\r\n      formatApiError(500, errorInfo.userMessage),\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// DELETE handler for removing an AI recommendation\r\nexport async function DELETE(req: NextRequest): Promise<NextResponse> {\r\n  const supabase = getSupabaseRouteHandlerClient();\r\n  \r\n  try {\r\n    // Auth check\r\n    const { data: { user }, error: authError } = await supabase.auth.getUser();\r\n    \r\n    if (authError || !user) {\r\n      if (authError) console.error('[API AI Recommendations DELETE] Error fetching user:', authError.message);\r\n      return NextResponse.json(\r\n        formatApiError(401, 'Niet geautoriseerd'),\r\n        { status: 401 }\r\n      );\r\n    }\r\n    \r\n    // Get recommendation ID from query parameters\r\n    const { searchParams } = new URL(req.url);\r\n    const id = searchParams.get('id');\r\n    \r\n    if (!id) {\r\n      return NextResponse.json(\r\n        formatApiError(400, 'Aanbeveling ID is vereist'),\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    // Check if the recommendation exists and belongs to the user\r\n    const { data: recommendation, error: getError } = await supabase\r\n      .from('ai_recommendations')\r\n      .select('user_id')\r\n      .eq('id', id)\r\n      .single();\r\n    \r\n    if (getError || !recommendation) {\r\n      return NextResponse.json(\r\n        formatApiError(404, 'Aanbeveling niet gevonden'),\r\n        { status: 404 }\r\n      );\r\n    }\r\n    \r\n    // Check if the user has permission to delete this recommendation\r\n    if (recommendation.user_id !== user.id) {\r\n      // Check if the user is an admin\r\n      const { data: profile, error: profileError } = await supabase\r\n        .from('profiles')\r\n        .select('type')\r\n        .eq('id', user.id)\r\n        .single();\r\n      \r\n      if (profileError || !profile || profile.type !== 'admin') {\r\n        return NextResponse.json(\r\n          formatApiError(403, 'Geen toegang tot deze aanbeveling'),\r\n          { status: 403 }\r\n        );\r\n      }\r\n    }\r\n    \r\n    // Delete recommendation\r\n    const { error } = await supabase\r\n      .from('ai_recommendations')\r\n      .delete()\r\n      .eq('id', id);\r\n    \r\n    if (error) throw error;\r\n    \r\n    return NextResponse.json({ success: true });\r\n  } catch (error) {\r\n    const errorInfo = handleSupabaseError(error, 'ai-aanbeveling-verwijderen');\r\n    \r\n    return NextResponse.json(\r\n      formatApiError(500, errorInfo.userMessage),\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\api\\auth\\[...supabase]\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\api\\auth\\callback\\route.ts","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":44,"fix":{"range":[157,157],"text":"\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":7,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":7,"endColumn":26},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":39,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":39,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1320,1378],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":44,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":44,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1514,1593],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { createServerClient, type CookieOptions } from '@supabase/ssr';\r\nimport { cookies } from 'next/headers';\r\nimport { NextResponse } from 'next/server';\r\nimport type { NextRequest } from 'next/server';\r\n\r\nexport const dynamic = 'force-dynamic'; // Ensure the route is always dynamic\r\nexport async function GET(request: NextRequest) {\r\n  const requestUrl = new URL(request.url);\r\n  const code = requestUrl.searchParams.get('code');\r\n\r\n  if (code) {\r\n    const cookieStore = cookies();\r\n    const supabase = createServerClient(\r\n      process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\r\n      {\r\n        cookies: {\r\n          get(name: string) {\r\n            return cookieStore.get(name)?.value;\r\n          },\r\n          set(name: string, value: string, options: CookieOptions) {\r\n            cookieStore.set({\r\n              name,\r\n              value,\r\n              ...options,\r\n              // Zorg dat cookies correct worden ingesteld\r\n              sameSite: 'lax',\r\n              secure: process.env.NODE_ENV === 'production',\r\n              httpOnly: true\r\n            });\r\n          },\r\n          remove(name: string, options: CookieOptions) {\r\n            cookieStore.set({ name, value: '', ...options });\r\n          },\r\n        },\r\n      }\r\n    );\r\n    try {\r\n      console.log(\"Auth callback: exchanging code for session\");\r\n      const { data, error } = await supabase.auth.exchangeCodeForSession(code);\r\n      \r\n      if (error) throw error;\r\n      \r\n      console.log(\"Auth callback: session exchange successful, user:\", !!data?.user);\r\n      \r\n      // Voeg een kleine debug component toe aan de redirect URL\r\n      return NextResponse.redirect(new URL('/dashboard?auth=success', requestUrl.origin));\r\n    } catch (error) {\r\n      console.error('Error exchanging code for session:', error);\r\n      const errorUrl = new URL('/auth/login', requestUrl.origin);\r\n      errorUrl.searchParams.set('error', 'auth_callback_error');\r\n      errorUrl.searchParams.set('error_description', 'Could not exchange code for session. Please try again.');\r\n      return NextResponse.redirect(errorUrl);\r\n    }\r\n  }\r\n\r\n  // URL to redirect to if the code is missing\r\n  console.warn('Auth callback called without a code.');\r\n  const missingCodeUrl = new URL('/auth/login', requestUrl.origin);\r\n  missingCodeUrl.searchParams.set('error', 'auth_callback_error');\r\n  missingCodeUrl.searchParams.set('error_description', 'Authorization code missing. Please try again.');\r\n  return NextResponse.redirect(missingCodeUrl);\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\api\\create-checkout-session\\route.ts","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":29,"fix":{"range":[86,86],"text":"\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":15,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":15,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":146,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":146,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5748,5751],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5748,5751],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { NextResponse, NextRequest } from 'next/server';\r\nimport Stripe from 'stripe';\r\nimport { getSupabaseRouteHandlerClient } from '@/lib/supabase-server'; // Corrected import path\r\nimport { patientPlans, specialistPlans, SubscriptionPlan } from '@/types/subscription'; \r\n\r\n// Instantieer Stripe met de secret key\r\n// Zorg dat STRIPE_SECRET_KEY is ingesteld in je environment variabelen\r\nif (!process.env.STRIPE_SECRET_KEY) {\r\n  throw new Error('STRIPE_SECRET_KEY is not set in environment variables');\r\n}\r\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {\r\n  apiVersion: '2025-04-30.basil', // Updated to the version expected by the installed Stripe package\r\n});\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body = await request.json();\r\n    const { planId, userId, billingCycle, userEmail, userType } = body;\r\n\r\n    // Valideer input\r\n    if (!planId || !userId || !billingCycle || !userType) {\r\n      return NextResponse.json(\r\n        { error: 'Ontbrekende vereiste velden: planId, userId, userType en billingCycle zijn verplicht.' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Verkrijg gebruikersprofiel (als e-mail niet is meegegeven voor nieuwe klant)\r\n    const supabase = getSupabaseRouteHandlerClient(); // Gebruik cookies van de request\r\n    let emailToUse = userEmail;\r\n    let userName = 'Nieuwe Gebruiker';\r\n\r\n    if (!emailToUse) {\r\n      const { data: profile, error: profileError } = await supabase\r\n        .from('profiles')\r\n        .select('email, voornaam, achternaam') // Selecteer email als die niet is meegegeven\r\n        .eq('id', userId)\r\n        .single();\r\n      \r\n      if (profileError || !profile) {\r\n        console.error(`User profile not found for ID: ${userId}`, profileError);\r\n        return NextResponse.json(\r\n          { error: 'Gebruikersprofiel niet gevonden.' },\r\n          { status: 404 }\r\n        );\r\n      }\r\n      emailToUse = profile.email;\r\n      userName = `${profile.voornaam || ''} ${profile.achternaam || ''}`.trim() || 'Nieuwe Gebruiker';\r\n    }\r\n    \r\n    // Bepaal het juiste plan op basis van userType\r\n    const plans: SubscriptionPlan[] = userType === 'specialist' ? specialistPlans : patientPlans;\r\n    const plan = plans.find(p => p.id === planId);\r\n    \r\n    if (!plan) {\r\n      return NextResponse.json(\r\n        { error: 'Ongeldig abonnementsplan geselecteerd.' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    if (plan.price.monthly === 0 && plan.price.yearly === 0 && plan.id === 'free') {\r\n        return NextResponse.json(\r\n            { error: 'Gratis plannen vereisen geen checkout.'},\r\n            { status: 400}\r\n        );\r\n    }\r\n\r\n    // Haal of maak Stripe Customer\r\n    let customerId: string;\r\n    \r\n    const { data: subscriptionRecord, error: fetchSubError } = await supabase\r\n      .from('subscriptions') // Hernoemd naar 'subscriptions' ipv 'abonnementen' voor consistentie\r\n      .select('stripe_customer_id')\r\n      .eq('user_id', userId)\r\n      .single();\r\n\r\n    if (fetchSubError && fetchSubError.code !== 'PGRST116') { // PGRST116 = no rows found\r\n        console.error('Error fetching subscription record:', fetchSubError);\r\n        throw fetchSubError;\r\n    }\r\n\r\n    if (subscriptionRecord?.stripe_customer_id) {\r\n      customerId = subscriptionRecord.stripe_customer_id;\r\n    } else {\r\n      const customer = await stripe.customers.create({\r\n        email: emailToUse,\r\n        name: userName,\r\n        metadata: { userId, userType },\r\n      });\r\n      customerId = customer.id;\r\n      \r\n      // Sla de nieuwe klant-ID op in je database (bv. in 'subscriptions' tabel)\r\n      // Dit gebeurt idealiter via een webhook na succesvolle betaling,\r\n      // maar voor nu direct om de customer ID te koppelen.\r\n      // Of, als de 'subscriptions' tabel al bestaat, update die.\r\n      // Voorbeeld:\r\n      // await supabase.from('user_profiles_or_subscriptions_table').upsert({ user_id: userId, stripe_customer_id: customerId });\r\n    }\r\n    \r\n    // Bepaal prijs-ID op basis van plan en factureringsperiode\r\n    // De Price IDs moeten exact overeenkomen met die in je Stripe Dashboard\r\n    // Voorbeeld: STRIPE_PRICE_PATIENT_BASIC_MONTHLY, STRIPE_PRICE_SPECIALIST_PREMIUM_YEARLY\r\n    const priceIdEnvVar = `STRIPE_PRICE_${userType.toUpperCase()}_${plan.id.toUpperCase()}_${billingCycle.toUpperCase()}`;\r\n    const priceId = process.env[priceIdEnvVar];\r\n    \r\n    if (!priceId) {\r\n      console.error(`Stripe Price ID not found for env var: ${priceIdEnvVar}`);\r\n      return NextResponse.json(\r\n        { error: 'Prijsconfiguratie ontbreekt voor dit plan en factureringscyclus.' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n    \r\n    const appUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000';\r\n\r\n    // Maak Checkout sessie\r\n    const session = await stripe.checkout.sessions.create({\r\n      customer: customerId,\r\n      payment_method_types: ['card', 'ideal'], // Voeg iDEAL toe\r\n      line_items: [\r\n        {\r\n          price: priceId,\r\n          quantity: 1,\r\n        },\r\n      ],\r\n      mode: 'subscription',\r\n      allow_promotion_codes: true, // Sta promotiecodes toe\r\n      success_url: `${appUrl}/dashboard?subscription_success=true&session_id={CHECKOUT_SESSION_ID}&plan=${plan.id}`,\r\n      cancel_url: `${appUrl}/pricing?subscription_cancelled=true`,\r\n      metadata: { // Extra metadata voor de webhook\r\n        userId,\r\n        planId: plan.id,\r\n        userType,\r\n        billingCycle,\r\n      },\r\n      // subscription_data: { // Gebruik metadata in de session voor webhook afhandeling\r\n      //   metadata: {\r\n      //     userId,\r\n      //     planId: plan.id,\r\n      //   },\r\n      // },\r\n    });\r\n    \r\n    return NextResponse.json({ sessionId: session.id });\r\n\r\n  } catch (error: any) {\r\n    console.error('Stripe checkout session creation error:', error);\r\n    return NextResponse.json(\r\n      { error: error.message || 'Interne serverfout bij het aanmaken van de checkout sessie.' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\api\\knowledge\\route.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":41,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":41,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'count' is assigned a value but never used.","line":124,"column":60,"nodeType":null,"messageId":"unusedVar","endLine":124,"endColumn":65},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":163,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":163,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":201,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":201,"endColumn":17},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":261,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":261,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":291,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":291,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":342,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":342,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11108,11111],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11108,11111],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":385,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":385,"endColumn":29}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { z } from 'zod';\r\n\r\nimport { getSupabaseRouteHandlerClient } from '@/lib/supabase-server';\r\n\r\n// Schema for GET request query parameters\r\nconst GetKnowledgeQuerySchema = z.object({\r\n  specialistId: z.string().uuid().optional(),\r\n  contentType: z.enum(['article', 'guideline', 'recommendation', 'all']).default('all'),\r\n  isApproved: z.enum(['true', 'false', 'all']).default('all'),\r\n  limit: z.coerce.number().min(1).max(50).default(20),\r\n  offset: z.coerce.number().min(0).default(0),\r\n  searchTerm: z.string().optional()\r\n});\r\n\r\n// Schema for POST request body\r\nconst CreateKnowledgeSchema = z.object({\r\n  specialistId: z.string().uuid(),\r\n  contentType: z.enum(['article', 'guideline', 'recommendation']),\r\n  title: z.string().min(3).max(200),\r\n  content: z.string().min(10),\r\n  tags: z.array(z.string()).optional(),\r\n  metadata: z.record(z.any()).optional()\r\n});\r\n\r\n// Schema for PATCH request body\r\nconst UpdateKnowledgeSchema = z.object({\r\n  id: z.string().uuid(),\r\n  contentType: z.enum(['article', 'guideline', 'recommendation']).optional(),\r\n  title: z.string().min(3).max(200).optional(),\r\n  content: z.string().min(10).optional(),\r\n  tags: z.array(z.string()).optional(),\r\n  metadata: z.record(z.any()).optional(),\r\n  isApproved: z.boolean().optional()\r\n});\r\n\r\n/**\r\n * GET /api/knowledge\r\n * Retrieve expert knowledge entries\r\n */\r\nexport async function GET(request: NextRequest) {\r\n  const supabase = getSupabaseRouteHandlerClient();\r\n  \r\n  // Authenticate user\r\n  const { data: { user }, error: authError } = await supabase.auth.getUser();\r\n  if (authError || !user) {\r\n    return NextResponse.json(\r\n      { error: 'Unauthorized', message: 'You must be logged in to access this resource' },\r\n      { status: 401 }\r\n    );\r\n  }\r\n  \r\n  // Get and validate query parameters\r\n  const url = new URL(request.url);\r\n  const queryParams = {\r\n    specialistId: url.searchParams.get('specialistId') || undefined,\r\n    contentType: url.searchParams.get('contentType') || 'all',\r\n    isApproved: url.searchParams.get('isApproved') || 'all',\r\n    limit: url.searchParams.get('limit') ? parseInt(url.searchParams.get('limit')!) : 20,\r\n    offset: url.searchParams.get('offset') ? parseInt(url.searchParams.get('offset')!) : 0,\r\n    searchTerm: url.searchParams.get('searchTerm') || undefined\r\n  };\r\n  \r\n  const queryParamsResult = GetKnowledgeQuerySchema.safeParse(queryParams);\r\n  if (!queryParamsResult.success) {\r\n    return NextResponse.json(\r\n      { error: 'Invalid parameters', details: queryParamsResult.error.format() },\r\n      { status: 400 }\r\n    );\r\n  }\r\n  \r\n  // Get user profile to check permissions\r\n  const { data: profile, error: profileError } = await supabase\r\n    .from('profiles')\r\n    .select('id, type')\r\n    .eq('id', user.id)\r\n    .single();\r\n  \r\n  if (profileError) {\r\n    return NextResponse.json(\r\n      { error: 'Database error', message: 'Error fetching user profile' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n  \r\n  try {\r\n    // Start building the query\r\n    let query = supabase\r\n      .from('expert_knowledge')\r\n      .select('*, profiles:specialist_id(name, type, avatar_url)');\r\n    \r\n    // Apply filters\r\n    if (queryParamsResult.data.specialistId) {\r\n      query = query.eq('specialist_id', queryParamsResult.data.specialistId);\r\n    }\r\n    \r\n    if (queryParamsResult.data.contentType !== 'all') {\r\n      query = query.eq('content_type', queryParamsResult.data.contentType);\r\n    }\r\n    \r\n    if (queryParamsResult.data.isApproved !== 'all') {\r\n      query = query.eq('is_approved', queryParamsResult.data.isApproved === 'true');\r\n    }\r\n    \r\n    // If user is not an admin or specialist, only show approved content\r\n    if (profile.type !== 'admin' && profile.type !== 'specialist') {\r\n      query = query.eq('is_approved', true);\r\n    }\r\n    \r\n    // Apply search term if provided\r\n    if (queryParamsResult.data.searchTerm) {\r\n      query = query.or(`title.ilike.%${queryParamsResult.data.searchTerm}%,content.ilike.%${queryParamsResult.data.searchTerm}%`);\r\n    }\r\n    \r\n    // Apply pagination\r\n    query = query\r\n      .order('created_at', { ascending: false })\r\n      .range(\r\n        queryParamsResult.data.offset, \r\n        queryParamsResult.data.offset + queryParamsResult.data.limit - 1\r\n      );\r\n    \r\n    // Execute the query\r\n    const { data: knowledgeEntries, error: knowledgeError, count } = await query;\r\n    \r\n    if (knowledgeError) {\r\n      return NextResponse.json(\r\n        { error: 'Database error', message: 'Error fetching knowledge entries', details: knowledgeError.message },\r\n        { status: 500 }\r\n      );\r\n    }\r\n    \r\n    // Get total count for pagination\r\n    const { count: totalCount, error: countError } = await supabase\r\n      .from('expert_knowledge')\r\n      .select('*', { count: 'exact', head: true });\r\n    \r\n    if (countError) {\r\n      console.error('Error getting total count:', countError);\r\n    }\r\n    \r\n    return NextResponse.json({\r\n      knowledgeEntries,\r\n      pagination: {\r\n        total: totalCount || 0,\r\n        limit: queryParamsResult.data.limit,\r\n        offset: queryParamsResult.data.offset\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error fetching knowledge entries:', error);\r\n    return NextResponse.json(\r\n      { error: 'Internal Server Error', message: 'Error fetching knowledge entries' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * POST /api/knowledge\r\n * Create a new expert knowledge entry\r\n */\r\nexport async function POST(request: NextRequest) {\r\n  const supabase = getSupabaseRouteHandlerClient();\r\n  \r\n  // Authenticate user\r\n  const { data: { user }, error: authError } = await supabase.auth.getUser();\r\n  if (authError || !user) {\r\n    return NextResponse.json(\r\n      { error: 'Unauthorized', message: 'You must be logged in to access this resource' },\r\n      { status: 401 }\r\n    );\r\n  }\r\n  \r\n  // Get user profile to check permissions\r\n  const { data: profile, error: profileError } = await supabase\r\n    .from('profiles')\r\n    .select('id, type')\r\n    .eq('id', user.id)\r\n    .single();\r\n  \r\n  if (profileError) {\r\n    return NextResponse.json(\r\n      { error: 'Database error', message: 'Error fetching user profile' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n  \r\n  // Only specialists and admins can create knowledge entries\r\n  if (profile.type !== 'specialist' && profile.type !== 'admin') {\r\n    return NextResponse.json(\r\n      { error: 'Forbidden', message: 'Only specialists and admins can create knowledge entries' },\r\n      { status: 403 }\r\n    );\r\n  }\r\n  \r\n  // Parse and validate request body\r\n  let body;\r\n  try {\r\n    body = await request.json();\r\n  } catch (error) {\r\n    return NextResponse.json(\r\n      { error: 'Invalid JSON', message: 'Request body must be valid JSON' },\r\n      { status: 400 }\r\n    );\r\n  }\r\n  \r\n  const bodyResult = CreateKnowledgeSchema.safeParse(body);\r\n  if (!bodyResult.success) {\r\n    return NextResponse.json(\r\n      { error: 'Invalid request body', details: bodyResult.error.format() },\r\n      { status: 400 }\r\n    );\r\n  }\r\n  \r\n  // If user is not an admin, they can only create entries for themselves\r\n  if (profile.type !== 'admin' && bodyResult.data.specialistId !== user.id) {\r\n    return NextResponse.json(\r\n      { error: 'Forbidden', message: 'You can only create knowledge entries for yourself' },\r\n      { status: 403 }\r\n    );\r\n  }\r\n  \r\n  try {\r\n    // Insert the knowledge entry into the database\r\n    const { data: knowledgeEntry, error: insertError } = await supabase\r\n      .from('expert_knowledge')\r\n      .insert({\r\n        specialist_id: bodyResult.data.specialistId,\r\n        content_type: bodyResult.data.contentType,\r\n        title: bodyResult.data.title,\r\n        content: bodyResult.data.content,\r\n        tags: bodyResult.data.tags || [],\r\n        metadata: bodyResult.data.metadata || {},\r\n        is_approved: profile.type === 'admin' // Auto-approve if admin\r\n      })\r\n      .select()\r\n      .single();\r\n    \r\n    if (insertError) {\r\n      return NextResponse.json(\r\n        { error: 'Database error', message: 'Error creating knowledge entry', details: insertError.message },\r\n        { status: 500 }\r\n      );\r\n    }\r\n    \r\n    return NextResponse.json({ knowledgeEntry }, { status: 201 });\r\n  } catch (error) {\r\n    console.error('Error creating knowledge entry:', error);\r\n    return NextResponse.json(\r\n      { error: 'Internal Server Error', message: 'Error creating knowledge entry' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * PATCH /api/knowledge\r\n * Update an existing expert knowledge entry\r\n */\r\nexport async function PATCH(request: NextRequest) {\r\n  const supabase = getSupabaseRouteHandlerClient();\r\n  \r\n  // Authenticate user\r\n  const { data: { user }, error: authError } = await supabase.auth.getUser();\r\n  if (authError || !user) {\r\n    return NextResponse.json(\r\n      { error: 'Unauthorized', message: 'You must be logged in to access this resource' },\r\n      { status: 401 }\r\n    );\r\n  }\r\n  \r\n  // Get user profile to check permissions\r\n  const { data: profile, error: profileError } = await supabase\r\n    .from('profiles')\r\n    .select('id, type')\r\n    .eq('id', user.id)\r\n    .single();\r\n  \r\n  if (profileError) {\r\n    return NextResponse.json(\r\n      { error: 'Database error', message: 'Error fetching user profile' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n  \r\n  // Parse and validate request body\r\n  let body;\r\n  try {\r\n    body = await request.json();\r\n  } catch (error) {\r\n    return NextResponse.json(\r\n      { error: 'Invalid JSON', message: 'Request body must be valid JSON' },\r\n      { status: 400 }\r\n    );\r\n  }\r\n  \r\n  const bodyResult = UpdateKnowledgeSchema.safeParse(body);\r\n  if (!bodyResult.success) {\r\n    return NextResponse.json(\r\n      { error: 'Invalid request body', details: bodyResult.error.format() },\r\n      { status: 400 }\r\n    );\r\n  }\r\n  \r\n  try {\r\n    // Get the knowledge entry to check ownership\r\n    const { data: knowledgeEntry, error: getError } = await supabase\r\n      .from('expert_knowledge')\r\n      .select('specialist_id, is_approved')\r\n      .eq('id', bodyResult.data.id)\r\n      .single();\r\n    \r\n    if (getError) {\r\n      return NextResponse.json(\r\n        { error: 'Database error', message: 'Error fetching knowledge entry', details: getError.message },\r\n        { status: 500 }\r\n      );\r\n    }\r\n    \r\n    // Check permissions\r\n    const isOwner = knowledgeEntry.specialist_id === user.id;\r\n    const isAdmin = profile.type === 'admin';\r\n    \r\n    // Only the owner or an admin can update the entry\r\n    if (!isOwner && !isAdmin) {\r\n      return NextResponse.json(\r\n        { error: 'Forbidden', message: 'You do not have permission to update this knowledge entry' },\r\n        { status: 403 }\r\n      );\r\n    }\r\n    \r\n    // Only admins can approve entries\r\n    if (bodyResult.data.isApproved !== undefined && !isAdmin) {\r\n      return NextResponse.json(\r\n        { error: 'Forbidden', message: 'Only admins can approve knowledge entries' },\r\n        { status: 403 }\r\n      );\r\n    }\r\n    \r\n    // Prepare update data\r\n    const updateData: Record<string, any> = {};\r\n    \r\n    if (bodyResult.data.contentType !== undefined) updateData.content_type = bodyResult.data.contentType;\r\n    if (bodyResult.data.title !== undefined) updateData.title = bodyResult.data.title;\r\n    if (bodyResult.data.content !== undefined) updateData.content = bodyResult.data.content;\r\n    if (bodyResult.data.tags !== undefined) updateData.tags = bodyResult.data.tags;\r\n    if (bodyResult.data.metadata !== undefined) updateData.metadata = bodyResult.data.metadata;\r\n    if (bodyResult.data.isApproved !== undefined) updateData.is_approved = bodyResult.data.isApproved;\r\n    \r\n    // If non-admin is updating an approved entry, set it back to unapproved\r\n    if (!isAdmin && knowledgeEntry.is_approved && Object.keys(updateData).length > 0) {\r\n      updateData.is_approved = false;\r\n    }\r\n    \r\n    // Update the knowledge entry\r\n    const { data: updatedEntry, error: updateError } = await supabase\r\n      .from('expert_knowledge')\r\n      .update(updateData)\r\n      .eq('id', bodyResult.data.id)\r\n      .select()\r\n      .single();\r\n    \r\n    if (updateError) {\r\n      return NextResponse.json(\r\n        { error: 'Database error', message: 'Error updating knowledge entry', details: updateError.message },\r\n        { status: 500 }\r\n      );\r\n    }\r\n    \r\n    return NextResponse.json({ knowledgeEntry: updatedEntry });\r\n  } catch (error) {\r\n    console.error('Error updating knowledge entry:', error);\r\n    return NextResponse.json(\r\n      { error: 'Internal Server Error', message: 'Error updating knowledge entry' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * DELETE /api/knowledge\r\n * Delete an expert knowledge entry\r\n */\r\nexport async function DELETE(request: NextRequest) {\r\n  const supabase = getSupabaseRouteHandlerClient();\r\n  \r\n  // Authenticate user\r\n  const { data: { user }, error: authError } = await supabase.auth.getUser();\r\n  if (authError || !user) {\r\n    return NextResponse.json(\r\n      { error: 'Unauthorized', message: 'You must be logged in to access this resource' },\r\n      { status: 401 }\r\n    );\r\n  }\r\n  \r\n  // Get user profile to check permissions\r\n  const { data: profile, error: profileError } = await supabase\r\n    .from('profiles')\r\n    .select('id, type')\r\n    .eq('id', user.id)\r\n    .single();\r\n  \r\n  if (profileError) {\r\n    return NextResponse.json(\r\n      { error: 'Database error', message: 'Error fetching user profile' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n  \r\n  // Get the knowledge entry ID from the URL\r\n  const url = new URL(request.url);\r\n  const id = url.searchParams.get('id');\r\n  \r\n  if (!id) {\r\n    return NextResponse.json(\r\n      { error: 'Bad Request', message: 'Knowledge entry ID is required' },\r\n      { status: 400 }\r\n    );\r\n  }\r\n  \r\n  try {\r\n    // Get the knowledge entry to check ownership\r\n    const { data: knowledgeEntry, error: getError } = await supabase\r\n      .from('expert_knowledge')\r\n      .select('specialist_id')\r\n      .eq('id', id)\r\n      .single();\r\n    \r\n    if (getError) {\r\n      return NextResponse.json(\r\n        { error: 'Database error', message: 'Error fetching knowledge entry', details: getError.message },\r\n        { status: 500 }\r\n      );\r\n    }\r\n    \r\n    // Check permissions\r\n    const isOwner = knowledgeEntry.specialist_id === user.id;\r\n    const isAdmin = profile.type === 'admin';\r\n    \r\n    // Only the owner or an admin can delete the entry\r\n    if (!isOwner && !isAdmin) {\r\n      return NextResponse.json(\r\n        { error: 'Forbidden', message: 'You do not have permission to delete this knowledge entry' },\r\n        { status: 403 }\r\n      );\r\n    }\r\n    \r\n    // Delete the knowledge entry\r\n    const { error: deleteError } = await supabase\r\n      .from('expert_knowledge')\r\n      .delete()\r\n      .eq('id', id);\r\n    \r\n    if (deleteError) {\r\n      return NextResponse.json(\r\n        { error: 'Database error', message: 'Error deleting knowledge entry', details: deleteError.message },\r\n        { status: 500 }\r\n      );\r\n    }\r\n    \r\n    return NextResponse.json({ success: true });\r\n  } catch (error) {\r\n    console.error('Error deleting knowledge entry:', error);\r\n    return NextResponse.json(\r\n      { error: 'Internal Server Error', message: 'Error deleting knowledge entry' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\api\\pattern-recognition\\route.ts","messages":[{"ruleId":"import/order","severity":2,"message":"`@/lib/monitoring/logger` import should occur before import of `@/lib/supabase-server`","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":50,"fix":{"range":[86,209],"text":"import { logger } from '@/lib/monitoring/logger';\r\nimport { getSupabaseRouteHandlerClient } from '@/lib/supabase-server';\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":29,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":29,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":174,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":174,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":212,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":212,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":362,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":362,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12255,12258],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12255,12258],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":363,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":363,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12275,12278],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12275,12278],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":369,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":369,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12407,12410],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12407,12410],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":376,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":376,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12567,12570],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12567,12570],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { z } from 'zod';\r\n\r\nimport { getSupabaseRouteHandlerClient } from '@/lib/supabase-server';\r\nimport { logger } from '@/lib/monitoring/logger';\r\n\r\n// Schema for GET request query parameters\r\nconst GetPatternsQuerySchema = z.object({\r\n  patientId: z.string().uuid().optional(),\r\n  patternType: z.enum(['symptom', 'activity', 'treatment', 'all']).default('all'),\r\n  timeframe: z.enum(['week', 'month', 'quarter', 'year']).default('month'),\r\n  minConfidence: z.coerce.number().min(0).max(1).default(0.6),\r\n  limit: z.coerce.number().min(1).max(50).default(10)\r\n});\r\n\r\n// Schema for POST request body\r\nconst AnalyzePatternSchema = z.object({\r\n  patientId: z.string().uuid(),\r\n  dataType: z.enum(['reflecties', 'task_logs', 'both']).default('both'),\r\n  patternType: z.enum(['symptom', 'activity', 'treatment', 'all']).default('all'),\r\n  timeframe: z.enum(['week', 'month', 'quarter', 'year']).default('month'),\r\n  customParameters: z.record(z.any()).optional()\r\n});\r\n\r\n/**\r\n * GET /api/pattern-recognition\r\n * Retrieve recognized patterns for a patient\r\n */\r\nexport async function GET(request: NextRequest) {\r\n  const supabase = getSupabaseRouteHandlerClient();\r\n  \r\n  // Authenticate user\r\n  const { data: { user }, error: authError } = await supabase.auth.getUser();\r\n  if (authError || !user) {\r\n    return NextResponse.json(\r\n      { error: 'Unauthorized', message: 'You must be logged in to access this resource' },\r\n      { status: 401 }\r\n    );\r\n  }\r\n  \r\n  // Get and validate query parameters\r\n  const url = new URL(request.url);\r\n  const queryParams = {\r\n    patientId: url.searchParams.get('patientId') || undefined,\r\n    patternType: url.searchParams.get('patternType') || 'all',\r\n    timeframe: url.searchParams.get('timeframe') || 'month',\r\n    minConfidence: url.searchParams.get('minConfidence') ? parseFloat(url.searchParams.get('minConfidence')!) : 0.6,\r\n    limit: url.searchParams.get('limit') ? parseInt(url.searchParams.get('limit')!) : 10\r\n  };\r\n  \r\n  const queryParamsResult = GetPatternsQuerySchema.safeParse(queryParams);\r\n  if (!queryParamsResult.success) {\r\n    return NextResponse.json(\r\n      { error: 'Invalid parameters', details: queryParamsResult.error.format() },\r\n      { status: 400 }\r\n    );\r\n  }\r\n  \r\n  // Get user profile to check permissions\r\n  const { data: profile, error: profileError } = await supabase\r\n    .from('profiles')\r\n    .select('id, type')\r\n    .eq('id', user.id)\r\n    .single();\r\n  \r\n  if (profileError) {\r\n    return NextResponse.json(\r\n      { error: 'Database error', message: 'Error fetching user profile' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n  \r\n  // Check if user is a specialist or admin\r\n  const isSpecialistOrAdmin = profile.type === 'specialist' || profile.type === 'admin';\r\n  \r\n  // If user is not a specialist or admin and trying to access another patient's data\r\n  if (!isSpecialistOrAdmin && queryParamsResult.data.patientId && queryParamsResult.data.patientId !== user.id) {\r\n    return NextResponse.json(\r\n      { error: 'Forbidden', message: 'You do not have permission to access this resource' },\r\n      { status: 403 }\r\n    );\r\n  }\r\n  \r\n  try {\r\n    // If patientId is provided, check if specialist has access to this patient\r\n    if (profile.type === 'specialist' && queryParamsResult.data.patientId) {\r\n      const { data: connection, error: connectionError } = await supabase\r\n        .from('specialist_patient_connections')\r\n        .select('*')\r\n        .eq('specialist_id', user.id)\r\n        .eq('patient_id', queryParamsResult.data.patientId)\r\n        .eq('status', 'accepted')\r\n        .single();\r\n      \r\n      if (connectionError || !connection) {\r\n        return NextResponse.json(\r\n          { error: 'Forbidden', message: 'You do not have permission to access this patient\\'s data' },\r\n          { status: 403 }\r\n        );\r\n      }\r\n    }\r\n    \r\n    // Determine the patient ID to use\r\n    const patientId = queryParamsResult.data.patientId || (profile.type === 'patient' ? user.id : null);\r\n    \r\n    if (!patientId) {\r\n      return NextResponse.json(\r\n        { error: 'Bad Request', message: 'Patient ID is required' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    // Calculate date range based on timeframe\r\n    const endDate = new Date();\r\n    const startDate = new Date();\r\n    \r\n    switch (queryParamsResult.data.timeframe) {\r\n      case 'week':\r\n        startDate.setDate(endDate.getDate() - 7);\r\n        break;\r\n      case 'month':\r\n        startDate.setMonth(endDate.getMonth() - 1);\r\n        break;\r\n      case 'quarter':\r\n        startDate.setMonth(endDate.getMonth() - 3);\r\n        break;\r\n      case 'year':\r\n        startDate.setFullYear(endDate.getFullYear() - 1);\r\n        break;\r\n    }\r\n    \r\n    // Fetch patterns from the database\r\n    let query = supabase\r\n      .from('pattern_recognition')\r\n      .select('*')\r\n      .eq('patient_id', patientId)\r\n      .gte('created_at', startDate.toISOString())\r\n      .lte('created_at', endDate.toISOString())\r\n      .gte('confidence', queryParamsResult.data.minConfidence);\r\n    \r\n    // Apply pattern type filter if not 'all'\r\n    if (queryParamsResult.data.patternType !== 'all') {\r\n      query = query.eq('pattern_type', queryParamsResult.data.patternType);\r\n    }\r\n    \r\n    // Apply limit\r\n    query = query\r\n      .order('confidence', { ascending: false })\r\n      .limit(queryParamsResult.data.limit);\r\n    \r\n    const { data: patterns, error: patternsError } = await query;\r\n    \r\n    if (patternsError) {\r\n      return NextResponse.json(\r\n        { error: 'Database error', message: 'Error fetching patterns', details: patternsError.message },\r\n        { status: 500 }\r\n      );\r\n    }\r\n    \r\n    return NextResponse.json({ patterns });\r\n  } catch (error) {\r\n    logger.error('Error fetching patterns:', error);\r\n    return NextResponse.json(\r\n      { error: 'Internal Server Error', message: 'Error fetching patterns' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * POST /api/pattern-recognition\r\n * Analyze patient data to recognize patterns\r\n */\r\nexport async function POST(request: NextRequest) {\r\n  const supabase = getSupabaseRouteHandlerClient();\r\n  \r\n  // Authenticate user\r\n  const { data: { user }, error: authError } = await supabase.auth.getUser();\r\n  if (authError || !user) {\r\n    return NextResponse.json(\r\n      { error: 'Unauthorized', message: 'You must be logged in to access this resource' },\r\n      { status: 401 }\r\n    );\r\n  }\r\n  \r\n  // Get user profile to check permissions\r\n  const { data: profile, error: profileError } = await supabase\r\n    .from('profiles')\r\n    .select('id, type')\r\n    .eq('id', user.id)\r\n    .single();\r\n  \r\n  if (profileError) {\r\n    return NextResponse.json(\r\n      { error: 'Database error', message: 'Error fetching user profile' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n  \r\n  // Only specialists and admins can trigger pattern analysis\r\n  if (profile.type !== 'specialist' && profile.type !== 'admin') {\r\n    return NextResponse.json(\r\n      { error: 'Forbidden', message: 'Only specialists and admins can trigger pattern analysis' },\r\n      { status: 403 }\r\n    );\r\n  }\r\n  \r\n  // Parse and validate request body\r\n  let body;\r\n  try {\r\n    body = await request.json();\r\n  } catch (error) {\r\n    return NextResponse.json(\r\n      { error: 'Invalid JSON', message: 'Request body must be valid JSON' },\r\n      { status: 400 }\r\n    );\r\n  }\r\n  \r\n  const bodyResult = AnalyzePatternSchema.safeParse(body);\r\n  if (!bodyResult.success) {\r\n    return NextResponse.json(\r\n      { error: 'Invalid request body', details: bodyResult.error.format() },\r\n      { status: 400 }\r\n    );\r\n  }\r\n  \r\n  // Check if specialist has access to this patient\r\n  if (profile.type === 'specialist') {\r\n    const { data: connection, error: connectionError } = await supabase\r\n      .from('specialist_patient_connections')\r\n      .select('*')\r\n      .eq('specialist_id', user.id)\r\n      .eq('patient_id', bodyResult.data.patientId)\r\n      .eq('status', 'accepted')\r\n      .single();\r\n    \r\n    if (connectionError || !connection) {\r\n      return NextResponse.json(\r\n        { error: 'Forbidden', message: 'You do not have permission to analyze this patient\\'s data' },\r\n        { status: 403 }\r\n      );\r\n    }\r\n  }\r\n  \r\n  try {\r\n    // Calculate date range based on timeframe\r\n    const endDate = new Date();\r\n    const startDate = new Date();\r\n    \r\n    switch (bodyResult.data.timeframe) {\r\n      case 'week':\r\n        startDate.setDate(endDate.getDate() - 7);\r\n        break;\r\n      case 'month':\r\n        startDate.setMonth(endDate.getMonth() - 1);\r\n        break;\r\n      case 'quarter':\r\n        startDate.setMonth(endDate.getMonth() - 3);\r\n        break;\r\n      case 'year':\r\n        startDate.setFullYear(endDate.getFullYear() - 1);\r\n        break;\r\n    }\r\n    \r\n    // Fetch patient data for analysis\r\n    let reflecties = [];\r\n    let taskLogs = [];\r\n    \r\n    if (bodyResult.data.dataType === 'reflecties' || bodyResult.data.dataType === 'both') {\r\n      const { data: reflectiesData, error: reflectiesError } = await supabase\r\n        .from('reflecties')\r\n        .select('*')\r\n        .eq('user_id', bodyResult.data.patientId)\r\n        .gte('created_at', startDate.toISOString())\r\n        .lte('created_at', endDate.toISOString())\r\n        .order('created_at', { ascending: true });\r\n      \r\n      if (reflectiesError) {\r\n        return NextResponse.json(\r\n          { error: 'Database error', message: 'Error fetching reflections', details: reflectiesError.message },\r\n          { status: 500 }\r\n        );\r\n      }\r\n      \r\n      reflecties = reflectiesData || [];\r\n    }\r\n    \r\n    if (bodyResult.data.dataType === 'task_logs' || bodyResult.data.dataType === 'both') {\r\n      const { data: taskLogsData, error: taskLogsError } = await supabase\r\n        .from('task_logs')\r\n        .select('*, tasks(titel, type)')\r\n        .eq('user_id', bodyResult.data.patientId)\r\n        .gte('created_at', startDate.toISOString())\r\n        .lte('created_at', endDate.toISOString())\r\n        .order('created_at', { ascending: true });\r\n      \r\n      if (taskLogsError) {\r\n        return NextResponse.json(\r\n          { error: 'Database error', message: 'Error fetching task logs', details: taskLogsError.message },\r\n          { status: 500 }\r\n        );\r\n      }\r\n      \r\n      taskLogs = taskLogsData || [];\r\n    }\r\n    \r\n    // Check if we have enough data for analysis\r\n    if (reflecties.length === 0 && taskLogs.length === 0) {\r\n      return NextResponse.json(\r\n        { error: 'Insufficient data', message: 'Not enough data for pattern analysis' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    // Generate some example patterns for demonstration\r\n    // In a real implementation, this would use more sophisticated algorithms\r\n    const patterns = generateExamplePatterns(bodyResult.data.patientId, reflecties, taskLogs, bodyResult.data.patternType);\r\n    \r\n    // Store recognized patterns in the database\r\n    if (patterns.length > 0) {\r\n      const { error: insertError } = await supabase\r\n        .from('pattern_recognition')\r\n        .insert(patterns.map(pattern => ({\r\n          patient_id: bodyResult.data.patientId,\r\n          pattern_type: pattern.patternType,\r\n          title: pattern.title,\r\n          description: pattern.description,\r\n          data: pattern.data,\r\n          confidence: pattern.confidence,\r\n          created_by: user.id\r\n        })));\r\n      \r\n      if (insertError) {\r\n        logger.error('Error storing patterns:', insertError);\r\n      }\r\n    }\r\n    \r\n    return NextResponse.json({ \r\n      patterns,\r\n      meta: {\r\n        reflectiesCount: reflecties.length,\r\n        taskLogsCount: taskLogs.length,\r\n        timeframe: bodyResult.data.timeframe,\r\n        patternType: bodyResult.data.patternType\r\n      }\r\n    });\r\n  } catch (error) {\r\n    logger.error('Error analyzing patterns:', error);\r\n    return NextResponse.json(\r\n      { error: 'Internal Server Error', message: 'Error analyzing patterns' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Generate example patterns for demonstration\r\n * In a real implementation, this would use more sophisticated algorithms\r\n */\r\nfunction generateExamplePatterns(\r\n  patientId: string,\r\n  reflecties: any[],\r\n  taskLogs: any[],\r\n  patternType: string\r\n): Array<{\r\n  patternType: string;\r\n  title: string;\r\n  description: string;\r\n  data: Record<string, any>;\r\n  confidence: number;\r\n}> {\r\n  const patterns: Array<{\r\n    patternType: string;\r\n    title: string;\r\n    description: string;\r\n    data: Record<string, any>;\r\n    confidence: number;\r\n  }> = [];\r\n  \r\n  // Add some example patterns based on the requested pattern type\r\n  if (patternType === 'symptom' || patternType === 'all') {\r\n    if (reflecties.length >= 5) {\r\n      patterns.push({\r\n        patternType: 'symptom',\r\n        title: 'Fluctuerende pijnklachten',\r\n        description: 'De pijnscores vertonen een fluctuerend patroon over de afgelopen periode. Dit kan wijzen op wisselende symptomen.',\r\n        data: {\r\n          reflectiesCount: reflecties.length\r\n        },\r\n        confidence: 0.75\r\n      });\r\n    }\r\n  }\r\n  \r\n  if (patternType === 'activity' || patternType === 'all') {\r\n    if (taskLogs.length >= 5) {\r\n      patterns.push({\r\n        patternType: 'activity',\r\n        title: 'Voorkeur voor ochtendactiviteiten',\r\n        description: 'De meeste taken worden in de ochtend uitgevoerd. Dit kan wijzen op een natuurlijk energiepatroon.',\r\n        data: {\r\n          taskLogsCount: taskLogs.length\r\n        },\r\n        confidence: 0.8\r\n      });\r\n    }\r\n  }\r\n  \r\n  if (patternType === 'treatment' || patternType === 'all') {\r\n    if (taskLogs.length >= 5 && reflecties.length >= 5) {\r\n      patterns.push({\r\n        patternType: 'treatment',\r\n        title: 'Positief effect van ontspanningsoefeningen',\r\n        description: 'Ontspanningsoefeningen lijken een positief effect te hebben op pijn- en vermoeidheidsscores.',\r\n        data: {\r\n          taskLogsCount: taskLogs.length,\r\n          reflectiesCount: reflecties.length\r\n        },\r\n        confidence: 0.7\r\n      });\r\n    }\r\n  }\r\n  \r\n  return patterns;\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\api\\profiles\\[id]\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\api\\profiles\\me\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\api\\reflecties\\[id]\\route.ts","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":57,"fix":{"range":[56,56],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/lib/error-handler` import should occur before import of `@/lib/supabase-server`","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":75,"fix":{"range":[58,231],"text":"import { formatApiError, handleSupabaseError } from '@/lib/error-handler';\r\nimport { getSupabaseRouteHandlerClient } from '@/lib/supabase-server'; // Corrected import path\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":7,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":7,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":54,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":54,"endColumn":29}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import { NextResponse, NextRequest } from 'next/server';\r\nimport { getSupabaseRouteHandlerClient } from '@/lib/supabase-server'; // Corrected import path\r\nimport { formatApiError, handleSupabaseError } from '@/lib/error-handler';\r\nimport { Reflectie } from '@/types';\r\n\r\n// PUT to update a specific reflectie\r\nexport async function PUT(\r\n  request: NextRequest,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  const reflectieIdToUpdate = params.id;\r\n  const supabase = getSupabaseRouteHandlerClient();\r\n\r\n  try {\r\n    const { data: { user } } = await supabase.auth.getUser();\r\n    if (!user) {\r\n      return NextResponse.json(formatApiError(401, 'Niet geautoriseerd'), { status: 401 });\r\n    }\r\n\r\n    const reflectieData: Partial<Omit<Reflectie, 'id' | 'created_at' | 'user_id' | 'ai_validatie'>> = await request.json();\r\n\r\n    // Ensure some data is provided for update\r\n    if (Object.keys(reflectieData).length === 0) {\r\n        return NextResponse.json(formatApiError(400, 'Geen data om bij te werken'), { status: 400 });\r\n    }\r\n    \r\n    const updatePayload = { \r\n      ...reflectieData, \r\n      user_id: user.id, // Ensure user_id consistency\r\n      updated_at: new Date().toISOString() // Explicitly set updated_at\r\n    };\r\n    \r\n    const { data, error } = await supabase\r\n      .from('reflecties')\r\n      .update(updatePayload)\r\n      .eq('id', reflectieIdToUpdate)\r\n      .eq('user_id', user.id) // User can only update their own reflecties\r\n      .select()\r\n      .single();\r\n\r\n    if (error) throw error;\r\n\r\n    // Optionally, re-run AI validation if relevant fields changed\r\n    // For simplicity, this is omitted here but could be added like in POST\r\n\r\n    return NextResponse.json(data as Reflectie);\r\n  } catch (error) {\r\n    const errorInfo = handleSupabaseError(error, 'reflectie-bijwerken');\r\n    return NextResponse.json(formatApiError(500, errorInfo.userMessage), { status: 500 });\r\n  }\r\n}\r\n\r\n// DELETE a specific reflectie\r\nexport async function DELETE(\r\n  _request: NextRequest, // Prefixed request with underscore\r\n  { params }: { params: { id: string } }\r\n) {\r\n  const reflectieIdToDelete = params.id;\r\n  const supabase = getSupabaseRouteHandlerClient();\r\n\r\n  try {\r\n    const { data: { user } } = await supabase.auth.getUser();\r\n    if (!user) {\r\n      return NextResponse.json(formatApiError(401, 'Niet geautoriseerd'), { status: 401 });\r\n    }\r\n    \r\n    const { error } = await supabase\r\n      .from('reflecties')\r\n      .delete()\r\n      .eq('id', reflectieIdToDelete)\r\n      .eq('user_id', user.id); // User can only delete their own reflecties\r\n    \r\n    if (error) throw error;\r\n    \r\n    return NextResponse.json({ message: 'Reflectie succesvol verwijderd' });\r\n  } catch (error) {\r\n    const errorInfo = handleSupabaseError(error, 'reflectie-verwijderen');\r\n    return NextResponse.json(formatApiError(500, errorInfo.userMessage), { status: 500 });\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\api\\reflecties\\route.ts","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":57,"fix":{"range":[56,56],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/lib/error-handler` import should occur before import of `@/lib/supabase-server`","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":75,"fix":{"range":[58,206],"text":"import { formatApiError, handleSupabaseError } from '@/lib/error-handler';\r\nimport { getSupabaseRouteHandlerClient } from '@/lib/supabase-server';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/lib/security/rateLimit` import should occur before import of `@/lib/supabase-server`","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":71,"fix":{"range":[58,473],"text":"import { rateLimit, RateLimitResult } from '@/lib/security/rateLimit';\r\nimport { getSupabaseRouteHandlerClient } from '@/lib/supabase-server';\r\nimport { formatApiError, handleSupabaseError } from '@/lib/error-handler';\r\nimport { Reflectie, ReflectieFormData } from '@/types';\r\nimport { validateReflectieWithAI } from '@/utils/ai';\r\nimport { validateAndSanitizeApiInput, apiSchemas } from '@/utils/api-validation';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/lib/monitoring/logger` import should occur before import of `@/lib/supabase-server`","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":50,"fix":{"range":[58,524],"text":"import { logger } from '@/lib/monitoring/logger';\r\nimport { getSupabaseRouteHandlerClient } from '@/lib/supabase-server';\r\nimport { formatApiError, handleSupabaseError } from '@/lib/error-handler';\r\nimport { Reflectie, ReflectieFormData } from '@/types';\r\nimport { validateReflectieWithAI } from '@/utils/ai';\r\nimport { validateAndSanitizeApiInput, apiSchemas } from '@/utils/api-validation';\r\nimport { rateLimit, RateLimitResult } from '@/lib/security/rateLimit';\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":10,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":10,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":69,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":69,"endColumn":27}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":4,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { getSupabaseRouteHandlerClient } from '@/lib/supabase-server';\r\nimport { formatApiError, handleSupabaseError } from '@/lib/error-handler';\r\nimport { Reflectie, ReflectieFormData } from '@/types';\r\nimport { validateReflectieWithAI } from '@/utils/ai';\r\nimport { validateAndSanitizeApiInput, apiSchemas } from '@/utils/api-validation';\r\nimport { rateLimit, RateLimitResult } from '@/lib/security/rateLimit';\r\nimport { logger } from '@/lib/monitoring/logger';\r\n\r\nexport async function GET(req: NextRequest) {\r\n  const supabase = getSupabaseRouteHandlerClient(); // Use centralized helper\r\n  \r\n  try {\r\n    const { data: { user }, error: getUserError } = await supabase.auth.getUser();\r\n    if (getUserError || !user) {\r\n      if (getUserError) console.error('[API Reflecties GET] Error fetching user:', getUserError.message);\r\n      return NextResponse.json(formatApiError(401, 'Niet geautoriseerd'), { status: 401 });\r\n    }\r\n    \r\n    // Apply rate limiting based on user ID\r\n    const limiterResult: RateLimitResult = await rateLimit(`reflecties_get_${user.id}`, {\r\n      windowMs: 60 * 1000, // 1 minute\r\n      maxRequests: 30      // 30 requests per minute per user (higher limit for GET)\r\n    });\r\n    \r\n    if (!limiterResult.success) {\r\n      logger.warn(`Rate limit exceeded for user ${user.id} on reflecties GET endpoint`);\r\n      return NextResponse.json(\r\n        formatApiError(429, limiterResult.message || 'Te veel verzoeken, probeer het later opnieuw.'),\r\n        { \r\n          status: limiterResult.statusCode || 429, \r\n          headers: { \r\n            'Retry-After': String(limiterResult.reset),\r\n            'X-RateLimit-Limit': String(limiterResult.limit),\r\n            'X-RateLimit-Remaining': String(limiterResult.remaining),\r\n            'X-RateLimit-Reset': String(limiterResult.reset) \r\n          } \r\n        }\r\n      );\r\n    }\r\n    \r\n    const { searchParams } = new URL(req.url);\r\n    const startDate = searchParams.get('start_date');\r\n    const endDate = searchParams.get('end_date');\r\n    const limit = parseInt(searchParams.get('limit') || '30'); // Default to more\r\n    const offset = parseInt(searchParams.get('offset') || '0');\r\n    \r\n    let query = supabase\r\n      .from('reflecties')\r\n      .select('*')\r\n      .eq('user_id', user.id)\r\n      .order('datum', { ascending: false }) // Most recent first\r\n      .limit(limit)\r\n      .range(offset, offset + limit - 1);\r\n    \r\n    if (startDate) query = query.gte('datum', startDate);\r\n    if (endDate) query = query.lte('datum', endDate);\r\n    \r\n    const { data, error } = await query;\r\n    if (error) throw error;\r\n    \r\n    return NextResponse.json(data as Reflectie[]);\r\n  } catch (error) {\r\n    const errorInfo = handleSupabaseError(error, 'reflecties-ophalen');\r\n    return NextResponse.json(formatApiError(500, errorInfo.userMessage), { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function POST(req: NextRequest) {\r\n  const supabase = getSupabaseRouteHandlerClient(); // Use centralized helper\r\n  \r\n  try {\r\n    const { data: { user }, error: getUserError } = await supabase.auth.getUser();\r\n    if (getUserError || !user) {\r\n      if (getUserError) console.error('[API Reflecties POST] Error fetching user:', getUserError.message);\r\n      return NextResponse.json(formatApiError(401, 'Niet geautoriseerd'), { status: 401 });\r\n    }\r\n    \r\n    // Apply rate limiting based on user ID\r\n    const limiterResult: RateLimitResult = await rateLimit(`reflecties_post_${user.id}`, {\r\n      windowMs: 60 * 1000, // 1 minute\r\n      maxRequests: 10      // 10 requests per minute per user\r\n    });\r\n    \r\n    if (!limiterResult.success) {\r\n      logger.warn(`Rate limit exceeded for user ${user.id} on reflecties POST endpoint`);\r\n      return NextResponse.json(\r\n        formatApiError(429, limiterResult.message || 'Te veel verzoeken, probeer het later opnieuw.'),\r\n        { \r\n          status: limiterResult.statusCode || 429, \r\n          headers: { \r\n            'Retry-After': String(limiterResult.reset),\r\n            'X-RateLimit-Limit': String(limiterResult.limit),\r\n            'X-RateLimit-Remaining': String(limiterResult.remaining),\r\n            'X-RateLimit-Reset': String(limiterResult.reset) \r\n          } \r\n        }\r\n      );\r\n    }\r\n    \r\n    const requestBody = await req.json();\r\n    \r\n    // Validate input data using Zod schema\r\n    const { data: validatedData, error: validationError } = validateAndSanitizeApiInput<ReflectieFormData>(\r\n      requestBody,\r\n      apiSchemas.reflectie\r\n    );\r\n    \r\n    if (validationError || !validatedData) {\r\n      return NextResponse.json(formatApiError(400, validationError || 'Invalid input data'), { status: 400 });\r\n    }\r\n    \r\n    // Create a properly typed reflectieData object\r\n    const reflectieData = {\r\n      datum: validatedData.datum, // Keep as string for database operations\r\n      stemming: validatedData.stemming,\r\n      notitie: validatedData.notitie,\r\n      pijn_score: validatedData.pijn_score,\r\n      vermoeidheid_score: validatedData.vermoeidheid_score\r\n    };\r\n    \r\n    const reflectieWithUserId = {\r\n      ...reflectieData,\r\n      user_id: user.id,\r\n      // Ensure created_at and updated_at are handled by DB or set here if needed\r\n    };\r\n    \r\n    // Check for existing reflectie for this user and date to decide on insert vs update\r\n    const { data: existingReflectie, error: checkError } = await supabase\r\n      .from('reflecties')\r\n      .select('id')\r\n      .eq('user_id', user.id)\r\n      .eq('datum', reflectieData.datum)\r\n      .maybeSingle(); // Use maybeSingle to not throw error if not found\r\n\r\n    if (checkError && checkError.code !== 'PGRST116') { // PGRST116 means 0 rows, which is fine for insert\r\n        throw checkError;\r\n    }\r\n    \r\n    let upsertedReflectie: Reflectie | null = null;\r\n\r\n    if (existingReflectie && existingReflectie.id) {\r\n      // Update\r\n      const { data, error } = await supabase\r\n        .from('reflecties')\r\n        .update({ ...reflectieWithUserId, updated_at: new Date().toISOString() }) // Add updated_at\r\n        .eq('id', existingReflectie.id)\r\n        .select()\r\n        .single();\r\n      if (error) throw error;\r\n      upsertedReflectie = data;\r\n    } else {\r\n      // Insert\r\n      const { data, error } = await supabase\r\n        .from('reflecties')\r\n        .insert([{ ...reflectieWithUserId, created_at: new Date().toISOString() }]) // Add created_at\r\n        .select()\r\n        .single();\r\n      if (error) throw error;\r\n      upsertedReflectie = data;\r\n    }\r\n\r\n    if (!upsertedReflectie) throw new Error(\"Failed to upsert reflectie or retrieve it.\");\r\n\r\n    // AI Validation\r\n    if (reflectieData.notitie || reflectieData.stemming || \r\n        reflectieData.pijn_score !== undefined || reflectieData.vermoeidheid_score !== undefined) {\r\n      // Convert string datum to Date for AI validation\r\n      const reflectieForAI: Partial<Reflectie> = {\r\n        ...reflectieWithUserId,\r\n        datum: new Date(reflectieWithUserId.datum)\r\n      };\r\n      const aiValidationMessage = await validateReflectieWithAI(reflectieForAI);\r\n      if (aiValidationMessage) {\r\n        const { data: updatedReflectieWithAI, error: aiUpdateError } = await supabase\r\n          .from('reflecties')\r\n          .update({ ai_validatie: aiValidationMessage })\r\n          .eq('id', upsertedReflectie.id)\r\n          .select()\r\n          .single();\r\n        \r\n        if (aiUpdateError) {\r\n          console.warn(`AI Validation: Failed to update reflectie ${upsertedReflectie.id}. Error: ${aiUpdateError.message}`);\r\n          return NextResponse.json(upsertedReflectie); // Return original if AI update fails\r\n        }\r\n        return NextResponse.json(updatedReflectieWithAI);\r\n      }\r\n    }\r\n    \r\n    return NextResponse.json(upsertedReflectie);\r\n  } catch (error) {\r\n    const errorInfo = handleSupabaseError(error, 'reflectie-opslaan');\r\n    return NextResponse.json(formatApiError(500, errorInfo.userMessage), { status: 500 });\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\api\\specialist-patienten\\[id]\\route.ts","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":57,"fix":{"range":[56,56],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/lib/error-handler` import should occur before import of `@/lib/supabase-server`","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":75,"fix":{"range":[58,231],"text":"import { formatApiError, handleSupabaseError } from '@/lib/error-handler';\r\nimport { getSupabaseRouteHandlerClient } from '@/lib/supabase-server'; // Corrected import path\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":6,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":6,"endColumn":29}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import { NextResponse, NextRequest } from 'next/server';\r\nimport { getSupabaseRouteHandlerClient } from '@/lib/supabase-server'; // Corrected import path\r\nimport { formatApiError, handleSupabaseError } from '@/lib/error-handler';\r\n\r\n// DELETE a specialist-patient relationship by its ID\r\nexport async function DELETE(\r\n  _request: NextRequest, // Prefixed request with underscore\r\n  { params }: { params: { id: string } }\r\n) {\r\n  const relationshipId = params.id;\r\n  const supabase = getSupabaseRouteHandlerClient();\r\n\r\n  try {\r\n    const { data: { user } } = await supabase.auth.getUser();\r\n    if (!user) {\r\n      return NextResponse.json(formatApiError(401, 'Niet geautoriseerd'), { status: 401 });\r\n    }\r\n\r\n    // Before deleting, verify the user is part of this relationship (either the specialist or the patient)\r\n    // to prevent unauthorized deletions.\r\n    const { data: relation, error: fetchError } = await supabase\r\n      .from('specialist_patienten')\r\n      .select('specialist_id, patient_id')\r\n      .eq('id', relationshipId)\r\n      .single();\r\n\r\n    if (fetchError || !relation) {\r\n      return NextResponse.json(formatApiError(404, 'Relatie niet gevonden.'), { status: 404 });\r\n    }\r\n\r\n    if (user.id !== relation.specialist_id && user.id !== relation.patient_id) {\r\n      return NextResponse.json(formatApiError(403, 'Geen toestemming om deze relatie te verwijderen.'), { status: 403 });\r\n    }\r\n    \r\n    const { error: deleteError } = await supabase\r\n      .from('specialist_patienten')\r\n      .delete()\r\n      .eq('id', relationshipId);\r\n    \r\n    if (deleteError) throw deleteError;\r\n    \r\n    return NextResponse.json({ message: 'Specialist-patiënt relatie succesvol verwijderd' });\r\n  } catch (error) {\r\n    const errorInfo = handleSupabaseError(error, 'specialist-patient-relatie-verwijderen');\r\n    return NextResponse.json(formatApiError(500, errorInfo.userMessage), { status: 500 });\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\api\\specialist-patienten\\route.ts","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":57,"fix":{"range":[56,56],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/lib/error-handler` import should occur before import of `@/lib/supabase-server`","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":75,"fix":{"range":[58,207],"text":"import { formatApiError, handleSupabaseError } from '@/lib/error-handler';\r\nimport { getSupabaseRouteHandlerClient } from '@/lib/supabase-server'; \r\n"}},{"ruleId":"import/order","severity":2,"message":"`@supabase/supabase-js` import should occur before import of `next/server`","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":54,"fix":{"range":[0,441],"text":"import { createClient } from '@supabase/supabase-js'; // Nodig voor service role client\r\nimport { NextResponse, NextRequest } from 'next/server';\r\nimport { getSupabaseRouteHandlerClient } from '@/lib/supabase-server'; \r\nimport { formatApiError, handleSupabaseError } from '@/lib/error-handler';\r\nimport { SpecialistPatient } from '@/types'; // Corrected: Removed unused Profile import\r\n\r\n// POST to create a specialist-patient relationship\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":10,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":10,"endColumn":27},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":11,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":11,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[550,656],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":53,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":53,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2909,2989],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":3,"fixableWarningCount":0,"source":"import { NextResponse, NextRequest } from 'next/server';\r\nimport { getSupabaseRouteHandlerClient } from '@/lib/supabase-server'; \r\nimport { formatApiError, handleSupabaseError } from '@/lib/error-handler';\r\nimport { SpecialistPatient } from '@/types'; // Corrected: Removed unused Profile import\r\n\r\n// POST to create a specialist-patient relationship\r\nimport { createClient } from '@supabase/supabase-js'; // Nodig voor service role client\r\n\r\n// POST to create a specialist-patient relationship\r\nexport async function POST(request: NextRequest) {\r\n  console.log('[API /api/specialist-patienten] POST request received. Body:', await request.clone().text()); // Log body as well\r\n  const supabaseUserClient = getSupabaseRouteHandlerClient(); // For current user auth\r\n\r\n  try {\r\n    const { data: { user } } = await supabaseUserClient.auth.getUser();\r\n    if (!user) {\r\n      return NextResponse.json(formatApiError(401, 'Niet geautoriseerd'), { status: 401 });\r\n    }\r\n\r\n    const { patient_email, specialist_id_to_add } = await request.json();\r\n    // patient_email: for specialist adding a patient by email\r\n    // specialist_id_to_add: for patient adding a specialist by their ID\r\n\r\n    let specialistId: string;\r\n    let patientId: string;\r\n\r\n    // Scenario 1: Specialist is adding a patient by email\r\n    if (patient_email && user.id) {\r\n      const { data: currentUserProfile } = await supabaseUserClient.from('profiles').select('type').eq('id', user.id).single();\r\n      if (currentUserProfile?.type !== 'specialist') {\r\n        return NextResponse.json(formatApiError(403, 'Alleen specialisten kunnen patiënten toevoegen via e-mail.'), { status: 403 });\r\n      }\r\n      specialistId = user.id;\r\n\r\n      // Step 1: Find user ID by email using the new RPC function\r\n      // Deze RPC zou SECURITY DEFINER moeten zijn en intern de nodige rechten hebben,\r\n      // of we moeten ook hier een service client gebruiken als het RLS op auth.users blokkeert.\r\n      // Voor nu gaan we ervan uit dat get_user_id_by_email werkt zoals bedoeld.\r\n      const { data: patientUserId, error: rpcError } = await supabaseUserClient\r\n        .rpc('get_user_id_by_email', { p_email: patient_email })\r\n        .single(); // Expecting a single UUID or null\r\n\r\n      if (rpcError) {\r\n        console.error(`[API SP-POST] Error calling RPC get_user_id_by_email for ${patient_email}:`, rpcError);\r\n        // Check if it's a \"function not found\" error vs. other errors\r\n        if (rpcError.code === 'PGRST202') { // Function not found\r\n             return NextResponse.json(formatApiError(500, 'Serverconfiguratiefout: functie voor e-mailopzoeking niet gevonden.'), { status: 500 });\r\n        }\r\n        return NextResponse.json(formatApiError(500, 'Fout bij het zoeken naar gebruiker via e-mail.'), { status: 500 });\r\n      }\r\n\r\n      if (!patientUserId) { // RPC returned null, meaning no user found with that email\r\n        console.log(`[API SP-POST] No user found with email ${patient_email} via RPC.`);\r\n        return NextResponse.json(formatApiError(404, 'Geen gebruiker gevonden met dit e-mailadres.'), { status: 404 });\r\n      }\r\n      \r\n      const potentialPatientId = patientUserId as string; // RPC returns the UUID directly\r\n\r\n      // Step 2: Verify this user is a 'patient' in the profiles table USING SERVICE ROLE CLIENT\r\n      // Dit is nodig omdat de ingelogde specialist mogelijk geen directe leesrechten heeft op het profiel\r\n      // van een willekeurige patiënt voordat er een koppeling is.\r\n      const supabaseService = createClient(\r\n        process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n        process.env.SUPABASE_SERVICE_ROLE_KEY!, // ESSENTIEEL: Service Role Key\r\n        { auth: { autoRefreshToken: false, persistSession: false } }\r\n      );\r\n\r\n      const { data: patientProfile, error: patientProfileError } = await supabaseService\r\n        .from('profiles')\r\n        .select('id, type') // Selecteer ook type voor de zekerheid, hoewel .eq() filtert\r\n        .eq('id', potentialPatientId)\r\n        .eq('type', 'patient')\r\n        .single();\r\n      \r\n      if (patientProfileError || !patientProfile) {\r\n        console.error(`[API SP-POST] User ${potentialPatientId} (email: ${patient_email}) not found as 'patient' in profiles table OR profile query error:`, patientProfileError);\r\n        return NextResponse.json(formatApiError(404, 'Patiëntprofiel niet gevonden of de gebruiker is geen patiënt.'), { status: 404 });\r\n      }\r\n      patientId = patientProfile.id;\r\n    } \r\n    // Scenario 2: Patient is adding a specialist by specialist_id\r\n    else if (specialist_id_to_add && user.id) {\r\n      // Huidige gebruiker (patiënt) moet eigen profiel kunnen lezen.\r\n      const { data: currentUserProfile } = await supabaseUserClient.from('profiles').select('type').eq('id', user.id).single();\r\n      if (currentUserProfile?.type !== 'patient') {\r\n        return NextResponse.json(formatApiError(403, 'Alleen patiënten kunnen specialisten toevoegen.'), { status: 403 });\r\n      }\r\n      patientId = user.id;\r\n      specialistId = specialist_id_to_add;\r\n\r\n      // Verify specialist_id_to_add is a valid specialist (kan met user client als specialisten hun eigen profiel publiek maken, anders service client)\r\n      // Voor nu, aanname dat specialist profiel basis info publiek is of leesbaar door ingelogde user.\r\n      const { data: specialistProfile, error: specialistError } = await supabaseUserClient\r\n        .from('profiles')\r\n        .select('id')\r\n        .eq('id', specialistId)\r\n        .eq('type', 'specialist')\r\n        .single();\r\n      if (specialistError || !specialistProfile) {\r\n        return NextResponse.json(formatApiError(404, 'Specialist profiel niet gevonden of gebruiker is geen specialist.'), { status: 404 });\r\n      }\r\n    } else {\r\n      return NextResponse.json(formatApiError(400, 'Ongeldige input. Geef patient_email (als specialist) of specialist_id_to_add (als patient).'), { status: 400 });\r\n    }\r\n\r\n    // Check if relationship already exists (kan met user client, RLS op specialist_patienten zou dit moeten toelaten)\r\n    const { data: existingRelation, error: checkError } = await supabaseUserClient\r\n      .from('specialist_patienten')\r\n      .select('id')\r\n      .eq('specialist_id', specialistId)\r\n      .eq('patient_id', patientId)\r\n      .maybeSingle();\r\n\r\n    if (checkError) {\r\n        console.error(`[API SP-POST] Error checking existing relation for S:${specialistId} P:${patientId}:`, checkError);\r\n        throw checkError;\r\n    }\r\n    if (existingRelation) {\r\n      return NextResponse.json(formatApiError(409, 'Deze specialist-patiënt relatie bestaat al.'), { status: 409 });\r\n    }\r\n\r\n    // Default toegangsrechten, kan later aangepast worden\r\n    const defaultToegangsrechten = ['view_tasks', 'view_logs'];\r\n\r\n    const { data, error: insertError } = await supabaseUserClient\r\n      .from('specialist_patienten')\r\n      .insert([{ specialist_id: specialistId, patient_id: patientId, toegangsrechten: defaultToegangsrechten }])\r\n      .select()\r\n      .single();\r\n\r\n    if (insertError) {\r\n        console.error(`[API SP-POST] Error inserting new relation for S:${specialistId} P:${patientId}:`, insertError);\r\n        throw insertError;\r\n    }\r\n\r\n    return NextResponse.json(data as SpecialistPatient, { status: 201 });\r\n\r\n  } catch (error) {\r\n    const errorInfo = handleSupabaseError(error, 'specialist-patient-relatie-creeren');\r\n    return NextResponse.json(formatApiError(500, errorInfo.userMessage), { status: 500 });\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\api\\task-logs\\[id]\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\api\\task-logs\\route.ts","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":57,"fix":{"range":[56,56],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/lib/error-handler` import should occur before import of `@/lib/supabase-server`","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":75,"fix":{"range":[58,206],"text":"import { formatApiError, handleSupabaseError } from '@/lib/error-handler';\r\nimport { getSupabaseRouteHandlerClient } from '@/lib/supabase-server';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/lib/monitoring/logger` import should occur before import of `@/lib/supabase-server`","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":50,"fix":{"range":[58,323],"text":"import { logger } from '@/lib/monitoring/logger';\r\nimport { getSupabaseRouteHandlerClient } from '@/lib/supabase-server';\r\nimport { formatApiError, handleSupabaseError } from '@/lib/error-handler';\r\nimport { TaskLog } from '@/types'; // Removed unused Task import\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/lib/security/rateLimit` import should occur before import of `@/lib/supabase-server`","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":71,"fix":{"range":[58,540],"text":"import { rateLimit, RateLimitResult } from '@/lib/security/rateLimit';\r\nimport { getSupabaseRouteHandlerClient } from '@/lib/supabase-server';\r\nimport { formatApiError, handleSupabaseError } from '@/lib/error-handler';\r\nimport { TaskLog } from '@/types'; // Removed unused Task import\r\nimport { logger } from '@/lib/monitoring/logger';\r\nimport { validateAndSanitizeApiInput, apiSchemas } from '@/utils/api-validation';\r\nimport { validateLogWithAI } from '@/utils/task-validation';\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":11,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":11,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":72,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":72,"endColumn":27}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":4,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { getSupabaseRouteHandlerClient } from '@/lib/supabase-server';\r\nimport { formatApiError, handleSupabaseError } from '@/lib/error-handler';\r\nimport { TaskLog } from '@/types'; // Removed unused Task import\r\nimport { logger } from '@/lib/monitoring/logger';\r\nimport { validateAndSanitizeApiInput, apiSchemas } from '@/utils/api-validation';\r\nimport { validateLogWithAI } from '@/utils/task-validation';\r\nimport { rateLimit, RateLimitResult } from '@/lib/security/rateLimit';\r\n\r\n\r\nexport async function GET(req: NextRequest) {\r\n  const supabase = getSupabaseRouteHandlerClient(); // Use centralized helper\r\n  \r\n  try {\r\n    const { data: { user }, error: getUserError } = await supabase.auth.getUser();\r\n    if (getUserError || !user) {\r\n      if (getUserError) console.error('[API TaskLogs GET] Error fetching user:', getUserError.message);\r\n      return NextResponse.json(formatApiError(401, 'Niet geautoriseerd'), { status: 401 });\r\n    }\r\n    \r\n    // Apply rate limiting based on user ID\r\n    const limiterResult: RateLimitResult = await rateLimit(`task_logs_get_${user.id}`, {\r\n      windowMs: 60 * 1000, // 1 minute\r\n      maxRequests: 30      // 30 requests per minute per user (higher limit for GET)\r\n    });\r\n    \r\n    if (!limiterResult.success) {\r\n      logger.warn(`Rate limit exceeded for user ${user.id} on task-logs GET endpoint`);\r\n      return NextResponse.json(\r\n        formatApiError(429, limiterResult.message || 'Te veel verzoeken, probeer het later opnieuw.'),\r\n        { \r\n          status: limiterResult.statusCode || 429, \r\n          headers: { \r\n            'Retry-After': String(limiterResult.reset),\r\n            'X-RateLimit-Limit': String(limiterResult.limit),\r\n            'X-RateLimit-Remaining': String(limiterResult.remaining),\r\n            'X-RateLimit-Reset': String(limiterResult.reset) \r\n          } \r\n        }\r\n      );\r\n    }\r\n    \r\n    const { searchParams } = new URL(req.url);\r\n    const taskId = searchParams.get('task_id');\r\n    const limit = parseInt(searchParams.get('limit') || '30'); // Default to more logs\r\n    const offset = parseInt(searchParams.get('offset') || '0');\r\n    const startDate = searchParams.get('start_date');\r\n    const endDate = searchParams.get('end_date');\r\n    \r\n    let query = supabase\r\n      .from('task_logs')\r\n      .select('*, tasks(titel, type)') // Join with tasks table\r\n      .eq('user_id', user.id)\r\n      .order('start_tijd', { ascending: false }) // Order by start_tijd\r\n      .limit(limit)\r\n      .range(offset, offset + limit - 1);\r\n    \r\n    if (taskId) query = query.eq('task_id', taskId);\r\n    if (startDate) query = query.gte('start_tijd', startDate);\r\n    if (endDate) query = query.lte('start_tijd', endDate); // Use start_tijd for date range\r\n    \r\n    const { data, error } = await query;\r\n    if (error) throw error;\r\n    \r\n    return NextResponse.json(data as TaskLog[]);\r\n  } catch (error) {\r\n    const errorInfo = handleSupabaseError(error, 'logs-ophalen');\r\n    return NextResponse.json(formatApiError(errorInfo.errorCode === 'PGRST116' ? 403 : 500, errorInfo.userMessage), { status: errorInfo.errorCode === 'PGRST116' ? 403 : 500 });\r\n  }\r\n}\r\n\r\nexport async function POST(req: NextRequest) {\r\n  const supabase = getSupabaseRouteHandlerClient(); // Use centralized helper\r\n  \r\n  try {\r\n    const { data: { user }, error: getUserError } = await supabase.auth.getUser();\r\n    if (getUserError || !user) {\r\n      if (getUserError) console.error('[API TaskLogs POST] Error fetching user:', getUserError.message);\r\n      return NextResponse.json(formatApiError(401, 'Niet geautoriseerd'), { status: 401 });\r\n    }\r\n    \r\n    // Apply rate limiting based on user ID\r\n    const limiterResult: RateLimitResult = await rateLimit(`task_logs_post_${user.id}`, {\r\n      windowMs: 60 * 1000, // 1 minute\r\n      maxRequests: 10      // 10 requests per minute per user\r\n    });\r\n    \r\n    if (!limiterResult.success) {\r\n      logger.warn(`Rate limit exceeded for user ${user.id} on task-logs POST endpoint`);\r\n      return NextResponse.json(\r\n        formatApiError(429, limiterResult.message || 'Te veel verzoeken, probeer het later opnieuw.'),\r\n        { \r\n          status: limiterResult.statusCode || 429, \r\n          headers: { \r\n            'Retry-After': String(limiterResult.reset),\r\n            'X-RateLimit-Limit': String(limiterResult.limit),\r\n            'X-RateLimit-Remaining': String(limiterResult.remaining),\r\n            'X-RateLimit-Reset': String(limiterResult.reset) \r\n          } \r\n        }\r\n      );\r\n    }\r\n    \r\n    const requestBody = await req.json();\r\n    \r\n    // Validate input data using Zod schema\r\n    const { data: validatedData, error: validationError } = validateAndSanitizeApiInput(\r\n      requestBody,\r\n      apiSchemas.taskLogCreate\r\n    );\r\n    \r\n    if (validationError || !validatedData) {\r\n      return NextResponse.json(formatApiError(400, validationError || 'Invalid input data'), { status: 400 });\r\n    }\r\n    \r\n    const logData = validatedData;\r\n    \r\n    const logWithUserId = { ...logData, user_id: user.id };\r\n    \r\n    const { data: insertedLog, error: insertError } = await supabase\r\n      .from('task_logs')\r\n      .insert([logWithUserId])\r\n      .select()\r\n      .single();\r\n    \r\n    if (insertError) throw insertError;\r\n    if (!insertedLog) throw new Error(\"Failed to insert log or retrieve it.\");\r\n\r\n\r\n    // Get the original request body for AI validation since it might contain fields not in the validation schema\r\n    const originalRequestBody = requestBody as Partial<TaskLog>;\r\n    \r\n    // AI Validation (optional, can be intensive)\r\n    if (originalRequestBody.pijn_score !== undefined || \r\n        originalRequestBody.vermoeidheid_score !== undefined || \r\n        originalRequestBody.energie_na !== undefined) {\r\n      const { data: taskData, error: taskError } = await supabase\r\n        .from('tasks')\r\n        .select('titel, type, duur')\r\n        .eq('id', logData.task_id)\r\n        .single();\r\n\r\n      if (taskError) {\r\n         console.warn(`AI Validation: Could not fetch task details for task_id ${logData.task_id}. Skipping AI validation. Error: ${taskError.message}`);\r\n      } else if (taskData) {\r\n        // Combine the validated data with the original request body for AI validation\r\n        const logDataForAI = {\r\n          ...originalRequestBody,\r\n          user_id: user.id,\r\n          task_id: logData.task_id\r\n        };\r\n        \r\n        const aiValidationMessage = await validateLogWithAI(logDataForAI, taskData);\r\n        if (aiValidationMessage) {\r\n          const { data: updatedLogWithAI, error: aiUpdateError } = await supabase\r\n            .from('task_logs')\r\n            .update({ ai_validatie: aiValidationMessage })\r\n            .eq('id', insertedLog.id)\r\n            .select()\r\n            .single();\r\n          \r\n          if (aiUpdateError) {\r\n            console.warn(`AI Validation: Failed to update log ${insertedLog.id} with AI insight. Error: ${aiUpdateError.message}`);\r\n            // Return the original inserted log if AI update fails\r\n            return NextResponse.json(insertedLog as TaskLog);\r\n          }\r\n          return NextResponse.json(updatedLogWithAI as TaskLog);\r\n        }\r\n      }\r\n    }\r\n    \r\n    return NextResponse.json(insertedLog as TaskLog);\r\n  } catch (error) {\r\n    const errorInfo = handleSupabaseError(error, 'log-opslaan');\r\n    return NextResponse.json(formatApiError(500, errorInfo.userMessage), { status: 500 });\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\api\\tasks\\[id]\\route.ts","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":57,"fix":{"range":[245,245],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/lib/error-handler` import should occur before import of `@/lib/supabase-server`","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":75,"fix":{"range":[247,420],"text":"import { formatApiError, handleSupabaseError } from '@/lib/error-handler';\r\nimport { getSupabaseRouteHandlerClient } from '@/lib/supabase-server'; // Corrected import path\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":8,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":8,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":64,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":64,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'taskUserId' is assigned a value but never used.","line":87,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":87,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'taskSpecialistId' is assigned a value but never used.","line":87,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":87,"endColumn":65},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":129,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":129,"endColumn":26}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":2,"fixableWarningCount":0,"source":"// import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'; // Replaced by centralized helper\r\n// import { cookies } from 'next/headers'; // Handled by centralized helper\r\nimport { NextResponse, NextRequest } from 'next/server';\r\nimport { getSupabaseRouteHandlerClient } from '@/lib/supabase-server'; // Corrected import path\r\nimport { formatApiError, handleSupabaseError } from '@/lib/error-handler';\r\nimport { Task } from '@/types'; // Assuming Task type\r\n\r\nexport async function DELETE(\r\n  request: NextRequest, // Use NextRequest for consistency\r\n  { params }: { params: { id: string } }\r\n) {\r\n  const taskId = params.id;\r\n  const supabase = getSupabaseRouteHandlerClient();\r\n  \r\n  try {\r\n    const { data: { user } } = await supabase.auth.getUser();\r\n    if (!user) {\r\n      return NextResponse.json(formatApiError(401, 'Niet geautoriseerd'), { status: 401 });\r\n    }\r\n    \r\n    // Delete associated task_logs first to avoid foreign key constraint issues\r\n    const { error: logDeleteError } = await supabase\r\n      .from('task_logs')\r\n      .delete()\r\n      .eq('task_id', taskId)\r\n      .eq('user_id', user.id); // Ensure user context for log deletion as well\r\n\r\n    if (logDeleteError) {\r\n        // Log the error but don't necessarily block task deletion if logs don't exist or RLS prevents\r\n        console.warn(`Warning deleting logs for task ${taskId}: ${logDeleteError.message}`);\r\n    }\r\n\r\n    // Een specialist mag een taak verwijderen die hij/zij heeft aangemaakt.\r\n    // Een patiënt mag een taak verwijderen die aan hem/haar is toegewezen (user_id match).\r\n    // De RLS policy zal de uiteindelijke permissie bepalen.\r\n    // We proberen te verwijderen op basis van task ID. De RLS checkt of de user.id\r\n    // ofwel de user_id van de taak is, of de specialist_id van de taak.\r\n\r\n    const { error: taskDeleteError } = await supabase\r\n      .from('tasks')\r\n      .delete()\r\n      .eq('id', taskId); \r\n      // De RLS policy moet nu de permissie afdwingen.\r\n      // De .eq('user_id', user.id) of .eq('specialist_id', user.id) is niet strikt nodig hier\r\n      // als de RLS policies correct zijn, maar kan als extra veiligheidslaag.\r\n      // Voor nu vertrouwen we op RLS.\r\n\r\n    if (taskDeleteError) {\r\n      // Specifieke check voor RLS violation (kan als 403 of 404 komen afhankelijk van Supabase versie/config)\r\n      if (taskDeleteError.code === 'PGRST000' || taskDeleteError.code === 'PGRST116' || taskDeleteError.details?.toLowerCase().includes('rls')) {\r\n         console.warn(`RLS violation or task not found for delete: ${taskId}, user: ${user.id}`);\r\n         return NextResponse.json(formatApiError(403, 'Geen permissie om deze taak te verwijderen of taak niet gevonden.'), { status: 403 });\r\n      }\r\n      throw taskDeleteError;\r\n    }\r\n    \r\n    return NextResponse.json({ message: 'Taak succesvol verwijderd' }); // Return 200 OK with success message\r\n  } catch (error) {\r\n    const errorInfo = handleSupabaseError(error, 'taak-verwijderen');\r\n    return NextResponse.json(formatApiError(500, errorInfo.userMessage), { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function PUT(\r\n  request: NextRequest, // Use NextRequest\r\n  { params }: { params: { id: string } }\r\n) {\r\n  const taskId = params.id;\r\n  const supabase = getSupabaseRouteHandlerClient();\r\n\r\n  try {\r\n    const { data: { user } } = await supabase.auth.getUser();\r\n    if (!user) {\r\n      return NextResponse.json(formatApiError(401, 'Niet geautoriseerd'), { status: 401 });\r\n    }\r\n\r\n    const taskData: Partial<Task> = await request.json();\r\n\r\n    // Basic validation\r\n    if (!taskData.titel && !taskData.beschrijving && taskData.duur === undefined) { // Check if any actual data is sent\r\n        return NextResponse.json(formatApiError(400, 'Geen data om bij te werken'), { status: 400 });\r\n    }\r\n    \r\n    // Verwijder user_id en specialist_id uit de taskData om te voorkomen dat deze per ongeluk worden gewijzigd.\r\n    // De eigenaar (user_id) van een taak zou normaal gesproken niet moeten veranderen.\r\n    // De specialist_id (aanmaker) zou ook niet moeten veranderen.\r\n    const { user_id: taskUserId, specialist_id: taskSpecialistId, ...editableTaskData } = taskData;\r\n\r\n    const updatePayload = { ...editableTaskData }; // Alleen de bewerkbare velden\r\n\r\n    // De RLS policy moet afdwingen dat alleen de toegewezen specialist (of admin) kan updaten.\r\n    // De query hieronder voegt een extra check toe dat de ingelogde gebruiker de specialist_id is.\r\n    // De RLS policy (USING auth.uid() = user_id WITH CHECK auth.uid() = user_id) \r\n    // zou moeten afdwingen dat alleen de eigenaar (patiënt) de taak kan updaten.\r\n    // Als een specialist een taak moet kunnen updaten die hij heeft aangemaakt voor een patiënt,\r\n    // dan moet de RLS UPDATE policy worden uitgebreid, bijv.:\r\n    // USING (auth.uid() = user_id OR auth.uid() = specialist_id)\r\n    // WITH CHECK (auth.uid() = user_id OR auth.uid() = specialist_id)\r\n    // Voor nu gaan we ervan uit dat alleen de patiënt (user_id) zijn/haar taken mag bijwerken.\r\n    const { data, error } = await supabase\r\n      .from('tasks')\r\n      .update(updatePayload)\r\n      .eq('id', taskId)\r\n      // .eq('user_id', user.id) // Deze check wordt door RLS afgehandeld.\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      // error.code 'PGRST204' (No Content) betekent dat de WHERE clause (id + RLS) geen rij vond.\r\n      if (error.code === 'PGRST204') { \r\n         console.warn(`Task not found or RLS prevented update for task ${taskId}, user: ${user.id}`);\r\n         return NextResponse.json(formatApiError(404, 'Taak niet gevonden of geen permissie om bij te werken.'), { status: 404 });\r\n      }\r\n      // Andere errors (PGRST000, PGRST116 kunnen ook wijzen op RLS/niet gevonden)\r\n      if (error.details?.toLowerCase().includes('rls') || error.code === 'PGRST116') {\r\n         console.warn(`RLS violation or task not found for update: ${taskId}, user: ${user.id}. Error: ${error.message}`);\r\n         return NextResponse.json(formatApiError(403, 'Geen permissie om deze taak bij te werken of taak niet gevonden.'), { status: 403 });\r\n      }\r\n      throw error;\r\n    }\r\n\r\n    return NextResponse.json(data as Task);\r\n  } catch (error) {\r\n    const errorInfo = handleSupabaseError(error, 'taak-bijwerken');\r\n    return NextResponse.json(formatApiError(500, errorInfo.userMessage), { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function GET(\r\n  request: NextRequest, // Use NextRequest\r\n  { params }: { params: { id: string } }\r\n) {\r\n  const taskId = params.id;\r\n  const supabase = getSupabaseRouteHandlerClient();\r\n\r\n  try {\r\n    const { data: { user } } = await supabase.auth.getUser();\r\n    if (!user) {\r\n      return NextResponse.json(formatApiError(401, 'Niet geautoriseerd'), { status: 401 });\r\n    }\r\n\r\n    const { data, error } = await supabase\r\n      .from('tasks')\r\n      .select<'*', Task>('*') // Ensure Task type is used\r\n      .eq('id', taskId)\r\n      .single();\r\n\r\n    if (error) {\r\n      if (error.code === 'PGRST116') { // Not found or RLS violation\r\n         return NextResponse.json(formatApiError(404, 'Taak niet gevonden of geen toegang.'), { status: 404 });\r\n      }\r\n      throw error; // Other errors\r\n    }\r\n\r\n    if (!data) { // Should be caught by single() error PGRST116 if not found\r\n      return NextResponse.json(formatApiError(404, 'Taak niet gevonden'), { status: 404 });\r\n    }\r\n\r\n    // RLS should handle if user can access this task.\r\n    // If additional checks are needed (e.g. specialist access), they can be added here.\r\n    // For now, assume RLS is primary guard. If data is returned, user has access.\r\n    // if (data.user_id !== user.id /* && check specialist logic if any */) {\r\n    //   return NextResponse.json(formatApiError(403, 'Geen toegang tot deze taak'), { status: 403 });\r\n    // }\r\n\r\n    return NextResponse.json(data);\r\n  } catch (error) {\r\n    const errorInfo = handleSupabaseError(error, 'taak-ophalen');\r\n    return NextResponse.json(formatApiError(500, errorInfo.userMessage), { status: 500 });\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\api\\tasks\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\auth-test\\layout.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":3,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":3,"endColumn":39}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import DashboardLayout from '@/components/layout/DashboardLayout';\r\n\r\nexport default function AuthTestLayout({\r\n  children,\r\n}: {\r\n  children: React.ReactNode;\r\n}) {\r\n  return <DashboardLayout>{children}</DashboardLayout>;\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\auth-test\\page.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":6,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":6,"endColumn":43},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":29,"column":11,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":29,"endColumn":46,"fix":{"range":[954,977],"text":"mb-4 text-2xl font-bold"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":31,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":31,"endColumn":57,"fix":{"range":[1040,1073],"text":"rounded-lg bg-white p-6 shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":32,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":32,"endColumn":51,"fix":{"range":[1100,1126],"text":"mb-4 text-xl font-semibold"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":35,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":35,"endColumn":50,"fix":{"range":[1217,1241],"text":"font-medium text-red-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":38,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":38,"endColumn":59,"fix":{"range":[1357,1388],"text":"mb-2 font-medium text-green-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":39,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":39,"endColumn":60,"fix":{"range":[1443,1474],"text":"mb-2 mt-4 text-lg font-semibold"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":40,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":40,"endColumn":79,"fix":{"range":[1524,1573],"text":"max-h-60 overflow-auto rounded-md bg-gray-100 p-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":43,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":43,"endColumn":60,"fix":{"range":[1671,1702],"text":"mb-2 mt-4 text-lg font-semibold"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":45,"column":20,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":45,"endColumn":81,"fix":{"range":[1783,1832],"text":"max-h-60 overflow-auto rounded-md bg-gray-100 p-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":53,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":53,"endColumn":50,"fix":{"range":[2097,2121],"text":"font-medium text-red-600"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":10,"source":"import { getSupabaseServerComponentClient } from '@/lib/supabase-server'; // Updated import\r\n\r\nexport const dynamic = 'force-dynamic';\r\nexport const revalidate = 0; // Disable caching\r\n\r\nexport default async function AuthTestPage() {\r\n  const supabase = getSupabaseServerComponentClient(); // Use the new standardized client\r\n  \r\n  // Controleer of gebruiker is ingelogd\r\n  const { data: { user }, error: getUserError } = await supabase.auth.getUser();\r\n  \r\n  // Fetch profile if user exists\r\n  let profile = null;\r\n  if (user && !getUserError) {\r\n    const { data: profileData, error: profileError } = await supabase\r\n      .from('profiles')\r\n      .select('*')\r\n      .eq('id', user.id)\r\n      .single();\r\n    if (profileError) {\r\n      console.error('Error fetching profile in AuthTestPage:', profileError);\r\n    } else {\r\n      profile = profileData;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mx-auto px-4 py-8\">\r\n      <h1 className=\"text-2xl font-bold mb-4\">Authentication Test Page</h1>\r\n      \r\n      <div className=\"bg-white rounded-lg shadow-md p-6\">\r\n        <h2 className=\"text-xl font-semibold mb-4\">User & Profile Status</h2>\r\n        \r\n        {getUserError ? (\r\n          <p className=\"text-red-600 font-medium\">Error fetching user: {getUserError.message}</p>\r\n        ) : user ? (\r\n          <div>\r\n            <p className=\"text-green-600 font-medium mb-2\">✅ Authenticated User</p>\r\n            <h3 className=\"text-lg font-semibold mt-4 mb-2\">User Details:</h3>\r\n            <pre className=\"bg-gray-100 p-4 rounded-md overflow-auto max-h-60\">\r\n              {JSON.stringify(user, null, 2)}\r\n            </pre>\r\n            <h3 className=\"text-lg font-semibold mt-4 mb-2\">Profile Details:</h3>\r\n            {profile ? (\r\n              <pre className=\"bg-gray-100 p-4 rounded-md overflow-auto max-h-60\">\r\n                {JSON.stringify(profile, null, 2)}\r\n              </pre>\r\n            ) : (\r\n              <p className=\"text-orange-500\">Profile not found or error fetching profile.</p>\r\n            )}\r\n          </div>\r\n        ) : (\r\n          <p className=\"text-red-600 font-medium\">❌ Not authenticated</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\auth\\login\\page.tsx","messages":[{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":10,"column":10,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":10,"endColumn":162,"fix":{"range":[291,431],"text":"flex min-h-screen flex-col items-center justify-center bg-gradient-to-br from-purple-50 via-pink-50 to-indigo-100 px-4 py-12 sm:px-6 lg:px-8"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":11,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":11,"endColumn":92,"fix":{"range":[457,525],"text":"w-full max-w-md space-y-8 rounded-xl bg-white p-8 shadow-2xl sm:p-10"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":13,"column":26,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":13,"endColumn":92,"fix":{"range":[580,634],"text":"mb-6 inline-block transition-transform hover:scale-105"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":23,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":23,"endColumn":98,"fix":{"range":[1057,1128],"text":"text-center text-2xl font-bold tracking-tight text-gray-900 sm:text-3xl"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":28,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":28,"endColumn":50,"fix":{"range":[1326,1350],"text":"mt-6 text-center text-sm"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":5,"source":"'use client';\r\n\r\nimport Image from 'next/image'; // Import Next.js Image component\r\nimport Link from 'next/link';\r\n\r\nimport AuthFormContainer from \"@/containers/auth/AuthFormContainer\"; // Updated import\r\n\r\nexport default function LoginPage(): JSX.Element {\r\n  return (\r\n    <div className=\"flex flex-col items-center justify-center min-h-screen px-4 py-12 bg-gradient-to-br from-purple-50 via-pink-50 to-indigo-100 sm:px-6 lg:px-8\">\r\n      <div className=\"w-full max-w-md p-8 space-y-8 bg-white shadow-2xl rounded-xl sm:p-10\">\r\n        <div>\r\n          <Link href=\"/\" className=\"inline-block mb-6 transition-transform hover:scale-105\">\r\n            <Image\r\n              className=\"mx-auto\"\r\n              src=\"/logo.png\" // Ensure this logo exists in /public\r\n              alt=\"FibroGuardian Pro\"\r\n              width={56} // Example width, adjust as needed (sm:h-14 is 56px)\r\n              height={56} // Example height, adjust to maintain aspect ratio\r\n              priority // If it's LCP\r\n            />\r\n          </Link>\r\n          <h2 className=\"text-2xl font-bold tracking-tight text-center text-gray-900 sm:text-3xl\">\r\n            Inloggen op uw account\r\n          </h2>\r\n        </div>\r\n        <AuthFormContainer initialIsLoginMode={true} /> {/* Use container and updated prop name */}\r\n        <div className=\"mt-6 text-sm text-center\">\r\n          <Link href=\"/auth/forgot-password\" className=\"font-medium text-purple-600 hover:text-purple-500 hover:underline\">\r\n              Wachtwoord vergeten?\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\auth\\register\\page.tsx","messages":[{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":10,"column":10,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":10,"endColumn":162,"fix":{"range":[294,434],"text":"flex min-h-screen flex-col items-center justify-center bg-gradient-to-br from-purple-50 via-pink-50 to-indigo-100 px-4 py-12 sm:px-6 lg:px-8"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":11,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":11,"endColumn":92,"fix":{"range":[460,528],"text":"w-full max-w-md space-y-8 rounded-xl bg-white p-8 shadow-2xl sm:p-10"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":13,"column":26,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":13,"endColumn":92,"fix":{"range":[583,637],"text":"mb-6 inline-block transition-transform hover:scale-105"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":23,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":23,"endColumn":98,"fix":{"range":[1060,1131],"text":"text-center text-2xl font-bold tracking-tight text-gray-900 sm:text-3xl"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":"'use client';\r\n\r\nimport Image from 'next/image'; // Import Next.js Image component\r\nimport Link from 'next/link';\r\n\r\nimport AuthFormContainer from \"@/containers/auth/AuthFormContainer\"; // Updated import\r\n\r\nexport default function RegisterPage(): JSX.Element {\r\n  return (\r\n    <div className=\"flex flex-col items-center justify-center min-h-screen px-4 py-12 bg-gradient-to-br from-purple-50 via-pink-50 to-indigo-100 sm:px-6 lg:px-8\">\r\n      <div className=\"w-full max-w-md p-8 space-y-8 bg-white shadow-2xl rounded-xl sm:p-10\">\r\n        <div>\r\n          <Link href=\"/\" className=\"inline-block mb-6 transition-transform hover:scale-105\">\r\n            <Image\r\n              className=\"mx-auto\"\r\n              src=\"/logo.png\" // Ensure this logo exists in /public\r\n              alt=\"FibroGuardian Pro\"\r\n              width={56} // Example width, adjust as needed (sm:h-14 is 56px)\r\n              height={56} // Example height, adjust to maintain aspect ratio\r\n              priority // If it's LCP\r\n            />\r\n          </Link>\r\n          <h2 className=\"text-2xl font-bold tracking-tight text-center text-gray-900 sm:text-3xl\">\r\n            Maak een nieuw account aan\r\n          </h2>\r\n        </div>\r\n        {/* Explicitly set to register mode */}\r\n        <AuthFormContainer initialIsLoginMode={false} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\dashboard\\dashboard-client.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":13,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":13,"endColumn":40}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { Suspense } from 'react';\r\n\r\nimport { SkeletonLoader } from '@/components/ui/SkeletonLoader';\r\nimport AIAssistantContainer from '@/containers/ai/AIAssistantContainer';\r\nimport AIRecommendationsContainer from '@/containers/ai/AIRecommendationsContainer';\r\n\r\ninterface DashboardClientProps {\r\n  userRole?: string;\r\n}\r\n\r\nexport default function DashboardClient({ userRole = 'patient' }: DashboardClientProps) {\r\n  return (\r\n    <div className=\"mt-8\">\r\n      {userRole === 'patient' && (\r\n        <>\r\n          <Suspense fallback={<SkeletonLoader count={1} type=\"card\" />}>\r\n            <AIAssistantContainer className=\"mb-8\" />\r\n          </Suspense>\r\n          \r\n          <Suspense fallback={<SkeletonLoader count={3} type=\"card\" />}>\r\n            <AIRecommendationsContainer \r\n              limit={3} \r\n              title=\"Persoonlijke Aanbevelingen\" \r\n              className=\"mb-8\"\r\n            />\r\n          </Suspense>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\dashboard\\error.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":4,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":4,"endColumn":30},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":17,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":17,"endColumn":48,"fix":{"range":[350,374],"text":"rounded-md bg-red-50 p-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":22,"column":11,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":22,"endColumn":73,"fix":{"range":[631,681],"text":"mt-4 rounded-md bg-purple-600 px-4 py-2 text-white"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"'use client';\r\nimport { useEffect } from 'react';\r\n\r\nexport default function Error({\r\n  error,\r\n  reset,\r\n}: {\r\n  error: Error & { digest?: string };\r\n  reset: () => void;\r\n}) {\r\n  useEffect(() => {\r\n    console.error('Dashboard error:', error);\r\n  }, [error]);\r\n\r\n  return (\r\n    <div className=\"container mx-auto px-4 py-8\">\r\n      <div className=\"bg-red-50 p-4 rounded-md\">\r\n        <h2 className=\"text-lg font-semibold text-red-700\">Er is een fout opgetreden</h2>\r\n        <p className=\"text-red-600\">Probeer opnieuw of ga terug naar het dashboard.</p>\r\n        <button\r\n          onClick={() => reset()}\r\n          className=\"mt-4 px-4 py-2 bg-purple-600 text-white rounded-md\"\r\n        >\r\n          Probeer opnieuw\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\dashboard\\layout.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":74,"fix":{"range":[91,91],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":44,"fix":{"range":[136,136],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`next/navigation` import should occur before import of `@/lib/supabase-server`","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":44,"fix":{"range":[0,138],"text":"import { redirect } from 'next/navigation';\r\nimport { getSupabaseServerComponentClient } from '@/lib/supabase-server'; // Updated import\r\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":35,"fix":{"range":[172,172],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`react` import should occur before import of `@/lib/supabase-server`","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":35,"fix":{"range":[0,174],"text":"import { ReactNode } from 'react';\r\nimport { getSupabaseServerComponentClient } from '@/lib/supabase-server'; // Updated import\r\nimport { redirect } from 'next/navigation';\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":9,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":9,"endColumn":46},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":26,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":26,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[988,1068],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":5,"fixableWarningCount":0,"source":"import { getSupabaseServerComponentClient } from '@/lib/supabase-server'; // Updated import\r\nimport { redirect } from 'next/navigation';\r\nimport { ReactNode } from 'react';\r\nimport { handleServerError } from '@/utils/error-handling'; // Import handleServerError\r\n// Sidebar and Topbar are part of the client-side DashboardLayout, not needed here.\r\n// import Sidebar from '@/components/layout/Sidebar'; \r\n// import Topbar from '@/components/layout/Topbar';   \r\n\r\nexport default async function DashboardLayout({\r\n  children,\r\n}: {\r\n  children: ReactNode\r\n}) {\r\n  const supabase = getSupabaseServerComponentClient(); // Use the new standardized client\r\n  \r\n  // Server-side auth verificatie\r\n  const { data: { user }, error } = await supabase.auth.getUser(); // Use getUser()\r\n  \r\n  if (error) {\r\n    // Use handleServerError for consistent error handling\r\n    return handleServerError(error, '/auth/login'); \r\n  }\r\n\r\n  if (!user) {\r\n    // Als geen gebruiker, redirect hard naar login\r\n    console.log(\"No user session found in dashboard layout, redirecting to login.\");\r\n    // redirect will throw an error, so no need to return its result\r\n    redirect('/auth/login'); \r\n  }\r\n\r\n  // If we are here, user is authenticated.\r\n  // The visual structure (Sidebar, Topbar, main content area)\r\n  // is expected to be handled by the 'components/layout/DashboardLayout.tsx'\r\n  // which is used by the individual page components passed as {children}.\r\n  // So, this server layout primarily handles the auth check.\r\n  return <>{children}</>;\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\dashboard\\page.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be no empty line within import group","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":53,"fix":{"range":[54,56],"text":""}},{"ruleId":"import/order","severity":2,"message":"`@/types` import should occur after import of `@/lib/supabase-server`","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":53,"fix":{"range":[0,700],"text":"\r\nimport AdminStatsCards from '@/components/admin/AdminStatsCards';\r\nimport RecentUsersTable from '@/components/admin/RecentUsersTable';\r\nimport HealthMetrics from '@/components/dashboard/HealthMetrics';\r\nimport QuickActions from '@/components/dashboard/QuickActions';\r\nimport SessionStatus from '@/components/debug/SessionStatus';\r\nimport DashboardLayout from '@/components/layout/DashboardLayout';\r\nimport { AIInsightsContainer } from '@/containers/dashboard/AIInsightsContainer';\r\nimport { DailyPlannerContainer } from '@/containers/dashboard/DailyPlannerContainer';\r\nimport { getSupabaseServerComponentClient } from '@/lib/supabase-server';\r\nimport { TaskLog, Inzicht, Profile } from '@/types';\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":15,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":15,"endColumn":40},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":40,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":40,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1471,1595],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":135,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":135,"endColumn":73,"fix":{"range":[4930,4976],"text":"text-2xl font-bold text-purple-800 md:text-3xl"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":150,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":150,"endColumn":67,"fix":{"range":[5464,5501],"text":"grid grid-cols-1 gap-6 lg:grid-cols-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":174,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":174,"endColumn":67,"fix":{"range":[6229,6266],"text":"grid grid-cols-1 gap-6 lg:grid-cols-2"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":176,"column":22,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":176,"endColumn":67,"fix":{"range":[6375,6408],"text":"rounded-lg bg-white p-6 shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":177,"column":23,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":177,"endColumn":61,"fix":{"range":[6445,6471],"text":"mb-4 text-xl font-semibold"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":181,"column":42,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":181,"endColumn":92,"fix":{"range":[6717,6755],"text":"border-l-4 border-purple-500 py-2 pl-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":183,"column":30,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":183,"endColumn":68,"fix":{"range":[6882,6908],"text":"mt-1 text-sm text-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":196,"column":22,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":196,"endColumn":67,"fix":{"range":[7417,7450],"text":"rounded-lg bg-white p-6 shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":197,"column":23,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":197,"endColumn":61,"fix":{"range":[7487,7513],"text":"mb-4 text-xl font-semibold"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":198,"column":24,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":198,"endColumn":73,"fix":{"range":[7569,7606],"text":"grid grid-cols-1 gap-4 md:grid-cols-2"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":199,"column":55,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":199,"endColumn":133,"fix":{"range":[7675,7741],"text":"flex items-center rounded-lg bg-purple-100 p-4 hover:bg-purple-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":200,"column":29,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":200,"endColumn":68,"fix":{"range":[7784,7811],"text":"font-medium text-purple-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":202,"column":51,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":202,"endColumn":125,"fix":{"range":[7927,7989],"text":"flex items-center rounded-lg bg-blue-100 p-4 hover:bg-blue-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":203,"column":29,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":203,"endColumn":66,"fix":{"range":[8032,8057],"text":"font-medium text-blue-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":219,"column":20,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":219,"endColumn":65,"fix":{"range":[8508,8541],"text":"rounded-lg bg-white p-6 shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":220,"column":21,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":220,"endColumn":59,"fix":{"range":[8576,8602],"text":"mb-4 text-xl font-semibold"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":226,"column":20,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":226,"endColumn":65,"fix":{"range":[8817,8850],"text":"rounded-lg bg-white p-6 shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":227,"column":21,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":227,"endColumn":59,"fix":{"range":[8885,8911],"text":"mb-4 text-xl font-semibold"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":228,"column":22,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":228,"endColumn":71,"fix":{"range":[8968,9005],"text":"grid grid-cols-1 gap-4 md:grid-cols-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":229,"column":42,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":229,"endColumn":120,"fix":{"range":[9061,9127],"text":"flex items-center rounded-lg bg-purple-100 p-4 hover:bg-purple-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":230,"column":27,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":230,"endColumn":66,"fix":{"range":[9168,9195],"text":"font-medium text-purple-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":232,"column":50,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":232,"endColumn":124,"fix":{"range":[9306,9368],"text":"flex items-center rounded-lg bg-blue-100 p-4 hover:bg-blue-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":233,"column":27,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":233,"endColumn":64,"fix":{"range":[9409,9434],"text":"font-medium text-blue-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":235,"column":47,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":235,"endColumn":123,"fix":{"range":[9544,9608],"text":"flex items-center rounded-lg bg-green-100 p-4 hover:bg-green-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":236,"column":27,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":236,"endColumn":65,"fix":{"range":[9649,9675],"text":"font-medium text-green-800"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":27,"fixableErrorCount":2,"fixableWarningCount":25,"source":"import { TaskLog, Inzicht, Profile } from '@/types';\r\n\r\nimport AdminStatsCards from '@/components/admin/AdminStatsCards';\r\nimport RecentUsersTable from '@/components/admin/RecentUsersTable';\r\nimport HealthMetrics from '@/components/dashboard/HealthMetrics';\r\nimport QuickActions from '@/components/dashboard/QuickActions';\r\nimport SessionStatus from '@/components/debug/SessionStatus';\r\nimport DashboardLayout from '@/components/layout/DashboardLayout';\r\nimport { AIInsightsContainer } from '@/containers/dashboard/AIInsightsContainer';\r\nimport { DailyPlannerContainer } from '@/containers/dashboard/DailyPlannerContainer';\r\nimport { getSupabaseServerComponentClient } from '@/lib/supabase-server';\r\n\r\nimport DashboardClient from './dashboard-client';\r\n\r\nexport default async function Dashboard() {\r\n  const supabase = getSupabaseServerComponentClient();\r\n  \r\n  // Get user data\r\n  const { data: { user }, error: userError } = await supabase.auth.getUser();\r\n  \r\n  if (userError || !user) {\r\n    console.error('Dashboard Page: User not found or error fetching user.', userError);\r\n    return null;\r\n  }\r\n  \r\n  // Fetch user profile to determine role\r\n  const { data: profile, error: profileError } = await supabase\r\n    .from('profiles')\r\n    .select('*')\r\n    .eq('id', user.id)\r\n    .single();\r\n  \r\n  if (profileError) {\r\n    console.error('Error fetching user profile:', profileError);\r\n    return null;\r\n  }\r\n  \r\n  const userRole = profile?.type || 'patient';\r\n  \r\n  console.log('[Dashboard Page Server Component] User ID:', user?.id, 'Profile Data:', profile, 'Determined Role:', userRole);\r\n\r\n  // Fetch data based on user role\r\n  let logsData: TaskLog[] = []; // Specifieke type voor task logs\r\n  let insightsData: Inzicht[] = []; // Specifieke type voor inzichten\r\n  let recentUsersData: Profile[] = []; // Specifieke type voor gebruikersprofielen\r\n  let statsData: { totalUsers: number; totalTasks: number; totalLogs: number } = { // Voldoet aan AdminStats\r\n    totalUsers: 0,\r\n    totalTasks: 0,\r\n    totalLogs: 0,\r\n  };\r\n  \r\n  if (userRole === 'patient') {\r\n    // Fetch task logs for health metrics\r\n    const { data: logs, error: logsError } = await supabase\r\n      .from('task_logs')\r\n      .select('*')\r\n      .eq('user_id', user.id)\r\n      .order('start_tijd', { ascending: false })\r\n      .limit(30);\r\n    \r\n    if (logsError) {\r\n      console.error('Error fetching task logs:', logsError);\r\n    } else {\r\n      logsData = logs || [];\r\n    }\r\n    \r\n    // Fetch insights for AI insights\r\n    const { data: insights, error: insightsError } = await supabase\r\n      .from('inzichten')\r\n      .select('*')\r\n      .eq('user_id', user.id)\r\n      .order('created_at', { ascending: false })\r\n      .limit(3);\r\n    \r\n    if (insightsError) {\r\n      console.error('Error fetching insights:', insightsError);\r\n    } else {\r\n      insightsData = insights || [];\r\n    }\r\n  } else if (userRole === 'admin') {\r\n    // Fetch recent users for admin dashboard\r\n    const { data: users, error: usersError } = await supabase\r\n      .from('profiles')\r\n      .select('*')\r\n      .order('created_at', { ascending: false })\r\n      .limit(10);\r\n    \r\n    if (usersError) {\r\n      console.error('Error fetching recent users:', usersError);\r\n    } else {\r\n      recentUsersData = users || [];\r\n    }\r\n    \r\n    // Fetch stats for admin dashboard\r\n    // This is a placeholder - in a real app, you would fetch actual stats\r\n    // Ensure this matches the AdminStats interface from AdminStatsCards.tsx\r\n    statsData = {\r\n      totalUsers: recentUsersData.length,\r\n      totalTasks: 120, // Placeholder\r\n      totalLogs: 0,    // Placeholder - Add actual logic to fetch this\r\n    };\r\n  } else if (userRole === 'specialist') {\r\n    // Fetch patient insights for specialist dashboard\r\n    const { data: patientConnections, error: connectionsError } = await supabase\r\n      .from('specialist_patienten') // Corrected table name\r\n      .select('patient_id')\r\n      .eq('specialist_id', user.id);\r\n    \r\n    if (connectionsError) {\r\n      console.error('Error fetching patient connections:', connectionsError);\r\n    } else if (patientConnections && patientConnections.length > 0) {\r\n      const patientIds = patientConnections.map(conn => conn.patient_id);\r\n      \r\n      // Fetch insights for all patients\r\n      const { data: insights, error: insightsError } = await supabase\r\n        .from('inzichten')\r\n        .select('*')\r\n        .in('user_id', patientIds)\r\n        .order('created_at', { ascending: false })\r\n        .limit(5);\r\n      \r\n      if (insightsError) {\r\n        console.error('Error fetching patient insights:', insightsError);\r\n      } else {\r\n        insightsData = insights || [];\r\n      }\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <DashboardLayout>\r\n      <div className=\"container mx-auto px-4 py-6\">\r\n        {process.env.NODE_ENV !== 'production' && <SessionStatus />}\r\n        <header className=\"mb-6\">\r\n          <h1 className=\"text-2xl md:text-3xl font-bold text-purple-800\">\r\n            Dashboard\r\n          </h1>\r\n          <p className=\"text-gray-600\">\r\n            {userRole === 'admin' \r\n              ? 'Beheerdersdashboard' \r\n              : userRole === 'specialist' \r\n                ? 'Specialistendashboard' \r\n                : 'Welkom bij FibroGuardian Pro'}\r\n          </p>\r\n        </header>\r\n\r\n        {/* Render different dashboard content based on user role */}\r\n        {userRole === 'patient' && (\r\n          <>\r\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\r\n              <section id=\"daily-planner\" className=\"lg:col-span-2\">\r\n                <DailyPlannerContainer />\r\n              </section>\r\n\r\n              <section id=\"health-metrics\">\r\n                <HealthMetrics logs={logsData} />\r\n              </section>\r\n            </div>\r\n\r\n            <section id=\"ai-insights\" className=\"mt-8\">\r\n              <AIInsightsContainer initialInsightsProp={insightsData} />\r\n            </section>\r\n\r\n            <section id=\"quick-actions\" className=\"mt-8\">\r\n              <QuickActions />\r\n            </section>\r\n\r\n            <DashboardClient userRole={userRole} />\r\n          </>\r\n        )}\r\n\r\n        {userRole === 'specialist' && (\r\n          <>\r\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n              <section id=\"patient-insights\" className=\"lg:col-span-2\">\r\n                <div className=\"bg-white p-6 rounded-lg shadow-md\">\r\n                  <h2 className=\"text-xl font-semibold mb-4\">Recente Patiënt Inzichten</h2>\r\n                  {insightsData.length > 0 ? (\r\n                    <div className=\"space-y-4\">\r\n                      {insightsData.map((insight, index) => (\r\n                        <div key={index} className=\"border-l-4 border-purple-500 pl-4 py-2\">\r\n                          <p className=\"text-gray-700\">{insight.beschrijving}</p>\r\n                          <p className=\"text-sm text-gray-500 mt-1\">\r\n                            {new Date(String(insight.created_at)).toLocaleDateString('nl-NL')}\r\n                          </p>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  ) : (\r\n                    <p className=\"text-gray-500\">Geen recente inzichten beschikbaar.</p>\r\n                  )}\r\n                </div>\r\n              </section>\r\n              \r\n              <section id=\"specialist-quick-actions\">\r\n                <div className=\"bg-white p-6 rounded-lg shadow-md\">\r\n                  <h2 className=\"text-xl font-semibold mb-4\">Snelle Acties</h2>\r\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                    <a href=\"/specialisten/patienten\" className=\"bg-purple-100 hover:bg-purple-200 p-4 rounded-lg flex items-center\">\r\n                      <span className=\"text-purple-800 font-medium\">Patiënten Bekijken</span>\r\n                    </a>\r\n                    <a href=\"/specialisten/taken\" className=\"bg-blue-100 hover:bg-blue-200 p-4 rounded-lg flex items-center\">\r\n                      <span className=\"text-blue-800 font-medium\">Taken Toewijzen</span>\r\n                    </a>\r\n                  </div>\r\n                </div>\r\n              </section>\r\n            </div>\r\n          </>\r\n        )}\r\n\r\n        {userRole === 'admin' && (\r\n          <>\r\n            <section id=\"admin-stats\" className=\"mb-8\">\r\n              <AdminStatsCards stats={statsData} />\r\n            </section>\r\n\r\n            <section id=\"recent-users\" className=\"mb-8\">\r\n              <div className=\"bg-white p-6 rounded-lg shadow-md\">\r\n                <h2 className=\"text-xl font-semibold mb-4\">Recente Gebruikers</h2>\r\n                <RecentUsersTable users={recentUsersData} />\r\n              </div>\r\n            </section>\r\n\r\n            <section id=\"admin-quick-actions\">\r\n              <div className=\"bg-white p-6 rounded-lg shadow-md\">\r\n                <h2 className=\"text-xl font-semibold mb-4\">Beheerder Acties</h2>\r\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n                  <a href=\"/admin/users\" className=\"bg-purple-100 hover:bg-purple-200 p-4 rounded-lg flex items-center\">\r\n                    <span className=\"text-purple-800 font-medium\">Gebruikersbeheer</span>\r\n                  </a>\r\n                  <a href=\"/admin/subscriptions\" className=\"bg-blue-100 hover:bg-blue-200 p-4 rounded-lg flex items-center\">\r\n                    <span className=\"text-blue-800 font-medium\">Abonnementenbeheer</span>\r\n                  </a>\r\n                  <a href=\"/admin/statistics\" className=\"bg-green-100 hover:bg-green-200 p-4 rounded-lg flex items-center\">\r\n                    <span className=\"text-green-800 font-medium\">Statistieken</span>\r\n                  </a>\r\n                </div>\r\n              </div>\r\n            </section>\r\n          </>\r\n        )}\r\n      </div>\r\n    </DashboardLayout>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\dev\\layout.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":13,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":13,"endColumn":34}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ReactNode } from 'react';\r\n\r\nimport Link from 'next/link';\r\n\r\ninterface DevLayoutProps {\r\n  children: ReactNode;\r\n}\r\n\r\n/**\r\n * Layout component for the development section of the application.\r\n * Provides a consistent header and navigation for all development pages.\r\n */\r\nexport default function DevLayout({ children }: DevLayoutProps) {\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50\">\r\n      {/* Header */}\r\n      <header className=\"bg-indigo-700 text-white\">\r\n        <div className=\"container mx-auto p-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <h1 className=\"text-xl font-bold\">\r\n                <Link href=\"/dev\" className=\"hover:text-indigo-200\">\r\n                  FibroGuardian Pro - Developer Tools\r\n                </Link>\r\n              </h1>\r\n              <p className=\"text-xs text-indigo-200\">Internal development and testing tools</p>\r\n            </div>\r\n            <nav>\r\n              <Link href=\"/\" className=\"rounded bg-indigo-600 px-3 py-1 text-sm hover:bg-indigo-500\">\r\n                Back to App\r\n              </Link>\r\n            </nav>\r\n          </div>\r\n        </div>\r\n      </header>\r\n\r\n      {/* Navigation */}\r\n      <div className=\"border-b bg-white shadow-sm\">\r\n        <div className=\"container mx-auto px-4\">\r\n          <nav className=\"flex space-x-4 overflow-x-auto py-3\">\r\n            <Link\r\n              href=\"/dev/performance\"\r\n              className=\"whitespace-nowrap rounded px-3 py-1 text-sm font-medium hover:bg-gray-100\"\r\n            >\r\n              Performance\r\n            </Link>\r\n            <Link\r\n              href=\"/dev/memory-leaks\"\r\n              className=\"whitespace-nowrap rounded px-3 py-1 text-sm font-medium hover:bg-gray-100\"\r\n            >\r\n              Memory Leaks\r\n            </Link>\r\n            <Link\r\n              href=\"/dev/accessibility\"\r\n              className=\"whitespace-nowrap rounded px-3 py-1 text-sm font-medium hover:bg-gray-100\"\r\n            >\r\n              Accessibility\r\n            </Link>\r\n            <Link\r\n              href=\"/dev/component-library\"\r\n              className=\"whitespace-nowrap rounded px-3 py-1 text-sm font-medium hover:bg-gray-100\"\r\n            >\r\n              Component Library\r\n            </Link>\r\n            <Link\r\n              href=\"/dev/api-playground\"\r\n              className=\"whitespace-nowrap rounded px-3 py-1 text-sm font-medium hover:bg-gray-100\"\r\n            >\r\n              API Playground\r\n            </Link>\r\n          </nav>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Main content */}\r\n      <main className=\"pb-12\">{children}</main>\r\n\r\n      {/* Footer */}\r\n      <footer className=\"border-t bg-white py-4\">\r\n        <div className=\"container mx-auto px-4 text-center text-sm text-gray-500\">\r\n          <p>FibroGuardian Pro - Developer Tools</p>\r\n          <p className=\"text-xs\">\r\n            These tools are for internal development and testing purposes only. Not for production use.\r\n          </p>\r\n        </div>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\dev\\memory-leaks\\page.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":14,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":14,"endColumn":49}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Metadata } from 'next';\r\n\r\nimport MemoryLeakPreventionExample from '@/components/examples/MemoryLeakPreventionExample';\r\n\r\nexport const metadata: Metadata = {\r\n  title: 'Memory Leak Prevention | FibroGuardian Pro',\r\n  description: 'Examples and best practices for preventing memory leaks in React components',\r\n};\r\n\r\n/**\r\n * This page demonstrates memory leak prevention techniques in React components.\r\n * It includes examples of how to properly clean up resources when components unmount.\r\n */\r\nexport default function MemoryLeakPreventionPage() {\r\n  return (\r\n    <div className=\"container mx-auto px-4 py-8\">\r\n      <div className=\"mb-8\">\r\n        <h1 className=\"mb-2 text-3xl font-bold\">Memory Leak Prevention</h1>\r\n        <p className=\"text-gray-600\">\r\n          This page demonstrates techniques for preventing memory leaks in React components.\r\n        </p>\r\n      </div>\r\n\r\n      <div className=\"mb-8\">\r\n        <h2 className=\"mb-4 text-2xl font-semibold\">Common Memory Leak Sources</h2>\r\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\r\n          <div className=\"rounded-lg border bg-white p-4 shadow-sm\">\r\n            <h3 className=\"mb-2 font-medium text-blue-600\">useEffect Cleanup</h3>\r\n            <p className=\"text-sm\">\r\n              Missing cleanup functions in useEffect hooks can cause memory leaks when components unmount.\r\n            </p>\r\n          </div>\r\n          <div className=\"rounded-lg border bg-white p-4 shadow-sm\">\r\n            <h3 className=\"mb-2 font-medium text-blue-600\">Event Listeners</h3>\r\n            <p className=\"text-sm\">\r\n              Event listeners added to the window or document must be removed when components unmount.\r\n            </p>\r\n          </div>\r\n          <div className=\"rounded-lg border bg-white p-4 shadow-sm\">\r\n            <h3 className=\"mb-2 font-medium text-blue-600\">Async Operations</h3>\r\n            <p className=\"text-sm\">\r\n              State updates from async operations after component unmount can cause memory leaks.\r\n            </p>\r\n          </div>\r\n          <div className=\"rounded-lg border bg-white p-4 shadow-sm\">\r\n            <h3 className=\"mb-2 font-medium text-blue-600\">Timers</h3>\r\n            <p className=\"text-sm\">\r\n              setTimeout and setInterval must be cleared when components unmount to prevent memory leaks.\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"mb-8\">\r\n        <h2 className=\"mb-4 text-2xl font-semibold\">Example Component</h2>\r\n        <p className=\"mb-4 text-gray-600\">\r\n          This example demonstrates how to use custom hooks to prevent memory leaks in React components.\r\n        </p>\r\n        <MemoryLeakPreventionExample />\r\n      </div>\r\n\r\n      <div className=\"mb-8\">\r\n        <h2 className=\"mb-4 text-2xl font-semibold\">Custom Hooks</h2>\r\n        <p className=\"mb-4 text-gray-600\">\r\n          We&apos;ve created several custom hooks to help prevent memory leaks:\r\n        </p>\r\n        <div className=\"space-y-4\">\r\n          <div className=\"rounded-lg border bg-white p-4 shadow-sm\">\r\n            <h3 className=\"mb-2 font-medium text-blue-600\">useSafeState</h3>\r\n            <p className=\"mb-2 text-sm\">\r\n              A hook that provides a safe way to update state in components that might be unmounted before an async operation completes.\r\n            </p>\r\n            <pre className=\"overflow-x-auto rounded bg-gray-100 p-3 text-xs\">\r\n              <code>{`const [data, setData] = useSafeState(initialState);\r\n\r\n// Safe to use in async functions\r\nconst fetchData = async () => {\r\n  const result = await api.getData();\r\n  setData(result); // Won't cause memory leak if unmounted\r\n};`}</code>\r\n            </pre>\r\n          </div>\r\n\r\n          <div className=\"rounded-lg border bg-white p-4 shadow-sm\">\r\n            <h3 className=\"mb-2 font-medium text-blue-600\">useAbortController</h3>\r\n            <p className=\"mb-2 text-sm\">\r\n              A hook that provides an AbortController that is automatically aborted when the component unmounts.\r\n            </p>\r\n            <pre className=\"overflow-x-auto rounded bg-gray-100 p-3 text-xs\">\r\n              <code>{`const { signal } = useAbortController();\r\n\r\nuseEffect(() => {\r\n  fetch('/api/data', { signal })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      // Process data\r\n    });\r\n  // No need to abort manually\r\n}, [signal]);`}</code>\r\n            </pre>\r\n          </div>\r\n\r\n          <div className=\"rounded-lg border bg-white p-4 shadow-sm\">\r\n            <h3 className=\"mb-2 font-medium text-blue-600\">useTimers</h3>\r\n            <p className=\"mb-2 text-sm\">\r\n              A hook that provides safe versions of setTimeout and setInterval that are automatically cleared when the component unmounts.\r\n            </p>\r\n            <pre className=\"overflow-x-auto rounded bg-gray-100 p-3 text-xs\">\r\n              <code>{`const { setTimeout, setInterval } = useTimers();\r\n\r\nuseEffect(() => {\r\n  setTimeout(() => {\r\n    console.log('This will be cleared automatically');\r\n  }, 1000);\r\n  \r\n  setInterval(() => {\r\n    console.log('This will also be cleared automatically');\r\n  }, 5000);\r\n  // No need for cleanup\r\n}, [setTimeout, setInterval]);`}</code>\r\n            </pre>\r\n          </div>\r\n\r\n          <div className=\"rounded-lg border bg-white p-4 shadow-sm\">\r\n            <h3 className=\"mb-2 font-medium text-blue-600\">useEventListener</h3>\r\n            <p className=\"mb-2 text-sm\">\r\n              A hook that provides a safe way to add event listeners that are automatically removed when the component unmounts.\r\n            </p>\r\n            <pre className=\"overflow-x-auto rounded bg-gray-100 p-3 text-xs\">\r\n              <code>{`const { addEventListener } = useEventListener();\r\n\r\nuseEffect(() => {\r\n  addEventListener(window, 'resize', handleResize);\r\n  // No need to remove event listener manually\r\n}, [addEventListener, handleResize]);`}</code>\r\n            </pre>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"rounded-lg border bg-yellow-50 p-4\">\r\n        <h2 className=\"mb-2 text-xl font-semibold\">Memory Leak Detection</h2>\r\n        <p className=\"mb-4\">\r\n          We&apos;ve also created a script to detect potential memory leaks in the codebase:\r\n        </p>\r\n        <pre className=\"overflow-x-auto rounded bg-gray-100 p-3 text-xs\">\r\n          <code>npm run check:memory-leaks</code>\r\n        </pre>\r\n        <p className=\"mt-2 text-sm text-gray-600\">\r\n          This script analyzes all components and containers for potential memory leaks and generates a report with recommendations.\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\dev\\page.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":13,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":13,"endColumn":37}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Metadata } from 'next';\r\nimport Link from 'next/link';\r\n\r\nexport const metadata: Metadata = {\r\n  title: 'Developer Tools | FibroGuardian Pro',\r\n  description: 'Internal development and testing tools for FibroGuardian Pro',\r\n};\r\n\r\n/**\r\n * Developer Tools index page.\r\n * Provides an overview of available developer tools and resources.\r\n */\r\nexport default function DevIndexPage() {\r\n  return (\r\n    <div className=\"container mx-auto px-4 py-8\">\r\n      <div className=\"mb-8\">\r\n        <h1 className=\"mb-2 text-3xl font-bold\">Developer Tools</h1>\r\n        <p className=\"text-gray-600\">\r\n          Welcome to the FibroGuardian Pro developer tools. These tools are designed to help with development, testing, and optimization.\r\n        </p>\r\n      </div>\r\n\r\n      <div className=\"mb-8\">\r\n        <h2 className=\"mb-4 text-2xl font-semibold\">Available Tools</h2>\r\n        <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\r\n          {/* Performance Tool */}\r\n          <div className=\"rounded-lg border bg-white p-6 shadow-sm transition hover:shadow-md\">\r\n            <h3 className=\"mb-2 text-xl font-medium text-indigo-600\">Performance</h3>\r\n            <p className=\"mb-4 text-gray-600\">\r\n              Tools for monitoring and optimizing application performance, including bundle analysis and rendering metrics.\r\n            </p>\r\n            <Link\r\n              href=\"/dev/performance\"\r\n              className=\"inline-block rounded bg-indigo-600 px-4 py-2 text-sm font-medium text-white hover:bg-indigo-700\"\r\n            >\r\n              View Performance Tools\r\n            </Link>\r\n          </div>\r\n\r\n          {/* Memory Leaks Tool */}\r\n          <div className=\"rounded-lg border bg-white p-6 shadow-sm transition hover:shadow-md\">\r\n            <h3 className=\"mb-2 text-xl font-medium text-indigo-600\">Memory Leaks</h3>\r\n            <p className=\"mb-4 text-gray-600\">\r\n              Tools for detecting and preventing memory leaks in React components, with examples and best practices.\r\n            </p>\r\n            <Link\r\n              href=\"/dev/memory-leaks\"\r\n              className=\"inline-block rounded bg-indigo-600 px-4 py-2 text-sm font-medium text-white hover:bg-indigo-700\"\r\n            >\r\n              View Memory Leak Tools\r\n            </Link>\r\n          </div>\r\n\r\n          {/* Accessibility Tool */}\r\n          <div className=\"rounded-lg border bg-white p-6 shadow-sm transition hover:shadow-md\">\r\n            <h3 className=\"mb-2 text-xl font-medium text-indigo-600\">Accessibility</h3>\r\n            <p className=\"mb-4 text-gray-600\">\r\n              Tools for testing and improving accessibility, including WCAG compliance checks and keyboard navigation testing.\r\n            </p>\r\n            <Link\r\n              href=\"/dev/accessibility\"\r\n              className=\"inline-block rounded bg-indigo-600 px-4 py-2 text-sm font-medium text-white hover:bg-indigo-700\"\r\n            >\r\n              View Accessibility Tools\r\n            </Link>\r\n          </div>\r\n\r\n          {/* Component Library */}\r\n          <div className=\"rounded-lg border bg-white p-6 shadow-sm transition hover:shadow-md\">\r\n            <h3 className=\"mb-2 text-xl font-medium text-indigo-600\">Component Library</h3>\r\n            <p className=\"mb-4 text-gray-600\">\r\n              A showcase of all available components with documentation, props, and usage examples.\r\n            </p>\r\n            <Link\r\n              href=\"/dev/component-library\"\r\n              className=\"inline-block rounded bg-indigo-600 px-4 py-2 text-sm font-medium text-white hover:bg-indigo-700\"\r\n            >\r\n              View Component Library\r\n            </Link>\r\n          </div>\r\n\r\n          {/* API Playground */}\r\n          <div className=\"rounded-lg border bg-white p-6 shadow-sm transition hover:shadow-md\">\r\n            <h3 className=\"mb-2 text-xl font-medium text-indigo-600\">API Playground</h3>\r\n            <p className=\"mb-4 text-gray-600\">\r\n              Interactive playground for testing API endpoints, with request builders and response viewers.\r\n            </p>\r\n            <Link\r\n              href=\"/dev/api-playground\"\r\n              className=\"inline-block rounded bg-indigo-600 px-4 py-2 text-sm font-medium text-white hover:bg-indigo-700\"\r\n            >\r\n              View API Playground\r\n            </Link>\r\n          </div>\r\n\r\n          {/* Documentation */}\r\n          <div className=\"rounded-lg border bg-white p-6 shadow-sm transition hover:shadow-md\">\r\n            <h3 className=\"mb-2 text-xl font-medium text-indigo-600\">Documentation</h3>\r\n            <p className=\"mb-4 text-gray-600\">\r\n              Comprehensive documentation for developers, including architecture guides, API references, and best practices.\r\n            </p>\r\n            <Link\r\n              href=\"/dev/docs\"\r\n              className=\"inline-block rounded bg-indigo-600 px-4 py-2 text-sm font-medium text-white hover:bg-indigo-700\"\r\n            >\r\n              View Documentation\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"mb-8\">\r\n        <h2 className=\"mb-4 text-2xl font-semibold\">Developer Resources</h2>\r\n        <div className=\"rounded-lg border bg-white p-6 shadow-sm\">\r\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\r\n            <div>\r\n              <h3 className=\"mb-2 font-medium text-indigo-600\">Code Quality</h3>\r\n              <ul className=\"list-inside list-disc space-y-1 text-sm text-gray-600\">\r\n                <li>ESLint Configuration</li>\r\n                <li>Prettier Setup</li>\r\n                <li>TypeScript Configuration</li>\r\n                <li>Jest Test Setup</li>\r\n              </ul>\r\n            </div>\r\n            <div>\r\n              <h3 className=\"mb-2 font-medium text-indigo-600\">Performance</h3>\r\n              <ul className=\"list-inside list-disc space-y-1 text-sm text-gray-600\">\r\n                <li>Bundle Analysis</li>\r\n                <li>Performance Monitoring</li>\r\n                <li>Optimization Techniques</li>\r\n                <li>Caching Strategies</li>\r\n              </ul>\r\n            </div>\r\n            <div>\r\n              <h3 className=\"mb-2 font-medium text-indigo-600\">Security</h3>\r\n              <ul className=\"list-inside list-disc space-y-1 text-sm text-gray-600\">\r\n                <li>Authentication Flow</li>\r\n                <li>Authorization Policies</li>\r\n                <li>Data Encryption</li>\r\n                <li>Security Best Practices</li>\r\n              </ul>\r\n            </div>\r\n            <div>\r\n              <h3 className=\"mb-2 font-medium text-indigo-600\">Database</h3>\r\n              <ul className=\"list-inside list-disc space-y-1 text-sm text-gray-600\">\r\n                <li>Schema Documentation</li>\r\n                <li>Migration Scripts</li>\r\n                <li>Query Optimization</li>\r\n                <li>Data Modeling</li>\r\n              </ul>\r\n            </div>\r\n            <div>\r\n              <h3 className=\"mb-2 font-medium text-indigo-600\">Architecture</h3>\r\n              <ul className=\"list-inside list-disc space-y-1 text-sm text-gray-600\">\r\n                <li>System Architecture</li>\r\n                <li>Component Structure</li>\r\n                <li>State Management</li>\r\n                <li>API Design</li>\r\n              </ul>\r\n            </div>\r\n            <div>\r\n              <h3 className=\"mb-2 font-medium text-indigo-600\">Deployment</h3>\r\n              <ul className=\"list-inside list-disc space-y-1 text-sm text-gray-600\">\r\n                <li>CI/CD Pipeline</li>\r\n                <li>Environment Configuration</li>\r\n                <li>Deployment Strategies</li>\r\n                <li>Monitoring Setup</li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"rounded-lg border bg-yellow-50 p-4\">\r\n        <h2 className=\"mb-2 text-xl font-semibold\">Developer Notes</h2>\r\n        <p className=\"mb-2\">\r\n          These tools are for internal development and testing purposes only. They are not intended for production use.\r\n        </p>\r\n        <p className=\"text-sm text-gray-600\">\r\n          If you encounter any issues or have suggestions for improvement, please contact the development team.\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\dev\\performance\\page.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":36,"fix":{"range":[35,35],"text":"\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":14,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":14,"endColumn":50}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import dynamic from 'next/dynamic';\r\nimport DashboardLayout from '@/components/layout/DashboardLayout'; // Assuming a layout\r\n\r\n// Dynamisch importeren om het bundel gewicht niet te verhogen\r\n// voor productiepagina's, en alleen client-side te renderen.\r\nconst PerformanceDashboard = dynamic(\r\n  () => import('@/components/dev/PerformanceDashboard'),\r\n  { \r\n    ssr: false,\r\n    loading: () => <div className=\"p-8 text-center\">Performance Dashboard laden...</div> \r\n  }\r\n);\r\n\r\nexport default function PerformanceMonitoringPage() { // Renamed for clarity\r\n  // Voeg hier eventueel authenticatie of autorisatie toe als dit een beschermde pagina moet zijn\r\n  // Voor nu, openbaar toegankelijk onder /dev/performance\r\n\r\n  return (\r\n    <DashboardLayout> {/* Of een andere geschikte layout */}\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        <PerformanceDashboard />\r\n      </div>\r\n    </DashboardLayout>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\instellingen\\page.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":4,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":4,"endColumn":41},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":8,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":8,"endColumn":76,"fix":{"range":[307,358],"text":"mb-6 text-2xl font-bold text-purple-800 md:text-3xl"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import DashboardLayout from '@/components/layout/DashboardLayout';\r\nimport ProfileFormContainer from '@/containers/settings/ProfileFormContainer';\r\n\r\nexport default function InstellingenPage() {\r\n  return (\r\n    <DashboardLayout>\r\n      <div className=\"container mx-auto px-4 py-6\">\r\n        <h1 className=\"text-2xl md:text-3xl font-bold text-purple-800 mb-6\">Instellingen</h1>\r\n        <ProfileFormContainer />\r\n      </div>\r\n    </DashboardLayout>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\inzichten\\page.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":58,"fix":{"range":[72,72],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":45,"fix":{"range":[118,118],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":77,"fix":{"range":[308,308],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/components/ai/AIInsightVisualization` import should occur before import of `@/lib/supabase-client`","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":77,"fix":{"range":[120,310],"text":"import AIInsightVisualization from '@/components/ai/AIInsightVisualization';\r\nimport { getSupabaseBrowserClient } from '@/lib/supabase-client';\r\nimport { Inzicht, TaskLog } from '@/types';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`next/link` import should occur before import of `next/navigation`","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":30,"fix":{"range":[74,341],"text":"import Link from 'next/link';\r\nimport { useRouter } from 'next/navigation';\r\nimport { getSupabaseBrowserClient } from '@/lib/supabase-client';\r\nimport { Inzicht, TaskLog } from '@/types';\r\nimport AIInsightVisualization from '@/components/ai/AIInsightVisualization';\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":9,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":9,"endColumn":38},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":45,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1595,1598],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1595,1598],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prefer-const","severity":2,"message":"'startDate' is never reassigned. Use 'const' instead.","line":74,"column":13,"nodeType":"Identifier","messageId":"useConst","endLine":74,"endColumn":22,"fix":{"range":[2548,2575],"text":"const startDate = new Date();"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":98,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3529,3532],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3529,3532],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":128,"column":51,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":128,"endColumn":85,"fix":{"range":[4404,4426],"text":"size-5 text-green-500"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":134,"column":51,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":134,"endColumn":83,"fix":{"range":[4855,4875],"text":"size-5 text-red-500"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":140,"column":51,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":140,"endColumn":84,"fix":{"range":[5304,5325],"text":"size-5 text-blue-500"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":146,"column":51,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":146,"endColumn":86,"fix":{"range":[5658,5681],"text":"size-5 text-purple-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":157,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":157,"endColumn":57,"fix":{"range":[6200,6229],"text":"h-8 w-1/4 rounded bg-gray-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":158,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":158,"endColumn":52,"fix":{"range":[6265,6289],"text":"h-64 rounded bg-gray-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":166,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":166,"endColumn":89,"fix":{"range":[6431,6496],"text":"mb-6 flex flex-col md:flex-row md:items-center md:justify-between"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":167,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":167,"endColumn":70,"fix":{"range":[6523,6568],"text":"mb-4 text-2xl font-bold text-gray-900 md:mb-0"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":172,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":176,"endColumn":16,"fix":{"range":[6735,6767],"text":"`rounded-md px-3 py-1 text-sm ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":182,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":186,"endColumn":16,"fix":{"range":[7079,7111],"text":"`rounded-md px-3 py-1 text-sm ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":192,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":196,"endColumn":16,"fix":{"range":[7419,7451],"text":"`rounded-md px-3 py-1 text-sm ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":202,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":206,"endColumn":16,"fix":{"range":[7761,7793],"text":"`rounded-md px-3 py-1 text-sm ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":214,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":214,"endColumn":59,"fix":{"range":[8108,8141],"text":"rounded-lg bg-white p-6 shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":215,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":215,"endColumn":53,"fix":{"range":[8170,8196],"text":"mb-4 text-lg font-semibold"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":220,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":220,"endColumn":44,"fix":{"range":[8600,8618],"text":"mt-2 text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":228,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":228,"endColumn":87,"fix":{"range":[8851,8910],"text":"rounded-lg border border-red-200 bg-red-50 p-4 text-red-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":232,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":232,"endColumn":164,"fix":{"range":[9027,9164],"text":"mt-2 rounded-md bg-red-600 px-3 py-1 text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-opacity-50"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'focus:ring-opacity-50' should be replaced by an opacity suffix (eg. '/50')","line":232,"column":15,"nodeType":"JSXAttribute","messageId":"classnameOpacityDeprecated","endLine":232,"endColumn":164},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":243,"column":35,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":243,"endColumn":92,"fix":{"range":[9440,9485],"text":"overflow-hidden rounded-lg bg-white shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":247,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":247,"endColumn":177,"fix":{"range":[9628,9776],"text":"flex w-full items-center justify-between px-6 py-4 text-left hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-purple-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":252,"column":24,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":252,"endColumn":59,"fix":{"range":[10013,10036],"text":"mr-3 mt-1 flex-shrink-0"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'flex-shrink-0' should be updated to 'shrink-0' in Tailwind CSS v3!","line":252,"column":24,"nodeType":"JSXAttribute","messageId":"classnameChanged","endLine":252,"endColumn":59,"fix":{"range":[10013,10036],"text":"shrink-0 mt-1 mr-3"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'flex-grow' should be updated to 'grow' in Tailwind CSS v3!","line":255,"column":24,"nodeType":"JSXAttribute","messageId":"classnameChanged","endLine":255,"endColumn":45,"fix":{"range":[10156,10165],"text":"grow"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":256,"column":24,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":256,"endColumn":61,"fix":{"range":[10203,10228],"text":"font-medium text-gray-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":257,"column":26,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":257,"endColumn":82,"fix":{"range":[10294,10338],"text":"mt-2 flex items-center text-xs text-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":268,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":268,"endColumn":154,"fix":{"range":[10972,10992],"text":"rotate-180 transform"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":268,"column":19,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":268,"endColumn":154,"fix":{"range":[10877,10936],"text":"`size-5 text-gray-400 transition-transform duration-200 ${"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'transform' is not needed in Tailwind CSS v3!","line":268,"column":19,"nodeType":"JSXAttribute","messageId":"classnameNotNeeded","endLine":268,"endColumn":154,"fix":{"range":[10972,10992],"text":"rotate-180"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":287,"column":30,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":287,"endColumn":69,"fix":{"range":[11904,11931],"text":"h-32 rounded-md bg-gray-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":297,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":297,"endColumn":71,"fix":{"range":[12151,12196],"text":"rounded-lg bg-white p-8 text-center shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":298,"column":51,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":298,"endColumn":99,"fix":{"range":[12261,12297],"text":"mx-auto mb-4 h-16 w-16 text-gray-400"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-16, w-16' could be replaced by the 'size-16' shorthand!","line":298,"column":51,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":298,"endColumn":99,"fix":{"range":[12261,12297],"text":"size-16 mx-auto text-gray-400 mb-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":301,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":301,"endColumn":67,"fix":{"range":[12713,12753],"text":"mb-2 text-xl font-semibold text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":302,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":302,"endColumn":44,"fix":{"range":[12809,12827],"text":"mb-6 text-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":309,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":309,"endColumn":120,"fix":{"range":[13157,13252],"text":"rounded-md bg-purple-600 px-4 py-2 font-medium text-white transition-colors hover:bg-purple-700"}}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":36,"fixableErrorCount":6,"fixableWarningCount":34,"source":"'use client';\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport { useRouter } from 'next/navigation';\r\nimport { getSupabaseBrowserClient } from '@/lib/supabase-client';\r\nimport { Inzicht, TaskLog } from '@/types';\r\nimport AIInsightVisualization from '@/components/ai/AIInsightVisualization';\r\nimport Link from 'next/link';\r\n\r\nexport default function InzichtenPage() {\r\n  const router = useRouter();\r\n  const [insights, setInsights] = useState<Inzicht[]>([]);\r\n  const [logs, setLogs] = useState<Record<string, TaskLog[]>>({});\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [expandedInsightId, setExpandedInsightId] = useState<string | null>(null);\r\n  const [filter, setFilter] = useState<'all' | 'dag' | 'week' | 'maand'>('all');\r\n  \r\n  const fetchInsights = useCallback(async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const supabaseClient = getSupabaseBrowserClient();\r\n      const { data: { user } } = await supabaseClient.auth.getUser();\r\n      \r\n      if (!user) {\r\n        router.push('/auth/login');\r\n        return;\r\n      }\r\n      \r\n      let query = supabaseClient\r\n        .from('inzichten')\r\n        .select('*')\r\n        .eq('user_id', user.id)\r\n        .order('created_at', { ascending: false });\r\n      \r\n      if (filter !== 'all') {\r\n        query = query.eq('periode', filter);\r\n      }\r\n      \r\n      const { data, error: fetchError } = await query;\r\n      \r\n      if (fetchError) throw fetchError;\r\n      \r\n      setInsights(data || []);\r\n    } catch (error: any) {\r\n      console.error('Fout bij ophalen inzichten:', error);\r\n      setError(error.message || 'Er is een fout opgetreden bij het ophalen van de inzichten');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [router, filter]);\r\n\r\n  useEffect(() => {\r\n    fetchInsights();\r\n  }, [fetchInsights]);\r\n  \r\n  // Fetch logs for a specific insight when expanded\r\n  useEffect(() => {\r\n    const fetchLogsForInsight = async (insightId: string) => {\r\n      // Skip if we already have logs for this insight\r\n      if (logs[insightId]) return;\r\n      \r\n      try {\r\n        const insight = insights.find(i => i.id === insightId);\r\n        if (!insight) return;\r\n        \r\n        const supabaseClient = getSupabaseBrowserClient();\r\n        const { data: { user } } = await supabaseClient.auth.getUser();\r\n        \r\n        if (!user) return;\r\n        \r\n        // Determine date range based on insight period\r\n        const endDate = new Date();\r\n        let startDate = new Date();\r\n        \r\n        if (insight.periode === 'dag') {\r\n          startDate.setDate(startDate.getDate() - 7); // Last week for daily insights\r\n        } else if (insight.periode === 'week') {\r\n          startDate.setDate(startDate.getDate() - 30); // Last month for weekly insights\r\n        } else if (insight.periode === 'maand') {\r\n          startDate.setDate(startDate.getDate() - 90); // Last 3 months for monthly insights\r\n        }\r\n        \r\n        const { data, error: fetchError } = await supabaseClient\r\n          .from('task_logs')\r\n          .select('*')\r\n          .eq('user_id', user.id)\r\n          .gte('start_tijd', startDate.toISOString())\r\n          .lte('start_tijd', endDate.toISOString())\r\n          .order('start_tijd', { ascending: true });\r\n        \r\n        if (fetchError) throw fetchError;\r\n        \r\n        setLogs(prevLogs => ({\r\n          ...prevLogs,\r\n          [insightId]: data || []\r\n        }));\r\n      } catch (error: any) {\r\n        console.error('Fout bij ophalen logs voor inzicht:', error);\r\n      }\r\n    };\r\n    \r\n    if (expandedInsightId) {\r\n      fetchLogsForInsight(expandedInsightId);\r\n    }\r\n  }, [expandedInsightId, insights, logs]);\r\n  \r\n  // Toggle expanded insight\r\n  const toggleExpand = (id: string) => {\r\n    setExpandedInsightId(prevId => (prevId === id ? null : id));\r\n  };\r\n  \r\n  // Format date for display\r\n  const formatDate = (dateString: Date | string) => {\r\n    const date = new Date(dateString);\r\n    return date.toLocaleDateString('nl-BE', {\r\n      day: '2-digit',\r\n      month: '2-digit',\r\n      year: 'numeric'\r\n    });\r\n  };\r\n  \r\n  // Helper for trend icon\r\n  const getTrendIcon = (trendType: string | undefined) => {\r\n    switch(trendType?.toLowerCase()) {\r\n      case 'positief':\r\n        return (\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 text-green-500\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\r\n            <path fillRule=\"evenodd\" d=\"M12 7a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0V8.414l-4.293 4.293a1 1 0 01-1.414 0L8 10.414l-4.293 4.293a1 1 0 01-1.414-1.414l5-5a1 1 0 011.414 0L11 10.586 14.586 7H12z\" clipRule=\"evenodd\" />\r\n          </svg>\r\n        );\r\n      case 'negatief':\r\n        return (\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 text-red-500\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\r\n            <path fillRule=\"evenodd\" d=\"M12 13a1 1 0 100 2h5a1 1 0 001-1v-5a1 1 0 10-2 0v2.586l-4.293-4.293a1 1 0 00-1.414 0L8 9.586l-4.293-4.293a1 1 0 00-1.414 1.414l5 5a1 1 0 001.414 0L11 9.414 14.586 13H12z\" clipRule=\"evenodd\" />\r\n          </svg>\r\n        );\r\n      case 'stabiel':\r\n        return (\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 text-blue-500\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\r\n            <path fillRule=\"evenodd\" d=\"M18 10a1 1 0 01-1 1H3a1 1 0 110-2h14a1 1 0 011 1z\" clipRule=\"evenodd\" />\r\n          </svg>\r\n        );\r\n      default: // For 'algemeen' or undefined\r\n        return (\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 text-purple-500\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\r\n            <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z\" clipRule=\"evenodd\" />\r\n          </svg>\r\n        );\r\n    }\r\n  };\r\n  \r\n  if (loading) {\r\n    return (\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        <div className=\"animate-pulse space-y-4\">\r\n          <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\r\n          <div className=\"h-64 bg-gray-200 rounded\"></div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <div className=\"container mx-auto px-4 py-8\">\r\n      <div className=\"flex flex-col md:flex-row md:items-center md:justify-between mb-6\">\r\n        <h1 className=\"text-2xl font-bold text-gray-900 mb-4 md:mb-0\">AI-Inzichten</h1>\r\n        \r\n        <div className=\"flex flex-wrap gap-2\">\r\n          <button\r\n            onClick={() => setFilter('all')}\r\n            className={`px-3 py-1 rounded-md text-sm ${\r\n              filter === 'all'\r\n                ? 'bg-purple-600 text-white'\r\n                : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\r\n            }`}\r\n          >\r\n            Alle inzichten\r\n          </button>\r\n          <button\r\n            onClick={() => setFilter('dag')}\r\n            className={`px-3 py-1 rounded-md text-sm ${\r\n              filter === 'dag'\r\n                ? 'bg-purple-600 text-white'\r\n                : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\r\n            }`}\r\n          >\r\n            Dagelijks\r\n          </button>\r\n          <button\r\n            onClick={() => setFilter('week')}\r\n            className={`px-3 py-1 rounded-md text-sm ${\r\n              filter === 'week'\r\n                ? 'bg-purple-600 text-white'\r\n                : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\r\n            }`}\r\n          >\r\n            Wekelijks\r\n          </button>\r\n          <button\r\n            onClick={() => setFilter('maand')}\r\n            className={`px-3 py-1 rounded-md text-sm ${\r\n              filter === 'maand'\r\n                ? 'bg-purple-600 text-white'\r\n                : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\r\n            }`}\r\n          >\r\n            Maandelijks\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"mb-6\">\r\n        <div className=\"bg-white rounded-lg shadow-md p-6\">\r\n          <h2 className=\"text-lg font-semibold mb-4\">Over AI-Inzichten</h2>\r\n          <p className=\"text-gray-700\">\r\n            AI-inzichten analyseren uw activiteiten en gezondheidsgegevens om patronen te identificeren die u kunnen helpen uw dagelijkse activiteiten beter te beheren.\r\n            Deze inzichten worden automatisch gegenereerd op basis van de gegevens die u invoert bij het uitvoeren van taken.\r\n          </p>\r\n          <p className=\"text-gray-700 mt-2\">\r\n            Hoe meer activiteiten u logt, hoe nauwkeuriger en persoonlijker de inzichten worden.\r\n          </p>\r\n        </div>\r\n      </div>\r\n      \r\n      {error && (\r\n        <div className=\"mb-6\">\r\n          <div className=\"bg-red-50 border border-red-200 rounded-lg p-4 text-red-700\">\r\n            <p>{error}</p>\r\n            <button\r\n              onClick={fetchInsights}\r\n              className=\"mt-2 px-3 py-1 bg-red-600 text-white rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-opacity-50\"\r\n            >\r\n              Probeer opnieuw\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      {insights.length > 0 ? (\r\n        <div className=\"space-y-6\">\r\n          {insights.map(insight => (\r\n            <div key={insight.id} className=\"bg-white rounded-lg shadow-md overflow-hidden\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => toggleExpand(insight.id)}\r\n                className=\"w-full px-6 py-4 text-left flex justify-between items-center hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-inset\"\r\n                aria-expanded={expandedInsightId === insight.id}\r\n                aria-controls={`insight-details-${insight.id}`}\r\n              >\r\n                <div className=\"flex items-start\">\r\n                  <div className=\"flex-shrink-0 mt-1 mr-3\">\r\n                    {getTrendIcon(insight.trend_type)}\r\n                  </div>\r\n                  <div className=\"flex-grow\">\r\n                    <p className=\"text-gray-800 font-medium\">{insight.beschrijving}</p>\r\n                    <div className=\"flex items-center mt-2 text-xs text-gray-500\">\r\n                      <span className=\"mr-3 capitalize\">\r\n                        {insight.periode === 'dag' ? 'Dagelijks inzicht' : \r\n                         insight.periode === 'week' ? 'Wekelijks inzicht' : 'Maandelijks inzicht'}\r\n                      </span>\r\n                      <span>Gegenereerd op {formatDate(insight.created_at)}</span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <svg \r\n                  xmlns=\"http://www.w3.org/2000/svg\" \r\n                  className={`h-5 w-5 text-gray-400 transition-transform duration-200 ${expandedInsightId === insight.id ? 'transform rotate-180' : ''}`} \r\n                  viewBox=\"0 0 20 20\" \r\n                  fill=\"currentColor\"\r\n                  aria-hidden=\"true\"\r\n                >\r\n                  <path fillRule=\"evenodd\" d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\r\n                </svg>\r\n              </button>\r\n              \r\n              {expandedInsightId === insight.id && (\r\n                <div \r\n                  id={`insight-details-${insight.id}`}\r\n                  className=\"border-t border-gray-200\"\r\n                >\r\n                  {logs[insight.id] ? (\r\n                    <AIInsightVisualization insight={insight} logs={logs[insight.id]} />\r\n                  ) : (\r\n                    <div className=\"p-4 text-center\">\r\n                      <div className=\"animate-pulse\">\r\n                        <div className=\"h-32 bg-gray-200 rounded-md\"></div>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              )}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <div className=\"bg-white rounded-lg shadow-md p-8 text-center\">\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-16 w-16 mx-auto text-gray-400 mb-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" aria-hidden=\"true\">\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\" />\r\n          </svg>\r\n          <h2 className=\"text-xl font-semibold text-gray-700 mb-2\">Geen inzichten gevonden</h2>\r\n          <p className=\"text-gray-500 mb-6\">\r\n            {filter === 'all' \r\n              ? 'Er zijn nog geen AI-inzichten beschikbaar.' \r\n              : `Er zijn nog geen ${filter === 'dag' ? 'dagelijkse' : filter === 'week' ? 'wekelijkse' : 'maandelijkse'} inzichten beschikbaar.`}\r\n          </p>\r\n          <Link \r\n            href=\"/taken\"\r\n            className=\"px-4 py-2 bg-purple-600 text-white font-medium rounded-md hover:bg-purple-700 transition-colors\"\r\n          >\r\n            Ga naar taken\r\n          </Link>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\layout.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":65,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":65,"endColumn":35},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'flex-grow' should be updated to 'grow' in Tailwind CSS v3!","line":96,"column":39,"nodeType":"JSXAttribute","messageId":"classnameChanged","endLine":96,"endColumn":60,"fix":{"range":[4358,4367],"text":"grow"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import './globals.css'; // Keep this at the top\r\n\r\nimport { ReactNode } from 'react';\r\n\r\nimport dynamic from 'next/dynamic';\r\n\r\nimport SkipLink from '@/components/common/SkipLink';\r\nimport { NotificationProvider } from '@/context/NotificationContext';\r\nimport { ReactQueryProvider } from '@/lib/react-query-provider';\r\n\r\nimport type { Viewport } from 'next';\r\n\r\nconst DynamicAuthProvider = dynamic(() => import('@/components/auth/AuthProvider').then(mod => mod.AuthProvider), {\r\n  ssr: false,\r\n});\r\nconst DynamicServiceWorkerInitializer = dynamic(() => import('@/components/common/ServiceWorkerInitializer'), {\r\n  ssr: false,\r\n});\r\nconst DynamicOfflineIndicator = dynamic(() => import('@/components/common/OfflineIndicator'), {\r\n  ssr: false,\r\n});\r\n\r\n// It's generally better to put PWA related tags directly in the <head>\r\n// The 'metadata' object is more for SEO and OpenGraph, though Next.js tries to map some.\r\nexport const metadata = {\r\n  title: 'FibroGuardian Pro',\r\n  description: 'Een app voor fibromyalgiepatiënten om dagelijkse activiteiten en gezondheidsmetrieken te beheren.',\r\n  manifest: '/manifest.json',\r\n  // themeColor: '#7c3aed', // Will be handled by generateViewport\r\n  appleWebApp: {\r\n    capable: true,\r\n    statusBarStyle: 'default', // Or 'black-translucent'\r\n    title: 'FibroGuardian Pro',\r\n  },\r\n  icons: {\r\n    icon: [ // General purpose icons\r\n      { url: '/icons/favicon-32x32.png', sizes: '32x32', type: 'image/png' },\r\n      { url: '/icons/icon-192x192.png', sizes: '192x192', type: 'image/png' }, // Example, covered by manifest too\r\n    ],\r\n    shortcut: ['/icons/favicon.ico'], // For older browsers\r\n    apple: [ // Apple touch icons\r\n      { url: '/icons/apple-touch-icon.png' }, // Default Apple touch icon\r\n      // You can add more sizes if needed, e.g.\r\n      // { url: '/icons/apple-icon-180x180.png', sizes: '180x180', type: 'image/png' },\r\n    ],\r\n    other: [ // Other specific icons like for Android Chrome\r\n      { rel: 'icon', url: '/favicon-16x16.png', sizes: '16x16', type: 'image/png' },\r\n    ],\r\n  },\r\n  // viewport is handled by Next.js by default, but we customized it.\r\n  // The manual <meta name=\"viewport\"...> below will take precedence if not removed,\r\n  // or Next.js will add its own if this viewport field is not in metadata.\r\n    // For clarity, we'll keep the manual one for now as it was specifically set.\r\n};\r\n\r\nexport function generateViewport(): Viewport {\r\n  return {\r\n    themeColor: '#7c3aed',\r\n    // width: 'device-width', // These are typically part of the viewport meta tag itself\r\n    // initialScale: 1,      // rather than themeColor descriptor.\r\n                            // The manual viewport meta tag below handles width/initialScale.\r\n  };\r\n}\r\n\r\nexport default function RootLayout({\r\n  children,\r\n}: {\r\n  children: ReactNode\r\n}) {\r\n  return (<html lang=\"nl-NL\">{/* Ensure consistent casing */}\r\n<head>\r\n        {/* Viewport is set here to ensure it's exactly as desired, overriding Next.js default if any */}\r\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n        {/* theme-color is now handled by generateViewport */}\r\n        {/* manifest.json is now linked via metadata object */}\r\n        {/* Other PWA related meta tags like application-name, apple-mobile-web-app-capable etc. \r\n            are often derived from the manifest or covered by metadata's appleWebApp field.\r\n            We will remove the commented out manual tags that are now covered.\r\n        */}\r\n        {/* <link rel=\"apple-touch-icon\" href=\"/icons/apple-touch-icon.png\" />  */}\r\n        {/* Favicon links are now handled by metadata.icons */}\r\n        {/* <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/icons/favicon-32x32.png\" /> */}\r\n        {/* <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/favicon-16x16.png\" /> */}\r\n        {/* <link rel=\"shortcut icon\" href=\"/icons/favicon.ico\" /> */}\r\n</head>\r\n<body>\r\n        <SkipLink />\r\n        <ReactQueryProvider>\r\n          <DynamicAuthProvider>\r\n            <NotificationProvider>\r\n              {/* Service Worker Initializer */}\r\n              <DynamicServiceWorkerInitializer />\r\n              {/* Offline Indicator */}\r\n              <DynamicOfflineIndicator />\r\n              {/* NotificationList is rendered inside NotificationProvider */}\r\n              <main id=\"main-content\" className=\"flex-grow\"> {/* Ensure main can grow */}\r\n                {children}\r\n              </main>\r\n            </NotificationProvider>\r\n          </DynamicAuthProvider>\r\n        </ReactQueryProvider>\r\n</body>\r\n</html>);\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\mijn-specialisten\\layout.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":3,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":3,"endColumn":47}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import DashboardLayout from '@/components/layout/DashboardLayout';\r\n\r\nexport default function MijnSpecialistenLayout({\r\n  children,\r\n}: {\r\n  children: React.ReactNode;\r\n}) {\r\n  return <DashboardLayout>{children}</DashboardLayout>;\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\mijn-specialisten\\mijn-specialisten-client.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":45,"fix":{"range":[61,61],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":46,"fix":{"range":[108,108],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/lib/supabase-client` import should occur after import of `@/components/specialisten/SpecialistsList`","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":66,"fix":{"range":[110,606],"text":"import AddSpecialistButtonContainer from '@/containers/specialisten/AddSpecialistButtonContainer'; // Updated import\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\nimport SpecialistLoadingSkeleton from '@/components/specialisten/SpecialistLoadingSkeleton';\r\nimport EmptySpecialistState from '@/components/specialisten/EmptySpecialistState';\r\nimport SpecialistsList from '@/components/specialisten/SpecialistsList';\r\nimport { getSupabaseBrowserClient } from '@/lib/supabase-client';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/containers/specialisten/AddSpecialistButtonContainer` import should occur after import of `@/components/specialisten/SpecialistsList`","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":99,"fix":{"range":[177,606],"text":"import { useAuth } from '@/components/auth/AuthProvider';\r\nimport SpecialistLoadingSkeleton from '@/components/specialisten/SpecialistLoadingSkeleton';\r\nimport EmptySpecialistState from '@/components/specialisten/EmptySpecialistState';\r\nimport SpecialistsList from '@/components/specialisten/SpecialistsList';\r\nimport AddSpecialistButtonContainer from '@/containers/specialisten/AddSpecialistButtonContainer'; // Updated import\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/components/specialisten/SpecialistLoadingSkeleton` import should occur after import of `@/components/specialisten/EmptySpecialistState`","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":93,"fix":{"range":[354,532],"text":"import EmptySpecialistState from '@/components/specialisten/EmptySpecialistState';\r\nimport SpecialistLoadingSkeleton from '@/components/specialisten/SpecialistLoadingSkeleton';\r\n"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[874,877],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[874,877],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":19,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":19,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'serverUser' is defined but never used. Allowed unused args must match /^_/u.","line":19,"column":56,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":66},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userProfile' is defined but never used. Allowed unused args must match /^_/u.","line":19,"column":81,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":92},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":40,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":40,"endColumn":111,"fix":{"range":[1926,2009],"text":"h-12 w-12 animate-spin rounded-full border-4 border-purple-500 border-t-transparent"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'w-12, h-12' could be replaced by the 'size-12' shorthand!","line":40,"column":16,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":40,"endColumn":111,"fix":{"range":[1926,2009],"text":"size-12 border-4 border-purple-500 border-t-transparent rounded-full animate-spin"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":50,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":50,"endColumn":50,"fix":{"range":[2311,2335],"text":"rounded-md bg-red-50 p-4"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":76,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3322,3325],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3322,3325],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":86,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":86,"endColumn":64,"fix":{"range":[3618,3656],"text":"mb-6 flex items-center justify-between"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":92,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":92,"endColumn":70,"fix":{"range":[3878,3920],"text":"mb-6 rounded-md bg-red-50 p-4 text-red-700"}}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":5,"fixableWarningCount":5,"source":"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { User } from '@supabase/supabase-js';\r\nimport { getSupabaseBrowserClient } from '@/lib/supabase-client';\r\nimport AddSpecialistButtonContainer from '@/containers/specialisten/AddSpecialistButtonContainer'; // Updated import\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\nimport SpecialistLoadingSkeleton from '@/components/specialisten/SpecialistLoadingSkeleton';\r\nimport EmptySpecialistState from '@/components/specialisten/EmptySpecialistState';\r\nimport SpecialistsList from '@/components/specialisten/SpecialistsList';\r\nimport { Profile as Specialist } from '@/types'; // Use Profile and alias as Specialist for minimal changes\r\n\r\ninterface MijnSpecialistenClientProps {\r\n  user: User;\r\n  specialists: Specialist[]; // This will now refer to Profile aliased as Specialist\r\n  userProfile: any;\r\n}\r\n\r\nexport default function MijnSpecialistenClient({ user: serverUser, specialists, userProfile }: MijnSpecialistenClientProps) {\r\n  // Use the authenticated user from context to ensure consistency\r\n  const { user, loading: authLoading } = useAuth();\r\n  const [isClient, setIsClient] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  // Initialize localSpecialists with the specialists prop.\r\n  // The type Specialist is an alias for Profile here due to the import.\r\n  const [localSpecialists, setLocalSpecialists] = useState<Specialist[]>(specialists);\r\n  const [isLoading, setIsLoading] = useState(false); // Added for remove operation\r\n\r\n  useEffect(() => {\r\n    setIsClient(true);\r\n  }, []);\r\n  \r\n  // Remove debug logging for production\r\n  \r\n  // If auth is loading or not yet client-side, show a generic loading state\r\n  if (authLoading || !isClient) {\r\n    return (\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        <div className=\"flex items-center justify-center\">\r\n          <div className=\"w-12 h-12 border-4 border-purple-500 border-t-transparent rounded-full animate-spin\" aria-label=\"Laden...\"></div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  // After client has mounted and auth is no longer loading\r\n  if (!user) { // Rely on the user from AuthProvider once client-side\r\n    return (\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        <div className=\"bg-red-50 p-4 rounded-md\">\r\n          <p className=\"text-red-700\">Authenticatie is vereist. U wordt mogelijk doorgestuurd naar de login pagina.</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // At this point, user is authenticated and we are on the client\r\n  // Hooks for error, localSpecialists, isLoading were moved up\r\n\r\n  const handleRemoveSpecialist = async (specialistId: string) => {\r\n    if (!user || !window.confirm('Weet u zeker dat u deze specialist wilt verwijderen?')) return;\r\n\r\n    setIsLoading(true); // Set loading true for this specific operation\r\n    try {\r\n      const supabase = getSupabaseBrowserClient();\r\n      \r\n      const { error: deleteError } = await supabase // Renamed error to avoid conflict\r\n        .from('specialist_patienten')\r\n        .delete()\r\n        .eq('specialist_id', specialistId)\r\n        .eq('patient_id', user.id);\r\n\r\n      if (deleteError) throw deleteError;\r\n\r\n      setLocalSpecialists(prev => prev.filter(s => s.id !== specialistId));\r\n    } catch (err: any) {\r\n      console.error('Error removing specialist:', err);\r\n      setError(err.message || 'Er is een fout opgetreden bij het verwijderen.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        <div className=\"flex justify-between items-center mb-6\">\r\n          <h1 className=\"text-2xl font-bold text-gray-800\">Mijn Specialisten</h1>\r\n          <AddSpecialistButtonContainer /> {/* Updated component */}\r\n        </div>\r\n\r\n        {error && (\r\n          <div className=\"bg-red-50 text-red-700 p-4 rounded-md mb-6\">\r\n            {error}\r\n          </div>\r\n        )}\r\n\r\n        {isLoading && <SpecialistLoadingSkeleton /> } \r\n        \r\n        {!isLoading && localSpecialists.length === 0 && <EmptySpecialistState />}\r\n        \r\n        {!isLoading && localSpecialists.length > 0 && (\r\n          <SpecialistsList specialists={localSpecialists} onRemove={handleRemoveSpecialist} />\r\n        )}\r\n      </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\mijn-specialisten\\page.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":74,"fix":{"range":[267,267],"text":"\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":9,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":9,"endColumn":51},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":17,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":17,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[834,952],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":24,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":24,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1055,1118],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":27,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":27,"endColumn":50,"fix":{"range":[1211,1235],"text":"rounded-md bg-red-50 p-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":46,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":46,"endColumn":50,"fix":{"range":[1855,1879],"text":"rounded-md bg-red-50 p-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":57,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":57,"endColumn":53,"fix":{"range":[2216,2243],"text":"rounded-md bg-yellow-50 p-4"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":1,"fixableWarningCount":3,"source":"// import { createServerComponentClient } from '@supabase/auth-helpers-nextjs'; // Old way\r\n// import { cookies } from 'next/headers'; // Handled by getSupabaseServerComponentClient\r\nimport { getSupabaseServerComponentClient } from '@/lib/supabase-server'; // New way\r\nimport MijnSpecialistenClient from './mijn-specialisten-client';\r\n\r\nexport const dynamic = 'force-dynamic';\r\nexport const revalidate = 0; // Disable caching\r\n\r\nexport default async function MijnSpecialistenPage() {\r\n  const supabase = getSupabaseServerComponentClient(); // Use the new helper\r\n  \r\n  // Haal gebruikerssessie op - middleware zorgt al voor authenticatie\r\n  // Use getUser() instead of getSession() for server components\r\n  const { data: { user }, error: userError } = await supabase.auth.getUser();\r\n  \r\n  // Log session information for debugging\r\n  console.log('[Server] MijnSpecialistenPage user check:', {\r\n    hasUser: !!user,\r\n    error: userError?.message\r\n  });\r\n  \r\n  if (!user) {\r\n    // Dit zou niet moeten gebeuren door middleware, maar voor de zekerheid\r\n    console.log('[Server] No user found despite middleware check');\r\n    return (\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        <div className=\"bg-red-50 p-4 rounded-md\">\r\n          <p className=\"text-red-700\">U bent niet ingelogd. <a href=\"/auth/login\" className=\"underline\">Log in</a> om deze pagina te bekijken.</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  // Haal gebruikersprofiel op\r\n  const { data: profile, error: profileError } = await supabase\r\n    .from('profiles')\r\n    .select('*')\r\n    .eq('id', user.id)\r\n    .single();\r\n  \r\n  if (profileError || !profile) {\r\n    console.error('Error fetching profile:', profileError);\r\n    // Toon een foutmelding in plaats van redirect\r\n    return (\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        <div className=\"bg-red-50 p-4 rounded-md\">\r\n          <p className=\"text-red-700\">Er is een fout opgetreden bij het ophalen van uw profiel.</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  // Controleer of gebruiker een patiënt is\r\n  if (!profile || profile.type !== 'patient') {\r\n    return (\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        <div className=\"bg-yellow-50 p-4 rounded-md\">\r\n          <p className=\"text-yellow-700\">Deze pagina is alleen beschikbaar voor patiënten.</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  // Haal de specialist-patiënt relaties op\r\n  const { data: relationData, error: relationError } = await supabase\r\n    .from('specialist_patienten')\r\n    .select('specialist_id, toegangsrechten')\r\n    .eq('patient_id', user.id);\r\n  \r\n  if (relationError) {\r\n    console.error('Error fetching specialist relations:', relationError);\r\n  // Ga door met lege lijst\r\n  }\r\n  \r\n  let specialistsProps: import('@/types').Profile[] = []; \r\n  \r\n  if (relationData && relationData.length > 0) {\r\n    const specialistIds = relationData.map(rel => rel.specialist_id);\r\n    if (specialistIds.length > 0) {\r\n      const { data: fetchedProfiles, error: specialistsError } = await supabase\r\n        .from('profiles')\r\n        .select('id, voornaam, achternaam, email, type, avatar_url, postcode, gemeente, geboortedatum, created_at, updated_at') // Ensure all Profile fields\r\n        .in('id', specialistIds)\r\n        .eq('type', 'specialist');\r\n      \r\n      if (!specialistsError && fetchedProfiles) {\r\n        specialistsProps = fetchedProfiles.map(p => ({\r\n          ...p,\r\n          geboortedatum: p.geboortedatum ? new Date(p.geboortedatum) : undefined,\r\n          // The `toegangsrechten` is specific to the relation, not the profile itself.\r\n          // MijnSpecialistenClient will need to handle this if it needs that data.\r\n          // For now, ensure `specialistsProps` is strictly Profile[].\r\n        }));\r\n      } else if (specialistsError) {\r\n        console.error('Error fetching specialist profiles:', specialistsError);\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Gebruik de client component om de UI te renderen\r\n  // Note: `MijnSpecialistenClient` imports `Profile as Specialist`, so `specialistsProps` (which is Profile[]) is compatible.\r\n  return <MijnSpecialistenClient user={user} specialists={specialistsProps} userProfile={profile} />;\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\offline\\help\\page.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":8,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":8,"endColumn":40},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":11,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":11,"endColumn":41,"fix":{"range":[243,260],"text":"mx-auto max-w-3xl"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":12,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":12,"endColumn":48,"fix":{"range":[288,310],"text":"mb-8 flex items-center"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":13,"column":26,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":13,"endColumn":80,"fix":{"range":[350,392],"text":"mr-4 text-purple-600 hover:text-purple-800"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":14,"column":53,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":14,"endColumn":72,"fix":{"range":[459,466],"text":"size-5"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":30,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":30,"endColumn":64,"fix":{"range":[1145,1183],"text":"mb-6 rounded-xl bg-white p-6 shadow-lg"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":31,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":31,"endColumn":69,"fix":{"range":[1212,1254],"text":"mb-4 text-xl font-semibold text-purple-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":32,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":32,"endColumn":44,"fix":{"range":[1320,1338],"text":"mb-6 text-gray-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":38,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":38,"endColumn":68,"fix":{"range":[1628,1666],"text":"border-l-4 border-purple-500 py-2 pl-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":39,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":39,"endColumn":63,"fix":{"range":[1699,1731],"text":"mb-2 font-semibold text-gray-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":46,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":46,"endColumn":68,"fix":{"range":[2109,2147],"text":"border-l-4 border-purple-500 py-2 pl-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":47,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":47,"endColumn":63,"fix":{"range":[2180,2212],"text":"mb-2 font-semibold text-gray-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":54,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":54,"endColumn":68,"fix":{"range":[2556,2594],"text":"border-l-4 border-purple-500 py-2 pl-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":55,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":55,"endColumn":63,"fix":{"range":[2627,2659],"text":"mb-2 font-semibold text-gray-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":64,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":64,"endColumn":64,"fix":{"range":[3043,3081],"text":"mb-6 rounded-xl bg-white p-6 shadow-lg"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":65,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":65,"endColumn":69,"fix":{"range":[3110,3152],"text":"mb-4 text-xl font-semibold text-purple-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":69,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":69,"endColumn":63,"fix":{"range":[3279,3311],"text":"mb-1 font-semibold text-gray-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":77,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":77,"endColumn":63,"fix":{"range":[3746,3778],"text":"mb-1 font-semibold text-gray-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":85,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":85,"endColumn":63,"fix":{"range":[4202,4234],"text":"mb-1 font-semibold text-gray-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":92,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":92,"endColumn":63,"fix":{"range":[4578,4610],"text":"mb-1 font-semibold text-gray-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":100,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":100,"endColumn":63,"fix":{"range":[4978,5010],"text":"mb-1 font-semibold text-gray-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":109,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":109,"endColumn":59,"fix":{"range":[5427,5460],"text":"rounded-xl bg-white p-6 shadow-lg"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":110,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":110,"endColumn":69,"fix":{"range":[5489,5531],"text":"mb-4 text-xl font-semibold text-purple-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":112,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":112,"endColumn":65,"fix":{"range":[5602,5640],"text":"list-disc space-y-2 pl-5 text-gray-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":124,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":124,"endColumn":108,"fix":{"range":[6348,6431],"text":"rounded-md bg-purple-600 px-6 py-2 text-white transition-colors hover:bg-purple-700"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":24,"source":"'use client';\r\n\r\nimport React from 'react';\r\n\r\nimport Image from 'next/image';\r\nimport Link from 'next/link';\r\n\r\nexport default function OfflineHelpPage() {\r\n  return (\r\n    <div className=\"container mx-auto px-4 py-8\">\r\n      <div className=\"max-w-3xl mx-auto\">\r\n        <div className=\"flex items-center mb-8\">\r\n          <Link href=\"/\" className=\"text-purple-600 hover:text-purple-800 mr-4\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n              <path fillRule=\"evenodd\" d=\"M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z\" clipRule=\"evenodd\" />\r\n            </svg>\r\n          </Link>\r\n          <div className=\"flex items-center\">\r\n            <Image \r\n              src=\"/logo.png\" \r\n              alt=\"FibroGuardian Pro Logo\" \r\n              width={40} \r\n              height={40} \r\n              className=\"mr-3\"\r\n            />\r\n            <h1 className=\"text-2xl font-bold text-gray-800\">Offline Hulp</h1>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"bg-white rounded-xl shadow-lg p-6 mb-6\">\r\n          <h2 className=\"text-xl font-semibold text-purple-800 mb-4\">Wat kunt u doen in offline modus?</h2>\r\n          <p className=\"text-gray-600 mb-6\">\r\n            FibroGuardian Pro is ontworpen om ook te werken wanneer u geen internetverbinding heeft. \r\n            Hier zijn de belangrijkste functies die beschikbaar zijn in offline modus:\r\n          </p>\r\n          \r\n          <div className=\"space-y-6\">\r\n            <div className=\"border-l-4 border-purple-500 pl-4 py-2\">\r\n              <h3 className=\"font-semibold text-gray-800 mb-2\">Dagelijkse reflecties</h3>\r\n              <p className=\"text-gray-600\">\r\n                U kunt uw dagelijkse reflecties blijven invullen, inclusief pijnscores, vermoeidheid en stemming. \r\n                Deze worden lokaal opgeslagen en automatisch gesynchroniseerd zodra u weer online bent.\r\n              </p>\r\n            </div>\r\n            \r\n            <div className=\"border-l-4 border-purple-500 pl-4 py-2\">\r\n              <h3 className=\"font-semibold text-gray-800 mb-2\">Taken en activiteiten</h3>\r\n              <p className=\"text-gray-600\">\r\n                Bekijk uw geplande taken en markeer ze als voltooid. Nieuwe taaklogboeken worden lokaal opgeslagen \r\n                en gesynchroniseerd wanneer u weer verbinding heeft.\r\n              </p>\r\n            </div>\r\n            \r\n            <div className=\"border-l-4 border-purple-500 pl-4 py-2\">\r\n              <h3 className=\"font-semibold text-gray-800 mb-2\">Eerder bekeken gegevens</h3>\r\n              <p className=\"text-gray-600\">\r\n                Pagina&apos;s en gegevens die u eerder heeft bekeken terwijl u online was, zijn beschikbaar in de cache. \r\n                Dit omvat uw profielgegevens, eerdere reflecties en taken.\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"bg-white rounded-xl shadow-lg p-6 mb-6\">\r\n          <h2 className=\"text-xl font-semibold text-purple-800 mb-4\">Veelgestelde vragen</h2>\r\n          \r\n          <div className=\"space-y-4\">\r\n            <div>\r\n              <h3 className=\"font-semibold text-gray-800 mb-1\">Worden mijn gegevens bewaard als ik offline ben?</h3>\r\n              <p className=\"text-gray-600\">\r\n                Ja, alle gegevens die u invoert terwijl u offline bent, worden veilig opgeslagen in de lokale opslag van uw browser. \r\n                Ze worden automatisch gesynchroniseerd met de server zodra u weer online bent.\r\n              </p>\r\n            </div>\r\n            \r\n            <div>\r\n              <h3 className=\"font-semibold text-gray-800 mb-1\">Wat gebeurt er als ik offline een reflectie invul?</h3>\r\n              <p className=\"text-gray-600\">\r\n                Uw reflectie wordt lokaal opgeslagen en gemarkeerd voor synchronisatie. Zodra u weer online bent, \r\n                wordt deze automatisch naar de server verzonden. U hoeft niets extra&apos;s te doen.\r\n              </p>\r\n            </div>\r\n            \r\n            <div>\r\n              <h3 className=\"font-semibold text-gray-800 mb-1\">Kan ik nieuwe taken aanmaken in offline modus?</h3>\r\n              <p className=\"text-gray-600\">\r\n                Nee, voor het aanmaken van nieuwe taken is een internetverbinding vereist. U kunt wel bestaande taken bekijken en voltooien.\r\n              </p>\r\n            </div>\r\n            \r\n            <div>\r\n              <h3 className=\"font-semibold text-gray-800 mb-1\">Hoe weet ik of ik online of offline ben?</h3>\r\n              <p className=\"text-gray-600\">\r\n                FibroGuardian Pro toont een melding wanneer u offline gaat of weer online komt. \r\n                U kunt ook de netwerkstatus van uw apparaat controleren.\r\n              </p>\r\n            </div>\r\n            \r\n            <div>\r\n              <h3 className=\"font-semibold text-gray-800 mb-1\">Wat moet ik doen als gegevens niet synchroniseren?</h3>\r\n              <p className=\"text-gray-600\">\r\n                Als u weer online bent maar uw gegevens lijken niet te synchroniseren, probeer de pagina te vernieuwen. \r\n                Als het probleem aanhoudt, neem dan contact op met ondersteuning.\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"bg-white rounded-xl shadow-lg p-6\">\r\n          <h2 className=\"text-xl font-semibold text-purple-800 mb-4\">Tips voor offline gebruik</h2>\r\n          \r\n          <ul className=\"space-y-2 text-gray-600 list-disc pl-5\">\r\n            <li>Zorg ervoor dat u regelmatig online gaat om uw gegevens te synchroniseren.</li>\r\n            <li>Als u weet dat u offline gaat, bezoek dan eerst de belangrijkste pagina&apos;s die u nodig heeft.</li>\r\n            <li>Gebruik de &quot;Vernieuwen&quot; knop op de offline pagina om te controleren of u weer online bent.</li>\r\n            <li>Als u problemen ondervindt met synchronisatie, probeer de browser te sluiten en opnieuw te openen.</li>\r\n            <li>Voor kritieke gegevens kunt u een screenshot maken als extra back-up.</li>\r\n          </ul>\r\n        </div>\r\n        \r\n        <div className=\"mt-8 text-center\">\r\n          <Link \r\n            href=\"/\" \r\n            className=\"px-6 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 transition-colors\"\r\n          >\r\n            Terug naar startpagina\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\offline\\page.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":27,"fix":{"range":[26,26],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`next` import should occur before import of `next/link`","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":33,"fix":{"range":[28,93],"text":"import { Metadata } from 'next';\r\nimport Link from 'next/link';\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":16,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":16,"endColumn":36},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":18,"column":10,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":18,"endColumn":91,"fix":{"range":[511,580],"text":"flex min-h-screen flex-col items-center justify-center bg-gray-50 p-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":19,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":19,"endColumn":85,"fix":{"range":[606,667],"text":"w-full max-w-md overflow-hidden rounded-lg bg-white shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":21,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":21,"endColumn":52,"fix":{"range":[728,752],"text":"mb-6 flex justify-center"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":22,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":22,"endColumn":97,"fix":{"range":[784,851],"text":"flex h-24 w-24 items-center justify-center rounded-full bg-blue-100"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'w-24, h-24' could be replaced by the 'size-24' shorthand!","line":22,"column":18,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":22,"endColumn":97,"fix":{"range":[784,851],"text":"size-24 rounded-full bg-blue-100 flex items-center justify-center"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-12, w-12' could be replaced by the 'size-12' shorthand!","line":25,"column":17,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":25,"endColumn":52,"fix":{"range":[956,979],"text":"size-12 text-blue-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":41,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":41,"endColumn":76,"fix":{"range":[1609,1658],"text":"mb-4 text-center text-2xl font-bold text-gray-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":45,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":45,"endColumn":56,"fix":{"range":[1743,1773],"text":"mb-6 text-center text-gray-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":52,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":52,"endColumn":55,"fix":{"range":[2084,2109],"text":"rounded-md bg-blue-50 p-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":53,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":53,"endColumn":63,"fix":{"range":[2142,2174],"text":"mb-2 font-semibold text-blue-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":54,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":54,"endColumn":76,"fix":{"range":[2241,2286],"text":"list-inside list-disc space-y-1 text-blue-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":62,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":62,"endColumn":55,"fix":{"range":[2613,2638],"text":"rounded-md bg-gray-50 p-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":63,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":63,"endColumn":63,"fix":{"range":[2671,2703],"text":"mb-2 font-semibold text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":64,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":64,"endColumn":76,"fix":{"range":[2775,2820],"text":"list-inside list-disc space-y-1 text-gray-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":76,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":76,"endColumn":161,"fix":{"range":[3237,3371],"text":"block w-full rounded-md bg-blue-600 px-4 py-2 text-center font-medium text-white transition duration-150 ease-in-out hover:bg-blue-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":83,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":83,"endColumn":184,"fix":{"range":[3560,3717],"text":"block w-full rounded-md border border-blue-600 bg-white px-4 py-2 text-center font-medium text-blue-600 transition duration-150 ease-in-out hover:bg-gray-100"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":90,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":90,"endColumn":71,"fix":{"range":[3870,3915],"text":"border-t border-gray-100 bg-gray-50 px-6 py-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":91,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":91,"endColumn":59,"fix":{"range":[3943,3976],"text":"text-center text-sm text-gray-500"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":2,"fixableWarningCount":18,"source":"import React from 'react';\r\nimport Link from 'next/link';\r\nimport { Metadata } from 'next';\r\n\r\nexport const metadata: Metadata = {\r\n  title: 'Offline | FibroGuardian',\r\n  description: 'U bent momenteel offline. Sommige functies zijn mogelijk beperkt beschikbaar.'\r\n};\r\n\r\n/**\r\n * Offline page component\r\n * \r\n * This page is displayed when the user is offline and tries to access a page\r\n * that is not cached by the service worker.\r\n */\r\nexport default function OfflinePage() {\r\n  return (\r\n    <div className=\"min-h-screen flex flex-col items-center justify-center p-4 bg-gray-50\">\r\n      <div className=\"max-w-md w-full bg-white rounded-lg shadow-md overflow-hidden\">\r\n        <div className=\"p-6\">\r\n          <div className=\"flex justify-center mb-6\">\r\n            <div className=\"w-24 h-24 rounded-full bg-blue-100 flex items-center justify-center\">\r\n              <svg \r\n                xmlns=\"http://www.w3.org/2000/svg\" \r\n                className=\"h-12 w-12 text-blue-600\" \r\n                fill=\"none\" \r\n                viewBox=\"0 0 24 24\" \r\n                stroke=\"currentColor\"\r\n              >\r\n                <path \r\n                  strokeLinecap=\"round\" \r\n                  strokeLinejoin=\"round\" \r\n                  strokeWidth={2} \r\n                  d=\"M18.364 5.636a9 9 0 010 12.728m-3.536-3.536a3 3 0 010-5.656m-6.364 0a3 3 0 00-4.243 4.243m10.607-10.607a9 9 0 00-12.728 0\" \r\n                />\r\n                <line x1=\"1\" y1=\"1\" x2=\"23\" y2=\"23\" strokeWidth=\"2\" stroke=\"currentColor\" />\r\n              </svg>\r\n            </div>\r\n          </div>\r\n          \r\n          <h1 className=\"text-2xl font-bold text-center text-gray-800 mb-4\">\r\n            U bent offline\r\n          </h1>\r\n          \r\n          <p className=\"text-gray-600 text-center mb-6\">\r\n            Het lijkt erop dat u momenteel geen internetverbinding heeft. \r\n            Sommige functies van FibroGuardian zijn nog steeds beschikbaar, \r\n            maar andere vereisen een internetverbinding.\r\n          </p>\r\n          \r\n          <div className=\"space-y-4\">\r\n            <div className=\"bg-blue-50 p-4 rounded-md\">\r\n              <h2 className=\"font-semibold text-blue-700 mb-2\">Beschikbaar in offline modus:</h2>\r\n              <ul className=\"list-disc list-inside text-blue-600 space-y-1\">\r\n                <li>Bekijk eerder geladen dashboardgegevens</li>\r\n                <li>Toegang tot opgeslagen reflecties</li>\r\n                <li>Bekijk uw taken en opdrachten</li>\r\n                <li>Bekijk eerder geladen rapporten</li>\r\n              </ul>\r\n            </div>\r\n            \r\n            <div className=\"bg-gray-50 p-4 rounded-md\">\r\n              <h2 className=\"font-semibold text-gray-700 mb-2\">Niet beschikbaar in offline modus:</h2>\r\n              <ul className=\"list-disc list-inside text-gray-600 space-y-1\">\r\n                <li>Nieuwe gegevens synchroniseren</li>\r\n                <li>Nieuwe reflecties toevoegen</li>\r\n                <li>Communiceren met specialisten</li>\r\n                <li>Nieuwe rapporten genereren</li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"mt-8 space-y-4\">\r\n            <Link \r\n              href=\"/dashboard\"\r\n              className=\"block w-full py-2 px-4 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-md text-center transition duration-150 ease-in-out\"\r\n            >\r\n              Ga naar Dashboard\r\n            </Link>\r\n            \r\n            <button \r\n              onClick={() => window.location.reload()}\r\n              className=\"block w-full py-2 px-4 bg-white hover:bg-gray-100 text-blue-600 font-medium rounded-md text-center transition duration-150 ease-in-out border border-blue-600\"\r\n            >\r\n              Probeer opnieuw te verbinden\r\n            </button>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"px-6 py-4 bg-gray-50 border-t border-gray-100\">\r\n          <p className=\"text-sm text-gray-500 text-center\">\r\n            FibroGuardian werkt aan verbeterde offline functionaliteit. \r\n            Uw gegevens worden lokaal opgeslagen en gesynchroniseerd zodra u weer online bent.\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\onboarding\\layout.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":42,"fix":{"range":[58,58],"text":"\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":35,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":35,"endColumn":41},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":40,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":40,"endColumn":110,"fix":{"range":[1331,1417],"text":"flex min-h-screen items-center justify-center bg-gradient-to-b from-purple-50 to-white"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":41,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":41,"endColumn":66,"fix":{"range":[1445,1485],"text":"flex animate-pulse flex-col items-center"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":42,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":42,"endColumn":69,"fix":{"range":[1515,1556],"text":"mb-4 h-24 w-24 rounded-full bg-purple-200"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'w-24, h-24' could be replaced by the 'size-24' shorthand!","line":42,"column":16,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":42,"endColumn":69,"fix":{"range":[1515,1556],"text":"size-24 bg-purple-200 rounded-full mb-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":43,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":43,"endColumn":63,"fix":{"range":[1592,1627],"text":"mb-2 h-4 w-32 rounded bg-purple-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":44,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":44,"endColumn":58,"fix":{"range":[1663,1693],"text":"h-3 w-24 rounded bg-purple-100"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":1,"fixableWarningCount":6,"source":"'use client';\r\n\r\nimport React, { useEffect } from 'react';\r\nimport { useRouter } from 'next/navigation';\r\n\r\n\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\nimport { OnboardingProvider, useOnboarding } from '@/context/OnboardingContext';\r\n\r\n// Wrapper component that uses the onboarding context\r\nconst OnboardingWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const { currentStep, isOnboardingActive, progress } = useOnboarding();\r\n  const router = useRouter();\r\n  \r\n  // Redirect to the current step if onboarding is active\r\n  useEffect(() => {\r\n    if (isOnboardingActive && currentStep) {\r\n      router.push(currentStep.route);\r\n    } else if (progress.isCompleted) {\r\n      // If onboarding is completed, redirect to dashboard\r\n      router.push('/dashboard');\r\n    }\r\n  }, [isOnboardingActive, currentStep, router, progress.isCompleted]);\r\n  \r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-b from-purple-50 to-white\">\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        {children}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Main layout component that provides the onboarding context\r\nexport default function OnboardingLayout({ children }: { children: React.ReactNode }) {\r\n  const { loading } = useAuth();\r\n  \r\n  if (loading) {\r\n    return (\r\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-b from-purple-50 to-white\">\r\n        <div className=\"animate-pulse flex flex-col items-center\">\r\n          <div className=\"w-24 h-24 bg-purple-200 rounded-full mb-4\"></div>\r\n          <div className=\"h-4 w-32 bg-purple-200 rounded mb-2\"></div>\r\n          <div className=\"h-3 w-24 bg-purple-100 rounded\"></div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <OnboardingProvider>\r\n      <OnboardingWrapper>{children}</OnboardingWrapper>\r\n    </OnboardingProvider>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\onboarding\\profile\\page.tsx","messages":[{"ruleId":"import/no-named-as-default","severity":1,"message":"Using exported name 'ProgressIndicator' as identifier for default import.","line":6,"column":8,"nodeType":"ImportDefaultSpecifier","endLine":6,"endColumn":25},{"ruleId":"import/no-named-as-default","severity":1,"message":"Using exported name 'StepNavigation' as identifier for default import.","line":7,"column":8,"nodeType":"ImportDefaultSpecifier","endLine":7,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":10,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":10,"endColumn":41},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":55,"column":10,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":55,"endColumn":39,"fix":{"range":[1704,1721],"text":"mx-auto max-w-3xl"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":58,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":58,"endColumn":62,"fix":{"range":[1784,1822],"text":"mb-6 rounded-xl bg-white p-8 shadow-lg"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":59,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":59,"endColumn":76,"fix":{"range":[1849,1900],"text":"mb-6 text-center text-3xl font-bold text-purple-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":63,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":63,"endColumn":50,"fix":{"range":[1983,2009],"text":"mb-6 text-lg text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":71,"column":39,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":71,"endColumn":95,"fix":{"range":[2455,2499],"text":"mb-1 block text-sm font-medium text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":79,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":79,"endColumn":123,"fix":{"range":[2743,2839],"text":"w-full rounded-md border border-gray-300 px-4 py-2 focus:border-purple-500 focus:ring-purple-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":85,"column":41,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":85,"endColumn":97,"fix":{"range":[2997,3041],"text":"mb-1 block text-sm font-medium text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":93,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":93,"endColumn":123,"fix":{"range":[3293,3389],"text":"w-full rounded-md border border-gray-300 px-4 py-2 focus:border-purple-500 focus:ring-purple-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":99,"column":36,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":99,"endColumn":92,"fix":{"range":[3544,3588],"text":"mb-1 block text-sm font-medium text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":107,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":107,"endColumn":123,"fix":{"range":[3827,3923],"text":"w-full rounded-md border border-gray-300 px-4 py-2 focus:border-purple-500 focus:ring-purple-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":119,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":122,"endColumn":17,"fix":{"range":[4471,4500],"text":"cursor-not-allowed opacity-70"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":119,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":122,"endColumn":17,"fix":{"range":[4337,4459],"text":"`\r\n                rounded-md bg-purple-600 px-6 py-2 text-white transition-colors hover:bg-purple-700\r\n                ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":129,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":129,"endColumn":67,"fix":{"range":[4711,4748],"text":"rounded-md bg-red-50 p-3 text-red-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":135,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":135,"endColumn":71,"fix":{"range":[4882,4923],"text":"rounded-md bg-green-50 p-3 text-green-700"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":14,"source":"'use client';\r\n\r\nimport React, { useState } from 'react';\r\n\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\nimport ProgressIndicator from '@/components/onboarding/ProgressIndicator';\r\nimport StepNavigation from '@/components/onboarding/StepNavigation';\r\nimport { getSupabaseBrowserClient } from '@/lib/supabase-client';\r\n\r\nexport default function ProfileSetupPage() {\r\n  const { profile, user } = useAuth();\r\n  const [voornaam, setVoornaam] = useState(profile?.voornaam || '');\r\n  const [achternaam, setAchternaam] = useState(profile?.achternaam || '');\r\n  const [email, setEmail] = useState(profile?.email || '');\r\n  const [isSaving, setIsSaving] = useState(false);\r\n  const [saveError, setSaveError] = useState<string | null>(null);\r\n  const [saveSuccess, setSaveSuccess] = useState(false);\r\n  \r\n  const isSpecialist = profile?.type === 'specialist';\r\n  \r\n  const handleSave = async () => {\r\n    if (!user) return;\r\n    \r\n    setIsSaving(true);\r\n    setSaveError(null);\r\n    setSaveSuccess(false);\r\n    \r\n    try {\r\n      const supabase = getSupabaseBrowserClient();\r\n      \r\n      const { error } = await supabase\r\n        .from('profiles')\r\n        .update({\r\n          voornaam,\r\n          achternaam,\r\n          email,\r\n          updated_at: new Date().toISOString()\r\n        })\r\n        .eq('id', user.id);\r\n      \r\n      if (error) {\r\n        throw error;\r\n      }\r\n      \r\n      setSaveSuccess(true);\r\n    } catch (error) {\r\n      console.error('Error updating profile:', error);\r\n      setSaveError('Er is een fout opgetreden bij het opslaan van uw profiel. Probeer het later opnieuw.');\r\n    } finally {\r\n      setIsSaving(false);\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div className=\"max-w-3xl mx-auto\">\r\n      <ProgressIndicator />\r\n      \r\n      <div className=\"bg-white rounded-xl shadow-lg p-8 mb-6\">\r\n        <h1 className=\"text-3xl font-bold text-center text-purple-800 mb-6\">\r\n          Uw profiel instellen\r\n        </h1>\r\n        \r\n        <p className=\"text-lg text-gray-700 mb-6\">\r\n          {isSpecialist \r\n            ? 'Vul uw profiel in zodat patiënten u kunnen vinden en contact met u kunnen opnemen. Een volledig profiel helpt bij het opbouwen van vertrouwen.'\r\n            : 'Vul uw profiel in zodat we de app kunnen personaliseren. Deze informatie helpt ons om u beter te ondersteunen.'}\r\n        </p>\r\n        \r\n        <div className=\"space-y-6\">\r\n          <div>\r\n            <label htmlFor=\"voornaam\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n              Voornaam\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"voornaam\"\r\n              value={voornaam}\r\n              onChange={(e) => setVoornaam(e.target.value)}\r\n              className=\"w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-purple-500 focus:border-purple-500\"\r\n              placeholder=\"Uw voornaam\"\r\n            />\r\n          </div>\r\n          \r\n          <div>\r\n            <label htmlFor=\"achternaam\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n              Achternaam\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"achternaam\"\r\n              value={achternaam}\r\n              onChange={(e) => setAchternaam(e.target.value)}\r\n              className=\"w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-purple-500 focus:border-purple-500\"\r\n              placeholder=\"Uw achternaam\"\r\n            />\r\n          </div>\r\n          \r\n          <div>\r\n            <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n              E-mailadres\r\n            </label>\r\n            <input\r\n              type=\"email\"\r\n              id=\"email\"\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n              className=\"w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-purple-500 focus:border-purple-500\"\r\n              placeholder=\"Uw e-mailadres\"\r\n            />\r\n            <p className=\"mt-1 text-sm text-gray-500\">\r\n              Dit e-mailadres wordt gebruikt voor communicatie en notificaties.\r\n            </p>\r\n          </div>\r\n          \r\n          <div className=\"flex justify-center\">\r\n            <button\r\n              onClick={handleSave}\r\n              disabled={isSaving}\r\n              className={`\r\n                px-6 py-2 text-white bg-purple-600 rounded-md hover:bg-purple-700 transition-colors\r\n                ${isSaving ? 'opacity-70 cursor-not-allowed' : ''}\r\n              `}\r\n            >\r\n              {isSaving ? 'Opslaan...' : 'Profiel opslaan'}\r\n            </button>\r\n          </div>\r\n          \r\n          {saveError && (\r\n            <div className=\"p-3 bg-red-50 text-red-700 rounded-md\">\r\n              {saveError}\r\n            </div>\r\n          )}\r\n          \r\n          {saveSuccess && (\r\n            <div className=\"p-3 bg-green-50 text-green-700 rounded-md\">\r\n              Uw profiel is succesvol opgeslagen!\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n      \r\n      <StepNavigation />\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\onboarding\\welcome\\page.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":42,"fix":{"range":[58,58],"text":"\n"}},{"ruleId":"import/no-named-as-default","severity":1,"message":"Using exported name 'ProgressIndicator' as identifier for default import.","line":8,"column":8,"nodeType":"ImportDefaultSpecifier","endLine":8,"endColumn":25},{"ruleId":"import/no-named-as-default","severity":1,"message":"Using exported name 'StepNavigation' as identifier for default import.","line":9,"column":8,"nodeType":"ImportDefaultSpecifier","endLine":9,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":12,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":12,"endColumn":36},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":24,"column":10,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":24,"endColumn":39,"fix":{"range":[703,720],"text":"mx-auto max-w-3xl"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":27,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":27,"endColumn":62,"fix":{"range":[783,821],"text":"mb-6 rounded-xl bg-white p-8 shadow-lg"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":28,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":28,"endColumn":50,"fix":{"range":[849,873],"text":"mb-6 flex justify-center"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":38,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":38,"endColumn":76,"fix":{"range":[1121,1172],"text":"mb-6 text-center text-3xl font-bold text-purple-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":42,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":42,"endColumn":50,"fix":{"range":[1263,1289],"text":"mb-6 text-lg text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":48,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":48,"endColumn":58,"fix":{"range":[1714,1746],"text":"mb-6 rounded-lg bg-purple-50 p-6"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":49,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":49,"endColumn":69,"fix":{"range":[1775,1817],"text":"mb-3 text-xl font-semibold text-purple-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":57,"column":25,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":57,"endColumn":57,"fix":{"range":[2059,2079],"text":"mr-2 text-purple-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":61,"column":25,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":61,"endColumn":57,"fix":{"range":[2275,2295],"text":"mr-2 text-purple-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":65,"column":25,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":65,"endColumn":57,"fix":{"range":[2512,2532],"text":"mr-2 text-purple-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":69,"column":25,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":69,"endColumn":57,"fix":{"range":[2732,2752],"text":"mr-2 text-purple-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":76,"column":25,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":76,"endColumn":57,"fix":{"range":[3000,3020],"text":"mr-2 text-purple-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":80,"column":25,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":80,"endColumn":57,"fix":{"range":[3221,3241],"text":"mr-2 text-purple-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":84,"column":25,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":84,"endColumn":57,"fix":{"range":[3426,3446],"text":"mr-2 text-purple-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":88,"column":25,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":88,"endColumn":57,"fix":{"range":[3645,3665],"text":"mr-2 text-purple-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":96,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":96,"endColumn":51,"fix":{"range":[3863,3888],"text":"rounded-lg bg-blue-50 p-6"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":97,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":97,"endColumn":67,"fix":{"range":[3917,3957],"text":"mb-3 text-xl font-semibold text-blue-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":101,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":101,"endColumn":44,"fix":{"range":[4055,4073],"text":"mb-4 text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":108,"column":21,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":108,"endColumn":51,"fix":{"range":[4351,4369],"text":"mr-2 text-blue-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":112,"column":21,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":112,"endColumn":51,"fix":{"range":[4555,4573],"text":"mr-2 text-blue-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":116,"column":21,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":116,"endColumn":51,"fix":{"range":[4754,4772],"text":"mr-2 text-blue-600"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":1,"fixableWarningCount":21,"source":"'use client';\r\n\r\nimport React, { useEffect } from 'react';\r\nimport Image from 'next/image';\r\n\r\n\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\nimport ProgressIndicator from '@/components/onboarding/ProgressIndicator';\r\nimport StepNavigation from '@/components/onboarding/StepNavigation';\r\nimport { useOnboarding } from '@/context/OnboardingContext';\r\n\r\nexport default function WelcomePage() {\r\n  const { profile } = useAuth();\r\n  const { startOnboarding } = useOnboarding();\r\n  \r\n  // Start onboarding when the page loads\r\n  useEffect(() => {\r\n    startOnboarding();\r\n  }, [startOnboarding]);\r\n  \r\n  const isSpecialist = profile?.type === 'specialist';\r\n  \r\n  return (\r\n    <div className=\"max-w-3xl mx-auto\">\r\n      <ProgressIndicator />\r\n      \r\n      <div className=\"bg-white rounded-xl shadow-lg p-8 mb-6\">\r\n        <div className=\"flex justify-center mb-6\">\r\n          <Image \r\n            src=\"/logo.png\" \r\n            alt=\"FibroGuardian Pro Logo\" \r\n            width={180} \r\n            height={180} \r\n            className=\"rounded-lg\"\r\n          />\r\n        </div>\r\n        \r\n        <h1 className=\"text-3xl font-bold text-center text-purple-800 mb-6\">\r\n          Welkom bij FibroGuardian Pro\r\n        </h1>\r\n        \r\n        <p className=\"text-lg text-gray-700 mb-6\">\r\n          {isSpecialist \r\n            ? 'Bedankt dat u heeft gekozen voor FibroGuardian Pro om uw patiënten te begeleiden. Deze korte introductie helpt u om snel aan de slag te gaan met het platform.'\r\n            : 'Bedankt dat u heeft gekozen voor FibroGuardian Pro om uw fibromyalgie te beheren. Deze korte introductie helpt u om snel aan de slag te gaan met de app.'}\r\n        </p>\r\n        \r\n        <div className=\"bg-purple-50 rounded-lg p-6 mb-6\">\r\n          <h2 className=\"text-xl font-semibold text-purple-800 mb-3\">\r\n            Wat kunt u verwachten?\r\n          </h2>\r\n          \r\n          <ul className=\"space-y-3\">\r\n            {isSpecialist ? (\r\n              <>\r\n                <li className=\"flex items-start\">\r\n                  <span className=\"text-purple-600 mr-2\">✓</span>\r\n                  <span>Beheer uw patiënten en hun behandelplannen</span>\r\n                </li>\r\n                <li className=\"flex items-start\">\r\n                  <span className=\"text-purple-600 mr-2\">✓</span>\r\n                  <span>Krijg inzicht in de gezondheid van uw patiënten met AI-analyses</span>\r\n                </li>\r\n                <li className=\"flex items-start\">\r\n                  <span className=\"text-purple-600 mr-2\">✓</span>\r\n                  <span>Deel kennis en aanbevelingen via de kennisbank</span>\r\n                </li>\r\n                <li className=\"flex items-start\">\r\n                  <span className=\"text-purple-600 mr-2\">✓</span>\r\n                  <span>Communiceer efficiënt met uw patiënten</span>\r\n                </li>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <li className=\"flex items-start\">\r\n                  <span className=\"text-purple-600 mr-2\">✓</span>\r\n                  <span>Houd uw symptomen bij met dagelijkse reflecties</span>\r\n                </li>\r\n                <li className=\"flex items-start\">\r\n                  <span className=\"text-purple-600 mr-2\">✓</span>\r\n                  <span>Beheer uw taken en activiteiten</span>\r\n                </li>\r\n                <li className=\"flex items-start\">\r\n                  <span className=\"text-purple-600 mr-2\">✓</span>\r\n                  <span>Krijg persoonlijke inzichten en aanbevelingen</span>\r\n                </li>\r\n                <li className=\"flex items-start\">\r\n                  <span className=\"text-purple-600 mr-2\">✓</span>\r\n                  <span>Verbind met uw zorgverleners</span>\r\n                </li>\r\n              </>\r\n            )}\r\n          </ul>\r\n        </div>\r\n        \r\n        <div className=\"bg-blue-50 rounded-lg p-6\">\r\n          <h2 className=\"text-xl font-semibold text-blue-800 mb-3\">\r\n            Hoe werkt deze introductie?\r\n          </h2>\r\n          \r\n          <p className=\"text-gray-700 mb-4\">\r\n            We leiden u stap voor stap door de belangrijkste functies van FibroGuardian Pro. \r\n            U kunt op elk moment:\r\n          </p>\r\n          \r\n          <ul className=\"space-y-2\">\r\n            <li className=\"flex items-start\">\r\n              <span className=\"text-blue-600 mr-2\">•</span>\r\n              <span>Navigeren tussen stappen met de knoppen onderaan</span>\r\n            </li>\r\n            <li className=\"flex items-start\">\r\n              <span className=\"text-blue-600 mr-2\">•</span>\r\n              <span>Optionele stappen overslaan als u dat wenst</span>\r\n            </li>\r\n            <li className=\"flex items-start\">\r\n              <span className=\"text-blue-600 mr-2\">•</span>\r\n              <span>Terugkeren naar eerdere stappen om informatie te herlezen</span>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      \r\n      <StepNavigation />\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\opdrachten\\nieuw\\page.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":4,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":4,"endColumn":43},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":8,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":8,"endColumn":76,"fix":{"range":[300,351],"text":"mb-6 text-2xl font-bold text-purple-800 md:text-3xl"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import DashboardLayout from '@/components/layout/DashboardLayout';\r\nimport TaskFormContainer from '@/containers/tasks/TaskFormContainer';\r\n\r\nexport default function NieuweOpdrachtPage() {\r\n  return (\r\n    <DashboardLayout>\r\n      <div className=\"container mx-auto px-4 py-6\">\r\n        <h1 className=\"text-2xl md:text-3xl font-bold text-purple-800 mb-6\">Nieuwe Opdracht Toevoegen</h1>\r\n        <TaskFormContainer initialType=\"opdracht\" isEditing={false} />\r\n      </div>\r\n    </DashboardLayout>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\opdrachten\\page.tsx","messages":[{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":61,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":61,"endColumn":65,"fix":{"range":[1805,1843],"text":"mb-6 flex items-center justify-between"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":62,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":62,"endColumn":71,"fix":{"range":[1870,1916],"text":"text-2xl font-bold text-purple-800 md:text-3xl"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"import { createServerClient, type CookieOptions } from '@supabase/ssr';\r\nimport { cookies } from 'next/headers';\r\nimport Link from 'next/link';\r\nimport { redirect } from 'next/navigation';\r\n\r\nimport TaskList from '@/components/tasks/TaskList';\r\nimport { ErrorMessage, handleSupabaseError } from '@/lib/error-handler';\r\nimport { Task } from '@/types';\r\n\r\nexport default async function OpdrachtenPage(): Promise<JSX.Element> {\r\n  const cookieStore = cookies();\r\n  const supabase = createServerClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\r\n    {\r\n      cookies: {\r\n        get(name: string) {\r\n          return cookieStore.get(name)?.value;\r\n        },\r\n        set(name: string, value: string, options: CookieOptions) {\r\n          cookieStore.set({ name, value, ...options });\r\n        },\r\n        remove(name: string, options: CookieOptions) {\r\n          cookieStore.set({ name, value: '', ...options });\r\n        },\r\n      },\r\n    }\r\n  );\r\n\r\n  const { data: { user } } = await supabase.auth.getUser();\r\n\r\n  if (!user) {\r\n    redirect('/auth/login');\r\n  }\r\n\r\n  let tasks: Task[] | null = null;\r\n  let isLoading = true;\r\n  let isError = false;\r\n  let error: ErrorMessage | null = null;\r\n\r\n  try {\r\n    const { data, error: fetchError } = await supabase\r\n      .from('tasks')\r\n      .select('*')\r\n      .eq('user_id', user.id)\r\n      .order('created_at', { ascending: false });\r\n\r\n    if (fetchError) {\r\n      throw handleSupabaseError(fetchError, 'opdrachten-pagina-fetch');\r\n    }\r\n    tasks = data;\r\n  } catch (err: unknown) {\r\n    isError = true;\r\n    error = handleSupabaseError(err, 'opdrachten-pagina-catch');\r\n  } finally {\r\n    isLoading = false;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mx-auto px-4 py-6\">\r\n      <header className=\"flex items-center justify-between mb-6\">\r\n        <h1 className=\"text-2xl md:text-3xl font-bold text-purple-800\">Mijn Opdrachten</h1>\r\n        <Link href=\"/opdrachten/nieuw\" className=\"btn-primary\">\r\n          Nieuwe Opdracht\r\n        </Link>\r\n      </header>\r\n      <TaskList tasks={tasks} isLoading={isLoading} isError={isError} error={error} />\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\overzicht\\layout.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":3,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":3,"endColumn":40}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import DashboardLayout from '@/components/layout/DashboardLayout';\r\n\r\nexport default function OverzichtLayout({\r\n  children,\r\n}: {\r\n  children: React.ReactNode;\r\n}) {\r\n  return <DashboardLayout>{children}</DashboardLayout>;\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\overzicht\\overzicht-client.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":54,"fix":{"range":[70,70],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":38,"fix":{"range":[220,220],"text":"\n"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":45,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2034,2037],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2034,2037],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":53,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":53,"endColumn":40},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":103,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":103,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":146,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":146,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7200,7484],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":161,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":161,"endColumn":111,"fix":{"range":[7678,7761],"text":"h-12 w-12 animate-spin rounded-full border-4 border-purple-500 border-t-transparent"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'w-12, h-12' could be replaced by the 'size-12' shorthand!","line":161,"column":16,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":161,"endColumn":111,"fix":{"range":[7678,7761],"text":"size-12 border-4 border-purple-500 border-t-transparent rounded-full animate-spin"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":170,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":170,"endColumn":50,"fix":{"range":[7948,7972],"text":"rounded-md bg-red-50 p-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":194,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":194,"endColumn":62,"fix":{"range":[8854,8891],"text":"mb-6 text-2xl font-bold text-gray-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":196,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":196,"endColumn":60,"fix":{"range":[8943,8977],"text":"mb-6 flex border-b border-gray-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":199,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":203,"endColumn":16,"fix":{"range":[9161,9205],"text":"border-b-2 border-purple-600 text-purple-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":199,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":203,"endColumn":16,"fix":{"range":[9072,9105],"text":"`px-4 py-2 text-sm font-medium ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":209,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":213,"endColumn":16,"fix":{"range":[9521,9565],"text":"border-b-2 border-purple-600 text-purple-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":209,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":213,"endColumn":16,"fix":{"range":[9431,9464],"text":"`px-4 py-2 text-sm font-medium ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":221,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":221,"endColumn":69,"fix":{"range":[9805,9845],"text":"mb-4 text-xl font-semibold text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":225,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":225,"endColumn":68,"fix":{"range":[9987,10025],"text":"mb-6 rounded-lg bg-white p-6 shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":226,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":226,"endColumn":71,"fix":{"range":[10058,10098],"text":"mb-3 text-lg font-semibold text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":227,"column":20,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":227,"endColumn":69,"fix":{"range":[10152,10189],"text":"grid grid-cols-1 gap-4 md:grid-cols-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":243,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":243,"endColumn":68,"fix":{"range":[10766,10804],"text":"mb-6 rounded-lg bg-white p-6 shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":244,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":244,"endColumn":71,"fix":{"range":[10837,10877],"text":"mb-3 text-lg font-semibold text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":250,"column":39,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":250,"endColumn":89,"fix":{"range":[11185,11223],"text":"border-l-4 border-purple-500 py-2 pl-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":252,"column":28,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":252,"endColumn":87,"fix":{"range":[11374,11421],"text":"mt-1 flex flex-wrap gap-2 text-sm text-gray-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":265,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":265,"endColumn":68,"fix":{"range":[12262,12300],"text":"mb-6 rounded-lg bg-white p-6 shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":266,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":266,"endColumn":71,"fix":{"range":[12333,12373],"text":"mb-3 text-lg font-semibold text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":272,"column":47,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":272,"endColumn":95,"fix":{"range":[12888,12924],"text":"border-l-4 border-blue-500 py-2 pl-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":287,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":287,"endColumn":69,"fix":{"range":[13456,13496],"text":"mb-4 text-xl font-semibold text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":291,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":291,"endColumn":68,"fix":{"range":[13807,13845],"text":"mb-6 rounded-lg bg-white p-6 shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":292,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":292,"endColumn":71,"fix":{"range":[13878,13918],"text":"mb-3 text-lg font-semibold text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":293,"column":20,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":293,"endColumn":69,"fix":{"range":[13973,14010],"text":"grid grid-cols-1 gap-4 md:grid-cols-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":309,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":309,"endColumn":68,"fix":{"range":[14603,14641],"text":"mb-6 rounded-lg bg-white p-6 shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":310,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":310,"endColumn":71,"fix":{"range":[14674,14714],"text":"mb-3 text-lg font-semibold text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":311,"column":20,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":311,"endColumn":69,"fix":{"range":[14766,14803],"text":"grid grid-cols-1 gap-4 md:grid-cols-7"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":328,"column":50,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":328,"endColumn":156,"fix":{"range":[15853,15878],"text":"`rounded-md border p-3 ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":329,"column":27,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":329,"endColumn":69,"fix":{"range":[15988,16018],"text":"mb-2 font-medium text-gray-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":338,"column":47,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":338,"endColumn":92,"fix":{"range":[16526,16559],"text":"rounded bg-purple-100 p-1 text-xs"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":346,"column":30,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":346,"endColumn":76,"fix":{"range":[17183,17217],"text":"mt-2 border-t border-gray-200 pt-2"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":356,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":356,"endColumn":63,"fix":{"range":[17553,17586],"text":"rounded-lg bg-white p-6 shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":357,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":357,"endColumn":71,"fix":{"range":[17619,17659],"text":"mb-3 text-lg font-semibold text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":364,"column":28,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":364,"endColumn":75,"fix":{"range":[18047,18082],"text":"mr-2 mt-0.5 h-5 w-5 text-purple-600"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'w-5, h-5' could be replaced by the 'size-5' shorthand!","line":364,"column":28,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":364,"endColumn":75,"fix":{"range":[18047,18082],"text":"size-5 text-purple-600 mr-2 mt-0.5"}}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":38,"fixableErrorCount":2,"fixableWarningCount":35,"source":"'use client';\r\n\r\nimport { useState, useEffect, useMemo } from 'react';\r\nimport { User } from '@supabase/supabase-js';\r\nimport { format, parseISO, isToday, addDays } from 'date-fns';\r\nimport { nl } from 'date-fns/locale';\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\nimport MetricCard from '@/components/overzicht/MetricCard'; \r\nimport { Task, TaskLog as GlobalTaskLog, Reflectie } from '@/types'; \r\n\r\n// Helper functions for calculations\r\nconst calculateAveragePain = (logs: ComponentTaskLog[]): string => {\r\n  if (!logs || logs.length === 0) return 'Geen data';\r\n  const validLogs = logs.filter(log => typeof log.pijn_score === 'number');\r\n  if (validLogs.length === 0) return 'Geen data';\r\n  const avg = Math.round(validLogs.reduce((sum, log) => sum + (log.pijn_score ?? 0), 0) / validLogs.length);\r\n  return `${avg}/20`;\r\n};\r\n\r\nconst calculateAverageEnergy = (logs: ComponentTaskLog[]): string => {\r\n  if (!logs || logs.length === 0) return 'Geen data';\r\n  const validLogs = logs.filter(log => typeof log.energie_na === 'number' && typeof log.energie_voor === 'number');\r\n  if (validLogs.length === 0) return 'Geen data';\r\n  const avgChange = Math.round(validLogs.reduce((sum, log) => sum + ((log.energie_na ?? 0) - (log.energie_voor ?? 0)), 0) / validLogs.length);\r\n  return avgChange > 0 ? `+${avgChange}` : avgChange.toString();\r\n};\r\n\r\nconst calculateAverageFatigue = (logs: ComponentTaskLog[]): string => {\r\n  if (!logs || logs.length === 0) return 'Geen data';\r\n  const validLogs = logs.filter(log => typeof log.vermoeidheid_score === 'number');\r\n  if (validLogs.length === 0) return 'Geen data';\r\n  const avg = Math.round(validLogs.reduce((sum, log) => sum + (log.vermoeidheid_score ?? 0), 0) / validLogs.length);\r\n  return `${avg}/20`;\r\n};\r\n\r\n// Define a more specific TaskLog type for this component if it includes joined data like 'tasks.titel'\r\ninterface ComponentTaskLog extends GlobalTaskLog {\r\n  tasks?: { \r\n    titel: string;\r\n  };\r\n}\r\n\r\ninterface OverzichtClientProps {\r\n  user: User;\r\n  userProfile: any; \r\n  tasks: Task[];\r\n  taskLogs: ComponentTaskLog[]; \r\n  reflecties: Reflectie[]; \r\n  startOfWeek: string;\r\n  endOfWeek: string;\r\n}\r\n\r\nexport default function OverzichtClient({ \r\n  user: serverUser, \r\n  userProfile, \r\n  tasks, \r\n  taskLogs, \r\n  reflecties,\r\n  startOfWeek,\r\n  endOfWeek\r\n}: OverzichtClientProps) {\r\n  const { user, loading: authLoading } = useAuth();\r\n  const [isClient, setIsClient] = useState(false);\r\n  const [activeTab, setActiveTab] = useState<'dag' | 'week'>('dag');\r\n\r\n  useEffect(() => {\r\n    setIsClient(true);\r\n  }, []);\r\n\r\n  const aiInsights = useMemo(() => {\r\n    if (!isClient) return []; // Don't compute on server or before client mount\r\n\r\n    const insights: string[] = [];\r\n    \r\n    if (!reflecties || reflecties.length === 0) {\r\n      insights.push(\"Er zijn nog geen reflecties voor deze week. Voeg dagelijkse reflecties toe om meer inzicht te krijgen in uw voortgang.\");\r\n      return insights;\r\n    }\r\n    \r\n    if (!taskLogs || taskLogs.length === 0) {\r\n      insights.push(\"Er zijn nog geen taken uitgevoerd deze week. Voer taken uit om meer inzicht te krijgen in uw voortgang.\");\r\n      return insights;\r\n    }\r\n    \r\n    reflecties.forEach(reflectie => {\r\n      // reflectie.datum is a Date object as per Reflectie type\r\n      const reflectieDatum = reflectie.datum; \r\n      \r\n      // Ensure reflectieDatum is a valid Date object before proceeding\r\n      if (!(reflectieDatum instanceof Date) || isNaN(reflectieDatum.getTime())) {\r\n        console.warn(`Invalid Date object for reflectie ${reflectie.id}:`, reflectieDatum);\r\n        return; // Skip this reflection if date is invalid\r\n      }\r\n\r\n      const logsVanDag = taskLogs.filter(log => {\r\n        if (!log.eind_tijd || typeof log.eind_tijd !== 'string') return false;\r\n        // Add a check for valid date string before parsing\r\n        try {\r\n          const logDatum = parseISO(log.eind_tijd);\r\n          return logDatum.getDate() === reflectieDatum.getDate() &&\r\n                 logDatum.getMonth() === reflectieDatum.getMonth() &&\r\n                 logDatum.getFullYear() === reflectieDatum.getFullYear();\r\n        } catch (e) {\r\n          console.warn(`Invalid date string for taskLog ${log.id}: ${log.eind_tijd}`);\r\n          return false;\r\n        }\r\n      });\r\n      \r\n      if (logsVanDag.length > 0) {\r\n        const validPainLogs = logsVanDag.filter(l => typeof l.pijn_score === 'number');\r\n        const avgPain = validPainLogs.length > 0 ? Math.round(validPainLogs.reduce((sum, log) => sum + (log.pijn_score ?? 0), 0) / validPainLogs.length) : 0;\r\n        \r\n        const validEnergyLogs = logsVanDag.filter(l => typeof l.energie_na === 'number' && typeof l.energie_voor === 'number');\r\n        const avgEnergyChange = validEnergyLogs.length > 0 ? Math.round(validEnergyLogs.reduce((sum, log) => sum + ((log.energie_na ?? 0) - (log.energie_voor ?? 0)), 0) / validEnergyLogs.length) : 0;\r\n\r\n        const validFatigueLogs = logsVanDag.filter(l => typeof l.vermoeidheid_score === 'number');\r\n        const avgFatigue = validFatigueLogs.length > 0 ? Math.round(validFatigueLogs.reduce((sum, log) => sum + (log.vermoeidheid_score ?? 0), 0) / validFatigueLogs.length) : 0;\r\n        \r\n        const isPositiveReflection = reflectie.stemming === 'goed' || reflectie.stemming === 'zeer goed';\r\n        const isNegativeReflection = reflectie.stemming === 'slecht' || reflectie.stemming === 'zeer slecht';\r\n        \r\n        const isPositiveTaskFeedback = avgPain < 10 && avgEnergyChange > 0 && avgFatigue < 10;\r\n        const isNegativeTaskFeedback = avgPain > 10 || avgEnergyChange < 0 || avgFatigue > 10;\r\n        \r\n        const reflectieDatumFormatted = format(reflectieDatum, 'EEEE d MMMM', { locale: nl });\r\n        \r\n        if (isPositiveReflection && isNegativeTaskFeedback) {\r\n          insights.push(`Op ${reflectieDatumFormatted} was uw reflectie positief, maar uw taakmetingen tonen hogere pijn (${avgPain}/20) en vermoeidheid (${avgFatigue}/20). Mogelijk onderschat u de impact van activiteiten op uw lichaam.`);\r\n        } else if (isNegativeReflection && isPositiveTaskFeedback) {\r\n          insights.push(`Op ${reflectieDatumFormatted} was uw reflectie negatief, maar uw taakmetingen tonen lagere pijn (${avgPain}/20) en vermoeidheid (${avgFatigue}/20). Mogelijk overschat u de impact van activiteiten op uw lichaam.`);\r\n        } else if (isPositiveReflection && isPositiveTaskFeedback) {\r\n          insights.push(`Op ${reflectieDatumFormatted} komen uw positieve reflectie en taakmetingen overeen. Uw activiteitenniveau lijkt goed afgestemd op uw capaciteiten.`);\r\n        } else if (isNegativeReflection && isNegativeTaskFeedback) {\r\n          insights.push(`Op ${reflectieDatumFormatted} komen uw negatieve reflectie en taakmetingen overeen. Overweeg om uw activiteitenniveau aan te passen of met uw specialist te overleggen.`);\r\n        }\r\n      }\r\n    });\r\n    \r\n    if (insights.length === 0) {\r\n      insights.push(\"Er zijn nog niet genoeg gegevens om specifieke inzichten te genereren. Blijf taken uitvoeren en dagelijkse reflecties toevoegen.\");\r\n    }\r\n    \r\n    return insights;\r\n  }, [reflecties, taskLogs, isClient]);\r\n  \r\n  console.log('[OverzichtClient] Rendering with:', { \r\n    hasServerUser: !!serverUser, \r\n    hasContextUser: !!user,\r\n    authLoading,\r\n    isClient,\r\n    userProfile,\r\n    tasksCount: tasks?.length,\r\n    taskLogsCount: taskLogs?.length,\r\n    reflectiesCount: reflecties?.length\r\n  });\r\n  \r\n  if (authLoading || !isClient) {\r\n    return (\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        <div className=\"flex items-center justify-center\">\r\n          <div className=\"w-12 h-12 border-4 border-purple-500 border-t-transparent rounded-full animate-spin\" aria-label=\"Laden...\"></div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  if (!user) { \r\n    return (\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        <div className=\"bg-red-50 p-4 rounded-md\">\r\n          <p className=\"text-red-700\">Authenticatie is vereist. U wordt mogelijk doorgestuurd naar de login pagina.</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  // const [activeTab, setActiveTab] = useState<'dag' | 'week'>('dag'); // Moved up\r\n  // const [aiInsights, setAiInsights] = useState<string[]>([]); // Moved up\r\n  \r\n  const todayLogs = (taskLogs || []).filter(log => log.eind_tijd && typeof log.eind_tijd === 'string' && isToday(parseISO(log.eind_tijd)));\r\n  \r\n  // useEffect for generateAiInsights moved up before conditional returns\r\n  \r\n  const weekDays: Date[] = [];\r\n  if (startOfWeek && typeof startOfWeek === 'string') {\r\n    const startDate = parseISO(startOfWeek);\r\n    for (let i = 0; i < 7; i++) {\r\n      weekDays.push(addDays(startDate, i));\r\n    }\r\n  }\r\n  \r\n  return (\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        <h1 className=\"text-2xl font-bold text-gray-800 mb-6\">Overzicht</h1>\r\n        \r\n        <div className=\"flex border-b border-gray-200 mb-6\">\r\n          <button\r\n            onClick={() => setActiveTab('dag')}\r\n            className={`px-4 py-2 font-medium text-sm ${\r\n              activeTab === 'dag'\r\n                ? 'text-purple-600 border-b-2 border-purple-600'\r\n                : 'text-gray-500 hover:text-gray-700'\r\n            }`}\r\n          >\r\n            Dagweergave\r\n          </button>\r\n          <button\r\n            onClick={() => setActiveTab('week')}\r\n            className={`px-4 py-2 font-medium text-sm ${\r\n              activeTab === 'week'\r\n                ? 'text-purple-600 border-b-2 border-purple-600'\r\n                : 'text-gray-500 hover:text-gray-700'\r\n            }`}\r\n          >\r\n            Weekweergave\r\n          </button>\r\n        </div>\r\n        \r\n        {activeTab === 'dag' && (\r\n          <div>\r\n            <h2 className=\"text-xl font-semibold text-gray-700 mb-4\">\r\n              Vandaag - {format(new Date(), 'EEEE d MMMM', { locale: nl })}\r\n            </h2>\r\n            \r\n            <div className=\"bg-white rounded-lg shadow-md p-6 mb-6\">\r\n              <h3 className=\"text-lg font-semibold text-gray-700 mb-3\">Dagsamenvatting</h3>\r\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n                <MetricCard \r\n                  title=\"Gemiddelde Pijn\" \r\n                  value={calculateAveragePain(todayLogs)} \r\n                />\r\n                <MetricCard \r\n                  title=\"Gemiddelde Energieverandering\" \r\n                  value={calculateAverageEnergy(todayLogs)} \r\n                />\r\n                <MetricCard \r\n                  title=\"Gemiddelde Vermoeidheid\" \r\n                  value={calculateAverageFatigue(todayLogs)} \r\n                />\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"bg-white rounded-lg shadow-md p-6 mb-6\">\r\n              <h3 className=\"text-lg font-semibold text-gray-700 mb-3\">Taken van vandaag</h3>\r\n              {todayLogs.length === 0 ? (\r\n                <p className=\"text-gray-500\">Geen taken uitgevoerd vandaag.</p>\r\n              ) : (\r\n                <div className=\"space-y-4\">\r\n                  {todayLogs.map(log => (\r\n                    <div key={log.id} className=\"border-l-4 border-purple-500 pl-4 py-2\">\r\n                      <h4 className=\"font-medium text-gray-800\">{log.tasks?.titel || 'Onbekende taak'}</h4>\r\n                      <div className=\"flex flex-wrap gap-2 mt-1 text-sm text-gray-600\">\r\n                        <span>{log.start_tijd && typeof log.start_tijd === 'string' ? format(parseISO(log.start_tijd), 'HH:mm') : ''} - {log.eind_tijd && typeof log.eind_tijd === 'string' ? format(parseISO(log.eind_tijd), 'HH:mm') : ''}</span>\r\n                        <span>•</span><span>Pijn: {log.pijn_score ?? 'N/A'}/20</span>\r\n                        <span>•</span><span>Energie: {log.energie_voor ?? 'N/A'} → {log.energie_na ?? 'N/A'}</span>\r\n                        <span>•</span><span>Vermoeidheid: {log.vermoeidheid_score ?? 'N/A'}/20</span>\r\n                      </div>\r\n                      {log.notitie && <p className=\"mt-2 text-sm text-gray-600\">{log.notitie}</p>}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </div>\r\n            \r\n            <div className=\"bg-white rounded-lg shadow-md p-6 mb-6\">\r\n              <h3 className=\"text-lg font-semibold text-gray-700 mb-3\">Reflecties van vandaag</h3>\r\n              {(!reflecties || reflecties.filter(r => r.datum && typeof r.datum === 'string' && isToday(parseISO(r.datum))).length === 0) ? (\r\n                <p className=\"text-gray-500\">Geen reflecties toegevoegd vandaag.</p>\r\n              ) : (\r\n                <div className=\"space-y-4\">\r\n                  {reflecties.filter(r => r.datum && typeof r.datum === 'string' && isToday(parseISO(r.datum))).map(reflectie => (\r\n                      <div key={reflectie.id} className=\"border-l-4 border-blue-500 pl-4 py-2\">\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <span className=\"font-medium text-gray-800\">Stemming: {reflectie.stemming}</span>\r\n                        </div>\r\n                        <p className=\"mt-2 text-gray-600\">{reflectie.notitie}</p>\r\n                      </div>\r\n                    ))}\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        )}\r\n        \r\n        {activeTab === 'week' && (\r\n          <div>\r\n            <h2 className=\"text-xl font-semibold text-gray-700 mb-4\">\r\n              Week van {startOfWeek && typeof startOfWeek === 'string' ? format(parseISO(startOfWeek), 'd MMMM', { locale: nl }) : ''} tot {endOfWeek && typeof endOfWeek === 'string' ? format(parseISO(endOfWeek), 'd MMMM', { locale: nl }) : ''}\r\n            </h2>\r\n            \r\n            <div className=\"bg-white rounded-lg shadow-md p-6 mb-6\">\r\n              <h3 className=\"text-lg font-semibold text-gray-700 mb-3\">Weeksamenvatting</h3>\r\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n                 <MetricCard \r\n                  title=\"Gemiddelde Pijn\" \r\n                  value={calculateAveragePain(taskLogs || [])} \r\n                />\r\n                <MetricCard \r\n                  title=\"Gemiddelde Energieverandering\" \r\n                  value={calculateAverageEnergy(taskLogs || [])} \r\n                />\r\n                <MetricCard \r\n                  title=\"Gemiddelde Vermoeidheid\" \r\n                  value={calculateAverageFatigue(taskLogs || [])} \r\n                />\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"bg-white rounded-lg shadow-md p-6 mb-6\">\r\n              <h3 className=\"text-lg font-semibold text-gray-700 mb-3\">Weekoverzicht</h3>\r\n              <div className=\"grid grid-cols-1 md:grid-cols-7 gap-4\">\r\n                {weekDays.map(day => {\r\n                  const dayLogs = (taskLogs || []).filter(log => {\r\n                    if(!log.eind_tijd || typeof log.eind_tijd !== 'string') return false;\r\n                    const logDate = parseISO(log.eind_tijd);\r\n                    return logDate.getDate() === day.getDate() &&\r\n                           logDate.getMonth() === day.getMonth() &&\r\n                           logDate.getFullYear() === day.getFullYear();\r\n                  });\r\n                  const dayReflecties = (reflecties || []).filter(r => {\r\n                    if(!r.datum || typeof r.datum !== 'string') return false;\r\n                    const reflectieDate = parseISO(r.datum);\r\n                    return reflectieDate.getDate() === day.getDate() &&\r\n                           reflectieDate.getMonth() === day.getMonth() &&\r\n                           reflectieDate.getFullYear() === day.getFullYear();\r\n                  });\r\n                  return (\r\n                    <div key={day.toISOString()} className={`border rounded-md p-3 ${isToday(day) ? 'border-purple-500 bg-purple-50' : 'border-gray-200'}`}>\r\n                      <h4 className=\"font-medium text-gray-800 mb-2\">\r\n                        {format(day, 'EEEE', { locale: nl })}\r\n                        <span className=\"ml-1 text-sm text-gray-500\">{format(day, 'd/M')}</span>\r\n                      </h4>\r\n                      {dayLogs.length === 0 ? (\r\n                        <p className=\"text-xs text-gray-500\">Geen taken</p>\r\n                      ) : (\r\n                        <div className=\"space-y-2\">\r\n                          {dayLogs.map(log => (\r\n                            <div key={log.id} className=\"text-xs p-1 bg-purple-100 rounded\">\r\n                              <p className=\"font-medium\">{log.tasks?.titel || 'Onbekende taak'}</p>\r\n                              <p className=\"text-gray-600\">{log.start_tijd && typeof log.start_tijd === 'string' ? format(parseISO(log.start_tijd), 'HH:mm') : ''} - {log.eind_tijd && typeof log.eind_tijd === 'string' ? format(parseISO(log.eind_tijd), 'HH:mm') : ''}</p>\r\n                            </div>\r\n                          ))}\r\n                        </div>\r\n                      )}\r\n                      {dayReflecties.length > 0 && dayReflecties[0].stemming && (\r\n                        <div className=\"mt-2 pt-2 border-t border-gray-200\">\r\n                          <p className=\"text-xs font-medium text-blue-600\">Reflectie: {dayReflecties[0].stemming}</p>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"bg-white rounded-lg shadow-md p-6\">\r\n              <h3 className=\"text-lg font-semibold text-gray-700 mb-3\">AI Inzichten</h3>\r\n              {(!aiInsights || aiInsights.length === 0) ? ( \r\n                <p className=\"text-gray-500\">Geen inzichten beschikbaar.</p>\r\n              ) : (\r\n                <ul className=\"space-y-3\">\r\n                  {aiInsights.map((insight, index) => (\r\n                    <li key={index} className=\"flex items-start\">\r\n                      <svg className=\"w-5 h-5 text-purple-600 mr-2 mt-0.5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path></svg>\r\n                      <span className=\"text-gray-700\">{insight}</span>\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              )}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\overzicht\\page.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":74,"fix":{"range":[267,267],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":50,"fix":{"range":[318,318],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":46,"fix":{"range":[385,385],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@supabase/supabase-js` import should occur before import of `@/lib/supabase-server`","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":46,"fix":{"range":[183,387],"text":"import { User } from '@supabase/supabase-js'; // Import User type\r\nimport { getSupabaseServerComponentClient } from '@/lib/supabase-server'; // New way\r\nimport OverzichtClient from './overzicht-client';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/types` import should occur before import of `./overzicht-client`","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":61,"fix":{"range":[269,472],"text":"import { Profile, Task, TaskLog, Reflectie } from '@/types'; // Import custom types\r\nimport OverzichtClient from './overzicht-client';\r\nimport { User } from '@supabase/supabase-js'; // Import User type\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":22,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":22,"endColumn":44},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":30,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":30,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1198,1309],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":37,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":37,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1412,1475],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":40,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":40,"endColumn":50,"fix":{"range":[1568,1592],"text":"rounded-md bg-red-50 p-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":59,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":59,"endColumn":50,"fix":{"range":[2212,2236],"text":"rounded-md bg-red-50 p-4"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":127,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":127,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4653,4932],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":5,"fixableWarningCount":2,"source":"// import { createServerComponentClient } from '@supabase/auth-helpers-nextjs'; // Old way\r\n// import { cookies } from 'next/headers'; // Handled by getSupabaseServerComponentClient\r\nimport { getSupabaseServerComponentClient } from '@/lib/supabase-server'; // New way\r\nimport OverzichtClient from './overzicht-client';\r\nimport { User } from '@supabase/supabase-js'; // Import User type\r\nimport { Profile, Task, TaskLog, Reflectie } from '@/types'; // Import custom types\r\n\r\n// Definieer interface voor data passing\r\ninterface OverzichtPageData {\r\n  user: User;\r\n  userProfile: Profile;\r\n  tasks: Task[];\r\n  taskLogs: TaskLog[];\r\n  reflecties: Reflectie[];\r\n  startOfWeek: string;\r\n  endOfWeek: string;\r\n}\r\n\r\nexport const dynamic = 'force-dynamic';\r\nexport const revalidate = 0; // Disable caching\r\n\r\nexport default async function OverzichtPage() {\r\n  const supabase = getSupabaseServerComponentClient(); // Use the new helper\r\n  \r\n  // Haal gebruikerssessie op - middleware zorgt al voor authenticatie\r\n  // Use getUser() instead of getSession() for server components\r\n  const { data: { user }, error: userError } = await supabase.auth.getUser();\r\n  \r\n  // Log session information for debugging\r\n  console.log('[Server] OverzichtPage user check:', {\r\n    hasUser: !!user,\r\n    error: userError?.message\r\n  });\r\n  \r\n  if (!user) {\r\n    // Dit zou niet moeten gebeuren door middleware, maar voor de zekerheid\r\n    console.log('[Server] No user found despite middleware check');\r\n    return (\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        <div className=\"bg-red-50 p-4 rounded-md\">\r\n          <p className=\"text-red-700\">U bent niet ingelogd. <a href=\"/auth/login\" className=\"underline\">Log in</a> om deze pagina te bekijken.</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  // Haal gebruikersprofiel op\r\n  const { data: profile, error: profileError } = await supabase\r\n    .from('profiles')\r\n    .select('*')\r\n    .eq('id', user.id)\r\n    .single();\r\n  \r\n  if (profileError || !profile) {\r\n    console.error('Error fetching profile:', profileError);\r\n    // Toon een foutmelding in plaats van redirect\r\n    return (\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        <div className=\"bg-red-50 p-4 rounded-md\">\r\n          <p className=\"text-red-700\">Er is een fout opgetreden bij het ophalen van uw profiel.</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  // Haal taken op voor de huidige week\r\n  const now = new Date();\r\n  const startOfWeek = new Date(now);\r\n  startOfWeek.setDate(now.getDate() - now.getDay()); // Zondag als start van de week\r\n  startOfWeek.setHours(0, 0, 0, 0);\r\n  \r\n  const endOfWeek = new Date(startOfWeek);\r\n  endOfWeek.setDate(startOfWeek.getDate() + 6); // Zaterdag als einde van de week\r\n  endOfWeek.setHours(23, 59, 59, 999);\r\n  \r\n  // Haal taken op\r\n  const { data: tasks, error: tasksError } = await supabase\r\n    .from('tasks')\r\n    .select('*')\r\n    .eq('user_id', user.id)\r\n    .order('created_at', { ascending: false });\r\n  \r\n  if (tasksError) {\r\n    console.error('Error fetching tasks:', tasksError);\r\n  }\r\n  \r\n  // Haal task logs op voor de huidige week\r\n  const { data: taskLogs, error: taskLogsError } = await supabase\r\n    .from('task_logs')\r\n    .select('*, tasks(titel)')\r\n    .eq('user_id', user.id)\r\n    .gte('start_tijd', startOfWeek.toISOString())\r\n    .lte('eind_tijd', endOfWeek.toISOString())\r\n    .order('start_tijd', { ascending: false });\r\n  \r\n  if (taskLogsError) {\r\n    console.error('Error fetching task logs:', taskLogsError);\r\n  }\r\n  \r\n  // Haal reflecties op voor de huidige week\r\n  const { data: reflecties, error: reflectiesError } = await supabase\r\n    .from('reflecties')\r\n    .select('*')\r\n    .eq('user_id', user.id)\r\n    .gte('datum', startOfWeek.toISOString().split('T')[0])\r\n    .lte('datum', endOfWeek.toISOString().split('T')[0])\r\n    .order('datum', { ascending: false });\r\n  \r\n  if (reflectiesError) {\r\n    console.error('Error fetching reflecties:', reflectiesError);\r\n  }\r\n  \r\n  // Gebruik de client component om de UI te renderen\r\n  // Valideer voordat het wordt doorgegeven\r\n  const pageData: OverzichtPageData = {\r\n    user: user!, // We weten dat deze bestaat door eerdere check\r\n    userProfile: profile as Profile, // Cast to Profile type\r\n    tasks: (tasks || []) as Task[], // Cast to Task[]\r\n    taskLogs: (taskLogs || []) as TaskLog[], // Cast to TaskLog[]\r\n    reflecties: (reflecties || []) as Reflectie[], // Cast to Reflectie[]\r\n    startOfWeek: startOfWeek.toISOString(),\r\n    endOfWeek: endOfWeek.toISOString(),\r\n  };\r\n\r\n  // Log problemen in development maar niet in productie\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    console.log('[Server] OverzichtPage data validation:', {\r\n      hasUser: !!pageData.user,\r\n      hasProfile: !!pageData.userProfile,\r\n      tasksCount: pageData.tasks.length,\r\n      logsCount: pageData.taskLogs.length,\r\n      reflectiesCount: pageData.reflecties.length,\r\n    });\r\n  }\r\n\r\n  return <OverzichtClient {...pageData} />;\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\page.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"`next/image` import should occur before import of `next/link`","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":32,"fix":{"range":[0,64],"text":"import Image from 'next/image';\r\nimport Link from 'next/link';\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":4,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":4,"endColumn":29},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":7,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":7,"endColumn":88,"fix":{"range":[214,275],"text":"container mx-auto flex items-center justify-between px-4 py-6"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":23,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":23,"endColumn":124,"fix":{"range":[793,888],"text":"rounded-md bg-purple-600 px-4 py-2 font-medium text-white transition-colors hover:bg-purple-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":31,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":31,"endColumn":123,"fix":{"range":[1083,1177],"text":"rounded-md bg-gray-200 px-4 py-2 font-medium text-gray-700 transition-colors hover:bg-gray-300"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":41,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":41,"endColumn":106,"fix":{"range":[1362,1438],"text":"container mx-auto flex flex-col items-center px-4 py-12 md:flex-row md:py-24"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":42,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":42,"endColumn":49,"fix":{"range":[1468,1489],"text":"mb-8 md:mb-0 md:w-1/2"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":43,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":43,"endColumn":80,"fix":{"range":[1520,1571],"text":"mb-4 text-4xl font-bold text-purple-900 md:text-5xl"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":46,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":46,"endColumn":54,"fix":{"range":[1686,1712],"text":"mb-6 text-lg text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":52,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":52,"endColumn":124,"fix":{"range":[2054,2149],"text":"rounded-md bg-purple-600 px-6 py-3 font-medium text-white transition-colors hover:bg-purple-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":58,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":58,"endColumn":148,"fix":{"range":[2311,2430],"text":"rounded-md border border-purple-600 bg-white px-6 py-3 font-medium text-purple-600 transition-colors hover:bg-purple-50"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":78,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":78,"endColumn":81,"fix":{"range":[3045,3097],"text":"mb-12 text-center text-3xl font-bold text-purple-900"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":80,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":80,"endColumn":67,"fix":{"range":[3193,3230],"text":"grid grid-cols-1 gap-8 md:grid-cols-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":81,"column":20,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":81,"endColumn":65,"fix":{"range":[3264,3297],"text":"rounded-lg bg-white p-6 shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":82,"column":22,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":82,"endColumn":108,"fix":{"range":[3333,3407],"text":"mb-4 flex h-12 w-12 items-center justify-center rounded-full bg-purple-100"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'w-12, h-12' could be replaced by the 'size-12' shorthand!","line":82,"column":22,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":82,"endColumn":108,"fix":{"range":[3333,3407],"text":"size-12 bg-purple-100 rounded-full flex items-center justify-center mb-4"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-6, w-6' could be replaced by the 'size-6' shorthand!","line":83,"column":59,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":83,"endColumn":94,"fix":{"range":[3480,3503],"text":"size-6 text-purple-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":87,"column":21,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":87,"endColumn":73,"fix":{"range":[3865,3905],"text":"mb-2 text-xl font-semibold text-gray-900"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":91,"column":20,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":91,"endColumn":65,"fix":{"range":[4129,4162],"text":"rounded-lg bg-white p-6 shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":92,"column":22,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":92,"endColumn":108,"fix":{"range":[4198,4272],"text":"mb-4 flex h-12 w-12 items-center justify-center rounded-full bg-purple-100"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'w-12, h-12' could be replaced by the 'size-12' shorthand!","line":92,"column":22,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":92,"endColumn":108,"fix":{"range":[4198,4272],"text":"size-12 bg-purple-100 rounded-full flex items-center justify-center mb-4"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-6, w-6' could be replaced by the 'size-6' shorthand!","line":93,"column":59,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":93,"endColumn":94,"fix":{"range":[4345,4368],"text":"size-6 text-purple-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":97,"column":21,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":97,"endColumn":73,"fix":{"range":[4799,4839],"text":"mb-2 text-xl font-semibold text-gray-900"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":101,"column":20,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":101,"endColumn":65,"fix":{"range":[5082,5115],"text":"rounded-lg bg-white p-6 shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":102,"column":22,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":102,"endColumn":108,"fix":{"range":[5151,5225],"text":"mb-4 flex h-12 w-12 items-center justify-center rounded-full bg-purple-100"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'w-12, h-12' could be replaced by the 'size-12' shorthand!","line":102,"column":22,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":102,"endColumn":108,"fix":{"range":[5151,5225],"text":"size-12 bg-purple-100 rounded-full flex items-center justify-center mb-4"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-6, w-6' could be replaced by the 'size-6' shorthand!","line":103,"column":59,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":103,"endColumn":94,"fix":{"range":[5298,5321],"text":"size-6 text-purple-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":107,"column":21,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":107,"endColumn":73,"fix":{"range":[5764,5804],"text":"mb-2 text-xl font-semibold text-gray-900"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":115,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":115,"endColumn":57,"fix":{"range":[6091,6121],"text":"bg-purple-900 py-12 text-white"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":118,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":118,"endColumn":58,"fix":{"range":[6263,6291],"text":"mb-8 w-full md:mb-0 md:w-1/3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":119,"column":20,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":119,"endColumn":64,"fix":{"range":[6325,6357],"text":"mb-4 flex items-center space-x-2"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":134,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":134,"endColumn":58,"fix":{"range":[6942,6970],"text":"mb-8 w-full md:mb-0 md:w-1/3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":135,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":135,"endColumn":57,"fix":{"range":[7003,7029],"text":"mb-4 text-lg font-semibold"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":137,"column":46,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":137,"endColumn":108,"fix":{"range":[7148,7198],"text":"text-purple-200 transition-colors hover:text-white"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":138,"column":49,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":138,"endColumn":111,"fix":{"range":[7281,7331],"text":"text-purple-200 transition-colors hover:text-white"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":139,"column":43,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":139,"endColumn":105,"fix":{"range":[7411,7461],"text":"text-purple-200 transition-colors hover:text-white"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":140,"column":47,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":140,"endColumn":109,"fix":{"range":[7547,7597],"text":"text-purple-200 transition-colors hover:text-white"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":145,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":145,"endColumn":57,"fix":{"range":[7763,7789],"text":"mb-4 text-lg font-semibold"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":146,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":146,"endColumn":50,"fix":{"range":[7833,7853],"text":"mb-2 text-purple-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":151,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":151,"endColumn":92,"fix":{"range":[8088,8152],"text":"mt-8 border-t border-purple-800 pt-8 text-center text-purple-300"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":39,"fixableErrorCount":1,"fixableWarningCount":38,"source":"import Link from 'next/link';\r\nimport Image from 'next/image';\r\n\r\nexport default function Home() {\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-b from-purple-50 to-white\">\r\n      <header className=\"container mx-auto px-4 py-6 flex justify-between items-center\">\r\n        <div className=\"flex items-center space-x-2\">\r\n          <Image \r\n            src=\"/logo.png\" \r\n            alt=\"FibroGuardian Pro Logo\" \r\n            width={48} \r\n            height={48} \r\n            className=\"rounded-lg\"\r\n          />\r\n          <span className=\"text-xl font-bold text-purple-800\">FibroGuardian Pro</span>\r\n        </div>\r\n        <nav>\r\n          <ul className=\"flex space-x-4\">\r\n            <li>\r\n              <Link \r\n                href=\"/auth/login\" \r\n                className=\"px-4 py-2 rounded-md bg-purple-600 text-white font-medium hover:bg-purple-700 transition-colors\"\r\n              >\r\n                Inloggen\r\n              </Link>\r\n            </li>\r\n            <li>\r\n              <Link \r\n                href=\"/auth/register\" \r\n                className=\"px-4 py-2 rounded-md bg-gray-200 text-gray-700 font-medium hover:bg-gray-300 transition-colors\"\r\n              >\r\n                Registreren\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n      </header>\r\n\r\n      <main>\r\n        <section className=\"container mx-auto px-4 py-12 md:py-24 flex flex-col md:flex-row items-center\">\r\n          <div className=\"md:w-1/2 mb-8 md:mb-0\">\r\n            <h1 className=\"text-4xl md:text-5xl font-bold text-purple-900 mb-4\">\r\n              Uw persoonlijke gezondheidscoach voor fibromyalgie\r\n            </h1>\r\n            <p className=\"text-lg text-gray-700 mb-6\">\r\n              FibroGuardian Pro helpt u uw dagelijkse activiteiten, pijn- en energieniveaus bij te houden, zodat u en uw zorgverleners inzicht krijgen in uw gezondheidspatronen.\r\n            </p>\r\n            <div className=\"flex flex-wrap gap-4\">\r\n              <Link \r\n                href=\"/auth/register\" \r\n                className=\"px-6 py-3 rounded-md bg-purple-600 text-white font-medium hover:bg-purple-700 transition-colors\"\r\n              >\r\n                Start vandaag nog\r\n              </Link>\r\n              <Link \r\n                href=\"#features\" \r\n                className=\"px-6 py-3 rounded-md bg-white border border-purple-600 text-purple-600 font-medium hover:bg-purple-50 transition-colors\"\r\n              >\r\n                Meer informatie\r\n              </Link>\r\n            </div>\r\n          </div>\r\n          <div className=\"md:w-1/2\">\r\n            <Image \r\n              src=\"/dashboard-preview.png\" \r\n              alt=\"FibroGuardian Pro Dashboard Voorbeeld\" \r\n              width={600} \r\n              height={400} \r\n              className=\"rounded-lg shadow-lg\"\r\n              priority\r\n            />\r\n          </div>\r\n        </section>\r\n\r\n        <section id=\"features\" className=\"bg-purple-50 py-12 md:py-24\">\r\n          <div className=\"container mx-auto px-4\">\r\n            <h2 className=\"text-3xl font-bold text-center text-purple-900 mb-12\">Speciaal ontworpen voor fibromyalgiepatiënten</h2>\r\n            \r\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\r\n              <div className=\"bg-white p-6 rounded-lg shadow-md\">\r\n                <div className=\"w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center mb-4\">\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6 text-purple-600\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2\" />\r\n                  </svg>\r\n                </div>\r\n                <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">Taakbeheer</h3>\r\n                <p className=\"text-gray-600\">Plan, beheer en monitor uw dagelijkse activiteiten en houd uw energieniveau in balans.</p>\r\n              </div>\r\n              \r\n              <div className=\"bg-white p-6 rounded-lg shadow-md\">\r\n                <div className=\"w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center mb-4\">\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6 text-purple-600\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\r\n                  </svg>\r\n                </div>\r\n                <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">Gezondheidsmetrieken</h3>\r\n                <p className=\"text-gray-600\">Volg uw pijn, vermoeidheid en andere symptomen om inzicht te krijgen in uw gezondheidspatronen.</p>\r\n              </div>\r\n              \r\n              <div className=\"bg-white p-6 rounded-lg shadow-md\">\r\n                <div className=\"w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center mb-4\">\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6 text-purple-600\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\" />\r\n                  </svg>\r\n                </div>\r\n                <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">AI-inzichten</h3>\r\n                <p className=\"text-gray-600\">Ontvang gepersonaliseerde inzichten en suggesties op basis van uw unieke gezondheidsgegevens.</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </main>\r\n\r\n      <footer className=\"bg-purple-900 text-white py-12\">\r\n        <div className=\"container mx-auto px-4\">\r\n          <div className=\"flex flex-wrap justify-between\">\r\n            <div className=\"w-full md:w-1/3 mb-8 md:mb-0\">\r\n              <div className=\"flex items-center space-x-2 mb-4\">\r\n                <Image \r\n                  src=\"/logo-white.png\" \r\n                  alt=\"FibroGuardian Pro Logo\" \r\n                  width={40} \r\n                  height={40} \r\n                  className=\"rounded-lg\"\r\n                />\r\n                <span className=\"text-xl font-bold\">FibroGuardian Pro</span>\r\n              </div>\r\n              <p className=\"text-purple-200\">\r\n                De meest complete app voor het beheren van fibromyalgie symptomen en dagelijkse activiteiten.\r\n              </p>\r\n            </div>\r\n            \r\n            <div className=\"w-full md:w-1/3 mb-8 md:mb-0\">\r\n              <h3 className=\"text-lg font-semibold mb-4\">Snelle Links</h3>\r\n              <ul className=\"space-y-2\">\r\n                <li><Link href=\"/auth/login\" className=\"text-purple-200 hover:text-white transition-colors\">Inloggen</Link></li>\r\n                <li><Link href=\"/auth/register\" className=\"text-purple-200 hover:text-white transition-colors\">Registreren</Link></li>\r\n                <li><Link href=\"/privacy\" className=\"text-purple-200 hover:text-white transition-colors\">Privacybeleid</Link></li>\r\n                <li><Link href=\"/voorwaarden\" className=\"text-purple-200 hover:text-white transition-colors\">Gebruiksvoorwaarden</Link></li>\r\n              </ul>\r\n            </div>\r\n            \r\n            <div className=\"w-full md:w-1/3\">\r\n              <h3 className=\"text-lg font-semibold mb-4\">Contact</h3>\r\n              <p className=\"text-purple-200 mb-2\">Vragen? Neem contact met ons op.</p>\r\n              <a href=\"mailto:info@fibroguardian.be\" className=\"text-white hover:underline\">info@fibroguardian.be</a>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"border-t border-purple-800 mt-8 pt-8 text-center text-purple-300\">\r\n            <p>&copy; {new Date().getFullYear()} FibroGuardian Pro. Alle rechten voorbehouden.</p>\r\n          </div>\r\n        </div>\r\n      </footer>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\pricing\\page.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":33,"fix":{"range":[32,32],"text":"\n"}},{"ruleId":"tailwindcss/no-custom-classname","severity":1,"message":"Classname 'max-w-screen-' is not a Tailwind CSS class!","line":16,"column":8,"nodeType":"JSXAttribute","messageId":"customClassnameDetected","endLine":16,"endColumn":84},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":22,"column":8,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":22,"endColumn":58,"fix":{"range":[1116,1154],"text":"rounded-lg bg-gray-100 p-8 text-center"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":23,"column":9,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":23,"endColumn":48,"fix":{"range":[1177,1204],"text":"mb-4 text-2xl font-semibold"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":30,"column":8,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":30,"endColumn":73,"fix":{"range":[1516,1558],"text":"`rounded-lg bg-gray-100 p-8 text-center ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":31,"column":9,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":31,"endColumn":48,"fix":{"range":[1592,1619],"text":"mb-4 text-2xl font-semibold"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":38,"column":8,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":38,"endColumn":73,"fix":{"range":[1954,1996],"text":"`rounded-lg bg-gray-100 p-8 text-center ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":39,"column":9,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":39,"endColumn":48,"fix":{"range":[2030,2057],"text":"mb-4 text-2xl font-semibold"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":46,"column":8,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":46,"endColumn":73,"fix":{"range":[2335,2377],"text":"`rounded-lg bg-gray-100 p-8 text-center ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":47,"column":9,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":47,"endColumn":48,"fix":{"range":[2411,2438],"text":"mb-4 text-2xl font-semibold"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":54,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":54,"endColumn":36},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":59,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":59,"endColumn":72,"fix":{"range":[2895,2939],"text":"mx-auto mb-12 max-w-3xl text-center md:mb-16"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":60,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":60,"endColumn":105,"fix":{"range":[2970,3046],"text":"mb-4 text-3xl font-bold tracking-tight text-gray-900 md:text-4xl lg:text-5xl"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":63,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":63,"endColumn":60,"fix":{"range":[3142,3174],"text":"text-lg text-gray-600 md:text-xl"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":1,"fixableWarningCount":11,"source":"import { Metadata } from 'next';\r\n// import { Container } from '@/components/ds/layout/Container'; // Placeholder\r\n// import { PricingTables } from '@/components/subscription/PricingTables'; // Placeholder\r\n// import { FeatureComparison } from '@/components/subscription/FeatureComparison'; // Placeholder\r\n// import { Testimonials } from '@/components/marketing/Testimonials'; // Placeholder\r\n// import { FAQ } from '@/components/marketing/FAQ'; // Placeholder\r\nimport DashboardLayout from '@/components/layout/DashboardLayout'; // Gebruik bestaande layout\r\n\r\nexport const metadata: Metadata = {\r\n  title: 'Abonnementen - FibroGuardian Pro',\r\n  description: 'Kies het abonnement dat bij u past. Beheer uw fibromyalgie effectiever met onze flexibele abonnementenopties.',\r\n};\r\n\r\n// Placeholder componenten voor nu\r\nconst Container = ({ children, className = '', size = 'xl' }: { children: React.ReactNode, className?: string, size?: string }) => (\r\n  <div className={`max-w-screen-${size} mx-auto px-4 sm:px-6 lg:px-8 ${className}`}>\r\n    {children}\r\n  </div>\r\n);\r\n\r\nconst PricingTables = () => (\r\n  <div className=\"bg-gray-100 p-8 rounded-lg text-center\">\r\n    <h2 className=\"text-2xl font-semibold mb-4\">Prijstabellen komen hier</h2>\r\n    <p>Dit component zal de verschillende abonnementsplannen tonen.</p>\r\n    <p className=\"mt-2 text-sm text-gray-600\">(components/subscription/PricingTables.tsx)</p>\r\n  </div>\r\n);\r\n\r\nconst FeatureComparison = ({ className = '' }: { className?: string }) => (\r\n  <div className={`bg-gray-100 p-8 rounded-lg text-center ${className}`}>\r\n    <h2 className=\"text-2xl font-semibold mb-4\">Feature Vergelijking komt hier</h2>\r\n    <p>Dit component zal een gedetailleerde vergelijking van features per plan tonen.</p>\r\n    <p className=\"mt-2 text-sm text-gray-600\">(components/subscription/FeatureComparison.tsx)</p>\r\n  </div>\r\n);\r\n\r\nconst Testimonials = ({ className = '' }: { className?: string }) => (\r\n  <div className={`bg-gray-100 p-8 rounded-lg text-center ${className}`}>\r\n    <h2 className=\"text-2xl font-semibold mb-4\">Testimonials komen hier</h2>\r\n    <p>Dit component zal gebruikerservaringen tonen.</p>\r\n    <p className=\"mt-2 text-sm text-gray-600\">(components/marketing/Testimonials.tsx)</p>\r\n  </div>\r\n);\r\n\r\nconst FAQ = ({ className = '' }: { className?: string }) => (\r\n  <div className={`bg-gray-100 p-8 rounded-lg text-center ${className}`}>\r\n    <h2 className=\"text-2xl font-semibold mb-4\">Veelgestelde Vragen (FAQ) komen hier</h2>\r\n    <p>Dit component zal antwoorden op veelgestelde vragen tonen.</p>\r\n    <p className=\"mt-2 text-sm text-gray-600\">(components/marketing/FAQ.tsx)</p>\r\n  </div>\r\n);\r\n\r\n\r\nexport default function PricingPage() {\r\n  return (\r\n    <DashboardLayout> {/* Of een meer generieke 'AppLayout' als die bestaat */}\r\n      <main>\r\n        <Container size=\"xl\" className=\"py-12 md:py-16 lg:py-20\">\r\n          <div className=\"text-center max-w-3xl mx-auto mb-12 md:mb-16\">\r\n            <h1 className=\"text-3xl md:text-4xl lg:text-5xl font-bold tracking-tight text-gray-900 mb-4\">\r\n              Abonnementen voor elke behoefte\r\n            </h1>\r\n            <p className=\"text-lg md:text-xl text-gray-600\">\r\n              Of u nu een patiënt bent die uw symptomen wilt bijhouden of een specialist die patiënten beheert, \r\n              we hebben een plan dat bij u past.\r\n            </p>\r\n          </div>\r\n          \r\n          <PricingTables />\r\n          \r\n          <FeatureComparison className=\"mt-16 md:mt-24\" />\r\n          \r\n          <Testimonials className=\"mt-16 md:mt-24\" />\r\n          \r\n          <FAQ className=\"mt-16 md:mt-24\" />\r\n        </Container>\r\n      </main>\r\n    </DashboardLayout>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\rapporten\\nieuw\\page.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":4,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":4,"endColumn":41},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":8,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":8,"endColumn":76,"fix":{"range":[318,369],"text":"mb-6 text-2xl font-bold text-purple-800 md:text-3xl"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import DashboardLayout from '@/components/layout/DashboardLayout';\r\nimport RapportGeneratorContainer from '@/containers/rapporten/RapportGeneratorContainer';\r\n\r\nexport default function NieuwRapportPage() {\r\n  return (\r\n    <DashboardLayout>\r\n      <div className=\"container mx-auto px-4 py-6\">\r\n        <h1 className=\"text-2xl md:text-3xl font-bold text-purple-800 mb-6\">Nieuw Rapport Genereren</h1>\r\n        <RapportGeneratorContainer />\r\n      </div>\r\n    </DashboardLayout>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\rapporten\\page.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":30,"fix":{"range":[188,188],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`next/link` import should occur before import of `next/navigation`","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":30,"fix":{"range":[114,190],"text":"import Link from 'next/link';\r\nimport { redirect } from 'next/navigation';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/components/layout/DashboardLayout` import should occur before import of `@/containers/rapporten/RapportGeneratorContainer`","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":67,"fix":{"range":[296,502],"text":"import DashboardLayout from '@/components/layout/DashboardLayout'; // Import DashboardLayout\r\nimport RapportGeneratorContainer from '@/containers/rapporten/RapportGeneratorContainer'; // Use the container\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":9,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":9,"endColumn":44},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":45,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":45,"endColumn":67,"fix":{"range":[1630,1668],"text":"mb-6 flex items-center justify-between"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":46,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":46,"endColumn":73,"fix":{"range":[1697,1743],"text":"text-2xl font-bold text-purple-800 md:text-3xl"}}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":3,"fixableWarningCount":2,"source":"import { createServerClient, type CookieOptions } from '@supabase/ssr';\r\nimport { cookies } from 'next/headers';\r\nimport { redirect } from 'next/navigation';\r\nimport Link from 'next/link';\r\n// import RapportList from '@/components/rapporten/RapportList'; // Assuming a component to list reports\r\nimport RapportGeneratorContainer from '@/containers/rapporten/RapportGeneratorContainer'; // Use the container\r\nimport DashboardLayout from '@/components/layout/DashboardLayout'; // Import DashboardLayout\r\n\r\nexport default async function RapportenPage() {\r\n  const cookieStore = cookies();\r\n  const supabase = createServerClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\r\n    {\r\n      cookies: {\r\n        get(name: string) {\r\n          return cookieStore.get(name)?.value;\r\n        },\r\n        set(name: string, value: string, options: CookieOptions) {\r\n          cookieStore.set({ name, value, ...options });\r\n        },\r\n        remove(name: string, options: CookieOptions) {\r\n          cookieStore.set({ name, value: '', ...options });\r\n        },\r\n      },\r\n    }\r\n  );\r\n\r\n  const { data: { user } } = await supabase.auth.getUser();\r\n\r\n  if (!user) {\r\n    redirect('/auth/login');\r\n  }\r\n\r\n  // Fetch existing reports for the user (example)\r\n  // const { data: rapporten, error } = await supabase\r\n  //   .from('rapporten') // Assuming a 'rapporten' table\r\n  //   .select('*')\r\n  //   .eq('user_id', user.id)\r\n  //   .order('created_at', { ascending: false });\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <div className=\"container mx-auto px-4 py-6\">\r\n        <header className=\"flex items-center justify-between mb-6\">\r\n          <h1 className=\"text-2xl md:text-3xl font-bold text-purple-800\">Mijn Rapporten</h1>\r\n        <Link href=\"/rapporten/nieuw\" className=\"btn-primary\">\r\n          Nieuw Rapport\r\n        </Link>\r\n      </header>\r\n      <RapportGeneratorContainer />\r\n      {/* <RapportList rapporten={rapporten || []} /> */}\r\n      {/* <p>Hier komt de functionaliteit voor het beheren en genereren van rapporten.</p>\r\n      <p>Veronderstelt componenten zoals `RapportGenerator` en `RapportList`.</p> */}\r\n    </div>\r\n    </DashboardLayout>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\reflecties\\nieuw\\page.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":4,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":4,"endColumn":44},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":8,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":8,"endColumn":76,"fix":{"range":[316,367],"text":"mb-6 text-2xl font-bold text-purple-800 md:text-3xl"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import DashboardLayout from '@/components/layout/DashboardLayout';\r\nimport ReflectieFormContainer from '@/containers/reflecties/ReflectieFormContainer';\r\n\r\nexport default function NieuweReflectiePage() {\r\n  return (\r\n    <DashboardLayout>\r\n      <div className=\"container mx-auto px-4 py-6\">\r\n        <h1 className=\"text-2xl md:text-3xl font-bold text-purple-800 mb-6\">Nieuwe Reflectie Toevoegen</h1>\r\n        <ReflectieFormContainer />\r\n        {/* initialDatum prop can be passed here if needed, e.g., from searchParams for a specific date */}\r\n      </div>\r\n    </DashboardLayout>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\reflecties\\page.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":30,"fix":{"range":[188,188],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`next/link` import should occur before import of `next/navigation`","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":30,"fix":{"range":[114,190],"text":"import Link from 'next/link';\r\nimport { redirect } from 'next/navigation';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/components/layout/DashboardLayout` import should occur before import of `@/components/reflecties/ReflectiesList`","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":67,"fix":{"range":[190,407],"text":"import DashboardLayout from '@/components/layout/DashboardLayout'; // Import DashboardLayout\r\nimport ReflectiesList from '@/components/reflecties/ReflectiesList';\r\nimport { Reflectie } from '@/types'; // Import type\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":9,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":9,"endColumn":45},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":55,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":55,"endColumn":67,"fix":{"range":[1848,1886],"text":"mb-6 flex items-center justify-between"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":56,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":56,"endColumn":73,"fix":{"range":[1915,1961],"text":"text-2xl font-bold text-purple-800 md:text-3xl"}}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":3,"fixableWarningCount":2,"source":"import { createServerClient, type CookieOptions } from '@supabase/ssr';\r\nimport { cookies } from 'next/headers';\r\nimport { redirect } from 'next/navigation';\r\nimport Link from 'next/link';\r\nimport ReflectiesList from '@/components/reflecties/ReflectiesList';\r\nimport { Reflectie } from '@/types'; // Import type\r\nimport DashboardLayout from '@/components/layout/DashboardLayout'; // Import DashboardLayout\r\n\r\nexport default async function ReflectiesPage() {\r\n  const cookieStore = cookies();\r\n  const supabase = createServerClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\r\n    {\r\n      cookies: {\r\n        get(name: string) {\r\n          return cookieStore.get(name)?.value;\r\n        },\r\n        set(name: string, value: string, options: CookieOptions) {\r\n          cookieStore.set({ name, value, ...options });\r\n        },\r\n        remove(name: string, options: CookieOptions) {\r\n          cookieStore.set({ name, value: '', ...options });\r\n        },\r\n      },\r\n    }\r\n  );\r\n  \r\n  // Check authentication\r\n  const { data: { user } } = await supabase.auth.getUser();\r\n  \r\n  if (!user) {\r\n    // Middleware should handle redirecting unauthenticated users to login.\r\n    redirect('/auth/login');\r\n  }\r\n  \r\n  // Haal reflecties op\r\n  const { data, error } = await supabase\r\n    .from('reflecties')\r\n    .select('*')\r\n    .eq('user_id', user.id) // Use user.id\r\n    .order('datum', { ascending: false }) // Show most recent first\r\n    .limit(30); // Limit to a reasonable number for the list\r\n  \r\n  if (error) {\r\n    console.error(\"Error fetching reflecties:\", error);\r\n    // Optionally, render an error message to the user\r\n  }\r\n\r\n  const reflecties: Reflectie[] = data || [];\r\n  \r\n  return (\r\n    <DashboardLayout>\r\n      <div className=\"container mx-auto px-4 py-6\">\r\n        <header className=\"flex items-center justify-between mb-6\">\r\n          <h1 className=\"text-2xl md:text-3xl font-bold text-purple-800\">Mijn Reflecties</h1>\r\n          <Link \r\n            href=\"/reflecties/nieuw\" \r\n            className=\"btn-primary\" // Using global style\r\n          >\r\n            Nieuwe Reflectie\r\n          </Link>\r\n        </header>\r\n        \r\n        <ReflectiesList reflecties={reflecties} />\r\n      </div>\r\n    </DashboardLayout>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\specialisten\\inzichten\\page.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":11,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":11,"endColumn":57},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":52,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":52,"endColumn":73,"fix":{"range":[1823,1869],"text":"text-2xl font-bold text-purple-800 md:text-3xl"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import React from 'react';\r\n\r\nimport DashboardLayout from '@/components/layout/DashboardLayout';\r\nimport { SpecialistIntelligenceDashboardComponent } from '@/components/specialisten/DynamicSpecialistComponents';\r\nimport { getSupabaseServerComponentClient } from '@/lib/supabase-server';\r\n\r\n/**\r\n * Specialist Intelligence Dashboard page\r\n * Provides AI-driven insights for specialists to better manage their patients\r\n */\r\nexport default async function SpecialistIntelligencePage() {\r\n  const supabase = getSupabaseServerComponentClient();\r\n  \r\n  // Get user data\r\n  const { data: { user }, error: userError } = await supabase.auth.getUser();\r\n  \r\n  if (userError || !user) {\r\n    console.error('Specialist Intelligence Page: User not found or error fetching user.', userError);\r\n    return null;\r\n  }\r\n  \r\n  // Fetch user profile to determine role\r\n  const { data: profile, error: profileError } = await supabase\r\n    .from('profiles')\r\n    .select('*')\r\n    .eq('id', user.id)\r\n    .single();\r\n  \r\n  if (profileError) {\r\n    console.error('Error fetching user profile:', profileError);\r\n    return null;\r\n  }\r\n  \r\n  // Only specialists and admins can access this page\r\n  if (profile.type !== 'specialist' && profile.type !== 'admin') {\r\n    return (\r\n      <DashboardLayout>\r\n        <div className=\"container mx-auto px-4 py-6\">\r\n          <div className=\"rounded-lg bg-red-50 p-4 text-red-800\">\r\n            <h2 className=\"text-lg font-medium\">Toegang geweigerd</h2>\r\n            <p>U heeft geen toegang tot deze pagina. Deze pagina is alleen toegankelijk voor specialisten en beheerders.</p>\r\n          </div>\r\n        </div>\r\n      </DashboardLayout>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <DashboardLayout>\r\n      <div className=\"container mx-auto px-4 py-6\">\r\n        <header className=\"mb-6\">\r\n          <h1 className=\"text-2xl md:text-3xl font-bold text-purple-800\">\r\n            AI Inzichten Dashboard\r\n          </h1>\r\n          <p className=\"text-gray-600\">\r\n            Geavanceerde analyses en voorspellingen voor uw patiënten\r\n          </p>\r\n        </header>\r\n        \r\n        <div className=\"grid grid-cols-1 gap-6\">\r\n          <SpecialistIntelligenceDashboardComponent />\r\n        </div>\r\n      </div>\r\n    </DashboardLayout>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\specialisten\\kennisbank\\page.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"`@/components/layout/DashboardLayout` import should occur before import of `@/components/specialisten/DynamicSpecialistComponents`","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":67,"fix":{"range":[30,201],"text":"import DashboardLayout from '@/components/layout/DashboardLayout';\r\nimport { KnowledgeManagementComponent } from '@/components/specialisten/DynamicSpecialistComponents';\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":11,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":11,"endColumn":54},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":52,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":52,"endColumn":73,"fix":{"range":[1801,1847],"text":"text-2xl font-bold text-purple-800 md:text-3xl"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":1,"fixableWarningCount":1,"source":"import React from 'react';\r\n\r\nimport { KnowledgeManagementComponent } from '@/components/specialisten/DynamicSpecialistComponents';\r\nimport DashboardLayout from '@/components/layout/DashboardLayout';\r\nimport { getSupabaseServerComponentClient } from '@/lib/supabase-server';\r\n\r\n/**\r\n * Knowledge Management System page for specialists\r\n * Allows specialists to view, add, and manage knowledge entries\r\n */\r\nexport default async function KnowledgeManagementPage() {\r\n  const supabase = getSupabaseServerComponentClient();\r\n  \r\n  // Get user data\r\n  const { data: { user }, error: userError } = await supabase.auth.getUser();\r\n  \r\n  if (userError || !user) {\r\n    console.error('Knowledge Management Page: User not found or error fetching user.', userError);\r\n    return null;\r\n  }\r\n  \r\n  // Fetch user profile to determine role\r\n  const { data: profile, error: profileError } = await supabase\r\n    .from('profiles')\r\n    .select('*')\r\n    .eq('id', user.id)\r\n    .single();\r\n  \r\n  if (profileError) {\r\n    console.error('Error fetching user profile:', profileError);\r\n    return null;\r\n  }\r\n  \r\n  // Only specialists and admins can access this page\r\n  if (profile.type !== 'specialist' && profile.type !== 'admin') {\r\n    return (\r\n      <DashboardLayout>\r\n        <div className=\"container mx-auto px-4 py-6\">\r\n          <div className=\"rounded-lg bg-red-50 p-4 text-red-800\">\r\n            <h2 className=\"text-lg font-medium\">Toegang geweigerd</h2>\r\n            <p>U heeft geen toegang tot deze pagina. Deze pagina is alleen toegankelijk voor specialisten en beheerders.</p>\r\n          </div>\r\n        </div>\r\n      </DashboardLayout>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <DashboardLayout>\r\n      <div className=\"container mx-auto px-4 py-6\">\r\n        <header className=\"mb-6\">\r\n          <h1 className=\"text-2xl md:text-3xl font-bold text-purple-800\">\r\n            Kennisbank\r\n          </h1>\r\n          <p className=\"text-gray-600\">\r\n            Beheer en deel kennis over fibromyalgie\r\n          </p>\r\n        </header>\r\n        \r\n        <div className=\"grid grid-cols-1 gap-6\">\r\n          <KnowledgeManagementComponent />\r\n        </div>\r\n      </div>\r\n    </DashboardLayout>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\specialisten\\layout.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":6,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":6,"endColumn":47}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\n\r\nimport DashboardLayout from '@/components/layout/DashboardLayout';\r\nimport { getSupabaseServerComponentClient } from '@/lib/supabase-server';\r\n\r\nexport default async function SpecialistLayout({\r\n  children,\r\n}: {\r\n  children: React.ReactNode;\r\n}) {\r\n  const supabase = getSupabaseServerComponentClient();\r\n  \r\n  // Get user data\r\n  const { data: { user }, error: userError } = await supabase.auth.getUser();\r\n  \r\n  if (userError || !user) {\r\n    console.error('Specialist Layout: User not found or error fetching user.', userError);\r\n    return null;\r\n  }\r\n  \r\n  // Fetch user profile to determine role\r\n  const { data: profile, error: profileError } = await supabase\r\n    .from('profiles')\r\n    .select('*')\r\n    .eq('id', user.id)\r\n    .single();\r\n  \r\n  if (profileError) {\r\n    console.error('Error fetching user profile:', profileError);\r\n    return null;\r\n  }\r\n  \r\n  // Only specialists and admins can access this section\r\n  if (profile.type !== 'specialist' && profile.type !== 'admin') {\r\n    return (\r\n      <DashboardLayout>\r\n        <div className=\"container mx-auto px-4 py-6\">\r\n          <div className=\"rounded-lg bg-red-50 p-4 text-red-800\">\r\n            <h2 className=\"text-lg font-medium\">Toegang geweigerd</h2>\r\n            <p>U heeft geen toegang tot deze sectie. Deze sectie is alleen toegankelijk voor specialisten en beheerders.</p>\r\n          </div>\r\n        </div>\r\n      </DashboardLayout>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <DashboardLayout>\r\n      <div className=\"container mx-auto px-4 py-6\">\r\n        {/* Specialist Navigation */}\r\n        <div className=\"mb-6 border-b border-gray-200 pb-4\">\r\n          <nav className=\"flex space-x-4\">\r\n            <a \r\n              href=\"/specialisten/patienten\" \r\n              className=\"rounded-md px-3 py-2 text-sm font-medium text-gray-600 hover:bg-purple-100 hover:text-purple-700\"\r\n            >\r\n              Patiënten\r\n            </a>\r\n            <a \r\n              href=\"/specialisten/taken\" \r\n              className=\"rounded-md px-3 py-2 text-sm font-medium text-gray-600 hover:bg-purple-100 hover:text-purple-700\"\r\n            >\r\n              Taken\r\n            </a>\r\n            <a \r\n              href=\"/specialisten/inzichten\" \r\n              className=\"rounded-md px-3 py-2 text-sm font-medium text-gray-600 hover:bg-purple-100 hover:text-purple-700\"\r\n            >\r\n              Inzichten\r\n            </a>\r\n            <a \r\n              href=\"/specialisten/kennisbank\" \r\n              className=\"rounded-md px-3 py-2 text-sm font-medium text-gray-600 hover:bg-purple-100 hover:text-purple-700\"\r\n            >\r\n              Kennisbank\r\n            </a>\r\n          </nav>\r\n        </div>\r\n        \r\n        {children}\r\n      </div>\r\n    </DashboardLayout>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\specialisten\\page.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":44,"fix":{"range":[157,157],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":65,"fix":{"range":[223,223],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":30,"fix":{"range":[254,254],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`next/link` import should occur before import of `next/navigation`","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":30,"fix":{"range":[114,256],"text":"import Link from 'next/link';\r\nimport { redirect } from 'next/navigation';\r\nimport PatientList from '@/components/specialisten/PatientList';\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":8,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":8,"endColumn":56},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":70,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":70,"endColumn":71,"fix":{"range":[2585,2631],"text":"text-2xl font-bold text-purple-800 md:text-3xl"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":85,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":85,"endColumn":65,"fix":{"range":[3295,3335],"text":"mb-3 text-xl font-semibold text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":94,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":94,"endColumn":65,"fix":{"range":[3839,3879],"text":"mb-3 text-xl font-semibold text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":99,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":99,"endColumn":65,"fix":{"range":[4077,4117],"text":"mb-3 text-xl font-semibold text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":104,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":104,"endColumn":65,"fix":{"range":[4341,4381],"text":"mb-3 text-xl font-semibold text-gray-700"}}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":4,"fixableWarningCount":5,"source":"import { createServerClient, type CookieOptions } from '@supabase/ssr';\r\nimport { cookies } from 'next/headers';\r\nimport { redirect } from 'next/navigation';\r\nimport PatientList from '@/components/specialisten/PatientList';\r\nimport Link from 'next/link';\r\nimport { Profile } from '@/types';\r\n\r\nexport default async function SpecialistenDashboardPage() {\r\n  const cookieStore = cookies();\r\n  const supabase = createServerClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\r\n    {\r\n      cookies: {\r\n        get(name: string) {\r\n          return cookieStore.get(name)?.value;\r\n        },\r\n        set(name: string, value: string, options: CookieOptions) {\r\n          cookieStore.set({ name, value, ...options });\r\n        },\r\n        remove(name: string, options: CookieOptions) {\r\n          cookieStore.set({ name, value: '', ...options });\r\n        },\r\n      },\r\n    }\r\n  );\r\n\r\n  const { data: { user } } = await supabase.auth.getUser();\r\n\r\n  if (!user) {\r\n    redirect('/auth/login');\r\n  }\r\n\r\n  // Fetch profile to confirm specialist type\r\n  const { data: profile, error: profileError } = await supabase\r\n    .from('profiles')\r\n    .select('type, voornaam')\r\n    .eq('id', user.id)\r\n    .single<Profile>();\r\n\r\n  if (profileError || !profile) {\r\n    console.error('Error fetching specialist profile:', profileError?.message);\r\n    // Redirect to general dashboard or an error page if profile is crucial and not found\r\n    redirect('/dashboard?error=profile_not_found'); \r\n  }\r\n\r\n  if (profile.type !== 'specialist') {\r\n    // This should ideally be caught by middleware as well\r\n    console.warn(`User ${user.id} attempted to access specialist page but is type ${profile.type}`);\r\n    redirect('/dashboard?error=unauthorized_specialist_access');\r\n  }\r\n\r\n  // Fetch patients for the specialist (example, adjust as per your actual schema)\r\n  // This is a simplified query. You'll need to adjust this based on how specialists are linked to patients.\r\n  // For example, if patients have an 'assigned_specialist_id' field:\r\n  // .eq('assigned_specialist_id', user.id)\r\n  const { data: patientsData, error: patientsError } = await supabase\r\n    .from('profiles')\r\n    .select('*')\r\n    .eq('type', 'patient'); // Fetches all profiles of type 'patient'\r\n\r\n  if (patientsError) {\r\n    console.error('Error fetching patients for specialist:', patientsError.message);\r\n  }\r\n  const patients: Profile[] = patientsData || [];\r\n\r\n  return (\r\n    <div className=\"container mx-auto px-4 py-6\">\r\n      <header className=\"mb-6\">\r\n        <h1 className=\"text-2xl md:text-3xl font-bold text-purple-800\">\r\n          Specialisten Dashboard - Welkom {profile.voornaam || 'Specialist'}\r\n        </h1>\r\n        <p className=\"text-gray-600\">Overzicht van uw patiënten en activiteiten.</p>\r\n      </header>\r\n\r\n      <nav className=\"mb-6\">\r\n        <ul className=\"flex space-x-4\">\r\n          <li><Link href=\"/specialisten\" className=\"text-purple-600 hover:underline\">Patiënten Overzicht</Link></li>\r\n          <li><Link href=\"/opdrachten\" className=\"text-purple-600 hover:underline\">Opdrachten Beheer</Link></li>\r\n          {/* Add more specialist-specific navigation links here */}\r\n        </ul>\r\n      </nav>\r\n\r\n      <section id=\"patient-list\">\r\n        <h2 className=\"text-xl font-semibold text-gray-700 mb-3\">Mijn Patiënten</h2>\r\n        <PatientList patients={patients} />\r\n        {/* Removed comment as patients prop is now passed */}\r\n        {patientsError && <p className=\"text-red-500\">Fout bij het laden van patiënten: {patientsError.message}</p>}\r\n        {patients.length === 0 && !patientsError && <p>Geen patiënten gevonden.</p>}\r\n      </section>\r\n      \r\n      {/* Placeholder for other specialist modules */}\r\n      <section id=\"therapy-adherence-stats\" className=\"mt-8\">\r\n        <h2 className=\"text-xl font-semibold text-gray-700 mb-3\">Therapietrouw Statistieken</h2>\r\n        <p>Statistieken over therapietrouw komen hier.</p>\r\n      </section>\r\n\r\n      <section id=\"specialist-reporting\" className=\"mt-8\">\r\n        <h2 className=\"text-xl font-semibold text-gray-700 mb-3\">Rapportage Inzichten (Specialist)</h2>\r\n        <p>Specifieke rapportage-inzichten voor specialisten komen hier.</p>\r\n      </section>\r\n\r\n      <section id=\"patient-communication\" className=\"mt-8\">\r\n        <h2 className=\"text-xl font-semibold text-gray-700 mb-3\">Communicatie met Patiënten</h2>\r\n        <p>Tools voor communicatie met patiënten komen hier.</p>\r\n      </section>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\specialisten\\patient\\[id]\\page.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":35,"fix":{"range":[213,213],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`next/navigation` import should occur before import of `@/components/layout/DashboardLayout`","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":54,"fix":{"range":[0,270],"text":"import { notFound, redirect } from 'next/navigation';\r\nimport DashboardLayout from '@/components/layout/DashboardLayout';\r\nimport { getSupabaseServerComponentClient } from '@/lib/supabase-server';\r\nimport { Profile } from '@/types'; // Task niet meer direct nodig hier\r\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'redirect' is defined but never used.","line":4,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":28},{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'redirect' is defined but never used.","line":4,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":28,"fix":{"range":[232,242],"text":""}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":30,"fix":{"range":[299,299],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`next/link` import should occur before import of `@/components/layout/DashboardLayout`","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":30,"fix":{"range":[0,301],"text":"import Link from 'next/link';\r\nimport DashboardLayout from '@/components/layout/DashboardLayout';\r\nimport { getSupabaseServerComponentClient } from '@/lib/supabase-server';\r\nimport { Profile } from '@/types'; // Task niet meer direct nodig hier\r\nimport { notFound, redirect } from 'next/navigation';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/components/specialisten/PatientInsightCard` import should occur before import of `@/lib/supabase-server`","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":79,"fix":{"range":[68,381],"text":"import PatientInsightCard from '@/components/specialisten/PatientInsightCard';\r\nimport { getSupabaseServerComponentClient } from '@/lib/supabase-server';\r\nimport { Profile } from '@/types'; // Task niet meer direct nodig hier\r\nimport { notFound, redirect } from 'next/navigation';\r\nimport Link from 'next/link';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/components/specialisten/PatientAllTasksList` import should occur before import of `@/lib/supabase-server`","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":81,"fix":{"range":[68,489],"text":"import PatientAllTasksList from '@/components/specialisten/PatientAllTasksList'; // Importeer nieuwe lijst\r\nimport { getSupabaseServerComponentClient } from '@/lib/supabase-server';\r\nimport { Profile } from '@/types'; // Task niet meer direct nodig hier\r\nimport { notFound, redirect } from 'next/navigation';\r\nimport Link from 'next/link';\r\nimport PatientInsightCard from '@/components/specialisten/PatientInsightCard';\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":15,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":15,"endColumn":48},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":72,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":72,"endColumn":59,"fix":{"range":[3138,3171],"text":"rounded-lg bg-white p-6 shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":73,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":73,"endColumn":78,"fix":{"range":[3200,3251],"text":"mb-4 text-2xl font-bold text-purple-800 md:text-3xl"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":76,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":76,"endColumn":65,"fix":{"range":[3368,3405],"text":"grid grid-cols-1 gap-4 md:grid-cols-2"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":86,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":86,"endColumn":64,"fix":{"range":[4006,4044],"text":"mt-8 rounded-lg bg-white p-6 shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":87,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":87,"endColumn":67,"fix":{"range":[4073,4113],"text":"mb-4 text-xl font-semibold text-gray-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":93,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":93,"endColumn":64,"fix":{"range":[4450,4488],"text":"mt-8 rounded-lg bg-white p-6 shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":94,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":94,"endColumn":67,"fix":{"range":[4517,4557],"text":"mb-4 text-xl font-semibold text-gray-800"}}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":7,"fixableWarningCount":7,"source":"import DashboardLayout from '@/components/layout/DashboardLayout';\r\nimport { getSupabaseServerComponentClient } from '@/lib/supabase-server';\r\nimport { Profile } from '@/types'; // Task niet meer direct nodig hier\r\nimport { notFound, redirect } from 'next/navigation';\r\nimport Link from 'next/link';\r\nimport PatientInsightCard from '@/components/specialisten/PatientInsightCard';\r\nimport PatientAllTasksList from '@/components/specialisten/PatientAllTasksList'; // Importeer nieuwe lijst\r\n\r\ninterface PatientDetailPageProps {\r\n  params: {\r\n    id: string; // Dit is de patient.id uit de URL\r\n  };\r\n}\r\n\r\nexport default async function PatientDetailPage({ params }: PatientDetailPageProps) {\r\n  const supabase = getSupabaseServerComponentClient();\r\n  const patientId = params.id;\r\n\r\n  const { data: { user: specialistUser }, error: specialistUserError } = await supabase.auth.getUser();\r\n\r\n  if (specialistUserError || !specialistUser) {\r\n    console.error('PatientDetailPage: Specialist not authenticated.', specialistUserError);\r\n    // DashboardLayout of middleware zou moeten redirecten als niet ingelogd\r\n    return notFound(); \r\n  }\r\n\r\n  // 1. Controleer of de ingelogde specialist gekoppeld is aan deze patiënt\r\n  const { data: connection, error: connectionError } = await supabase\r\n    .from('specialist_patienten')\r\n    .select('patient_id')\r\n    .eq('specialist_id', specialistUser.id)\r\n    .eq('patient_id', patientId)\r\n    .maybeSingle();\r\n\r\n  if (connectionError) {\r\n    console.error(`PatientDetailPage: Error checking specialist-patient connection for patient ${patientId}:`, connectionError);\r\n    return <DashboardLayout><div className=\"p-4\">Fout bij het controleren van patiënttoegang.</div></DashboardLayout>;\r\n  }\r\n\r\n  if (!connection) {\r\n    console.warn(`PatientDetailPage: Specialist ${specialistUser.id} is niet gekoppeld aan patient ${patientId}. Toegang geweigerd.`);\r\n    // Je kunt hier een specifiekere \"geen toegang\" pagina tonen of redirecten\r\n    return notFound(); \r\n  }\r\n\r\n  // 2. Haal het profiel van de patiënt op\r\n  // De RLS policy \"Specialisten kunnen profielen van gekoppelde patienten zien\" zou dit moeten toestaan\r\n  const { data: patientProfile, error: profileError } = await supabase\r\n    .from('profiles')\r\n    .select('*')\r\n    .eq('id', patientId)\r\n    .single();\r\n\r\n  if (profileError || !patientProfile) {\r\n    console.error(`PatientDetailPage: Patient profile with ID ${patientId} not found.`, profileError);\r\n    return notFound();\r\n  }\r\n\r\n  const patient = patientProfile as Profile;\r\n\r\n  // De taken worden nu client-side gehaald in PatientAllTasksList en PatientInsightCard\r\n  // We hoeven ze hier niet meer server-side op te halen, tenzij voor een snelle, niet-gedetailleerde weergave.\r\n  // Voor nu verwijderen we de server-side task fetch hier om dubbel werk te voorkomen.\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <div className=\"container mx-auto px-4 py-6\">\r\n        <div className=\"mb-6\">\r\n          <Link href=\"/specialisten/patienten\" className=\"text-purple-600 hover:text-purple-800\">&larr; Terug naar patiëntenlijst</Link>\r\n        </div>\r\n        \r\n        <div className=\"bg-white shadow-md rounded-lg p-6\">\r\n          <h1 className=\"text-2xl md:text-3xl font-bold text-purple-800 mb-4\">\r\n            Patiënt Details: {patient.voornaam} {patient.achternaam}\r\n          </h1>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            <p><strong>Email:</strong> {patient.email || 'N/A'}</p>\r\n            <p><strong>Type:</strong> {patient.type}</p>\r\n            <p><strong>Postcode:</strong> {patient.postcode || 'N/A'}</p>\r\n            <p><strong>Gemeente:</strong> {patient.gemeente || 'N/A'}</p>\r\n            <p><strong>Geboortedatum:</strong> {patient.geboortedatum ? new Date(patient.geboortedatum).toLocaleDateString('nl-BE') : 'N/A'}</p>\r\n            <p><strong>Geregistreerd op:</strong> {new Date(patient.created_at).toLocaleDateString('nl-BE')}</p>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"mt-8 bg-white shadow-md rounded-lg p-6\">\r\n          <h2 className=\"text-xl font-semibold text-gray-800 mb-4\">Alle Toegewezen Taken</h2>\r\n          {/* Client-side component voor het tonen van alle taken met details */}\r\n          <PatientAllTasksList patientId={patientId} specialistId={specialistUser.id} />\r\n        </div>\r\n\r\n        {/* Sectie voor gedetailleerde inzichten (blijft PatientInsightCard gebruiken) */}\r\n        <div className=\"mt-8 bg-white shadow-md rounded-lg p-6\">\r\n          <h2 className=\"text-xl font-semibold text-gray-800 mb-4\">Gedetailleerde Inzichten</h2>\r\n          <PatientInsightCard patientId={patientId} specialistId={specialistUser.id} />\r\n        </div>\r\n      </div>\r\n    </DashboardLayout>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\specialisten\\patienten\\page.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":9,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":9,"endColumn":44},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":26,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":26,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1288,1343],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":28,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":28,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1443,1528],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":34,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":34,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1758,1836],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":43,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":43,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2141,2208],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":47,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":47,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2268,2370],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":49,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":49,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2379,2458],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":54,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":54,"endColumn":64,"fix":{"range":[2576,2614],"text":"mb-6 flex items-center justify-between"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":55,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":55,"endColumn":73,"fix":{"range":[2643,2689],"text":"text-2xl font-bold text-purple-800 md:text-3xl"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":2,"source":"import DashboardLayout from '@/components/layout/DashboardLayout';\r\nimport PatientList from '@/components/specialisten/PatientList';\r\nimport AddPatientButtonContainer from '@/containers/specialisten/AddPatientButtonContainer'; // Updated import\r\n// import { createServerComponentClient } from '@supabase/auth-helpers-nextjs'; // Old import\r\n// import { cookies } from 'next/headers'; // Handled by centralized client\r\nimport { getSupabaseServerComponentClient } from '@/lib/supabase-server'; // Corrected import path\r\nimport { Profile } from '@/types'; // Import Profile type\r\n\r\nexport default async function PatientenPage() {\r\n  const supabase = getSupabaseServerComponentClient(); // Use centralized server client\r\n  \r\n  // Check authentication\r\n  const { data: { user }, error: userError } = await supabase.auth.getUser(); // Use getUser\r\n  \r\n  if (userError || !user) {\r\n    console.error('PatientenPage: User not found or error fetching user.', userError);\r\n    return null; // DashboardLayout should handle redirect if not authenticated\r\n  }\r\n  \r\n  // Haal patiënten op voor deze specialist\r\n  const { data: specialistPatients, error: spError } = await supabase\r\n    .from('specialist_patienten')\r\n    .select('patient_id')\r\n    .eq('specialist_id', user.id); // Use user.id\r\n  \r\n  console.log('[PatientenPage] Specialist ID:', user.id);\r\n  if (spError) console.error('[PatientenPage] Error fetching specialist_patienten:', spError);\r\n  console.log('[PatientenPage] Fetched specialistPatients links:', specialistPatients);\r\n\r\n  let patients: Profile[] = []; // Explicitly type patients\r\n  \r\n  if (specialistPatients && specialistPatients.length > 0) {\r\n    const patientIds = specialistPatients.map((sp: { patient_id: string }) => sp.patient_id);\r\n    console.log('[PatientenPage] Patient IDs to fetch profiles for:', patientIds);\r\n    \r\n    // Haal patiëntprofielen op\r\n    const { data: patientsData, error: profilesError } = await supabase\r\n      .from('profiles')\r\n      .select('*')\r\n      .in('id', patientIds);\r\n    \r\n    if (profilesError) console.error('[PatientenPage] Error fetching patient profiles:', profilesError);\r\n    console.log('[PatientenPage] Fetched patientsData:', patientsData);\r\n    \r\n    patients = patientsData || [];\r\n  } else {\r\n    console.log('[PatientenPage] No specialistPatients links found or specialistPatients is null/empty.');\r\n  }\r\n  console.log('[PatientenPage] Final patients array for PatientList:', patients);\r\n  \r\n  return (\r\n    <DashboardLayout>\r\n      <div className=\"container mx-auto px-4 py-6\">\r\n        <div className=\"flex items-center justify-between mb-6\">\r\n          <h1 className=\"text-2xl md:text-3xl font-bold text-purple-800\">Mijn Patiënten</h1>\r\n          <AddPatientButtonContainer /> {/* Updated component */}\r\n        </div>\r\n        \r\n        <PatientList patients={patients} />\r\n      </div>\r\n    </DashboardLayout>\r\n  );\r\n}\r\n// Removed accidental 'div' text if any was present\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\specialisten\\taken\\page.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":35,"fix":{"range":[177,177],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":44,"fix":{"range":[222,222],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`next/navigation` import should occur before import of `@/components/layout/DashboardLayout`","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":44,"fix":{"range":[0,224],"text":"import { notFound } from 'next/navigation';\r\nimport DashboardLayout from '@/components/layout/DashboardLayout';\r\nimport { getSupabaseServerComponentClient } from '@/lib/supabase-server';\r\nimport { Profile } from '@/types';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/components/specialisten/SpecialistTaskCreator` import should occur before import of `@/lib/supabase-server`","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":85,"fix":{"range":[68,434],"text":"import SpecialistTaskCreator from '@/components/specialisten/SpecialistTaskCreator'; // Import de nieuwe client component\r\nimport { getSupabaseServerComponentClient } from '@/lib/supabase-server';\r\nimport { Profile } from '@/types';\r\nimport { notFound } from 'next/navigation';\r\n// Link wordt nu gebruikt in SpecialistTaskCreator\r\n// import Link from 'next/link'; \r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":9,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":9,"endColumn":50},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":50,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":50,"endColumn":73,"fix":{"range":[2057,2103],"text":"text-2xl font-bold text-purple-800 md:text-3xl"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":55,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":55,"endColumn":59,"fix":{"range":[2220,2253],"text":"rounded-lg bg-white p-6 shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":56,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":56,"endColumn":44,"fix":{"range":[2281,2299],"text":"mb-4 text-gray-700"}}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":4,"fixableWarningCount":3,"source":"import DashboardLayout from '@/components/layout/DashboardLayout';\r\nimport { getSupabaseServerComponentClient } from '@/lib/supabase-server';\r\nimport { Profile } from '@/types';\r\nimport { notFound } from 'next/navigation';\r\n// Link wordt nu gebruikt in SpecialistTaskCreator\r\n// import Link from 'next/link'; \r\nimport SpecialistTaskCreator from '@/components/specialisten/SpecialistTaskCreator'; // Import de nieuwe client component\r\n\r\nexport default async function SpecialistTakenPage() {\r\n  const supabase = getSupabaseServerComponentClient();\r\n\r\n  const { data: { user: specialistUser }, error: specialistUserError } = await supabase.auth.getUser();\r\n\r\n  if (specialistUserError || !specialistUser) {\r\n    // Dit zou door middleware afgehandeld moeten worden, maar als extra check\r\n    return notFound(); \r\n  }\r\n\r\n  // Haal de lijst van patiënten van de specialist op\r\n  const { data: specialistPatientsLinks, error: linksError } = await supabase\r\n    .from('specialist_patienten')\r\n    .select('patient_id')\r\n    .eq('specialist_id', specialistUser.id);\r\n\r\n  if (linksError) {\r\n    console.error('[SpecialistTakenPage] Error fetching specialist_patienten links:', linksError);\r\n    // Overweeg een foutmelding te tonen aan de gebruiker\r\n  }\r\n\r\n  let patients: Profile[] = [];\r\n  if (specialistPatientsLinks && specialistPatientsLinks.length > 0) {\r\n    const patientIds = specialistPatientsLinks.map(link => link.patient_id);\r\n    const { data: patientsData, error: patientsError } = await supabase\r\n      .from('profiles')\r\n      .select('id, voornaam, achternaam, email') // Selecteer alleen benodigde velden voor de lijst\r\n      .in('id', patientIds)\r\n      .eq('type', 'patient'); \r\n    \r\n    if (patientsError) {\r\n      console.error('[SpecialistTakenPage] Error fetching patient profiles:', patientsError);\r\n    } else if (patientsData) {\r\n      patients = patientsData as Profile[];\r\n    }\r\n  }\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <div className=\"container mx-auto px-4 py-6\">\r\n        <header className=\"mb-6\">\r\n          <h1 className=\"text-2xl md:text-3xl font-bold text-purple-800\">\r\n            Taken Toewijzen aan Patiënten\r\n          </h1>\r\n        </header>\r\n        \r\n        <div className=\"bg-white shadow-md rounded-lg p-6\">\r\n          <p className=\"text-gray-700 mb-4\">\r\n            Selecteer een patiënt en maak een nieuwe taak aan of wijs een bestaande taak toe.\r\n          </p>\r\n          \r\n          <SpecialistTaskCreator patients={patients} specialistId={specialistUser.id} />\r\n\r\n        </div>\r\n      </div>\r\n    </DashboardLayout>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\taken\\[taskId]\\edit\\page.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"`@/components/layout/DashboardLayout` import should occur after import of `next/navigation`","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":67,"fix":{"range":[48,326],"text":"import TaskFormContainer from '@/containers/tasks/TaskFormContainer';\r\nimport { createServerClient } from '@supabase/ssr';\r\nimport { cookies } from 'next/headers';\r\nimport { redirect } from 'next/navigation';\r\nimport DashboardLayout from '@/components/layout/DashboardLayout';\r\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":70,"fix":{"range":[185,185],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/containers/tasks/TaskFormContainer` import should occur after import of `next/navigation`","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":70,"fix":{"range":[116,326],"text":"import { createServerClient } from '@supabase/ssr';\r\nimport { cookies } from 'next/headers';\r\nimport { redirect } from 'next/navigation';\r\nimport TaskFormContainer from '@/containers/tasks/TaskFormContainer';\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":14,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":14,"endColumn":43},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[958,961],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[958,961],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1073,1076],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1073,1076],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":35,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":35,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1181,1261],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":51,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":51,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1665,1741],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":55,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":55,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1784,1911],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":61,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":61,"endColumn":73,"fix":{"range":[2063,2109],"text":"text-2xl font-bold text-purple-800 md:text-3xl"}}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":3,"fixableWarningCount":1,"source":"// Pad wordt: app/taken/[taskId]/edit/page.tsx\r\nimport DashboardLayout from '@/components/layout/DashboardLayout';\r\nimport TaskFormContainer from '@/containers/tasks/TaskFormContainer';\r\nimport { createServerClient } from '@supabase/ssr';\r\nimport { cookies } from 'next/headers';\r\nimport { redirect } from 'next/navigation';\r\n\r\ninterface EditTaskPageProps { // Aangepaste interface naam\r\n  params: {\r\n    taskId: string; // Aangepast naar taskId\r\n  };\r\n}\r\n\r\nexport default async function EditTaskPage({ params }: EditTaskPageProps) { // Aangepaste functie naam\r\n  const currentTaskId = params.taskId; // Gebruik currentTaskId\r\n  const cookieStore = cookies();\r\n  const supabase = createServerClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\r\n    {\r\n      cookies: {\r\n        get(name: string) {\r\n          return cookieStore.get(name)?.value;\r\n        },\r\n        set(name: string, value: string, options: any) {\r\n          cookieStore.set({ name, value, ...options });\r\n        },\r\n        remove(name: string, options: any) {\r\n          cookieStore.set({ name, value: '', ...options });\r\n        },\r\n      },\r\n    }\r\n  );\r\n\r\n  console.log(`[EditTaskPage] Attempting to render for taskId: ${currentTaskId}`);\r\n\r\n  const { data: authData, error: authError } = await supabase.auth.getUser();\r\n\r\n  if (authError) {\r\n    console.error(\"[EditTaskPage] Auth error:\", authError);\r\n    return (\r\n      <DashboardLayout>\r\n        <div className=\"container mx-auto px-4 py-6\">\r\n          <p>Authenticatie fout: {authError.message}</p>\r\n        </div>\r\n      </DashboardLayout>\r\n    );\r\n  }\r\n\r\n  if (!authData.user) {\r\n    console.log(\"[EditTaskPage] User not authenticated, redirecting to login.\");\r\n    redirect('/auth/login');\r\n  }\r\n  \r\n  console.log(`[EditTaskPage] User ${authData.user.id} authenticated. Rendering TaskFormContainer for taskId: ${currentTaskId}`);\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <div className=\"container mx-auto px-4 py-6\">\r\n        <header className=\"mb-6\">\r\n          <h1 className=\"text-2xl md:text-3xl font-bold text-purple-800\">Taak Bewerken</h1>\r\n        </header>\r\n        <TaskFormContainer taskId={currentTaskId} isEditing={true} />\r\n      </div>\r\n    </DashboardLayout>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\taken\\[taskId]\\logs\\page.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":55,"fix":{"range":[69,69],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":56,"fix":{"range":[126,126],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/containers/tasks/TaskLogsContainer` import should occur before import of `@/lib/supabase-client`","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":70,"fix":{"range":[128,292],"text":"import TaskLogsContainer from '@/containers/tasks/TaskLogsContainer'; \r\nimport { getSupabaseBrowserClient } from '@/lib/supabase-client'; // Corrected import path\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/components/tasks/TaskLogsLoadingSkeleton` import should occur before import of `@/lib/supabase-client`","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":82,"fix":{"range":[128,375],"text":"import TaskLogsLoadingSkeleton from '@/components/tasks/TaskLogsLoadingSkeleton';\r\nimport { getSupabaseBrowserClient } from '@/lib/supabase-client'; // Corrected import path\r\nimport TaskLogsContainer from '@/containers/tasks/TaskLogsContainer'; \r\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":32,"fix":{"range":[406,406],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`next/link` import should occur before import of `next/navigation`","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":30,"fix":{"range":[71,439],"text":"import Link from 'next/link';\r\nimport { useParams, useRouter } from 'next/navigation';\r\nimport { getSupabaseBrowserClient } from '@/lib/supabase-client'; // Corrected import path\r\nimport TaskLogsContainer from '@/containers/tasks/TaskLogsContainer'; \r\nimport TaskLogsLoadingSkeleton from '@/components/tasks/TaskLogsLoadingSkeleton';\r\nimport { Task } from '@/types';\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":10,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":10,"endColumn":45},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":48,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1668,1671],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1668,1671],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":63,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":63,"endColumn":57,"fix":{"range":[2108,2137],"text":"h-8 w-1/4 rounded bg-gray-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":64,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":64,"endColumn":52,"fix":{"range":[2173,2197],"text":"h-64 rounded bg-gray-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":73,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":73,"endColumn":59,"fix":{"range":[2370,2403],"text":"rounded-lg bg-white p-6 shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":74,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":74,"endColumn":66,"fix":{"range":[2432,2471],"text":"mb-4 text-xl font-semibold text-red-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":75,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":75,"endColumn":44,"fix":{"range":[2508,2526],"text":"mb-6 text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":78,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":78,"endColumn":120,"fix":{"range":[2633,2728],"text":"rounded-md bg-purple-600 px-4 py-2 font-medium text-white transition-colors hover:bg-purple-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":89,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":89,"endColumn":62,"fix":{"range":[2925,2963],"text":"mb-6 flex items-center justify-between"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":94,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":94,"endColumn":80,"fix":{"range":[3176,3231],"text":"flex items-center text-purple-600 hover:text-purple-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":96,"column":53,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":96,"endColumn":77,"fix":{"range":[3310,3322],"text":"mr-1 h-5 w-5"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":96,"column":53,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":96,"endColumn":77,"fix":{"range":[3310,3322],"text":"size-5 mr-1"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":104,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":104,"endColumn":80,"fix":{"range":[3843,3898],"text":"flex items-center text-purple-600 hover:text-purple-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":106,"column":53,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":106,"endColumn":77,"fix":{"range":[3977,3989],"text":"mr-1 h-5 w-5"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":106,"column":53,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":106,"endColumn":77,"fix":{"range":[3977,3989],"text":"size-5 mr-1"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":115,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":115,"endColumn":59,"fix":{"range":[4394,4427],"text":"rounded-lg bg-white p-6 shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":116,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":116,"endColumn":53,"fix":{"range":[4456,4482],"text":"mb-4 text-lg font-semibold"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":117,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":117,"endColumn":65,"fix":{"range":[4529,4566],"text":"grid grid-cols-1 gap-4 md:grid-cols-2"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":154,"column":11,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":154,"endColumn":116,"fix":{"range":[6001,6094],"text":"rounded-md bg-green-600 px-4 py-2 font-medium text-white transition-colors hover:bg-green-700"}}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":6,"fixableWarningCount":17,"source":"'use client';\r\nimport { useState, useEffect, Suspense } from 'react';\r\nimport { useParams, useRouter } from 'next/navigation';\r\nimport { getSupabaseBrowserClient } from '@/lib/supabase-client'; // Corrected import path\r\nimport TaskLogsContainer from '@/containers/tasks/TaskLogsContainer'; \r\nimport TaskLogsLoadingSkeleton from '@/components/tasks/TaskLogsLoadingSkeleton';\r\nimport { Task } from '@/types';\r\nimport Link from 'next/link';\r\n\r\nexport default function TaskSpecificLogsPage() {\r\n  const params = useParams();\r\n  const router = useRouter();\r\n  const [task, setTask] = useState<Task | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  \r\n  useEffect(() => {\r\n    const fetchTask = async () => {\r\n      if (!params.id) return;\r\n      \r\n      try {\r\n        const supabaseClient = getSupabaseBrowserClient();\r\n        const { data: { user } } = await supabaseClient.auth.getUser();\r\n        \r\n        if (!user) {\r\n          router.push('/auth/login');\r\n          return;\r\n        }\r\n        \r\n        const { data, error: fetchError } = await supabaseClient\r\n          .from('tasks')\r\n          .select('*')\r\n          .eq('id', params.id)\r\n          .single();\r\n        \r\n        if (fetchError) throw fetchError;\r\n        \r\n        if (!data) {\r\n          throw new Error('Taak niet gevonden');\r\n        }\r\n        \r\n        // Check if user has access to this task\r\n        if (data.user_id !== user.id && data.specialist_id !== user.id) {\r\n          throw new Error('U heeft geen toegang tot deze taak');\r\n        }\r\n        \r\n        setTask(data as Task);\r\n      } catch (error: any) {\r\n        console.error('Fout bij ophalen taak:', error);\r\n        setError(error.message || 'Er is een fout opgetreden bij het ophalen van de taak');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchTask();\r\n  }, [params.id, router]);\r\n  \r\n  if (loading) {\r\n    return (\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        <div className=\"animate-pulse space-y-4\">\r\n          <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\r\n          <div className=\"h-64 bg-gray-200 rounded\"></div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  if (error || !task) {\r\n    return (\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        <div className=\"bg-white rounded-lg shadow-md p-6\">\r\n          <h1 className=\"text-xl font-semibold text-red-600 mb-4\">Fout</h1>\r\n          <p className=\"text-gray-700 mb-6\">{error || 'Taak niet gevonden'}</p>\r\n          <Link \r\n            href=\"/taken\"\r\n            className=\"px-4 py-2 bg-purple-600 text-white font-medium rounded-md hover:bg-purple-700 transition-colors\"\r\n          >\r\n            Terug naar taken\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <div className=\"container mx-auto px-4 py-8\">\r\n      <div className=\"flex justify-between items-center mb-6\">\r\n        <h1 className=\"text-2xl font-bold text-gray-900\">Logs voor {task.titel}</h1>\r\n        <div className=\"flex space-x-4\">\r\n          <Link \r\n            href={`/taken/${task.id}`}\r\n            className=\"text-purple-600 hover:text-purple-800 flex items-center\"\r\n          >\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 mr-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\" />\r\n            </svg>\r\n            Bekijk taak\r\n          </Link>\r\n          <Link \r\n            href=\"/taken\"\r\n            className=\"text-purple-600 hover:text-purple-800 flex items-center\"\r\n          >\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 mr-1\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n              <path fillRule=\"evenodd\" d=\"M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z\" clipRule=\"evenodd\" />\r\n            </svg>\r\n            Terug naar taken\r\n          </Link>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"mb-6\">\r\n        <div className=\"bg-white rounded-lg shadow-md p-6\">\r\n          <h2 className=\"text-lg font-semibold mb-4\">Taak Details</h2>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            <div>\r\n              <p className=\"text-gray-700\">\r\n                <span className=\"font-medium\">Type:</span> {task.type === 'taak' ? 'Taak' : 'Opdracht'}\r\n              </p>\r\n              {task.duur && (\r\n                <p className=\"text-gray-700\">\r\n                  <span className=\"font-medium\">Geplande duur:</span> {task.duur} minuten\r\n                </p>\r\n              )}\r\n              <p className=\"text-gray-700\">\r\n                <span className=\"font-medium\">Herhaalpatroon:</span> {task.herhaal_patroon}\r\n              </p>\r\n            </div>\r\n            <div>\r\n              {task.beschrijving && (\r\n                <p className=\"text-gray-700\">\r\n                  <span className=\"font-medium\">Beschrijving:</span> {task.beschrijving}\r\n                </p>\r\n              )}\r\n              {task.labels && task.labels.length > 0 && (\r\n                <p className=\"text-gray-700\">\r\n                  <span className=\"font-medium\">Labels:</span> {task.labels.join(', ')}\r\n                </p>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <Suspense fallback={<TaskLogsLoadingSkeleton />}>\r\n        <TaskLogsContainer taskId={task.id} limit={100} title={`Logs voor ${task.titel}`} />\r\n      </Suspense>\r\n      \r\n      <div className=\"mt-6 flex justify-center\">\r\n        <Link \r\n          href={`/taken/${task.id}/start`}\r\n          className=\"px-4 py-2 bg-green-600 text-white font-medium rounded-md hover:bg-green-700 transition-colors\"\r\n        >\r\n          Start deze taak opnieuw\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\taken\\[taskId]\\page.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":41,"fix":{"range":[215,215],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`next/navigation` import should occur before import of `@/components/layout/DashboardLayout`","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":54,"fix":{"range":[32,272],"text":"import { notFound, redirect } from 'next/navigation';\r\nimport DashboardLayout from '@/components/layout/DashboardLayout';\r\nimport { getSupabaseServerComponentClient } from '@/lib/supabase-server';\r\nimport { Task, TaskLog } from '@/types';\r\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":30,"fix":{"range":[301,301],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`next/link` import should occur before import of `@/components/layout/DashboardLayout`","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":30,"fix":{"range":[32,303],"text":"import Link from 'next/link';\r\nimport DashboardLayout from '@/components/layout/DashboardLayout';\r\nimport { getSupabaseServerComponentClient } from '@/lib/supabase-server';\r\nimport { Task, TaskLog } from '@/types';\r\nimport { notFound, redirect } from 'next/navigation';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/components/tasks/TaskItemCard` import should occur before import of `@/lib/supabase-server`","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":98,"fix":{"range":[100,419],"text":"import TaskItemCard, { TaskWithStatusAndFeedbackForCard } from '@/components/tasks/TaskItemCard'; // Voor weergave\r\nimport { getSupabaseServerComponentClient } from '@/lib/supabase-server';\r\nimport { Task, TaskLog } from '@/types';\r\nimport { notFound, redirect } from 'next/navigation';\r\nimport Link from 'next/link';\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":15,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":15,"endColumn":45},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":73,"column":31,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":73,"endColumn":98,"fix":{"range":[2552,2607],"text":"flex items-center text-purple-600 hover:text-purple-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":74,"column":53,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":74,"endColumn":77,"fix":{"range":[2674,2686],"text":"mr-1 h-5 w-5"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":74,"column":53,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":74,"endColumn":77,"fix":{"range":[2674,2686],"text":"size-5 mr-1"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":81,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":81,"endColumn":73,"fix":{"range":[3080,3126],"text":"text-2xl font-bold text-purple-800 md:text-3xl"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":83,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":83,"endColumn":59,"fix":{"range":[3189,3222],"text":"rounded-lg bg-white p-6 shadow-md"}}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":5,"fixableWarningCount":5,"source":"// app/taken/[taskId]/page.tsx\r\nimport DashboardLayout from '@/components/layout/DashboardLayout';\r\nimport { getSupabaseServerComponentClient } from '@/lib/supabase-server';\r\nimport { Task, TaskLog } from '@/types';\r\nimport { notFound, redirect } from 'next/navigation';\r\nimport Link from 'next/link';\r\nimport TaskItemCard, { TaskWithStatusAndFeedbackForCard } from '@/components/tasks/TaskItemCard'; // Voor weergave\r\n\r\ninterface TaskDetailPageProps {\r\n  params: {\r\n    taskId: string;\r\n  };\r\n}\r\n\r\nexport default async function TaskDetailPage({ params }: TaskDetailPageProps) {\r\n  const taskId = params.taskId;\r\n  const supabase = getSupabaseServerComponentClient();\r\n\r\n  const { data: { user } } = await supabase.auth.getUser();\r\n  if (!user) {\r\n    redirect('/auth/login');\r\n  }\r\n\r\n  // Haal de taak op\r\n  const { data: taskData, error: taskError } = await supabase\r\n    .from('tasks')\r\n    .select<string, Task>('*')\r\n    .eq('id', taskId)\r\n    .eq('user_id', user.id) // Zorg dat gebruiker eigenaar is\r\n    .single();\r\n\r\n  if (taskError || !taskData) {\r\n    console.error(`TaskDetailPage: Task with ID ${taskId} not found for user ${user.id}. Error:`, taskError);\r\n    notFound();\r\n  }\r\n\r\n  // Haal de meest recente log op voor status en feedback (optioneel, kan ook in TaskItemCard als die client-side data haalt)\r\n  const { data: logsData, error: logsError } = await supabase\r\n    .from('task_logs')\r\n    .select<string, TaskLog>('*')\r\n    .eq('task_id', taskId)\r\n    .eq('user_id', user.id)\r\n    .order('created_at', { ascending: false })\r\n    .limit(1);\r\n  \r\n  if (logsError) {\r\n    console.warn(`TaskDetailPage: Error fetching logs for task ${taskId}:`, logsError.message);\r\n  }\r\n\r\n  const latestLog = logsData?.[0];\r\n  const status: 'voltooid' | 'openstaand' = latestLog?.eind_tijd ? 'voltooid' : 'openstaand';\r\n  const voltooidOpDatum = status === 'voltooid' ? latestLog?.eind_tijd : null;\r\n\r\n  const enrichedTask: TaskWithStatusAndFeedbackForCard = {\r\n    ...(taskData as Task),\r\n    status,\r\n    voltooid_op: voltooidOpDatum,\r\n    feedback: latestLog ? {\r\n      pijn_score: latestLog.pijn_score,\r\n      vermoeidheid_score: latestLog.vermoeidheid_score,\r\n      energie_voor: latestLog.energie_voor,\r\n      energie_na: latestLog.energie_na,\r\n      stemming: latestLog.stemming,\r\n      notitie: latestLog.notitie,\r\n      hartslag: latestLog.hartslag,\r\n    } : undefined,\r\n  };\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <div className=\"container mx-auto px-4 py-6\">\r\n        <div className=\"mb-6\">\r\n          <Link href=\"/taken\" className=\"text-purple-600 hover:text-purple-800 flex items-center\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 mr-1\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n              <path fillRule=\"evenodd\" d=\"M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z\" clipRule=\"evenodd\" />\r\n            </svg>\r\n            Terug naar Mijn Taken\r\n          </Link>\r\n        </div>\r\n        <header className=\"mb-6\">\r\n          <h1 className=\"text-2xl md:text-3xl font-bold text-purple-800\">Taakdetails</h1>\r\n        </header>\r\n        <div className=\"bg-white p-6 rounded-lg shadow-md\">\r\n          <TaskItemCard task={enrichedTask} showActions={true} /> \r\n          {/* showActions kan hier true zijn om bijv. edit/delete knoppen te tonen die naar de juiste routes linken */}\r\n        </div>\r\n        {/* Hier kunnen later nog logboeken etc. getoond worden */}\r\n      </div>\r\n    </DashboardLayout>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\taken\\[taskId]\\start\\page.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":45,"fix":{"range":[162,162],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":80,"fix":{"range":[362,362],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":30,"fix":{"range":[494,494],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`next/link` import should occur before import of `next/navigation`","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":30,"fix":{"range":[82,496],"text":"import Link from 'next/link';\r\nimport { useParams } from 'next/navigation'; // useRouter removed as it's unused\r\n// import { getSupabaseBrowserClient } from '@/lib/supabase'; // No longer needed for task fetching\r\nimport TaskExecutionContainer from '@/containers/tasks/TaskExecutionContainer'; // Updated import\r\n// import { Task } from '@/types'; // Task type might not be needed here if not passing initialTask\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/components/layout/DashboardLayout` import should occur before import of `@/containers/tasks/TaskExecutionContainer`","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":67,"fix":{"range":[265,607],"text":"import DashboardLayout from '@/components/layout/DashboardLayout'; // Assuming this page uses DashboardLayout\r\nimport TaskExecutionContainer from '@/containers/tasks/TaskExecutionContainer'; // Updated import\r\n// import { Task } from '@/types'; // Task type might not be needed here if not passing initialTask\r\nimport Link from 'next/link';\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":18,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":18,"endColumn":38},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":30,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":30,"endColumn":61,"fix":{"range":[1584,1617],"text":"rounded-lg bg-white p-6 shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":31,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":31,"endColumn":68,"fix":{"range":[1648,1687],"text":"mb-4 text-xl font-semibold text-red-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":32,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":32,"endColumn":46,"fix":{"range":[1726,1744],"text":"mb-6 text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":35,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":35,"endColumn":122,"fix":{"range":[1847,1942],"text":"rounded-md bg-purple-600 px-4 py-2 font-medium text-white transition-colors hover:bg-purple-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":51,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":51,"endColumn":80,"fix":{"range":[2311,2366],"text":"flex items-center text-purple-600 hover:text-purple-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":53,"column":53,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":53,"endColumn":77,"fix":{"range":[2445,2457],"text":"mr-1 h-5 w-5"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":53,"column":53,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":53,"endColumn":77,"fix":{"range":[2445,2457],"text":"size-5 mr-1"}}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":5,"fixableWarningCount":7,"source":"'use client';\r\n// import { useState, useEffect } from 'react'; // Unused imports\r\nimport { useParams } from 'next/navigation'; // useRouter removed as it's unused\r\n// import { getSupabaseBrowserClient } from '@/lib/supabase'; // No longer needed for task fetching\r\nimport TaskExecutionContainer from '@/containers/tasks/TaskExecutionContainer'; // Updated import\r\n// import { Task } from '@/types'; // Task type might not be needed here if not passing initialTask\r\nimport Link from 'next/link';\r\nimport DashboardLayout from '@/components/layout/DashboardLayout'; // Assuming this page uses DashboardLayout\r\n\r\n// This page can become simpler as the container handles loading/error states for the task itself.\r\n// Server-side auth check is removed as this is a client component.\r\n// Middleware and AuthProvider should handle auth.\r\n// import { createServerClient } from '@supabase/ssr'; // Server-side\r\n// import { cookies } from 'next/headers'; // Server-side\r\n// import { redirect } from 'next/navigation'; // Server-side redirect\r\n\r\n\r\nexport default function TaskStartPage() { \r\n  const params = useParams();\r\n  const taskId = params.taskId as string; // Moet overeenkomen met de mapnaam [taskId]\r\n\r\n  // Client-side auth check can be added here using useAuth() if needed,\r\n  // but middleware should have already redirected unauthenticated users.\r\n  // TaskExecutionContainer will handle fetching task data and its own loading/error states.\r\n\r\n  if (!taskId) {\r\n    return (\r\n      <DashboardLayout>\r\n        <div className=\"container mx-auto px-4 py-8\">\r\n          <div className=\"bg-white rounded-lg shadow-md p-6\">\r\n            <h1 className=\"text-xl font-semibold text-red-600 mb-4\">Fout</h1>\r\n            <p className=\"text-gray-700 mb-6\">Geen taak ID gevonden.</p>\r\n            <Link\r\n              href=\"/taken\"\r\n              className=\"px-4 py-2 bg-purple-600 text-white font-medium rounded-md hover:bg-purple-700 transition-colors\"\r\n            >\r\n              Terug naar taken\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </DashboardLayout>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <DashboardLayout> {/* Wrap with DashboardLayout */}\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        <div className=\"mb-6\">\r\n          <Link\r\n            href=\"/taken\"\r\n            className=\"text-purple-600 hover:text-purple-800 flex items-center\"\r\n          >\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 mr-1\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n              <path fillRule=\"evenodd\" d=\"M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z\" clipRule=\"evenodd\" />\r\n            </svg>\r\n            Terug naar taken\r\n          </Link>\r\n        </div>\r\n        \r\n        <TaskExecutionContainer\r\n          taskId={taskId}\r\n          // onComplete can be handled within the container or passed differently if needed from server\r\n        />\r\n      </div>\r\n    </DashboardLayout>\r\n  );\r\n} // Added missing closing bracket\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\taken\\logs\\page.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":34,"fix":{"range":[262,262],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":30,"fix":{"range":[293,293],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/components/tasks/TaskLogsLoadingSkeleton` import should occur before import of `@/containers/tasks/TaskLogsContainer`","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":82,"fix":{"range":[363,517],"text":"import TaskLogsLoadingSkeleton from '@/components/tasks/TaskLogsLoadingSkeleton';\r\nimport TaskLogsContainer from '@/containers/tasks/TaskLogsContainer';\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":11,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":11,"endColumn":37},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":17,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":17,"endColumn":64,"fix":{"range":[787,825],"text":"mb-6 flex items-center justify-between"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":21,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":21,"endColumn":80,"fix":{"range":[984,1039],"text":"flex items-center text-purple-600 hover:text-purple-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":23,"column":53,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":23,"endColumn":77,"fix":{"range":[1118,1130],"text":"mr-1 h-5 w-5"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":23,"column":53,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":23,"endColumn":77,"fix":{"range":[1118,1130],"text":"size-5 mr-1"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":31,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":31,"endColumn":61,"fix":{"range":[1527,1560],"text":"rounded-lg bg-white p-6 shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":32,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":32,"endColumn":55,"fix":{"range":[1591,1617],"text":"mb-4 text-lg font-semibold"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":37,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":37,"endColumn":46,"fix":{"range":[1974,1992],"text":"mt-2 text-gray-700"}}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":3,"fixableWarningCount":7,"source":"'use client';\r\n// This page can be a Server Component if auth is handled by layout/middleware\r\n// or a simple client component that just renders the container.\r\n// For now, let's assume DashboardLayout handles auth redirection.\r\nimport { Suspense } from 'react';\r\nimport Link from 'next/link';\r\nimport DashboardLayout from '@/components/layout/DashboardLayout';\r\nimport TaskLogsContainer from '@/containers/tasks/TaskLogsContainer';\r\nimport TaskLogsLoadingSkeleton from '@/components/tasks/TaskLogsLoadingSkeleton';\r\n\r\nexport default function TaskLogsPage() {\r\n  // The TaskLogsContainer will use useAuth() to get the current user's ID\r\n  // and fetch the appropriate logs.\r\n  return (\r\n    <DashboardLayout>\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        <div className=\"flex justify-between items-center mb-6\">\r\n          <h1 className=\"text-2xl font-bold text-gray-900\">Mijn Activiteiten Logs</h1>\r\n          <Link\r\n            href=\"/taken\"\r\n            className=\"text-purple-600 hover:text-purple-800 flex items-center\"\r\n          >\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 mr-1\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n              <path fillRule=\"evenodd\" d=\"M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z\" clipRule=\"evenodd\" />\r\n            </svg>\r\n            Terug naar taken\r\n          </Link>\r\n        </div>\r\n        \r\n        <div className=\"mb-6\">\r\n          <div className=\"bg-white rounded-lg shadow-md p-6\">\r\n            <h2 className=\"text-lg font-semibold mb-4\">Overzicht van Activiteiten</h2>\r\n            <p className=\"text-gray-700\">\r\n              Hier vindt u een overzicht van al uw uitgevoerde taken en opdrachten.\r\n              Deze logs bevatten informatie over uw pijn- en energieniveaus, vermoeidheid en algemeen gevoel tijdens het uitvoeren van activiteiten.\r\n            </p>\r\n            <p className=\"text-gray-700 mt-2\">\r\n              Deze gegevens helpen u en uw zorgverleners om patronen te identificeren en uw activiteiten beter af te stemmen op uw energieniveau en pijndrempel.\r\n            </p>\r\n          </div>\r\n        </div>\r\n        \r\n        <Suspense fallback={<TaskLogsLoadingSkeleton />}>\r\n          {/* TaskLogsContainer will fetch logs for the authenticated user by default */}\r\n          <TaskLogsContainer limit={50} title=\"Mijn Recente Logs\" />\r\n        </Suspense>\r\n      </div>\r\n    </DashboardLayout>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\taken\\nieuw\\page.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":4,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":4,"endColumn":39},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":8,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":8,"endColumn":76,"fix":{"range":[296,347],"text":"mb-6 text-2xl font-bold text-purple-800 md:text-3xl"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import DashboardLayout from '@/components/layout/DashboardLayout';\r\nimport TaskFormContainer from '@/containers/tasks/TaskFormContainer';\r\n\r\nexport default function NieuweTaakPage() {\r\n  return (\r\n    <DashboardLayout>\r\n      <div className=\"container mx-auto px-4 py-6\">\r\n        <h1 className=\"text-2xl md:text-3xl font-bold text-purple-800 mb-6\">Nieuwe Taak Toevoegen</h1>\r\n        <TaskFormContainer initialType=\"taak\" isEditing={false} />\r\n      </div>\r\n    </DashboardLayout>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\taken\\page.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":44,"fix":{"range":[43,43],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/types` import should occur after import of `@/lib/supabase-server`","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":32,"fix":{"range":[45,347],"text":"import DashboardLayout from '@/components/layout/DashboardLayout';\r\nimport { TasksPageContainer } from '@/containers/tasks/TasksPageContainer'; // Updated import\r\nimport { getSupabaseServerComponentClient } from '@/lib/supabase-server'; // Import server client helper\r\nimport { Task } from '@/types';\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":7,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":7,"endColumn":40}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import { redirect } from 'next/navigation';\r\nimport { Task } from '@/types';\r\nimport DashboardLayout from '@/components/layout/DashboardLayout';\r\nimport { TasksPageContainer } from '@/containers/tasks/TasksPageContainer'; // Updated import\r\nimport { getSupabaseServerComponentClient } from '@/lib/supabase-server'; // Import server client helper\r\n\r\nexport default async function TakenPage() {\r\n  const supabase = getSupabaseServerComponentClient(); // Use helper\r\n  \r\n  // Check authentication op server\r\n  const { data: { user } } = await supabase.auth.getUser();\r\n  \r\n  if (!user) {\r\n    redirect('/auth/login');\r\n  }\r\n  \r\n  // Fetch all tasks for the user\r\n  const { data: tasksData, error } = await supabase\r\n    .from('tasks')\r\n    .select('*')\r\n    .eq('user_id', user.id)\r\n    .order('created_at', { ascending: false });\r\n  \r\n  if (error) {\r\n    console.error('Error fetching tasks:', error);\r\n  }\r\n  \r\n  const tasks: Task[] = tasksData || [];\r\n  \r\n  return (\r\n    <DashboardLayout>\r\n      <TasksPageContainer initialTasks={tasks} />\r\n    </DashboardLayout>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\app\\voortgang\\page.tsx","messages":[{"ruleId":"import/no-named-as-default","severity":1,"message":"Using exported name 'ProgressVisualization' as identifier for default import.","line":6,"column":8,"nodeType":"ImportDefaultSpecifier","endLine":6,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":8,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":8,"endColumn":37},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":15,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":15,"endColumn":62,"fix":{"range":[429,463],"text":"mb-6 h-8 w-1/4 rounded bg-gray-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":16,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":16,"endColumn":57,"fix":{"range":[499,528],"text":"mb-6 h-64 rounded bg-gray-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":17,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":17,"endColumn":57,"fix":{"range":[564,593],"text":"mb-6 h-64 rounded bg-gray-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":27,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":27,"endColumn":76,"fix":{"range":[823,873],"text":"mb-6 border-l-4 border-yellow-400 bg-yellow-50 p-4"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'flex-shrink-0' should be updated to 'shrink-0' in Tailwind CSS v3!","line":29,"column":18,"nodeType":"JSXAttribute","messageId":"classnameChanged","endLine":29,"endColumn":43,"fix":{"range":[939,952],"text":"shrink-0"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":30,"column":20,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":30,"endColumn":55,"fix":{"range":[986,1009],"text":"size-5 text-yellow-400"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":47,"column":11,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":47,"endColumn":60,"fix":{"range":[1721,1758],"text":"mb-6 text-3xl font-bold text-gray-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":49,"column":10,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":49,"endColumn":40,"fix":{"range":[1809,1827],"text":"mb-8 text-gray-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":53,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":53,"endColumn":66,"fix":{"range":[2020,2062],"text":"mb-8 grid grid-cols-1 gap-6 lg:grid-cols-2"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":67,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":67,"endColumn":61,"fix":{"range":[2423,2460],"text":"grid grid-cols-1 gap-6 lg:grid-cols-2"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":81,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":81,"endColumn":63,"fix":{"range":[2818,2857],"text":"mt-12 rounded-xl bg-white p-6 shadow-lg"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":82,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":82,"endColumn":65,"fix":{"range":[2884,2924],"text":"mb-4 text-xl font-semibold text-gray-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":86,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":86,"endColumn":51,"fix":{"range":[3111,3131],"text":"mr-2 text-purple-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":92,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":92,"endColumn":51,"fix":{"range":[3452,3472],"text":"mr-2 text-purple-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":98,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":98,"endColumn":51,"fix":{"range":[3783,3803],"text":"mr-2 text-purple-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":104,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":104,"endColumn":51,"fix":{"range":[4079,4099],"text":"mr-2 text-purple-600"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":16,"source":"'use client';\r\n\r\nimport React from 'react';\r\n\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\nimport ProgressVisualization from '@/components/charts/ProgressVisualization';\r\n\r\nexport default function ProgressPage() {\r\n  const { profile, loading } = useAuth();\r\n  \r\n  if (loading) {\r\n    return (\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        <div className=\"animate-pulse\">\r\n          <div className=\"h-8 bg-gray-200 rounded w-1/4 mb-6\"></div>\r\n          <div className=\"h-64 bg-gray-200 rounded mb-6\"></div>\r\n          <div className=\"h-64 bg-gray-200 rounded mb-6\"></div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  // Only patients should access this page\r\n  if (profile?.type !== 'patient') {\r\n    return (\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        <div className=\"bg-yellow-50 border-l-4 border-yellow-400 p-4 mb-6\">\r\n          <div className=\"flex\">\r\n            <div className=\"flex-shrink-0\">\r\n              <svg className=\"h-5 w-5 text-yellow-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\r\n              </svg>\r\n            </div>\r\n            <div className=\"ml-3\">\r\n              <p className=\"text-sm text-yellow-700\">\r\n                Deze pagina is alleen toegankelijk voor patiënten.\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <div className=\"container mx-auto px-4 py-8\">\r\n      <h1 className=\"text-3xl font-bold text-gray-800 mb-6\">Mijn Voortgang</h1>\r\n      \r\n      <p className=\"text-gray-600 mb-8\">\r\n        Hier kunt u uw voortgang en trends bekijken. Deze visualisaties helpen u om patronen te herkennen en inzicht te krijgen in uw gezondheid.\r\n      </p>\r\n      \r\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\r\n        <ProgressVisualization \r\n          defaultMetric=\"pain\" \r\n          defaultTimeRange=\"month\" \r\n          defaultChartType=\"line\"\r\n        />\r\n        \r\n        <ProgressVisualization \r\n          defaultMetric=\"fatigue\" \r\n          defaultTimeRange=\"month\" \r\n          defaultChartType=\"area\"\r\n        />\r\n      </div>\r\n      \r\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n        <ProgressVisualization \r\n          defaultMetric=\"mood\" \r\n          defaultTimeRange=\"month\" \r\n          defaultChartType=\"line\"\r\n        />\r\n        \r\n        <ProgressVisualization \r\n          defaultMetric=\"tasks\" \r\n          defaultTimeRange=\"month\" \r\n          defaultChartType=\"bar\"\r\n        />\r\n      </div>\r\n      \r\n      <div className=\"mt-12 bg-white rounded-xl shadow-lg p-6\">\r\n        <h2 className=\"text-xl font-semibold text-gray-800 mb-4\">Tips voor het interpreteren van uw voortgang</h2>\r\n        \r\n        <ul className=\"space-y-3 text-gray-600\">\r\n          <li className=\"flex items-start\">\r\n            <span className=\"text-purple-600 mr-2\">•</span>\r\n            <span>\r\n              <strong>Patronen herkennen:</strong> Zoek naar verbanden tussen verschillende metrieken. Bijvoorbeeld, hoe beïnvloedt uw pijnniveau uw stemming of taakvoltooing?\r\n            </span>\r\n          </li>\r\n          <li className=\"flex items-start\">\r\n            <span className=\"text-purple-600 mr-2\">•</span>\r\n            <span>\r\n              <strong>Tijdsperiodes vergelijken:</strong> Gebruik de tijdselectie om verschillende periodes te vergelijken en seizoensgebonden patronen te ontdekken.\r\n            </span>\r\n          </li>\r\n          <li className=\"flex items-start\">\r\n            <span className=\"text-purple-600 mr-2\">•</span>\r\n            <span>\r\n              <strong>Deel inzichten:</strong> Bespreek opvallende trends met uw zorgverlener om uw behandelplan te optimaliseren.\r\n            </span>\r\n          </li>\r\n          <li className=\"flex items-start\">\r\n            <span className=\"text-purple-600 mr-2\">•</span>\r\n            <span>\r\n              <strong>Kleine verbeteringen vieren:</strong> Focus op positieve trends, hoe klein ook. Elke verbetering is een stap vooruit.\r\n            </span>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\admin\\AddUserForm.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":41,"fix":{"range":[57,57],"text":"\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onUserAdded' is defined but never used. Allowed unused args must match /^_/u.","line":21,"column":61,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":72},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":62,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":62,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2480,2526],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'dummyUser' is assigned a value but never used.","line":69,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":69,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":88,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3834,3837],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3834,3837],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":101,"column":20,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":101,"endColumn":52,"fix":{"range":[4506,4526],"text":"text-sm text-red-500"}},{"ruleId":"tailwindcss/no-custom-classname","severity":1,"message":"Classname 'text-md' is not a Tailwind CSS class!","line":143,"column":15,"nodeType":"JSXAttribute","messageId":"customClassnameDetected","endLine":143,"endColumn":83},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":143,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":143,"endColumn":83,"fix":{"range":[6892,6948],"text":"text-md mb-2 font-semibold text-gray-800 dark:text-white"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":164,"column":11,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":164,"endColumn":185,"fix":{"range":[7905,8067],"text":"rounded-md bg-gray-300 px-4 py-2 text-gray-700 hover:bg-gray-400 focus:outline-none disabled:opacity-50 dark:bg-gray-600 dark:text-gray-200 dark:hover:bg-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":171,"column":11,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":171,"endColumn":123,"fix":{"range":[8216,8316],"text":"rounded-md bg-blue-500 px-4 py-2 text-white hover:bg-blue-600 focus:outline-none disabled:opacity-50"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":1,"fixableWarningCount":4,"source":"'use client';\r\n\r\nimport React, { useState } from 'react';\r\nimport { Profile, Abonnement } from '@/types';\r\n\r\n// Define a type for the form data\r\n// Omit Date types from Profile that will be handled as strings in the form\r\ntype AddUserFormData = Omit<Partial<Profile>, 'id' | 'avatar_url' | 'geboortedatum' | 'created_at' | 'updated_at'> & {\r\n  email?: string;\r\n  password?: string;\r\n  geboortedatum?: string; // Keep as string for form input 'YYYY-MM-DD'\r\n  plan_type?: Abonnement['plan_type'];\r\n  max_patienten?: number; // Ensure this matches Abonnement type if it's number\r\n};\r\n\r\ninterface AddUserFormProps {\r\n  onClose: () => void;\r\n  onUserAdded: (newUser: Profile) => void; // Callback after user is successfully added\r\n}\r\n\r\nconst AddUserForm: React.FC<AddUserFormProps> = ({ onClose, onUserAdded }) => {\r\n  const [formData, setFormData] = useState<AddUserFormData>({\r\n    type: 'patient', // Default role\r\n    voornaam: '',\r\n    achternaam: '',\r\n    email: '',\r\n    password: '',\r\n    postcode: '',\r\n    gemeente: '',\r\n    geboortedatum: '', // Initialized as string, input type=\"date\" expects 'YYYY-MM-DD'\r\n    plan_type: 'basis', // Default plan for specialists\r\n    max_patienten: 0, // Default max_patienten\r\n  });\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\r\n    const { name, value } = e.target;\r\n    setFormData((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    // Basic validation\r\n    if (!formData.email || !formData.password || !formData.voornaam || !formData.achternaam || !formData.type) {\r\n      setError('Email, wachtwoord, voornaam, achternaam en type zijn verplicht.');\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // TODO: Implement API call to create user in Supabase Auth and then in 'profiles' table\r\n      // This will involve:\r\n      // 1. Calling a server action or API route to handle Supabase admin operations.\r\n      //    - supabase.auth.admin.createUser({ email, password, user_metadata: { name: `${formData.voornaam} ${formData.achternaam}` } })\r\n      //    - Then, insert into 'profiles' table with the new user's ID and other form data.\r\n      //    - If type is 'specialist', insert into 'abonnementen' table.\r\n\r\n      console.log('Form data to submit:', formData);\r\n      // Simulate API call\r\n      await new Promise(resolve => setTimeout(resolve, 1000)); \r\n      \r\n      // Dummy user created for now\r\n      // Note: The actual Profile type expects Date objects for date fields.\r\n      // The email is not part of the Profile type from types/index.ts.\r\n      const dummyUser: Profile = {\r\n        id: new Date().toISOString(), // Placeholder ID\r\n        voornaam: formData.voornaam || '',\r\n        achternaam: formData.achternaam || '',\r\n        // Ensure formData.type is one of 'patient' | 'specialist' | 'admin'\r\n        type: formData.type as Profile['type'] || 'patient', \r\n        postcode: formData.postcode || undefined,\r\n        gemeente: formData.gemeente || undefined,\r\n        // Convert form string to Date object; ensure empty string becomes undefined\r\n        geboortedatum: formData.geboortedatum ? new Date(formData.geboortedatum) : undefined,\r\n        created_at: new Date(), // Placeholder\r\n        updated_at: new Date(), // Placeholder\r\n        avatar_url: undefined, // Placeholder\r\n      };\r\n      \r\n      // onUserAdded(dummyUser); // Call this when API call is successful with the actual created user profile\r\n      alert('Gebruiker (simulatie) aangemaakt! Implementeer de daadwerkelijke API call.');\r\n      onClose();\r\n\r\n    } catch (apiError: any) {\r\n      setError(apiError.message || 'Er is een fout opgetreden bij het aanmaken van de gebruiker.');\r\n      console.error(\"Error creating user:\", apiError);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const inputClassName = \"mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm text-gray-900 dark:text-gray-100\";\r\n  const labelClassName = \"block text-sm font-medium text-gray-700 dark:text-gray-300\";\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n      {error && <p className=\"text-red-500 text-sm\">{error}</p>}\r\n      \r\n      <div>\r\n        <label htmlFor=\"email\" className={labelClassName}>Email *</label>\r\n        <input type=\"email\" name=\"email\" id=\"email\" value={formData.email} onChange={handleChange} className={inputClassName} required />\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"password\" className={labelClassName}>Wachtwoord *</label>\r\n        <input type=\"password\" name=\"password\" id=\"password\" value={formData.password} onChange={handleChange} className={inputClassName} required />\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"voornaam\" className={labelClassName}>Voornaam *</label>\r\n        <input type=\"text\" name=\"voornaam\" id=\"voornaam\" value={formData.voornaam} onChange={handleChange} className={inputClassName} required />\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"achternaam\" className={labelClassName}>Achternaam *</label>\r\n        <input type=\"text\" name=\"achternaam\" id=\"achternaam\" value={formData.achternaam} onChange={handleChange} className={inputClassName} required />\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"type\" className={labelClassName}>Type Gebruiker *</label>\r\n        <select name=\"type\" id=\"type\" value={formData.type} onChange={handleChange} className={inputClassName} required>\r\n          <option value=\"patient\">Patiënt</option>\r\n          <option value=\"specialist\">Specialist</option>\r\n          <option value=\"admin\">Admin</option>\r\n        </select>\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"geboortedatum\" className={labelClassName}>Geboortedatum</label>\r\n        <input type=\"date\" name=\"geboortedatum\" id=\"geboortedatum\" value={formData.geboortedatum} onChange={handleChange} className={inputClassName} />\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"postcode\" className={labelClassName}>Postcode</label>\r\n        <input type=\"text\" name=\"postcode\" id=\"postcode\" value={formData.postcode} onChange={handleChange} className={inputClassName} />\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"gemeente\" className={labelClassName}>Gemeente</label>\r\n        <input type=\"text\" name=\"gemeente\" id=\"gemeente\" value={formData.gemeente} onChange={handleChange} className={inputClassName} />\r\n      </div>\r\n\r\n      {formData.type === 'specialist' && (\r\n        <>\r\n          <hr className=\"my-6 border-gray-300 dark:border-gray-600\"/>\r\n          <h3 className=\"text-md font-semibold mb-2 text-gray-800 dark:text-white\">Specialist Details</h3>\r\n          <div>\r\n            <label htmlFor=\"plan_type\" className={labelClassName}>Abonnement Type</label>\r\n            <select name=\"plan_type\" id=\"plan_type\" value={formData.plan_type} onChange={handleChange} className={inputClassName}>\r\n              <option value=\"basis\">Basis</option>\r\n              <option value=\"premium\">Premium</option>\r\n              <option value=\"enterprise\">Enterprise</option>\r\n            </select>\r\n          </div>\r\n      <div>\r\n        <label htmlFor=\"max_patienten\" className={labelClassName}>Max. Patiënten</label>\r\n        <input type=\"number\" name=\"max_patienten\" id=\"max_patienten\" value={formData.max_patienten || 0} onChange={handleChange} className={inputClassName} min=\"0\" />\r\n      </div>\r\n    </>\r\n  )}\r\n\r\n  <div className=\"mt-6 flex justify-end space-x-3\">\r\n        <button\r\n          type=\"button\"\r\n          onClick={onClose}\r\n          disabled={isLoading}\r\n          className=\"px-4 py-2 bg-gray-300 dark:bg-gray-600 text-gray-700 dark:text-gray-200 rounded-md hover:bg-gray-400 dark:hover:bg-gray-500 focus:outline-none disabled:opacity-50\"\r\n        >\r\n          Annuleren\r\n        </button>\r\n        <button\r\n          type=\"submit\"\r\n          disabled={isLoading}\r\n          className=\"px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 focus:outline-none disabled:opacity-50\"\r\n        >\r\n          {isLoading ? 'Opslaan...' : 'Opslaan'}\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default AddUserForm;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\admin\\AdminSidebar.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"`@heroicons/react/24/outline` import should occur before import of `next/link`","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":128,"fix":{"range":[17,244],"text":"import { HomeIcon, UsersIcon, CreditCardIcon, ChartBarIcon, ArrowUturnLeftIcon, ClockIcon } from '@heroicons/react/24/outline'; // Using Heroicons\r\nimport Link from 'next/link';\r\nimport { usePathname } from 'next/navigation';\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":23,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":23,"endColumn":37},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":27,"column":10,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":27,"endColumn":88,"fix":{"range":[958,1024],"text":"flex w-64 grow flex-col gap-y-5 overflow-y-auto bg-purple-700 px-6"}},{"ruleId":"jsx-a11y/no-redundant-roles","severity":2,"message":"The element ul has an implicit role of list. Defining this explicitly is redundant and should be avoided.","line":33,"column":9,"nodeType":"JSXOpeningElement","endLine":33,"endColumn":66},{"ruleId":"jsx-a11y/no-redundant-roles","severity":2,"message":"The element ul has an implicit role of list. Defining this explicitly is redundant and should be avoided.","line":35,"column":13,"nodeType":"JSXOpeningElement","endLine":35,"endColumn":57},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-6, w-6' could be replaced by the 'size-6' shorthand!","line":47,"column":32,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":47,"endColumn":60,"fix":{"range":[1991,2007],"text":"size-6 shrink-0"}},{"ruleId":"jsx-a11y/no-redundant-roles","severity":2,"message":"The element ul has an implicit role of list. Defining this explicitly is redundant and should be avoided.","line":55,"column":14,"nodeType":"JSXOpeningElement","endLine":55,"endColumn":58},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-6, w-6' could be replaced by the 'size-6' shorthand!","line":67,"column":36,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":67,"endColumn":64,"fix":{"range":[2861,2877],"text":"size-6 shrink-0"}}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":1,"fixableWarningCount":3,"source":"'use client';\r\n\r\nimport Link from 'next/link';\r\nimport { usePathname } from 'next/navigation';\r\nimport { HomeIcon, UsersIcon, CreditCardIcon, ChartBarIcon, ArrowUturnLeftIcon, ClockIcon } from '@heroicons/react/24/outline'; // Using Heroicons\r\n\r\nconst navigation = [\r\n  { name: 'Admin Dashboard', href: '/admin', icon: HomeIcon },\r\n  { name: 'Gebruikersbeheer', href: '/admin/users', icon: UsersIcon },\r\n  { name: 'Abonnementen', href: '/admin/subscriptions', icon: CreditCardIcon },\r\n  { name: 'Statistieken', href: '/admin/statistics', icon: ChartBarIcon },\r\n  { name: 'Changelog', href: '/admin/changelog', icon: ClockIcon },\r\n];\r\n\r\nconst secondaryNavigation = [\r\n    { name: 'Terug naar App', href: '/dashboard', icon: ArrowUturnLeftIcon },\r\n];\r\n\r\nfunction classNames(...classes: string[]) {\r\n  return classes.filter(Boolean).join(' ');\r\n}\r\n\r\nexport default function AdminSidebar() {\r\n  const pathname = usePathname();\r\n\r\n  return (\r\n    <div className=\"flex grow flex-col gap-y-5 overflow-y-auto bg-purple-700 px-6 w-64\"> {/* Adjusted color and width */}\r\n      <div className=\"flex h-16 shrink-0 items-center\">\r\n        {/* Optional: Admin Logo or Title */}\r\n        <h1 className=\"text-2xl font-semibold text-white\">Admin Panel</h1>\r\n      </div>\r\n      <nav className=\"flex flex-1 flex-col\">\r\n        <ul role=\"list\" className=\"flex flex-1 flex-col gap-y-7\">\r\n          <li>\r\n            <ul role=\"list\" className=\"-mx-2 space-y-1\">\r\n              {navigation.map((item) => (\r\n                <li key={item.name}>\r\n                  <Link\r\n                    href={item.href}\r\n                    className={classNames(\r\n                      pathname === item.href\r\n                        ? 'bg-purple-800 text-white'\r\n                        : 'text-purple-100 hover:text-white hover:bg-purple-800',\r\n                      'group flex gap-x-3 rounded-md p-2 text-sm leading-6 font-semibold'\r\n                    )}\r\n                  >\r\n                    <item.icon className=\"h-6 w-6 shrink-0\" aria-hidden=\"true\" />\r\n                    {item.name}\r\n                  </Link>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </li>\r\n          <li className=\"mt-auto\">\r\n             <ul role=\"list\" className=\"-mx-2 space-y-1\">\r\n                {secondaryNavigation.map((item) => (\r\n                    <li key={item.name}>\r\n                    <Link\r\n                        href={item.href}\r\n                        className={classNames(\r\n                        pathname === item.href\r\n                            ? 'bg-purple-800 text-white'\r\n                            : 'text-purple-100 hover:text-white hover:bg-purple-800',\r\n                        'group flex gap-x-3 rounded-md p-2 text-sm leading-6 font-semibold'\r\n                        )}\r\n                    >\r\n                        <item.icon className=\"h-6 w-6 shrink-0\" aria-hidden=\"true\" />\r\n                        {item.name}\r\n                    </Link>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\admin\\AdminStatsCards.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":14,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":14,"endColumn":40}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\ninterface AdminStats {\r\n  totalUsers: number;\r\n  totalTasks: number;\r\n  totalLogs: number;\r\n  // Add more stats as needed\r\n}\r\n\r\ninterface AdminStatsCardsProps {\r\n  stats: AdminStats;\r\n}\r\n\r\nexport default function AdminStatsCards({ stats }: AdminStatsCardsProps) {\r\n  const statItems = [\r\n    { name: 'Totaal Gebruikers', stat: stats.totalUsers, unit: '' },\r\n    { name: 'Totaal Taken', stat: stats.totalTasks, unit: '' },\r\n    { name: 'Totaal Taak Logs', stat: stats.totalLogs, unit: '' },\r\n    // Example: { name: 'Actieve Abonnementen', stat: 15, unit: '' },\r\n  ];\r\n\r\n  return (\r\n    <div>\r\n      <dl className=\"grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-3\">\r\n        {statItems.map((item) => (\r\n          <div\r\n            key={item.name}\r\n            className=\"overflow-hidden rounded-lg bg-white px-4 py-5 shadow sm:p-6\"\r\n          >\r\n            <dt className=\"truncate text-sm font-medium text-gray-500\">{item.name}</dt>\r\n            <dd className=\"mt-1 text-3xl font-semibold tracking-tight text-gray-900\">\r\n              {item.stat}\r\n              {item.unit && <span className=\"ml-1 text-xl font-medium text-gray-500\">{item.unit}</span>}\r\n            </dd>\r\n          </div>\r\n        ))}\r\n      </dl>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\admin\\AdminSubscriptionsList.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":27,"fix":{"range":[43,43],"text":"\n"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":31,"column":10,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":31,"endColumn":42,"fix":{"range":[1103,1123],"text":"mt-6 overflow-x-auto"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":32,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":32,"endColumn":106,"fix":{"range":[1151,1231],"text":"min-w-full border border-gray-200 bg-white dark:border-gray-700 dark:bg-gray-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":34,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":34,"endColumn":138,"fix":{"range":[1277,1388],"text":"w-full bg-gray-100 text-left text-sm uppercase leading-normal text-gray-600 dark:bg-gray-700 dark:text-gray-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":35,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":35,"endColumn":38,"fix":{"range":[1419,1428],"text":"px-6 py-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":36,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":36,"endColumn":38,"fix":{"range":[1473,1482],"text":"px-6 py-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":37,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":37,"endColumn":38,"fix":{"range":[1523,1532],"text":"px-6 py-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":38,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":38,"endColumn":38,"fix":{"range":[1577,1586],"text":"px-6 py-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":39,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":39,"endColumn":38,"fix":{"range":[1635,1644],"text":"px-6 py-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":40,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":40,"endColumn":38,"fix":{"range":[1694,1703],"text":"px-6 py-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":41,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":41,"endColumn":38,"fix":{"range":[1750,1759],"text":"px-6 py-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":42,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":42,"endColumn":38,"fix":{"range":[1801,1810],"text":"px-6 py-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":45,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":45,"endColumn":79,"fix":{"range":[1886,1937],"text":"text-sm font-light text-gray-700 dark:text-gray-300"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":52,"column":32,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":52,"endColumn":129,"fix":{"range":[2395,2480],"text":"border-b border-gray-200 hover:bg-gray-50 dark:border-gray-700 dark:hover:bg-gray-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":53,"column":21,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":53,"endColumn":60,"fix":{"range":[2515,2542],"text":"whitespace-nowrap px-6 py-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":54,"column":21,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":54,"endColumn":42,"fix":{"range":[2592,2601],"text":"px-6 py-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":55,"column":21,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":55,"endColumn":42,"fix":{"range":[2652,2661],"text":"px-6 py-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":56,"column":21,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":56,"endColumn":42,"fix":{"range":[2736,2745],"text":"px-6 py-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":57,"column":21,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":57,"endColumn":54,"fix":{"range":[2822,2843],"text":"px-6 py-3 text-center"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":58,"column":21,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":58,"endColumn":42,"fix":{"range":[2911,2920],"text":"px-6 py-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":61,"column":21,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":61,"endColumn":42,"fix":{"range":[3079,3088],"text":"px-6 py-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":62,"column":25,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":62,"endColumn":177,"fix":{"range":[3127,3197],"text":"`inline-flex rounded-full px-2 py-1 text-xs font-semibold leading-5 ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":66,"column":21,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":66,"endColumn":42,"fix":{"range":[3408,3417],"text":"px-6 py-3"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":1,"fixableWarningCount":22,"source":"'use client';\r\n\r\nimport React from 'react';\r\nimport { Abonnement, Profile } from '@/types'; // Assuming Abonnement and Profile types are correct\r\n\r\n// Define a type for the subscription data that includes user profile information\r\nexport type SubscriptionWithUserProfile = Abonnement & {\r\n  profiles: Pick<Profile, 'voornaam' | 'achternaam'> & { email?: string }; // Email might come from auth user\r\n};\r\n\r\ninterface AdminSubscriptionsListProps {\r\n  subscriptions: SubscriptionWithUserProfile[];\r\n}\r\n\r\nconst AdminSubscriptionsList: React.FC<AdminSubscriptionsListProps> = ({ subscriptions }) => {\r\n  if (!subscriptions || subscriptions.length === 0) {\r\n    return <p className=\"text-gray-500 dark:text-gray-400\">Geen abonnementen gevonden.</p>;\r\n  }\r\n\r\n  const getPlanDisplayName = (planType: string | null | undefined) => {\r\n    if (!planType) return 'N/A';\r\n    switch (planType.toLowerCase()) {\r\n      case 'basis': return 'Basis';\r\n      case 'premium': return 'Premium';\r\n      case 'enterprise': return 'Enterprise';\r\n      default: return planType;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"overflow-x-auto mt-6\">\r\n      <table className=\"min-w-full bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700\">\r\n        <thead>\r\n          <tr className=\"w-full bg-gray-100 dark:bg-gray-700 text-left text-gray-600 dark:text-gray-200 uppercase text-sm leading-normal\">\r\n            <th className=\"py-3 px-6\">Gebruiker</th>\r\n            <th className=\"py-3 px-6\">Email</th>\r\n            <th className=\"py-3 px-6\">Plan Type</th>\r\n            <th className=\"py-3 px-6\">Stripe Sub ID</th>\r\n            <th className=\"py-3 px-6\">Max. Patiënten</th>\r\n            <th className=\"py-3 px-6\">Verloopt Op</th>\r\n            <th className=\"py-3 px-6\">Status</th>\r\n            <th className=\"py-3 px-6\">Acties</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody className=\"text-gray-700 dark:text-gray-300 text-sm font-light\">\r\n          {subscriptions.map((sub) => {\r\n            const userName = `${sub.profiles?.voornaam || ''} ${sub.profiles?.achternaam || ''}`.trim() || 'N/A';\r\n            const userEmail = sub.profiles?.email || 'N/A'; // Assuming email might be on the joined profile data\r\n            const isActive = sub.verloopt_op ? new Date(sub.verloopt_op) > new Date() : true; // Basic status check\r\n\r\n            return (\r\n              <tr key={sub.id} className=\"border-b border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600\">\r\n                <td className=\"py-3 px-6 whitespace-nowrap\">{userName}</td>\r\n                <td className=\"py-3 px-6\">{userEmail}</td>\r\n                <td className=\"py-3 px-6\">{getPlanDisplayName(sub.plan_type)}</td>\r\n                <td className=\"py-3 px-6\">{sub.stripe_subscription_id || 'N/A'}</td>\r\n                <td className=\"py-3 px-6 text-center\">{sub.max_patienten ?? 'N/A'}</td>\r\n                <td className=\"py-3 px-6\">\r\n                  {sub.verloopt_op ? new Date(sub.verloopt_op).toLocaleDateString('nl-NL') : 'N/A'}\r\n                </td>\r\n                <td className=\"py-3 px-6\">\r\n                  <span className={`px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${isActive ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>\r\n                    {isActive ? 'Actief' : 'Verlopen'}\r\n                  </span>\r\n                </td>\r\n                <td className=\"py-3 px-6\">\r\n                  <button className=\"text-indigo-600 hover:text-indigo-900 dark:text-indigo-400 dark:hover:text-indigo-200\">\r\n                    Details\r\n                  </button>\r\n                  {/* Add more actions like cancel, renew, etc. later */}\r\n                </td>\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminSubscriptionsList;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\admin\\AdminUsersList.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":27,"fix":{"range":[113,113],"text":"\n"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":19,"column":10,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":19,"endColumn":42,"fix":{"range":[562,582],"text":"mt-6 overflow-x-auto"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":20,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":20,"endColumn":106,"fix":{"range":[610,690],"text":"min-w-full border border-gray-200 bg-white dark:border-gray-700 dark:bg-gray-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":22,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":22,"endColumn":138,"fix":{"range":[736,847],"text":"w-full bg-gray-100 text-left text-sm uppercase leading-normal text-gray-600 dark:bg-gray-700 dark:text-gray-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":23,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":23,"endColumn":38,"fix":{"range":[878,887],"text":"px-6 py-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":25,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":25,"endColumn":38,"fix":{"range":[1031,1040],"text":"px-6 py-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":26,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":26,"endColumn":38,"fix":{"range":[1084,1093],"text":"px-6 py-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":27,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":27,"endColumn":38,"fix":{"range":[1139,1148],"text":"px-6 py-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":28,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":28,"endColumn":38,"fix":{"range":[1187,1196],"text":"px-6 py-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":29,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":29,"endColumn":38,"fix":{"range":[1240,1249],"text":"px-6 py-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":30,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":30,"endColumn":38,"fix":{"range":[1293,1302],"text":"px-6 py-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":31,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":31,"endColumn":38,"fix":{"range":[1351,1360],"text":"px-6 py-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":34,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":34,"endColumn":79,"fix":{"range":[1436,1487],"text":"text-sm font-light text-gray-700 dark:text-gray-300"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":36,"column":31,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":36,"endColumn":128,"fix":{"range":[1566,1651],"text":"border-b border-gray-200 hover:bg-gray-50 dark:border-gray-700 dark:hover:bg-gray-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":37,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":37,"endColumn":58,"fix":{"range":[1684,1711],"text":"whitespace-nowrap px-6 py-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":39,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":39,"endColumn":40,"fix":{"range":[1834,1843],"text":"px-6 py-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":40,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":40,"endColumn":40,"fix":{"range":[1905,1914],"text":"px-6 py-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":41,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":41,"endColumn":40,"fix":{"range":[1978,1987],"text":"px-6 py-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":43,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":48,"endColumn":21,"fix":{"range":[2043,2134],"text":"`inline-flex rounded-full px-2 py-1 text-xs font-semibold leading-5\r\n                    ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":53,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":53,"endColumn":40,"fix":{"range":[2783,2792],"text":"px-6 py-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":54,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":54,"endColumn":40,"fix":{"range":[2854,2863],"text":"px-6 py-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":55,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":55,"endColumn":40,"fix":{"range":[2925,2934],"text":"px-6 py-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":58,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":58,"endColumn":40,"fix":{"range":[3087,3096],"text":"px-6 py-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":61,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":61,"endColumn":121,"fix":{"range":[3207,3297],"text":"mr-3 text-indigo-600 hover:text-indigo-900 dark:text-indigo-400 dark:hover:text-indigo-200"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":1,"fixableWarningCount":23,"source":"'use client'; // Mark as a Client Component\r\n\r\n// components/admin/AdminUsersList.tsx\r\nimport React from 'react';\r\nimport { Profile } from '@/types';\r\n\r\ninterface AdminUsersListProps {\r\n  users: Profile[];\r\n  onEditUser: (user: Profile) => void;\r\n  onDeleteUser: (userId: string) => void;\r\n}\r\n\r\nconst AdminUsersList: React.FC<AdminUsersListProps> = ({ users, onEditUser, onDeleteUser }) => {\r\n  if (!users || users.length === 0) {\r\n    return <p className=\"text-gray-500 dark:text-gray-400\">Geen gebruikers gevonden.</p>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"overflow-x-auto mt-6\">\r\n      <table className=\"min-w-full bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700\">\r\n        <thead>\r\n          <tr className=\"w-full bg-gray-100 dark:bg-gray-700 text-left text-gray-600 dark:text-gray-200 uppercase text-sm leading-normal\">\r\n            <th className=\"py-3 px-6\">ID</th>\r\n            {/* <th className=\"py-3 px-6\">Email</th> */} {/* Email is not directly in profiles table */}\r\n            <th className=\"py-3 px-6\">Voornaam</th>\r\n            <th className=\"py-3 px-6\">Achternaam</th>\r\n            <th className=\"py-3 px-6\">Rol</th>\r\n            <th className=\"py-3 px-6\">Postcode</th>\r\n            <th className=\"py-3 px-6\">Gemeente</th>\r\n            <th className=\"py-3 px-6\">Aangemaakt op</th>\r\n            <th className=\"py-3 px-6\">Acties</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody className=\"text-gray-700 dark:text-gray-300 text-sm font-light\">\r\n          {users.map((user) => (\r\n            <tr key={user.id} className=\"border-b border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600\">\r\n              <td className=\"py-3 px-6 whitespace-nowrap\">{user.id}</td>\r\n              {/* <td className=\"py-3 px-6\">{user.email || 'N/A'}</td> */}\r\n              <td className=\"py-3 px-6\">{user.voornaam || 'N/A'}</td>\r\n              <td className=\"py-3 px-6\">{user.achternaam || 'N/A'}</td>\r\n              <td className=\"py-3 px-6\">\r\n                <span\r\n                  className={`px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full\r\n                    ${user.type === 'admin' ? 'bg-red-100 text-red-800 dark:bg-red-700 dark:text-red-100' : ''}\r\n                    ${user.type === 'specialist' ? 'bg-green-100 text-green-800 dark:bg-green-700 dark:text-green-100' : ''}\r\n                    ${user.type === 'patient' ? 'bg-blue-100 text-blue-800 dark:bg-blue-700 dark:text-blue-100' : ''}\r\n                    ${!['admin', 'specialist', 'patient'].includes(user.type || '') ? 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-100' : ''}\r\n                  `}\r\n                >\r\n                  {user.type || 'N/A'}\r\n                </span>\r\n              </td>\r\n              <td className=\"py-3 px-6\">{user.postcode || 'N/A'}</td>\r\n              <td className=\"py-3 px-6\">{user.gemeente || 'N/A'}</td>\r\n              <td className=\"py-3 px-6\">\r\n                {user.created_at ? new Date(user.created_at).toLocaleDateString('nl-NL') : 'N/A'}\r\n              </td>\r\n              <td className=\"py-3 px-6\">\r\n                <button \r\n                  onClick={() => onEditUser(user)}\r\n                  className=\"text-indigo-600 hover:text-indigo-900 dark:text-indigo-400 dark:hover:text-indigo-200 mr-3\"\r\n                >\r\n                  Bewerken\r\n                </button>\r\n                <button \r\n                  onClick={() => onDeleteUser(user.id)}\r\n                  className=\"text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-200\"\r\n                >\r\n                  Verwijderen\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminUsersList;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\admin\\ChangelogViewer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\admin\\DynamicAdminComponents.tsx","messages":[{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":7,"column":23,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":7,"endColumn":83,"fix":{"range":[226,274],"text":"h-32 w-full animate-pulse rounded-lg bg-gray-100"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":11,"column":23,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":11,"endColumn":83,"fix":{"range":[420,468],"text":"h-64 w-full animate-pulse rounded-lg bg-gray-100"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"'use client';\r\n\r\nimport dynamic from 'next/dynamic';\r\n\r\n// Dynamic imports with loading fallbacks\r\nexport const AdminStatsCards = dynamic(() => import('@/components/admin/AdminStatsCards'), {\r\n  loading: () => <div className=\"w-full h-32 bg-gray-100 animate-pulse rounded-lg\"></div>\r\n});\r\n\r\nexport const RecentUsersTable = dynamic(() => import('@/components/admin/RecentUsersTable'), {\r\n  loading: () => <div className=\"w-full h-64 bg-gray-100 animate-pulse rounded-lg\"></div>\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\admin\\EditUserForm.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":52,"fix":{"range":[68,68],"text":"\n"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":75,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":75,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3226,3307],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":90,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3900,3903],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3900,3903],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":103,"column":20,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":103,"endColumn":52,"fix":{"range":[4573,4593],"text":"text-sm text-red-500"}},{"ruleId":"tailwindcss/no-custom-classname","severity":1,"message":"Classname 'text-md' is not a Tailwind CSS class!","line":148,"column":15,"nodeType":"JSXAttribute","messageId":"customClassnameDetected","endLine":148,"endColumn":83},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":148,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":148,"endColumn":83,"fix":{"range":[7272,7328],"text":"text-md mb-2 font-semibold text-gray-800 dark:text-white"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":169,"column":11,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":169,"endColumn":185,"fix":{"range":[8313,8475],"text":"rounded-md bg-gray-300 px-4 py-2 text-gray-700 hover:bg-gray-400 focus:outline-none disabled:opacity-50 dark:bg-gray-600 dark:text-gray-200 dark:hover:bg-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":176,"column":11,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":176,"endColumn":123,"fix":{"range":[8624,8724],"text":"rounded-md bg-blue-500 px-4 py-2 text-white hover:bg-blue-600 focus:outline-none disabled:opacity-50"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":1,"fixableWarningCount":4,"source":"'use client';\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Profile, Abonnement } from '@/types';\r\n\r\n// Define a type for the form data, similar to AddUserFormData\r\n// Omitting id, created_at, updated_at, avatar_url as they are not directly edited here\r\n// Email might be non-editable or handled specially. Password change is also special.\r\ntype EditUserFormData = Omit<Partial<Profile>, 'id' | 'avatar_url' | 'created_at' | 'updated_at' | 'geboortedatum'> & {\r\n  email?: string; // Usually non-editable or shown for reference\r\n  // Password change is typically a separate flow for existing users\r\n  // For admin edits, we might allow setting a new password directly.\r\n  new_password?: string; \r\n  geboortedatum?: string; // Keep as string for form input 'YYYY-MM-DD'\r\n  plan_type?: Abonnement['plan_type'];\r\n  max_patienten?: number;\r\n};\r\n\r\ninterface EditUserFormProps {\r\n  user: Profile; // The user being edited\r\n  onClose: () => void;\r\n  onUserUpdated: (updatedUser: Profile) => void; // Callback after user is successfully updated\r\n}\r\n\r\nconst EditUserForm: React.FC<EditUserFormProps> = ({ user, onClose, onUserUpdated }) => {\r\n  const [formData, setFormData] = useState<EditUserFormData>({});\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      // Pre-fill form data from the user prop\r\n      // Note: Email is typically from auth user, not profile. For now, assume it might be on profile or leave blank.\r\n      // Password is not pre-filled.\r\n      setFormData({\r\n        voornaam: user.voornaam || '',\r\n        achternaam: user.achternaam || '',\r\n        type: user.type,\r\n        postcode: user.postcode || '',\r\n        gemeente: user.gemeente || '',\r\n        geboortedatum: user.geboortedatum ? new Date(user.geboortedatum).toISOString().split('T')[0] : '',\r\n        // TODO: Fetch and pre-fill specialist details (plan_type, max_patienten) if applicable\r\n        // This would require fetching from 'abonnementen' table based on user.id\r\n        plan_type: 'basis', // Placeholder\r\n        max_patienten: 0,   // Placeholder\r\n      });\r\n    }\r\n  }, [user]);\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\r\n    const { name, value } = e.target;\r\n    setFormData((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    // Basic validation\r\n    if (!formData.voornaam || !formData.achternaam || !formData.type) {\r\n      setError('Voornaam, achternaam en type zijn verplicht.');\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // TODO: Implement API call to update user in 'profiles' table and potentially Supabase Auth (e.g., password)\r\n      // This will involve:\r\n      // 1. Calling a server action or API route.\r\n      //    - Update 'profiles' table with user.id.\r\n      //    - If formData.new_password is set, call supabase.auth.admin.updateUserById(user.id, { password: formData.new_password })\r\n      //    - If type is 'specialist', update or insert into 'abonnementen' table.\r\n\r\n      console.log('Form data to submit for update:', { userId: user.id, ...formData });\r\n      // Simulate API call\r\n      await new Promise(resolve => setTimeout(resolve, 1000)); \r\n      \r\n      const updatedUser: Profile = {\r\n        ...user, // Spread existing user data\r\n        ...formData, // Spread form data (overwrites common fields)\r\n        geboortedatum: formData.geboortedatum ? new Date(formData.geboortedatum) : undefined,\r\n        updated_at: new Date(), // Update timestamp\r\n      };\r\n      \r\n      onUserUpdated(updatedUser);\r\n      alert('Gebruiker (simulatie) bijgewerkt! Implementeer de daadwerkelijke API call.');\r\n      onClose();\r\n\r\n    } catch (apiError: any) {\r\n      setError(apiError.message || 'Er is een fout opgetreden bij het bijwerken van de gebruiker.');\r\n      console.error(\"Error updating user:\", apiError);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const inputClassName = \"mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm text-gray-900 dark:text-gray-100\";\r\n  const labelClassName = \"block text-sm font-medium text-gray-700 dark:text-gray-300\";\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n      {error && <p className=\"text-red-500 text-sm\">{error}</p>}\r\n      \r\n      {/* Email field removed as it's not on the Profile type. \r\n          To show email, it would need to be fetched from Supabase Auth user data. \r\n      */}\r\n      {/* <div>\r\n        <label htmlFor=\"email\" className={labelClassName}>Email (ter info, niet bewerkbaar via profiel)</label>\r\n        <input type=\"email\" name=\"email\" id=\"email\" value={user.email || 'N/A (van Auth)'} className={`${inputClassName} bg-gray-100 dark:bg-gray-600`} readOnly />\r\n      </div> */}\r\n      <div>\r\n        <label htmlFor=\"new_password\" className={labelClassName}>Nieuw Wachtwoord (leeg laten om niet te wijzigen)</label>\r\n        <input type=\"password\" name=\"new_password\" id=\"new_password\" value={formData.new_password || ''} onChange={handleChange} className={inputClassName} />\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"voornaam\" className={labelClassName}>Voornaam *</label>\r\n        <input type=\"text\" name=\"voornaam\" id=\"voornaam\" value={formData.voornaam || ''} onChange={handleChange} className={inputClassName} required />\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"achternaam\" className={labelClassName}>Achternaam *</label>\r\n        <input type=\"text\" name=\"achternaam\" id=\"achternaam\" value={formData.achternaam || ''} onChange={handleChange} className={inputClassName} required />\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"type\" className={labelClassName}>Type Gebruiker *</label>\r\n        <select name=\"type\" id=\"type\" value={formData.type} onChange={handleChange} className={inputClassName} required>\r\n          <option value=\"patient\">Patiënt</option>\r\n          <option value=\"specialist\">Specialist</option>\r\n          <option value=\"admin\">Admin</option>\r\n        </select>\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"geboortedatum\" className={labelClassName}>Geboortedatum</label>\r\n        <input type=\"date\" name=\"geboortedatum\" id=\"geboortedatum\" value={formData.geboortedatum || ''} onChange={handleChange} className={inputClassName} />\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"postcode\" className={labelClassName}>Postcode</label>\r\n        <input type=\"text\" name=\"postcode\" id=\"postcode\" value={formData.postcode || ''} onChange={handleChange} className={inputClassName} />\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"gemeente\" className={labelClassName}>Gemeente</label>\r\n        <input type=\"text\" name=\"gemeente\" id=\"gemeente\" value={formData.gemeente || ''} onChange={handleChange} className={inputClassName} />\r\n      </div>\r\n\r\n      {formData.type === 'specialist' && (\r\n        <>\r\n          <hr className=\"my-6 border-gray-300 dark:border-gray-600\"/>\r\n          <h3 className=\"text-md font-semibold mb-2 text-gray-800 dark:text-white\">Specialist Details</h3>\r\n          <div>\r\n            <label htmlFor=\"plan_type\" className={labelClassName}>Abonnement Type</label>\r\n            <select name=\"plan_type\" id=\"plan_type\" value={formData.plan_type} onChange={handleChange} className={inputClassName}>\r\n              <option value=\"basis\">Basis</option>\r\n              <option value=\"premium\">Premium</option>\r\n              <option value=\"enterprise\">Enterprise</option>\r\n            </select>\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"max_patienten\" className={labelClassName}>Max. Patiënten</label>\r\n            <input type=\"number\" name=\"max_patienten\" id=\"max_patienten\" value={formData.max_patienten || 0} onChange={handleChange} className={inputClassName} min=\"0\" />\r\n          </div>\r\n        </>\r\n      )}\r\n\r\n      <div className=\"mt-6 flex justify-end space-x-3\">\r\n        <button\r\n          type=\"button\"\r\n          onClick={onClose}\r\n          disabled={isLoading}\r\n          className=\"px-4 py-2 bg-gray-300 dark:bg-gray-600 text-gray-700 dark:text-gray-200 rounded-md hover:bg-gray-400 dark:hover:bg-gray-500 focus:outline-none disabled:opacity-50\"\r\n        >\r\n          Annuleren\r\n        </button>\r\n        <button\r\n          type=\"submit\"\r\n          disabled={isLoading}\r\n          className=\"px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 focus:outline-none disabled:opacity-50\"\r\n        >\r\n          {isLoading ? 'Bijwerken...' : 'Bijwerken'}\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default EditUserForm;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\admin\\RecentUsersTable.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":35,"fix":{"range":[90,90],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`next/link` import should occur before import of `@/types`","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":30,"fix":{"range":[17,123],"text":"import Link from 'next/link';\r\nimport { Profile } from '@/types'; // Assuming Profile type is in @/types\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":10,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":10,"endColumn":41},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-10, w-10' could be replaced by the 'size-10' shorthand!","line":61,"column":26,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":61,"endColumn":66,"fix":{"range":[2156,2184],"text":"mr-4 size-10 flex-shrink-0"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'flex-shrink-0' should be updated to 'shrink-0' in Tailwind CSS v3!","line":61,"column":26,"nodeType":"JSXAttribute","messageId":"classnameChanged","endLine":61,"endColumn":66,"fix":{"range":[2156,2184],"text":"mr-4 h-10 w-10 shrink-0"}},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":62,"column":23,"nodeType":"JSXOpeningElement","endLine":62,"endColumn":94},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-10, w-10' could be replaced by the 'size-10' shorthand!","line":62,"column":28,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":62,"endColumn":62,"fix":{"range":[2226,2248],"text":"size-10 rounded-full"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":75,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":75,"endColumn":91,"fix":{"range":[2953,3013],"text":"whitespace-nowrap px-6 py-4 text-sm capitalize text-gray-500"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":2,"fixableWarningCount":4,"source":"'use client';\r\n\r\nimport { Profile } from '@/types'; // Assuming Profile type is in @/types\r\nimport Link from 'next/link';\r\n\r\ninterface RecentUsersTableProps {\r\n  users: Profile[]; // Expects an array of Profile objects\r\n}\r\n\r\nexport default function RecentUsersTable({ users }: RecentUsersTableProps) {\r\n  const formatDate = (dateString: Date | string | undefined) => {\r\n    if (!dateString) return 'N/A';\r\n    const date = new Date(dateString);\r\n    return date.toLocaleDateString('nl-BE', {\r\n      day: '2-digit',\r\n      month: 'short', // Using short month name\r\n      year: 'numeric',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"overflow-x-auto rounded-lg shadow\">\r\n      <table className=\"min-w-full divide-y divide-gray-200 bg-white\">\r\n        <thead className=\"bg-gray-50\">\r\n          <tr>\r\n            <th\r\n              scope=\"col\"\r\n              className=\"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500\"\r\n            >\r\n              Naam\r\n            </th>\r\n            <th\r\n              scope=\"col\"\r\n              className=\"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500\"\r\n            >\r\n              Email (from auth, not in profile table)\r\n            </th>\r\n            <th\r\n              scope=\"col\"\r\n              className=\"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500\"\r\n            >\r\n              Type\r\n            </th>\r\n            <th\r\n              scope=\"col\"\r\n              className=\"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500\"\r\n            >\r\n              Geregistreerd op\r\n            </th>\r\n            <th scope=\"col\" className=\"relative px-6 py-3\">\r\n              <span className=\"sr-only\">Details</span>\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody className=\"divide-y divide-gray-200 bg-white\">\r\n          {users.map((user) => (\r\n            <tr key={user.id}>\r\n              <td className=\"whitespace-nowrap px-6 py-4\">\r\n                <div className=\"flex items-center\">\r\n                  {user.avatar_url && (\r\n                    <div className=\"mr-4 h-10 w-10 flex-shrink-0\">\r\n                      <img className=\"h-10 w-10 rounded-full\" src={user.avatar_url} alt=\"\" />\r\n                    </div>\r\n                  )}\r\n                  <div>\r\n                    <div className=\"text-sm font-medium text-gray-900\">{user.voornaam} {user.achternaam}</div>\r\n                    {/* <div className=\"text-sm text-gray-500\">{user.email}</div> Placeholder, email is not in profiles table */}\r\n                  </div>\r\n                </div>\r\n              </td>\r\n              <td className=\"whitespace-nowrap px-6 py-4 text-sm text-gray-500\">\r\n                {/* Email is typically in auth.users, not profiles. This column might need adjustment or data enrichment. */}\r\n                N/A \r\n              </td>\r\n              <td className=\"whitespace-nowrap px-6 py-4 text-sm text-gray-500 capitalize\">{user.type}</td>\r\n              <td className=\"whitespace-nowrap px-6 py-4 text-sm text-gray-500\">\r\n                {formatDate(user.created_at)}\r\n              </td>\r\n              <td className=\"whitespace-nowrap px-6 py-4 text-right text-sm font-medium\">\r\n                <Link href={`/admin/users/${user.id}`} className=\"text-purple-600 hover:text-purple-900\">\r\n                  Details\r\n                </Link>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n          {users.length === 0 && (\r\n            <tr>\r\n              <td colSpan={5} className=\"px-6 py-12 text-center text-sm text-gray-500\">\r\n                Geen recente gebruikers gevonden.\r\n              </td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\admin\\UserManagementControls.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":41,"fix":{"range":[74,74],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":41,"fix":{"range":[145,145],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/types` import should occur before import of `./AddUserForm`","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":35,"fix":{"range":[76,216],"text":"import { Profile } from '@/types'; // For onUserAdded callback type\r\nimport AddUserForm from './AddUserForm'; // Import the form component\r\n"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":16,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":16,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[608,660],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleOpenEditModal' is assigned a value but never used.","line":21,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleUserUpdated' is assigned a value but never used.","line":26,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":26},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":28,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":28,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1067,1121],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":40,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":40,"endColumn":62,"fix":{"range":[1512,1550],"text":"mb-6 flex items-center justify-between"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":44,"column":11,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":44,"endColumn":158,"fix":{"range":[1743,1878],"text":"rounded-md bg-blue-500 px-4 py-2 text-white hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'focus:ring-opacity-50' should be replaced by an opacity suffix (eg. '/50')","line":44,"column":11,"nodeType":"JSXAttribute","messageId":"classnameOpacityDeprecated","endLine":44,"endColumn":158},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":51,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":51,"endColumn":137,"fix":{"range":[2027,2138],"text":"fixed inset-0 z-50 flex h-full w-full items-center justify-center overflow-y-auto bg-gray-600 bg-opacity-75 p-4"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-full, w-full' could be replaced by the 'size-full' shorthand!","line":51,"column":14,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":51,"endColumn":137,"fix":{"range":[2027,2138],"text":"fixed inset-0 bg-gray-600 bg-opacity-75 overflow-y-auto size-full z-50 flex justify-center items-center p-4"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'bg-opacity-75' should be replaced by an opacity suffix (eg. '/75')","line":51,"column":14,"nodeType":"JSXAttribute","messageId":"classnameOpacityDeprecated","endLine":51,"endColumn":137},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":52,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":52,"endColumn":130,"fix":{"range":[2168,2270],"text":"max-h-[90vh] w-full max-w-lg overflow-y-auto rounded-lg bg-white p-6 shadow-xl sm:p-8 dark:bg-gray-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":53,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":53,"endColumn":68,"fix":{"range":[2302,2340],"text":"mb-4 flex items-center justify-between"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":60,"column":22,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":60,"endColumn":41,"fix":{"range":[2763,2770],"text":"h-6 w-6"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'w-6, h-6' could be replaced by the 'size-6' shorthand!","line":60,"column":22,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":60,"endColumn":41,"fix":{"range":[2763,2770],"text":"size-6"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":72,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":72,"endColumn":137,"fix":{"range":[3281,3392],"text":"fixed inset-0 z-50 flex h-full w-full items-center justify-center overflow-y-auto bg-gray-600 bg-opacity-75 p-4"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-full, w-full' could be replaced by the 'size-full' shorthand!","line":72,"column":14,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":72,"endColumn":137,"fix":{"range":[3281,3392],"text":"fixed inset-0 bg-gray-600 bg-opacity-75 overflow-y-auto size-full z-50 flex justify-center items-center p-4"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'bg-opacity-75' should be replaced by an opacity suffix (eg. '/75')","line":72,"column":14,"nodeType":"JSXAttribute","messageId":"classnameOpacityDeprecated","endLine":72,"endColumn":137},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":73,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":73,"endColumn":130,"fix":{"range":[3422,3524],"text":"max-h-[90vh] w-full max-w-lg overflow-y-auto rounded-lg bg-white p-6 shadow-xl sm:p-8 dark:bg-gray-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":74,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":74,"endColumn":68,"fix":{"range":[3556,3594],"text":"mb-4 flex items-center justify-between"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":84,"column":22,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":84,"endColumn":41,"fix":{"range":[4056,4063],"text":"h-6 w-6"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'w-6, h-6' could be replaced by the 'size-6' shorthand!","line":84,"column":22,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":84,"endColumn":41,"fix":{"range":[4056,4063],"text":"size-6"}}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":3,"fixableWarningCount":14,"source":"'use client';\r\n\r\n'use client';\r\n\r\nimport React, { useState } from 'react';\r\nimport AddUserForm from './AddUserForm'; // Import the form component\r\nimport { Profile } from '@/types'; // For onUserAdded callback type\r\n\r\nconst UserManagementControls: React.FC = () => {\r\n  const [isAddUserModalOpen, setIsAddUserModalOpen] = useState(false);\r\n  const [isEditUserModalOpen, setIsEditUserModalOpen] = useState(false);\r\n  const [editingUser, setEditingUser] = useState<Profile | null>(null);\r\n\r\n  const handleUserAdded = (newUser: Profile) => {\r\n    // TODO: Refresh the user list on the page or update state\r\n    console.log('New user added (in parent):', newUser);\r\n    // For now, just log. In a real app, you'd trigger a re-fetch of users.\r\n    setIsAddUserModalOpen(false); // Close modal on success\r\n  };\r\n\r\n  const handleOpenEditModal = (user: Profile) => {\r\n    setEditingUser(user);\r\n    setIsEditUserModalOpen(true);\r\n  };\r\n\r\n  const handleUserUpdated = (updatedUser: Profile) => {\r\n    // TODO: Refresh the user list or update the specific user in the list\r\n    console.log('User updated (in parent):', updatedUser);\r\n    setIsEditUserModalOpen(false);\r\n    setEditingUser(null);\r\n  };\r\n\r\n  // We need to pass handleOpenEditModal to AdminUsersList via AdminUsersPage props\r\n  // This component itself doesn't render AdminUsersList directly.\r\n  // For now, we'll set up the modal structure here.\r\n  // The actual passing of the handler will be a subsequent step.\r\n\r\n  return (\r\n    <>\r\n      <div className=\"flex justify-between items-center mb-6\">\r\n        <h1 className=\"text-2xl font-bold text-gray-800 dark:text-white\">Gebruikersbeheer</h1>\r\n        <button\r\n          onClick={() => setIsAddUserModalOpen(true)}\r\n          className=\"px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50\"\r\n        >\r\n          Nieuwe Gebruiker Toevoegen\r\n        </button>\r\n      </div>\r\n      \r\n      {isAddUserModalOpen && (\r\n        <div className=\"fixed inset-0 bg-gray-600 bg-opacity-75 overflow-y-auto h-full w-full z-50 flex justify-center items-center p-4\">\r\n          <div className=\"bg-white dark:bg-gray-800 p-6 sm:p-8 rounded-lg shadow-xl w-full max-w-lg max-h-[90vh] overflow-y-auto\">\r\n            <div className=\"flex justify-between items-center mb-4\">\r\n              <h2 className=\"text-xl font-semibold text-gray-800 dark:text-white\">Nieuwe Gebruiker Toevoegen</h2>\r\n              <button \r\n                onClick={() => setIsAddUserModalOpen(false)} \r\n                className=\"text-gray-400 hover:text-gray-600 dark:hover:text-gray-300\"\r\n                aria-label=\"Sluit venster\" // Add aria-label for accessibility\r\n              >\r\n                <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path></svg>\r\n              </button>\r\n            </div>\r\n            <AddUserForm \r\n              onClose={() => setIsAddUserModalOpen(false)} \r\n              onUserAdded={handleUserAdded} \r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {isEditUserModalOpen && editingUser && (\r\n        <div className=\"fixed inset-0 bg-gray-600 bg-opacity-75 overflow-y-auto h-full w-full z-50 flex justify-center items-center p-4\">\r\n          <div className=\"bg-white dark:bg-gray-800 p-6 sm:p-8 rounded-lg shadow-xl w-full max-w-lg max-h-[90vh] overflow-y-auto\">\r\n            <div className=\"flex justify-between items-center mb-4\">\r\n              <h2 className=\"text-xl font-semibold text-gray-800 dark:text-white\">Gebruiker Bewerken</h2>\r\n              <button \r\n                onClick={() => {\r\n                  setIsEditUserModalOpen(false);\r\n                  setEditingUser(null);\r\n                }} \r\n                className=\"text-gray-400 hover:text-gray-600 dark:hover:text-gray-300\"\r\n                aria-label=\"Sluit venster\"\r\n              >\r\n                <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path></svg>\r\n              </button>\r\n            </div>\r\n            {/* <EditUserForm \r\n              user={editingUser}\r\n              onClose={() => { setIsEditUserModalOpen(false); setEditingUser(null); }}\r\n              onUserUpdated={handleUserUpdated}\r\n            /> */}\r\n            <p>Edit form voor {editingUser.voornaam} komt hier...</p> \r\n            {/* Placeholder for EditUserForm */}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UserManagementControls;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\admin\\UsersPageClientView.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":52,"fix":{"range":[68,68],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`./AddUserForm` import should occur before import of `./AdminUsersList`","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":41,"fix":{"range":[70,160],"text":"import AddUserForm from './AddUserForm';\r\nimport AdminUsersList from './AdminUsersList';\r\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":43,"fix":{"range":[229,229],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/types` import should occur before import of `./AdminUsersList`","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":35,"fix":{"range":[70,267],"text":"import { Profile } from '@/types';\r\nimport AdminUsersList from './AdminUsersList';\r\nimport AddUserForm from './AddUserForm';\r\nimport EditUserForm from './EditUserForm'; // Import the EditUserForm\r\n"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":55,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":55,"endColumn":62,"fix":{"range":[2260,2298],"text":"mb-8 flex items-center justify-between"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":59,"column":11,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":59,"endColumn":158,"fix":{"range":[2565,2700],"text":"rounded-md bg-blue-500 px-4 py-2 text-white hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'focus:ring-opacity-50' should be replaced by an opacity suffix (eg. '/50')","line":59,"column":11,"nodeType":"JSXAttribute","messageId":"classnameOpacityDeprecated","endLine":59,"endColumn":158},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":66,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":66,"endColumn":74,"fix":{"range":[2867,2917],"text":"rounded-lg bg-white p-6 shadow-xl dark:bg-gray-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":68,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":68,"endColumn":113,"fix":{"range":[3029,3114],"text":"mb-4 rounded-lg bg-red-100 p-4 text-sm text-red-700 dark:bg-red-200 dark:text-red-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":77,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":77,"endColumn":137,"fix":{"range":[3532,3643],"text":"fixed inset-0 z-50 flex h-full w-full items-center justify-center overflow-y-auto bg-gray-600 bg-opacity-75 p-4"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-full, w-full' could be replaced by the 'size-full' shorthand!","line":77,"column":14,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":77,"endColumn":137,"fix":{"range":[3532,3643],"text":"fixed inset-0 bg-gray-600 bg-opacity-75 overflow-y-auto size-full z-50 flex justify-center items-center p-4"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'bg-opacity-75' should be replaced by an opacity suffix (eg. '/75')","line":77,"column":14,"nodeType":"JSXAttribute","messageId":"classnameOpacityDeprecated","endLine":77,"endColumn":137},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":78,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":78,"endColumn":130,"fix":{"range":[3673,3775],"text":"max-h-[90vh] w-full max-w-lg overflow-y-auto rounded-lg bg-white p-6 shadow-xl sm:p-8 dark:bg-gray-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":79,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":79,"endColumn":68,"fix":{"range":[3807,3845],"text":"mb-4 flex items-center justify-between"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":86,"column":22,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":86,"endColumn":41,"fix":{"range":[4232,4239],"text":"h-6 w-6"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'w-6, h-6' could be replaced by the 'size-6' shorthand!","line":86,"column":22,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":86,"endColumn":41,"fix":{"range":[4232,4239],"text":"size-6"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":98,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":98,"endColumn":137,"fix":{"range":[4750,4861],"text":"fixed inset-0 z-50 flex h-full w-full items-center justify-center overflow-y-auto bg-gray-600 bg-opacity-75 p-4"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-full, w-full' could be replaced by the 'size-full' shorthand!","line":98,"column":14,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":98,"endColumn":137,"fix":{"range":[4750,4861],"text":"fixed inset-0 bg-gray-600 bg-opacity-75 overflow-y-auto size-full z-50 flex justify-center items-center p-4"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'bg-opacity-75' should be replaced by an opacity suffix (eg. '/75')","line":98,"column":14,"nodeType":"JSXAttribute","messageId":"classnameOpacityDeprecated","endLine":98,"endColumn":137},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":99,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":99,"endColumn":130,"fix":{"range":[4891,4993],"text":"max-h-[90vh] w-full max-w-lg overflow-y-auto rounded-lg bg-white p-6 shadow-xl sm:p-8 dark:bg-gray-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":100,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":100,"endColumn":68,"fix":{"range":[5025,5063],"text":"mb-4 flex items-center justify-between"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":107,"column":22,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":107,"endColumn":41,"fix":{"range":[5470,5477],"text":"h-6 w-6"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'w-6, h-6' could be replaced by the 'size-6' shorthand!","line":107,"column":22,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":107,"endColumn":41,"fix":{"range":[5470,5477],"text":"size-6"}}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":4,"fixableWarningCount":16,"source":"'use client';\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport AdminUsersList from './AdminUsersList';\r\nimport AddUserForm from './AddUserForm';\r\nimport EditUserForm from './EditUserForm'; // Import the EditUserForm\r\nimport { Profile } from '@/types';\r\n\r\ninterface UsersPageClientViewProps {\r\n  initialUsers: Profile[];\r\n  fetchError?: string | null;\r\n}\r\n\r\nconst UsersPageClientView: React.FC<UsersPageClientViewProps> = ({ initialUsers, fetchError }) => {\r\n  const [users, setUsers] = useState<Profile[]>(initialUsers);\r\n  const [isAddUserModalOpen, setIsAddUserModalOpen] = useState(false);\r\n  const [isEditUserModalOpen, setIsEditUserModalOpen] = useState(false);\r\n  const [editingUser, setEditingUser] = useState<Profile | null>(null);\r\n  const [currentFetchError, setCurrentFetchError] = useState<string | null>(fetchError || null);\r\n\r\n  useEffect(() => {\r\n    setUsers(initialUsers); // Sync if initialUsers prop changes (e.g., after server-side re-fetch)\r\n  }, [initialUsers]);\r\n\r\n  useEffect(() => {\r\n    setCurrentFetchError(fetchError || null);\r\n  }, [fetchError]);\r\n\r\n\r\n  const handleUserAdded = (newUser: Profile) => {\r\n    // TODO: Ideally, re-fetch the list or add to local state optimistically\r\n    // For now, we'd need a way to trigger re-fetch in the parent server component or use client-side fetching.\r\n    // router.refresh() could work if data fetching in page.tsx is re-run.\r\n    setUsers(prevUsers => [newUser, ...prevUsers]); // Optimistic update\r\n    setIsAddUserModalOpen(false);\r\n    alert('Gebruiker (simulatie) toegevoegd. Implementeer daadwerkelijke API en lijstvernieuwing.');\r\n  };\r\n\r\n  const handleOpenEditModal = (user: Profile) => {\r\n    setEditingUser(user);\r\n    setIsEditUserModalOpen(true);\r\n  };\r\n\r\n  const handleUserUpdated = (updatedUser: Profile) => {\r\n    setUsers(prevUsers => prevUsers.map(u => u.id === updatedUser.id ? updatedUser : u)); // Optimistic update\r\n    setIsEditUserModalOpen(false);\r\n    setEditingUser(null);\r\n    alert('Gebruiker (simulatie) bijgewerkt. Implementeer daadwerkelijke API en lijstvernieuwing.');\r\n  };\r\n  \r\n  // TODO: Implement handleDeleteUser\r\n\r\n  return (\r\n    <div> {/* This outer div is fine, page.tsx will be wrapped by layout's <main> */}\r\n      <div className=\"flex justify-between items-center mb-8\"> {/* Match AdminDashboardPage mb-8 */}\r\n        <h1 className=\"text-3xl font-bold text-gray-800 dark:text-white\">Gebruikersbeheer</h1> {/* Match AdminDashboardPage h1 */}\r\n        <button\r\n          onClick={() => setIsAddUserModalOpen(true)}\r\n          className=\"px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50\"\r\n        >\r\n          Nieuwe Gebruiker Toevoegen\r\n        </button>\r\n      </div>\r\n\r\n      {/* Main content block with consistent styling */}\r\n      <div className=\"bg-white dark:bg-gray-800 shadow-xl rounded-lg p-6\"> {/* Match AdminDashboardPage section styling */}\r\n        {currentFetchError && (\r\n          <div className=\"mb-4 p-4 text-sm text-red-700 bg-red-100 rounded-lg dark:bg-red-200 dark:text-red-800\" role=\"alert\">\r\n            <span className=\"font-medium\">Fout bij ophalen gebruikers:</span> {currentFetchError}\r\n          </div>\r\n        )}\r\n        {/* TODO: Implement UserFilterControls */}\r\n        <AdminUsersList users={users} onEditUser={handleOpenEditModal} onDeleteUser={(userId) => alert(`Verwijder gebruiker ${userId} (TODO)`)} />\r\n      </div>\r\n\r\n      {isAddUserModalOpen && (\r\n        <div className=\"fixed inset-0 bg-gray-600 bg-opacity-75 overflow-y-auto h-full w-full z-50 flex justify-center items-center p-4\">\r\n          <div className=\"bg-white dark:bg-gray-800 p-6 sm:p-8 rounded-lg shadow-xl w-full max-w-lg max-h-[90vh] overflow-y-auto\">\r\n            <div className=\"flex justify-between items-center mb-4\">\r\n              <h2 className=\"text-xl font-semibold text-gray-800 dark:text-white\">Nieuwe Gebruiker Toevoegen</h2>\r\n              <button \r\n                onClick={() => setIsAddUserModalOpen(false)} \r\n                className=\"text-gray-400 hover:text-gray-600 dark:hover:text-gray-300\"\r\n                aria-label=\"Sluit venster\"\r\n              >\r\n                <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path></svg>\r\n              </button>\r\n            </div>\r\n            <AddUserForm \r\n              onClose={() => setIsAddUserModalOpen(false)} \r\n              onUserAdded={handleUserAdded} \r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {isEditUserModalOpen && editingUser && (\r\n        <div className=\"fixed inset-0 bg-gray-600 bg-opacity-75 overflow-y-auto h-full w-full z-50 flex justify-center items-center p-4\">\r\n          <div className=\"bg-white dark:bg-gray-800 p-6 sm:p-8 rounded-lg shadow-xl w-full max-w-lg max-h-[90vh] overflow-y-auto\">\r\n            <div className=\"flex justify-between items-center mb-4\">\r\n              <h2 className=\"text-xl font-semibold text-gray-800 dark:text-white\">Gebruiker Bewerken</h2>\r\n              <button \r\n                onClick={() => { setIsEditUserModalOpen(false); setEditingUser(null); }} \r\n                className=\"text-gray-400 hover:text-gray-600 dark:hover:text-gray-300\"\r\n                aria-label=\"Sluit venster\"\r\n              >\r\n                <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path></svg>\r\n              </button>\r\n            </div>\r\n            <EditUserForm \r\n              user={editingUser}\r\n              onClose={() => { setIsEditUserModalOpen(false); setEditingUser(null); }}\r\n              onUserUpdated={handleUserUpdated}\r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UsersPageClientView;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\admin\\charts\\TaskCompletionChart.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":27,"fix":{"range":[43,43],"text":"\n"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React from 'react';\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\n\r\ninterface TaskCompletionDataPoint {\r\n  month: string; // YYYY-MM\r\n  count: number;\r\n}\r\n\r\ninterface TaskCompletionChartProps {\r\n  data: TaskCompletionDataPoint[];\r\n}\r\n\r\nconst TaskCompletionChart: React.FC<TaskCompletionChartProps> = ({ data }) => {\r\n  if (!data || data.length === 0) {\r\n    return <p className=\"text-gray-500 dark:text-gray-400\">Geen data beschikbaar voor taakvoltooiing trends.</p>;\r\n  }\r\n\r\n  const formattedData = data.map(item => ({\r\n    ...item,\r\n    displayMonth: new Date(item.month + '-01').toLocaleDateString('nl-NL', { month: 'short', year: 'numeric' }),\r\n  }));\r\n\r\n  return (\r\n    <ResponsiveContainer width=\"100%\" height={300}>\r\n      <BarChart\r\n        data={formattedData}\r\n        margin={{\r\n          top: 5,\r\n          right: 30,\r\n          left: 0,\r\n          bottom: 5,\r\n        }}\r\n      >\r\n        <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-gray-200 dark:stroke-gray-700\" />\r\n        <XAxis dataKey=\"displayMonth\" tick={{ fill: '#6b7280' }} className=\"text-xs dark:fill-gray-400\" />\r\n        <YAxis allowDecimals={false} tick={{ fill: '#6b7280' }} className=\"text-xs dark:fill-gray-400\" />\r\n        <Tooltip\r\n          contentStyle={{ \r\n            backgroundColor: 'rgba(255, 255, 255, 0.8)', \r\n            borderColor: '#cbd5e1', \r\n            color: '#1f2937'\r\n          }}\r\n          labelStyle={{ color: '#374151' }}\r\n        />\r\n        <Legend wrapperStyle={{ color: '#4b5563' }} />\r\n        <Bar dataKey=\"count\" name=\"Voltooide Taken\" fill=\"#8884d8\" />\r\n      </BarChart>\r\n    </ResponsiveContainer>\r\n  );\r\n};\r\n\r\nexport default TaskCompletionChart;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\admin\\charts\\UserSignupsChart.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":27,"fix":{"range":[43,43],"text":"\n"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React from 'react';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\n\r\ninterface UserSignupDataPoint {\r\n  month: string; // YYYY-MM\r\n  count: number;\r\n}\r\n\r\ninterface UserSignupsChartProps {\r\n  data: UserSignupDataPoint[];\r\n}\r\n\r\nconst UserSignupsChart: React.FC<UserSignupsChartProps> = ({ data }) => {\r\n  if (!data || data.length === 0) {\r\n    return <p className=\"text-gray-500 dark:text-gray-400\">Geen data beschikbaar voor gebruikersaanmeldingen.</p>;\r\n  }\r\n\r\n  // Format month for display (e.g., \"Jan 2023\")\r\n  const formattedData = data.map(item => ({\r\n    ...item,\r\n    displayMonth: new Date(item.month + '-01').toLocaleDateString('nl-NL', { month: 'short', year: 'numeric' }),\r\n  }));\r\n\r\n  return (\r\n    <ResponsiveContainer width=\"100%\" height={300}>\r\n      <LineChart\r\n        data={formattedData}\r\n        margin={{\r\n          top: 5,\r\n          right: 30,\r\n          left: 0, // Adjusted for YAxis labels\r\n          bottom: 5,\r\n        }}\r\n      >\r\n        <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-gray-200 dark:stroke-gray-700\" />\r\n        <XAxis dataKey=\"displayMonth\" tick={{ fill: '#6b7280' }} className=\"text-xs dark:fill-gray-400\" />\r\n        <YAxis allowDecimals={false} tick={{ fill: '#6b7280' }} className=\"text-xs dark:fill-gray-400\" />\r\n        <Tooltip\r\n          contentStyle={{ \r\n            backgroundColor: 'rgba(255, 255, 255, 0.8)', // Semi-transparent white\r\n            borderColor: '#cbd5e1', // gray-300\r\n            color: '#1f2937' // gray-800\r\n          }}\r\n          labelStyle={{ color: '#374151' }} // gray-700\r\n        />\r\n        <Legend wrapperStyle={{ color: '#4b5563' }} /> \r\n        <Line type=\"monotone\" dataKey=\"count\" name=\"Nieuwe Gebruikers\" stroke=\"#3b82f6\" strokeWidth={2} activeDot={{ r: 8 }} />\r\n      </LineChart>\r\n    </ResponsiveContainer>\r\n  );\r\n};\r\n\r\nexport default UserSignupsChart;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\ai\\AIAssistant.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be no empty line within import group","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":46,"fix":{"range":[132,134],"text":""}},{"ruleId":"import/order","severity":2,"message":"`@/types` import should occur after import of `@/context/NotificationContext`","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":46,"fix":{"range":[85,325],"text":"\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\nimport { AlertMessage } from '@/components/common/AlertMessage';\r\nimport { useNotification } from '@/context/NotificationContext';\r\nimport { TaskLog, Reflectie } from '@/types';\r\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'assistantMode' is assigned a value but never used.","line":75,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":75,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userContext' is assigned a value but never used.","line":77,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":77,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'behaviorPatterns' is assigned a value but never used.","line":78,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'targetUserId' is assigned a value but never used.","line":108,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":108,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'targetUserId' is defined but never used. Allowed unused args must match /^_/u.","line":147,"column":50,"nodeType":null,"messageId":"unusedVar","endLine":147,"endColumn":62},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'generateNudges'. Either include it or remove the dependency array.","line":206,"column":6,"nodeType":"ArrayExpression","endLine":206,"endColumn":43,"suggestions":[{"desc":"Update the dependencies array to be: [adaptToEnergyLevel, generateNudges, personalityMode]","fix":{"range":[7253,7290],"text":"[adaptToEnergyLevel, generateNudges, personalityMode]"}}]},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-8, w-8' could be replaced by the 'size-8' shorthand!","line":347,"column":16,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":347,"endColumn":81,"fix":{"range":[12117,12170],"text":"mr-2 size-8 animate-pulse rounded-full bg-purple-100"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":2,"fixableWarningCount":1,"source":"'use client';\r\n\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\n\r\nimport { TaskLog, Reflectie } from '@/types';\r\n\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\nimport { AlertMessage } from '@/components/common/AlertMessage';\r\nimport { useNotification } from '@/context/NotificationContext';\r\n\r\n// Types for the AI Assistant\r\nexport type AssistantMode = 'adaptive' | 'minimal' | 'detailed' | 'motivational' | 'clinical';\r\nexport type PersonalityMode = 'motivational' | 'gentle' | 'clinical';\r\n\r\nexport interface UserContext {\r\n  energyLevel?: number;\r\n  painLevel?: number;\r\n  mood?: string;\r\n  recentTasks?: TaskLog[];\r\n  recentReflections?: Reflectie[];\r\n  timeOfDay: 'morning' | 'afternoon' | 'evening' | 'night';\r\n  dayOfWeek: number;\r\n  completedTasksToday: number;\r\n  pendingTasksToday: number;\r\n}\r\n\r\nexport interface Nudge {\r\n  id: string;\r\n  type: 'reminder' | 'encouragement' | 'insight' | 'suggestion';\r\n  message: string;\r\n  priority: 'low' | 'medium' | 'high';\r\n  actionable: boolean;\r\n  action?: {\r\n    label: string;\r\n    href?: string;\r\n    onClick?: () => void;\r\n  };\r\n}\r\n\r\nexport interface UserBehaviorPattern {\r\n  preferredTimeOfDay?: 'morning' | 'afternoon' | 'evening' | 'night';\r\n  preferredTaskTypes?: string[];\r\n  completionRate: number;\r\n  responseToMotivation: 'positive' | 'neutral' | 'negative';\r\n  painTriggers?: string[];\r\n  energyPatterns?: {\r\n    highEnergyDays: number[];\r\n    lowEnergyDays: number[];\r\n    highEnergyHours?: number[];\r\n    lowEnergyHours?: number[];\r\n  };\r\n}\r\n\r\ninterface AIAssistantProps {\r\n  userId?: string;\r\n  currentContext?: Partial<UserContext>;\r\n  adaptToEnergyLevel?: boolean;\r\n  personalityMode?: PersonalityMode;\r\n  className?: string;\r\n}\r\n\r\n/**\r\n * AI Assistant component that provides personalized guidance and nudges\r\n * based on user behavior, energy levels, and context\r\n */\r\nexport default function AIAssistant({\r\n  userId,\r\n  currentContext,\r\n  adaptToEnergyLevel = true,\r\n  personalityMode = 'gentle',\r\n  className = ''\r\n}: AIAssistantProps): JSX.Element {\r\n  const { user } = useAuth();\r\n  const { addNotification } = useNotification();\r\n  const [assistantMode, setAssistantMode] = useState<AssistantMode>('adaptive');\r\n  const [nudges, setNudges] = useState<Nudge[]>([]);\r\n  const [userContext, setUserContext] = useState<UserContext | null>(null);\r\n  const [behaviorPatterns, setBehaviorPatterns] = useState<UserBehaviorPattern | null>(null);\r\n  const [isLoading, setIsLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Determine current time context if not provided\r\n  const determineTimeContext = useCallback((): Pick<UserContext, 'timeOfDay' | 'dayOfWeek'> => {\r\n    const now = new Date();\r\n    const hour = now.getHours();\r\n    const day = now.getDay(); // 0 = Sunday, 6 = Saturday\r\n    \r\n    let timeOfDay: UserContext['timeOfDay'] = 'afternoon';\r\n    if (hour >= 5 && hour < 12) {\r\n      timeOfDay = 'morning';\r\n    } else if (hour >= 12 && hour < 18) {\r\n      timeOfDay = 'afternoon';\r\n    } else if (hour >= 18 && hour < 22) {\r\n      timeOfDay = 'evening';\r\n    } else {\r\n      timeOfDay = 'night';\r\n    }\r\n    \r\n    return { timeOfDay, dayOfWeek: day };\r\n  }, []);\r\n\r\n  // Fetch user context data\r\n  const fetchUserContext = useCallback(async () => {\r\n    if (!user?.id && !userId) return null;\r\n    \r\n    try {\r\n      setIsLoading(true);\r\n      const targetUserId = userId || user?.id;\r\n      \r\n      // If context is provided, use it, otherwise fetch from API\r\n      if (currentContext && Object.keys(currentContext).length > 0) {\r\n        const timeContext = determineTimeContext();\r\n        return {\r\n          ...timeContext,\r\n          completedTasksToday: 0,\r\n          pendingTasksToday: 0,\r\n          ...currentContext\r\n        } as UserContext;\r\n      }\r\n      \r\n      // Fetch tasks for today\r\n      const today = new Date();\r\n      today.setHours(0, 0, 0, 0);\r\n      \r\n      // This would be replaced with actual API calls in a real implementation\r\n      // For now, we'll simulate the data\r\n      const simulatedContext: UserContext = {\r\n        ...determineTimeContext(),\r\n        energyLevel: Math.floor(Math.random() * 10) + 1,\r\n        painLevel: Math.floor(Math.random() * 10) + 1,\r\n        mood: ['neutral', 'good', 'tired', 'motivated'][Math.floor(Math.random() * 4)],\r\n        completedTasksToday: Math.floor(Math.random() * 5),\r\n        pendingTasksToday: Math.floor(Math.random() * 3) + 1\r\n      };\r\n      \r\n      return simulatedContext;\r\n    } catch (err) {\r\n      console.error('Error fetching user context:', err);\r\n      setError('Kon gebruikerscontext niet laden');\r\n      return null;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [user?.id, userId, currentContext, determineTimeContext]);\r\n\r\n  // Analyze user behavior patterns\r\n  const analyzeUserBehavior = useCallback(async (targetUserId: string): Promise<UserBehaviorPattern | null> => {\r\n    try {\r\n      // This would be an actual API call in a real implementation\r\n      // For now, we'll simulate the behavior pattern\r\n      \r\n      // Simulate API delay\r\n      await new Promise(resolve => setTimeout(resolve, 500));\r\n      \r\n      // Simulated behavior pattern\r\n      return {\r\n        preferredTimeOfDay: ['morning', 'afternoon', 'evening', 'night'][Math.floor(Math.random() * 4)] as 'morning' | 'afternoon' | 'evening' | 'night',\r\n        preferredTaskTypes: ['beweging', 'meditatie', 'huishouden', 'sociaal'],\r\n        completionRate: 0.65 + (Math.random() * 0.3),\r\n        responseToMotivation: ['positive', 'neutral', 'negative'][Math.floor(Math.random() * 3)] as 'positive' | 'neutral' | 'negative',\r\n        energyPatterns: {\r\n          highEnergyDays: [1, 4], // Monday and Thursday\r\n          lowEnergyDays: [3, 6],  // Wednesday and Saturday\r\n          highEnergyHours: [9, 10, 11, 16, 17],\r\n          lowEnergyHours: [13, 14, 21, 22]\r\n        }\r\n      };\r\n    } catch (err) {\r\n      console.error('Error analyzing user behavior:', err);\r\n      return null;\r\n    }\r\n  }, []);\r\n\r\n  // Adjust assistant behavior based on user patterns\r\n  const adjustAssistantBehavior = useCallback((patterns: UserBehaviorPattern | null, context: UserContext | null) => {\r\n    if (!patterns || !context) return;\r\n    \r\n    // Determine the best assistant mode based on patterns and context\r\n    let newMode: AssistantMode = 'adaptive';\r\n    \r\n    // Adjust based on energy level if enabled\r\n    if (adaptToEnergyLevel && context.energyLevel !== undefined) {\r\n      if (context.energyLevel <= 3) {\r\n        // Low energy - be minimal and gentle\r\n        newMode = 'minimal';\r\n      } else if (context.energyLevel >= 8) {\r\n        // High energy - can be more detailed\r\n        newMode = 'detailed';\r\n      }\r\n    }\r\n    \r\n    // Adjust based on personality preference\r\n    if (personalityMode === 'motivational') {\r\n      if (patterns.responseToMotivation === 'positive') {\r\n        newMode = 'motivational';\r\n      }\r\n    } else if (personalityMode === 'clinical') {\r\n      newMode = 'clinical';\r\n    }\r\n    \r\n    // Set the new mode\r\n    setAssistantMode(newMode);\r\n    \r\n    // Generate appropriate nudges based on context and patterns\r\n    generateNudges(patterns, context, newMode);\r\n  }, [adaptToEnergyLevel, personalityMode]);\r\n\r\n  // Generate nudges based on context, patterns, and mode\r\n  const generateNudges = useCallback((\r\n    patterns: UserBehaviorPattern,\r\n    context: UserContext,\r\n    mode: AssistantMode\r\n  ) => {\r\n    const newNudges: Nudge[] = [];\r\n    \r\n    // Limit number of nudges based on mode\r\n    const maxNudges = mode === 'minimal' ? 1 : mode === 'detailed' ? 3 : 2;\r\n    \r\n    // Check if it's a preferred time for tasks\r\n    const isPreferredTime = patterns.preferredTimeOfDay === context.timeOfDay;\r\n    const isHighEnergyDay = patterns.energyPatterns?.highEnergyDays.includes(context.dayOfWeek) || false;\r\n    \r\n    // Add task-related nudges\r\n    if (context.pendingTasksToday > 0) {\r\n      if (isPreferredTime || isHighEnergyDay) {\r\n        newNudges.push({\r\n          id: `task-${Date.now()}`,\r\n          type: 'reminder',\r\n          message: mode === 'motivational' \r\n            ? 'Dit is een goed moment om een taak af te ronden! Je hebt al eerder laten zien dat je dit kunt.'\r\n            : 'Je hebt nog openstaande taken voor vandaag.',\r\n          priority: 'medium',\r\n          actionable: true,\r\n          action: {\r\n            label: 'Bekijk taken',\r\n            href: '/taken'\r\n          }\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Add energy management nudge if energy is low\r\n    if (context.energyLevel !== undefined && context.energyLevel < 5) {\r\n      newNudges.push({\r\n        id: `energy-${Date.now()}`,\r\n        type: 'suggestion',\r\n        message: mode === 'clinical'\r\n          ? 'Uw energieniveau is laag. Overweeg een korte rustperiode in te plannen.'\r\n          : 'Je energieniveau lijkt wat laag. Misschien tijd voor een korte pauze?',\r\n        priority: 'high',\r\n        actionable: false\r\n      });\r\n    }\r\n    \r\n    // Add encouragement if tasks were completed\r\n    if (context.completedTasksToday > 0) {\r\n      newNudges.push({\r\n        id: `encourage-${Date.now()}`,\r\n        type: 'encouragement',\r\n        message: mode === 'motivational'\r\n          ? `Geweldig! Je hebt vandaag al ${context.completedTasksToday} ${context.completedTasksToday === 1 ? 'taak' : 'taken'} afgerond. Blijf zo doorgaan!`\r\n          : `Je hebt vandaag ${context.completedTasksToday} ${context.completedTasksToday === 1 ? 'taak' : 'taken'} afgerond.`,\r\n        priority: 'low',\r\n        actionable: false\r\n      });\r\n    }\r\n    \r\n    // Add insight based on patterns\r\n    if (patterns.completionRate > 0.7) {\r\n      newNudges.push({\r\n        id: `insight-${Date.now()}`,\r\n        type: 'insight',\r\n        message: 'Je rondt meer dan 70% van je taken succesvol af. Dat is beter dan gemiddeld!',\r\n        priority: 'low',\r\n        actionable: false\r\n      });\r\n    }\r\n    \r\n    // Limit to max nudges and sort by priority\r\n    const priorityValues = { high: 3, medium: 2, low: 1 };\r\n    const sortedNudges = newNudges.sort((a, b) => \r\n      priorityValues[b.priority] - priorityValues[a.priority]\r\n    ).slice(0, maxNudges);\r\n    \r\n    setNudges(sortedNudges);\r\n  }, []);\r\n\r\n  // Initialize the assistant\r\n  useEffect(() => {\r\n    const initializeAssistant = async () => {\r\n      if (!user?.id && !userId) return;\r\n      \r\n      try {\r\n        // Fetch user context\r\n        const context = await fetchUserContext();\r\n        setUserContext(context);\r\n        \r\n        if (context) {\r\n          // Analyze user behavior\r\n          const targetUserId = userId || user?.id as string;\r\n          const patterns = await analyzeUserBehavior(targetUserId);\r\n          setBehaviorPatterns(patterns);\r\n          \r\n          // Adjust assistant behavior\r\n          if (patterns) {\r\n            adjustAssistantBehavior(patterns, context);\r\n          }\r\n        }\r\n      } catch (err) {\r\n        console.error('Error initializing AI assistant:', err);\r\n        setError('Kon AI-assistent niet initialiseren');\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    \r\n    initializeAssistant();\r\n  }, [user?.id, userId, fetchUserContext, analyzeUserBehavior, adjustAssistantBehavior]);\r\n\r\n  // Handle nudge action\r\n  const handleNudgeAction = useCallback((nudge: Nudge) => {\r\n    if (nudge.action?.onClick) {\r\n      nudge.action.onClick();\r\n    }\r\n    \r\n    // Remove the nudge after action\r\n    setNudges(prev => prev.filter(n => n.id !== nudge.id));\r\n    \r\n    // Add notification for feedback\r\n    addNotification({\r\n      type: 'success',\r\n      message: 'Actie uitgevoerd',\r\n      duration: 3000\r\n    });\r\n  }, [addNotification]);\r\n\r\n  // Handle dismiss nudge\r\n  const handleDismissNudge = useCallback((nudgeId: string) => {\r\n    setNudges(prev => prev.filter(n => n.id !== nudgeId));\r\n  }, []);\r\n\r\n  // Loading state\r\n  if (isLoading) {\r\n    return (\r\n      <div className={`${className} rounded-lg bg-white p-4 shadow-md`}>\r\n        <div className=\"mb-2 flex items-center\">\r\n          <div className=\"mr-2 h-8 w-8 animate-pulse rounded-full bg-purple-100\"></div>\r\n          <div className=\"h-6 w-40 animate-pulse rounded bg-purple-100\"></div>\r\n        </div>\r\n        <div className=\"space-y-3\">\r\n          <div className=\"h-4 w-full animate-pulse rounded bg-gray-100\"></div>\r\n          <div className=\"h-4 w-3/4 animate-pulse rounded bg-gray-100\"></div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Error state\r\n  if (error) {\r\n    return (\r\n      <div className={`${className} rounded-lg bg-white p-4 shadow-md`}>\r\n        <AlertMessage\r\n          type=\"error\"\r\n          title=\"Fout bij laden AI-assistent\"\r\n          message={error}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Empty state - no nudges\r\n  if (nudges.length === 0) {\r\n    return (\r\n      <div className={`${className} rounded-lg bg-white p-4 shadow-md`}>\r\n        <div className=\"flex items-center\">\r\n          <div className=\"mr-2 rounded-full bg-purple-100 p-2\">\r\n            <svg className=\"size-5 text-purple-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\" />\r\n            </svg>\r\n          </div>\r\n          <h3 className=\"text-lg font-medium text-gray-800\">AI-assistent</h3>\r\n        </div>\r\n        <p className=\"mt-2 text-gray-600\">\r\n          {personalityMode === 'clinical' \r\n            ? 'Geen aanbevelingen op dit moment. Uw gegevens worden geanalyseerd.'\r\n            : 'Geen suggesties op dit moment. Ik zal je laten weten wanneer ik iets voor je heb!'}\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Render nudges\r\n  return (\r\n    <div className={`${className} rounded-lg bg-white p-4 shadow-md`}>\r\n      <div className=\"mb-3 flex items-center\">\r\n        <div className=\"mr-2 rounded-full bg-purple-100 p-2\">\r\n          <svg className=\"size-5 text-purple-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\" />\r\n          </svg>\r\n        </div>\r\n        <h3 className=\"text-lg font-medium text-gray-800\">AI-assistent</h3>\r\n      </div>\r\n      \r\n      <div className=\"space-y-3\">\r\n        {nudges.map(nudge => (\r\n          <div \r\n            key={nudge.id} \r\n            className={`relative rounded-lg border p-3 ${\r\n              nudge.type === 'reminder' ? 'border-blue-200 bg-blue-50' :\r\n              nudge.type === 'encouragement' ? 'border-green-200 bg-green-50' :\r\n              nudge.type === 'insight' ? 'border-purple-200 bg-purple-50' :\r\n              'border-amber-200 bg-amber-50'\r\n            }`}\r\n          >\r\n            <button\r\n              onClick={() => handleDismissNudge(nudge.id)}\r\n              className=\"absolute right-2 top-2 rounded-full p-1 text-gray-400 hover:bg-white hover:text-gray-600\"\r\n              aria-label=\"Verwijderen\"\r\n            >\r\n              <svg className=\"size-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\r\n              </svg>\r\n            </button>\r\n            \r\n            <p className=\"pr-6 text-gray-700\">{nudge.message}</p>\r\n            \r\n            {nudge.actionable && nudge.action && (\r\n              <div className=\"mt-2\">\r\n                {nudge.action.href ? (\r\n                  <a\r\n                    href={nudge.action.href}\r\n                    className=\"inline-flex items-center rounded-md bg-purple-600 px-3 py-1.5 text-sm font-medium text-white hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2\"\r\n                  >\r\n                    {nudge.action.label}\r\n                  </a>\r\n                ) : (\r\n                  <button\r\n                    onClick={() => handleNudgeAction(nudge)}\r\n                    className=\"inline-flex items-center rounded-md bg-purple-600 px-3 py-1.5 text-sm font-medium text-white hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2\"\r\n                  >\r\n                    {nudge.action.label}\r\n                  </button>\r\n                )}\r\n              </div>\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\ai\\AIInsightVisualization.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":52,"fix":{"range":[66,66],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":111,"fix":{"range":[178,178],"text":"\n"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[517,520],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[517,520],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":77,"column":54,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":77,"endColumn":78,"fix":{"range":[3602,3614],"text":"mr-1 h-5 w-5"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":77,"column":54,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":77,"endColumn":78,"fix":{"range":[3602,3614],"text":"size-5 mr-1"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":80,"column":54,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":80,"endColumn":78,"fix":{"range":[4053,4065],"text":"mr-1 h-5 w-5"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":80,"column":54,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":80,"endColumn":78,"fix":{"range":[4053,4065],"text":"size-5 mr-1"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":83,"column":54,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":83,"endColumn":78,"fix":{"range":[4502,4514],"text":"mr-1 h-5 w-5"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":83,"column":54,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":83,"endColumn":78,"fix":{"range":[4502,4514],"text":"size-5 mr-1"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":90,"column":10,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":90,"endColumn":62,"fix":{"range":[4894,4934],"text":"rounded-lg bg-white p-4 shadow-md md:p-6"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":91,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":91,"endColumn":89,"fix":{"range":[4960,5025],"text":"mb-3 flex flex-col sm:flex-row sm:items-center sm:justify-between"}},{"ruleId":"tailwindcss/no-custom-classname","severity":1,"message":"Classname 'text-md' is not a Tailwind CSS class!","line":93,"column":15,"nodeType":"JSXAttribute","messageId":"customClassnameDetected","endLine":93,"endColumn":73},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":93,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":93,"endColumn":73,"fix":{"range":[5069,5115],"text":"text-md font-semibold text-gray-800 md:text-lg"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":95,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":95,"endColumn":57,"fix":{"range":[5244,5270],"text":"ml-2 text-xs text-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":99,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":99,"endColumn":92,"fix":{"range":[5429,5495],"text":"mt-2 flex items-center text-xs font-medium text-purple-600 sm:mt-0"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":100,"column":51,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":100,"endColumn":75,"fix":{"range":[5560,5572],"text":"mr-1 h-4 w-4"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-4, w-4' could be replaced by the 'size-4' shorthand!","line":100,"column":51,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":100,"endColumn":75,"fix":{"range":[5560,5572],"text":"size-4 mr-1"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":105,"column":10,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":105,"endColumn":64,"fix":{"range":[6034,6076],"text":"mb-4 text-sm leading-relaxed text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":114,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":114,"endColumn":238,"fix":{"range":[6618,6670],"text":"`rounded-md px-2 py-0.5 text-xs transition-colors ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":135,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":135,"endColumn":113,"fix":{"range":[7970,8057],"text":"rounded-lg border-2 border-dashed border-gray-200 p-4 text-center text-sm text-gray-500"}},{"ruleId":"import/no-named-as-default-member","severity":1,"message":"Caution: `React` also has a named export `memo`. Check if you meant to write `import {memo} from 'react'` instead.","line":143,"column":16,"nodeType":"MemberExpression","endLine":143,"endColumn":26}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":2,"fixableWarningCount":16,"source":"'use client';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from 'recharts';\r\nimport { Inzicht, TaskLog } from '@/types';\r\n\r\ninterface AIInsightVisualizationProps {\r\n  insight: Inzicht;\r\n  logs: TaskLog[]; // Expect logs to be passed, relevant to the insight's period\r\n}\r\n\r\nconst AIInsightVisualization: React.FC<AIInsightVisualizationProps> = ({ insight, logs }) => {\r\n  const [chartData, setChartData] = useState<any[]>([]);\r\n  // Default metric can be more dynamic based on insight, or a fixed default\r\n  const [metric, setMetric] = useState<keyof Pick<TaskLog, 'pijn_score' | 'vermoeidheid_score' | 'energie_na' | 'stemming'>>('pijn_score');\r\n\r\n  useEffect(() => {\r\n    if (!logs || logs.length === 0) {\r\n      setChartData([]);\r\n      return;\r\n    }\r\n\r\n    // Determine relevant metrics from the insight description or type\r\n    let initialMetric: typeof metric = 'pijn_score'; // Default\r\n    const descriptionLower = insight.beschrijving.toLowerCase();\r\n    if (descriptionLower.includes('pijn')) initialMetric = 'pijn_score';\r\n    else if (descriptionLower.includes('vermoeidheid')) initialMetric = 'vermoeidheid_score';\r\n    else if (descriptionLower.includes('energie')) initialMetric = 'energie_na'; // Assuming 'energie_na' is most relevant for energy trends\r\n    else if (descriptionLower.includes('stemming')) initialMetric = 'stemming';\r\n    setMetric(initialMetric);\r\n\r\n    const processedData = logs.map(log => {\r\n      const date = new Date(log.start_tijd);\r\n      return {\r\n        originalDate: date, // For sorting\r\n        name: date.toLocaleDateString('nl-BE', { day: '2-digit', month: 'short' }),\r\n        pijn_score: log.pijn_score,\r\n        vermoeidheid_score: log.vermoeidheid_score,\r\n        energie_na: log.energie_na,\r\n        // Convert stemming string to a numerical value if you want to plot it\r\n        stemming: log.stemming ? stringToSentimentScore(log.stemming) : null, \r\n      };\r\n    }).sort((a, b) => a.originalDate.getTime() - b.originalDate.getTime());\r\n    \r\n    setChartData(processedData);\r\n  }, [insight, logs]);\r\n\r\n  const stringToSentimentScore = (sentiment?: string): number | null => {\r\n    if (!sentiment) return null;\r\n    const sentimentMap: Record<string, number> = {\r\n      'zeer goed': 18, 'goed': 15, 'neutraal': 10, 'redelijk': 12, // Added redelijk\r\n      'matig': 8, 'slecht': 5, 'zeer slecht': 2,\r\n    };\r\n    const lowerSentiment = sentiment.toLowerCase();\r\n    for (const [key, value] of Object.entries(sentimentMap)) {\r\n      if (lowerSentiment.includes(key)) return value;\r\n    }\r\n    return 10; // Default to neutral if no specific match\r\n  };\r\n\r\n  const metricsInfo: Record<string, { label: string, color: string, domain?: [number, number | 'auto'] }> = {\r\n    'pijn_score': { label: 'Pijn', color: '#ef4444', domain: [0, 20] },\r\n    'vermoeidheid_score': { label: 'Vermoeidheid', color: '#f97316', domain: [0, 20] },\r\n    'energie_na': { label: 'Energie (na)', color: '#10b981', domain: [0, 20] },\r\n    'stemming': { label: 'Stemming (score)', color: '#6366f1', domain: [0, 20] } // Assuming stemming is converted to 0-20 scale\r\n  };\r\n  \r\n  const currentMetricInfo = metricsInfo[metric] || metricsInfo['pijn_score'];\r\n\r\n  const renderTrendIcon = () => {\r\n    if (!insight.trend_type) return null;\r\n    const trend = insight.trend_type.toLowerCase();\r\n    let icon = null;\r\n    let text = '';\r\n    let color = 'text-gray-600';\r\n\r\n    if (trend.includes('positief')) {\r\n      icon = <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 mr-1\" viewBox=\"0 0 20 20\" fill=\"currentColor\"><path fillRule=\"evenodd\" d=\"M12 7a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0V8.414l-4.293 4.293a1 1 0 01-1.414 0L8 10.414l-4.293 4.293a1 1 0 01-1.414-1.414l5-5a1 1 0 011.414 0L11 10.586 14.586 7H12z\" clipRule=\"evenodd\" /></svg>;\r\n      text = 'Positieve Trend'; color = 'text-green-600';\r\n    } else if (trend.includes('negatief')) {\r\n      icon = <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 mr-1\" viewBox=\"0 0 20 20\" fill=\"currentColor\"><path fillRule=\"evenodd\" d=\"M12 13a1 1 0 100 2h5a1 1 0 001-1v-5a1 1 0 10-2 0v2.586l-4.293-4.293a1 1 0 00-1.414 0L8 9.586l-4.293-4.293a1 1 0 00-1.414 1.414l5 5a1 1 0 001.414 0L11 9.414 14.586 13H12z\" clipRule=\"evenodd\" /></svg>;\r\n      text = 'Negatieve Trend'; color = 'text-red-600';\r\n    } else if (trend.includes('stabiel')) {\r\n      icon = <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 mr-1\" viewBox=\"0 0 20 20\" fill=\"currentColor\"><path fillRule=\"evenodd\" d=\"M18 10a1 1 0 01-1 1H3a1 1 0 110-2h14a1 1 0 011 1z\" clipRule=\"evenodd\" /></svg>;\r\n      text = 'Stabiele Trend'; color = 'text-blue-600';\r\n    }\r\n    return icon ? <div className={`flex items-center text-sm font-medium ${color}`}>{icon}<span>{text}</span></div> : null;\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-white rounded-lg shadow-md p-4 md:p-6\">\r\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between mb-3\">\r\n        <div>\r\n          <h3 className=\"text-md md:text-lg font-semibold text-gray-800\">\r\n            {insight.periode.charAt(0).toUpperCase() + insight.periode.slice(1)}elijks Inzicht\r\n            <span className=\"text-xs text-gray-500 ml-2\">({new Date(insight.created_at).toLocaleDateString('nl-BE')})</span>\r\n          </h3>\r\n          {renderTrendIcon()}\r\n        </div>\r\n        <div className=\"mt-2 sm:mt-0 flex items-center text-xs text-purple-600 font-medium\">\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 mr-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" aria-hidden=\"true\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\" /></svg>\r\n          <span>AI Gegenereerd</span>\r\n        </div>\r\n      </div>\r\n      \r\n      <p className=\"text-sm text-gray-700 mb-4 leading-relaxed\">{insight.beschrijving}</p>\r\n      \r\n      {chartData.length > 0 ? (\r\n        <div className=\"mt-2\">\r\n          <div className=\"mb-2 flex items-center justify-end space-x-1\">\r\n            {(Object.keys(metricsInfo) as Array<keyof Pick<TaskLog, 'pijn_score' | 'vermoeidheid_score' | 'energie_na' | 'stemming'>>).map(mKey => (\r\n              <button\r\n                key={mKey}\r\n                onClick={() => setMetric(mKey as keyof Pick<TaskLog, 'pijn_score' | 'vermoeidheid_score' | 'energie_na' | 'stemming'>)}\r\n                className={`px-2 py-0.5 text-xs rounded-md transition-colors ${metric === mKey ? `${metricsInfo[mKey].color.replace('stroke-', 'bg-').replace('text-', 'bg-')} text-white` : 'bg-gray-100 text-gray-600 hover:bg-gray-200'}`}\r\n              >\r\n                {metricsInfo[mKey].label}\r\n              </button>\r\n            ))}\r\n          </div>\r\n          \r\n          <div className=\"h-56 md:h-64\"> {/* Adjusted height */}\r\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n              <LineChart data={chartData} margin={{ top: 5, right: 5, left: -25, bottom: 5 }}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" strokeOpacity={0.3} />\r\n                <XAxis dataKey=\"name\" tick={{ fontSize: 9 }} />\r\n                <YAxis domain={currentMetricInfo.domain} tick={{ fontSize: 9 }} />\r\n                <Tooltip formatter={(value: number) => [`${value} /20`, currentMetricInfo.label]} labelFormatter={(label: string) => `Datum: ${label}`} />\r\n                <Legend verticalAlign=\"top\" height={25} wrapperStyle={{fontSize: \"10px\"}}/>\r\n                <Line type=\"monotone\" dataKey={metric} stroke={currentMetricInfo.color} strokeWidth={1.5} activeDot={{ r: 4 }} name={currentMetricInfo.label} dot={false} />\r\n              </LineChart>\r\n            </ResponsiveContainer>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"border-2 border-dashed border-gray-200 rounded-lg p-4 text-center text-sm text-gray-500\">\r\n          Geen loggegevens beschikbaar om een visualisatie voor dit inzicht te tonen.\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(AIInsightVisualization);","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\ai\\AIRecommendationCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\ai\\KnowledgeEntryForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'data' is assigned a value but never used.","line":57,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":57,"endColumn":19},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":145,"column":11,"nodeType":"JSXOpeningElement","endLine":145,"endColumn":75},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-4, w-4' could be replaced by the 'size-4' shorthand!","line":156,"column":17,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":156,"endColumn":74,"fix":{"range":[4566,4611],"text":"size-4 text-purple-600 focus:ring-purple-500"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-4, w-4' could be replaced by the 'size-4' shorthand!","line":167,"column":17,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":167,"endColumn":74,"fix":{"range":[5047,5092],"text":"size-4 text-purple-600 focus:ring-purple-500"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-4, w-4' could be replaced by the 'size-4' shorthand!","line":178,"column":17,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":178,"endColumn":74,"fix":{"range":[5545,5590],"text":"size-4 text-purple-600 focus:ring-purple-500"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-4, w-4' could be replaced by the 'size-4' shorthand!","line":253,"column":21,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":253,"endColumn":228,"fix":{"range":[8513,8708],"text":"ml-1.5 inline-flex size-4 flex-shrink-0 items-center justify-center rounded-full text-purple-400 hover:bg-purple-200 hover:text-purple-500 focus:bg-purple-500 focus:text-white focus:outline-none"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'flex-shrink-0' should be updated to 'shrink-0' in Tailwind CSS v3!","line":253,"column":21,"nodeType":"JSXAttribute","messageId":"classnameChanged","endLine":253,"endColumn":228,"fix":{"range":[8513,8708],"text":"ml-1.5 inline-flex h-4 w-4 shrink-0 items-center justify-center rounded-full text-purple-400 hover:bg-purple-200 hover:text-purple-500 focus:bg-purple-500 focus:text-white focus:outline-none"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-2, w-2' could be replaced by the 'size-2' shorthand!","line":256,"column":26,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":256,"endColumn":45,"fix":{"range":[8842,8849],"text":"size-2"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":6,"source":"'use client';\r\n\r\nimport React, { useState } from 'react';\r\n\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\nimport { AlertMessage } from '@/components/common/AlertMessage';\r\nimport { useNotification } from '@/context/NotificationContext';\r\nimport { getSupabaseBrowserClient } from '@/lib/supabase-client';\r\nimport { ContentType } from '@/types/ai';\r\n\r\ninterface KnowledgeEntryFormProps {\r\n  onSuccess?: () => void;\r\n  className?: string;\r\n}\r\n\r\n/**\r\n * Form component for creating new knowledge entries\r\n * Used by specialists to add content to the AI knowledge base\r\n */\r\nexport default function KnowledgeEntryForm({ \r\n  onSuccess, \r\n  className = '' \r\n}: KnowledgeEntryFormProps): JSX.Element {\r\n  const { user } = useAuth();\r\n  const { addNotification } = useNotification();\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  \r\n  // Form state\r\n  const [title, setTitle] = useState('');\r\n  const [content, setContent] = useState('');\r\n  const [contentType, setContentType] = useState<ContentType>('article');\r\n  const [tags, setTags] = useState<string[]>([]);\r\n  const [tagInput, setTagInput] = useState('');\r\n  \r\n  // Handle form submission\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    if (!user?.id) {\r\n      setError('U moet ingelogd zijn om kennis toe te voegen');\r\n      return;\r\n    }\r\n    \r\n    if (!title.trim() || !content.trim()) {\r\n      setError('Titel en inhoud zijn verplicht');\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      setIsSubmitting(true);\r\n      setError(null);\r\n      \r\n      const supabase = getSupabaseBrowserClient();\r\n      \r\n      // Create knowledge entry\r\n      const { data, error: insertError } = await supabase\r\n        .from('expert_knowledge')\r\n        .insert({\r\n          specialist_id: user.id,\r\n          title,\r\n          content,\r\n          content_type: contentType,\r\n          tags: tags.length > 0 ? tags : null,\r\n          is_approved: false, // Requires approval by admin\r\n          created_at: new Date().toISOString()\r\n        })\r\n        .select()\r\n        .single();\r\n      \r\n      if (insertError) {\r\n        throw insertError;\r\n      }\r\n      \r\n      // Success notification\r\n      addNotification({\r\n        type: 'success',\r\n        message: 'Kennis succesvol toegevoegd. Een beheerder zal dit beoordelen.',\r\n        duration: 5000\r\n      });\r\n      \r\n      // Reset form\r\n      setTitle('');\r\n      setContent('');\r\n      setContentType('article');\r\n      setTags([]);\r\n      setTagInput('');\r\n      \r\n      // Call success callback\r\n      if (onSuccess) {\r\n        onSuccess();\r\n      }\r\n    } catch (err) {\r\n      console.error('Error creating knowledge entry:', err);\r\n      setError('Er is een fout opgetreden bij het toevoegen van kennis');\r\n      \r\n      addNotification({\r\n        type: 'error',\r\n        message: 'Kon kennis niet toevoegen',\r\n        duration: 5000\r\n      });\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n  \r\n  // Handle adding a tag\r\n  const handleAddTag = () => {\r\n    const trimmedTag = tagInput.trim().toLowerCase();\r\n    if (trimmedTag && !tags.includes(trimmedTag)) {\r\n      setTags([...tags, trimmedTag]);\r\n      setTagInput('');\r\n    }\r\n  };\r\n  \r\n  // Handle removing a tag\r\n  const handleRemoveTag = (tagToRemove: string) => {\r\n    setTags(tags.filter(tag => tag !== tagToRemove));\r\n  };\r\n  \r\n  // Handle tag input keydown\r\n  const handleTagKeyDown = (e: React.KeyboardEvent) => {\r\n    if (e.key === 'Enter' || e.key === ',') {\r\n      e.preventDefault();\r\n      handleAddTag();\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div className={`${className} rounded-lg bg-white p-6 shadow-md`}>\r\n      <h2 className=\"mb-4 text-xl font-semibold text-gray-800\">Kennis Toevoegen</h2>\r\n      \r\n      {error && (\r\n        <AlertMessage\r\n          type=\"error\"\r\n          title=\"Fout\"\r\n          message={error}\r\n          className=\"mb-4\"\r\n        />\r\n      )}\r\n      \r\n      <form onSubmit={handleSubmit}>\r\n        {/* Content Type */}\r\n        <div className=\"mb-4\">\r\n          <label className=\"mb-1 block text-sm font-medium text-gray-700\">\r\n            Type Inhoud\r\n          </label>\r\n          <div className=\"flex space-x-4\">\r\n            <label className=\"flex items-center\">\r\n              <input\r\n                type=\"radio\"\r\n                name=\"contentType\"\r\n                value=\"article\"\r\n                checked={contentType === 'article'}\r\n                onChange={() => setContentType('article')}\r\n                className=\"h-4 w-4 text-purple-600 focus:ring-purple-500\"\r\n              />\r\n              <span className=\"ml-2 text-sm text-gray-700\">Artikel</span>\r\n            </label>\r\n            <label className=\"flex items-center\">\r\n              <input\r\n                type=\"radio\"\r\n                name=\"contentType\"\r\n                value=\"guideline\"\r\n                checked={contentType === 'guideline'}\r\n                onChange={() => setContentType('guideline')}\r\n                className=\"h-4 w-4 text-purple-600 focus:ring-purple-500\"\r\n              />\r\n              <span className=\"ml-2 text-sm text-gray-700\">Richtlijn</span>\r\n            </label>\r\n            <label className=\"flex items-center\">\r\n              <input\r\n                type=\"radio\"\r\n                name=\"contentType\"\r\n                value=\"recommendation\"\r\n                checked={contentType === 'recommendation'}\r\n                onChange={() => setContentType('recommendation')}\r\n                className=\"h-4 w-4 text-purple-600 focus:ring-purple-500\"\r\n              />\r\n              <span className=\"ml-2 text-sm text-gray-700\">Aanbeveling</span>\r\n            </label>\r\n          </div>\r\n        </div>\r\n        \r\n        {/* Title */}\r\n        <div className=\"mb-4\">\r\n          <label htmlFor=\"title\" className=\"mb-1 block text-sm font-medium text-gray-700\">\r\n            Titel\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"title\"\r\n            value={title}\r\n            onChange={(e) => setTitle(e.target.value)}\r\n            className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-purple-500 focus:ring-purple-500 sm:text-sm\"\r\n            placeholder=\"Voer een titel in\"\r\n            required\r\n          />\r\n        </div>\r\n        \r\n        {/* Content */}\r\n        <div className=\"mb-4\">\r\n          <label htmlFor=\"content\" className=\"mb-1 block text-sm font-medium text-gray-700\">\r\n            Inhoud\r\n          </label>\r\n          <textarea\r\n            id=\"content\"\r\n            value={content}\r\n            onChange={(e) => setContent(e.target.value)}\r\n            rows={6}\r\n            className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-purple-500 focus:ring-purple-500 sm:text-sm\"\r\n            placeholder=\"Voer de inhoud in\"\r\n            required\r\n          />\r\n        </div>\r\n        \r\n        {/* Tags */}\r\n        <div className=\"mb-6\">\r\n          <label htmlFor=\"tags\" className=\"mb-1 block text-sm font-medium text-gray-700\">\r\n            Tags\r\n          </label>\r\n          <div className=\"flex\">\r\n            <input\r\n              type=\"text\"\r\n              id=\"tags\"\r\n              value={tagInput}\r\n              onChange={(e) => setTagInput(e.target.value)}\r\n              onKeyDown={handleTagKeyDown}\r\n              className=\"block w-full rounded-l-md border-gray-300 shadow-sm focus:border-purple-500 focus:ring-purple-500 sm:text-sm\"\r\n              placeholder=\"Voeg tags toe (druk op Enter)\"\r\n            />\r\n            <button\r\n              type=\"button\"\r\n              onClick={handleAddTag}\r\n              className=\"inline-flex items-center rounded-r-md border border-l-0 border-gray-300 bg-gray-50 px-3 py-2 text-sm font-medium text-gray-700 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2\"\r\n            >\r\n              Toevoegen\r\n            </button>\r\n          </div>\r\n          \r\n          {/* Tag list */}\r\n          {tags.length > 0 && (\r\n            <div className=\"mt-2 flex flex-wrap gap-2\">\r\n              {tags.map(tag => (\r\n                <span\r\n                  key={tag}\r\n                  className=\"inline-flex items-center rounded-full bg-purple-100 px-2.5 py-0.5 text-xs font-medium text-purple-800\"\r\n                >\r\n                  {tag}\r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={() => handleRemoveTag(tag)}\r\n                    className=\"ml-1.5 inline-flex h-4 w-4 flex-shrink-0 items-center justify-center rounded-full text-purple-400 hover:bg-purple-200 hover:text-purple-500 focus:bg-purple-500 focus:text-white focus:outline-none\"\r\n                  >\r\n                    <span className=\"sr-only\">Verwijder tag {tag}</span>\r\n                    <svg className=\"h-2 w-2\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 8 8\">\r\n                      <path strokeLinecap=\"round\" strokeWidth=\"1.5\" d=\"M1 1l6 6m0-6L1 7\" />\r\n                    </svg>\r\n                  </button>\r\n                </span>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </div>\r\n        \r\n        {/* Submit button */}\r\n        <div className=\"flex justify-end\">\r\n          <button\r\n            type=\"submit\"\r\n            disabled={isSubmitting}\r\n            className=\"inline-flex items-center rounded-md border border-transparent bg-purple-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 disabled:opacity-50\"\r\n          >\r\n            {isSubmitting ? 'Bezig met toevoegen...' : 'Kennis Toevoegen'}\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\ai\\SpecialistIntelligenceDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AIService' is defined but never used.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":19},{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'AIService' is defined but never used.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":19,"fix":{"range":[330,381],"text":"\n"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-10, w-10' could be replaced by the 'size-10' shorthand!","line":337,"column":32,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":337,"endColumn":67,"fix":{"range":[11948,11971],"text":"size-10 flex-shrink-0"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'flex-shrink-0' should be updated to 'shrink-0' in Tailwind CSS v3!","line":337,"column":32,"nodeType":"JSXAttribute","messageId":"classnameChanged","endLine":337,"endColumn":67,"fix":{"range":[11948,11971],"text":"h-10 w-10 shrink-0"}},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":339,"column":31,"nodeType":"JSXOpeningElement","endLine":339,"endColumn":105},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-10, w-10' could be replaced by the 'size-10' shorthand!","line":339,"column":36,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":339,"endColumn":70,"fix":{"range":[12074,12096],"text":"size-10 rounded-full"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-10, w-10' could be replaced by the 'size-10' shorthand!","line":341,"column":36,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":341,"endColumn":153,"fix":{"range":[12215,12320],"text":"flex size-10 items-center justify-center rounded-full bg-purple-100 text-sm font-medium text-purple-800"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-2.5, w-2.5' could be replaced by the 'size-2.5' shorthand!","line":354,"column":32,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":357,"endColumn":30,"fix":{"range":[13052,13085],"text":"`mr-2 size-2.5 rounded-full ${"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":1,"fixableWarningCount":5,"source":"'use client';\r\n\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\nimport { AlertMessage } from '@/components/common/AlertMessage';\r\nimport { SkeletonLoader } from '@/components/ui/SkeletonLoader';\r\nimport { getSupabaseBrowserClient } from '@/lib/supabase-client';\r\nimport { AIService } from '@/utils/ai-service';\r\n\r\n// Types for the Specialist Intelligence Dashboard\r\ninterface Patient {\r\n  id: string;\r\n  voornaam: string;\r\n  achternaam: string;\r\n  email: string;\r\n  avatar_url?: string;\r\n  last_activity?: string;\r\n  risk_score?: number;\r\n}\r\n\r\ninterface SymptomPattern {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  frequency: number;\r\n  severity: number;\r\n  affected_patients: number;\r\n  trend: 'increasing' | 'decreasing' | 'stable';\r\n}\r\n\r\ninterface TreatmentAnalysis {\r\n  id: string;\r\n  treatment_name: string;\r\n  success_rate: number;\r\n  patient_count: number;\r\n  avg_improvement: number;\r\n  side_effects: string[];\r\n}\r\n\r\ninterface PredictiveAlert {\r\n  id: string;\r\n  patient_id: string;\r\n  patient_name: string;\r\n  alert_type: 'symptom_flare' | 'treatment_opportunity' | 'risk_factor';\r\n  description: string;\r\n  confidence: number;\r\n  recommended_action?: string;\r\n  urgency: 'low' | 'medium' | 'high';\r\n}\r\n\r\ninterface KnowledgeGap {\r\n  id: string;\r\n  topic: string;\r\n  description: string;\r\n  relevance_score: number;\r\n  patient_count: number;\r\n  suggested_resources?: string[];\r\n}\r\n\r\ninterface SpecialistAIDashboardData {\r\n  criticalPatients: Patient[];\r\n  trendingPatterns: SymptomPattern[];\r\n  treatmentEffectiveness: TreatmentAnalysis[];\r\n  predictiveAlerts: PredictiveAlert[];\r\n  knowledgeGaps: KnowledgeGap[];\r\n}\r\n\r\ninterface SpecialistIntelligenceDashboardProps {\r\n  className?: string;\r\n}\r\n\r\n/**\r\n * Specialist Intelligence Dashboard component\r\n * Provides AI-driven insights for specialists to better manage their patients\r\n */\r\nexport default function SpecialistIntelligenceDashboard({ \r\n  className = '' \r\n}: SpecialistIntelligenceDashboardProps): JSX.Element {\r\n  const { user } = useAuth();\r\n  const [dashboardData, setDashboardData] = useState<SpecialistAIDashboardData | null>(null);\r\n  const [isLoading, setIsLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [activeTab, setActiveTab] = useState<string>('alerts');\r\n\r\n  // Fetch dashboard data\r\n  useEffect(() => {\r\n    const fetchDashboardData = async () => {\r\n      if (!user?.id) return;\r\n      \r\n      try {\r\n        setIsLoading(true);\r\n        setError(null);\r\n        \r\n        const supabase = getSupabaseBrowserClient();\r\n        \r\n        // Check if user is a specialist\r\n        const { data: profile, error: profileError } = await supabase\r\n          .from('profiles')\r\n          .select('type')\r\n          .eq('id', user.id)\r\n          .single();\r\n        \r\n        if (profileError || !profile || profile.type !== 'specialist') {\r\n          throw new Error('Alleen specialisten hebben toegang tot dit dashboard');\r\n        }\r\n        \r\n        // In a real implementation, this would call the AI service\r\n        // For now, we'll simulate the data\r\n        \r\n        // Simulate API delay\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n        \r\n        // Simulated dashboard data\r\n        const simulatedData: SpecialistAIDashboardData = {\r\n          criticalPatients: [\r\n            {\r\n              id: '1',\r\n              voornaam: 'Emma',\r\n              achternaam: 'Jansen',\r\n              email: 'emma.jansen@example.com',\r\n              risk_score: 0.85\r\n            },\r\n            {\r\n              id: '2',\r\n              voornaam: 'Thomas',\r\n              achternaam: 'de Vries',\r\n              email: 'thomas.devries@example.com',\r\n              risk_score: 0.72\r\n            }\r\n          ],\r\n          trendingPatterns: [\r\n            {\r\n              id: '1',\r\n              name: 'Ochtendstijfheid',\r\n              description: 'Toenemende stijfheid in de ochtend, vooral in de onderrug',\r\n              frequency: 0.68,\r\n              severity: 0.75,\r\n              affected_patients: 12,\r\n              trend: 'increasing'\r\n            },\r\n            {\r\n              id: '2',\r\n              name: 'Vermoeidheid na lichte inspanning',\r\n              description: 'Extreme vermoeidheid na korte periodes van activiteit',\r\n              frequency: 0.82,\r\n              severity: 0.65,\r\n              affected_patients: 18,\r\n              trend: 'stable'\r\n            }\r\n          ],\r\n          treatmentEffectiveness: [\r\n            {\r\n              id: '1',\r\n              treatment_name: 'Dagelijkse stretching routine',\r\n              success_rate: 0.76,\r\n              patient_count: 23,\r\n              avg_improvement: 0.42,\r\n              side_effects: ['Lichte spierpijn', 'Tijdelijke toename van stijfheid']\r\n            },\r\n            {\r\n              id: '2',\r\n              treatment_name: 'Mindfulness meditatie',\r\n              success_rate: 0.68,\r\n              patient_count: 15,\r\n              avg_improvement: 0.35,\r\n              side_effects: []\r\n            }\r\n          ],\r\n          predictiveAlerts: [\r\n            {\r\n              id: '1',\r\n              patient_id: '1',\r\n              patient_name: 'Emma Jansen',\r\n              alert_type: 'symptom_flare',\r\n              description: 'Hoog risico op symptoomverergering binnen 48 uur gebaseerd op recente activiteitspatronen en weersverandering',\r\n              confidence: 0.82,\r\n              recommended_action: 'Preventieve rustperiode aanbevelen en pijnmedicatie aanpassen',\r\n              urgency: 'high'\r\n            },\r\n            {\r\n              id: '2',\r\n              patient_id: '3',\r\n              patient_name: 'Lucas Bakker',\r\n              alert_type: 'treatment_opportunity',\r\n              description: 'Gunstig moment voor het introduceren van hydrotherapie gebaseerd op recente symptoomverbetering',\r\n              confidence: 0.75,\r\n              recommended_action: 'Hydrotherapie sessies voorstellen tijdens volgende afspraak',\r\n              urgency: 'medium'\r\n            }\r\n          ],\r\n          knowledgeGaps: [\r\n            {\r\n              id: '1',\r\n              topic: 'Voedingsinterventies',\r\n              description: 'Gebrek aan specifieke informatie over anti-inflammatoire diëten voor fibromyalgie',\r\n              relevance_score: 0.78,\r\n              patient_count: 8,\r\n              suggested_resources: ['Recente studies over mediterraan dieet en chronische pijn', 'Voedingsrichtlijnen voor auto-immuunziekten']\r\n            },\r\n            {\r\n              id: '2',\r\n              topic: 'Slaapkwaliteit verbetering',\r\n              description: 'Beperkte kennis over niet-medicinale slaapinterventies',\r\n              relevance_score: 0.85,\r\n              patient_count: 14,\r\n              suggested_resources: ['CBT-I protocollen', 'Slaaphygiëne best practices']\r\n            }\r\n          ]\r\n        };\r\n        \r\n        setDashboardData(simulatedData);\r\n      } catch (err) {\r\n        console.error('Error fetching specialist dashboard data:', err);\r\n        setError(err instanceof Error ? err.message : 'Kon dashboard gegevens niet laden');\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchDashboardData();\r\n  }, [user?.id]);\r\n\r\n  // Format percentage\r\n  const formatPercentage = (value: number) => {\r\n    return `${Math.round(value * 100)}%`;\r\n  };\r\n\r\n  // Loading state\r\n  if (isLoading) {\r\n    return (\r\n      <div className={`${className} rounded-lg bg-white p-6 shadow-md`}>\r\n        <h2 className=\"mb-4 text-xl font-semibold text-gray-800\">Specialist Intelligence Dashboard</h2>\r\n        <SkeletonLoader count={5} type=\"card\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Error state\r\n  if (error) {\r\n    return (\r\n      <div className={`${className} rounded-lg bg-white p-6 shadow-md`}>\r\n        <AlertMessage\r\n          type=\"error\"\r\n          title=\"Fout bij laden dashboard\"\r\n          message={error}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // No data state\r\n  if (!dashboardData) {\r\n    return (\r\n      <div className={`${className} rounded-lg bg-white p-6 shadow-md`}>\r\n        <h2 className=\"mb-4 text-xl font-semibold text-gray-800\">Specialist Intelligence Dashboard</h2>\r\n        <p className=\"text-gray-500\">Geen gegevens beschikbaar. Probeer het later opnieuw.</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={`${className} rounded-lg bg-white p-6 shadow-md`}>\r\n      <h2 className=\"mb-6 text-xl font-semibold text-gray-800\">Specialist Intelligence Dashboard</h2>\r\n      \r\n      {/* Dashboard Tabs */}\r\n      <div className=\"mb-6 border-b border-gray-200\">\r\n        <nav className=\"-mb-px flex space-x-8\">\r\n          <button\r\n            onClick={() => setActiveTab('alerts')}\r\n            className={`whitespace-nowrap border-b-2 px-1 py-4 text-sm font-medium ${\r\n              activeTab === 'alerts'\r\n                ? 'border-purple-500 text-purple-600'\r\n                : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700'\r\n            }`}\r\n          >\r\n            Alerts & Voorspellingen\r\n          </button>\r\n          <button\r\n            onClick={() => setActiveTab('patterns')}\r\n            className={`whitespace-nowrap border-b-2 px-1 py-4 text-sm font-medium ${\r\n              activeTab === 'patterns'\r\n                ? 'border-purple-500 text-purple-600'\r\n                : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700'\r\n            }`}\r\n          >\r\n            Symptoompatronen\r\n          </button>\r\n          <button\r\n            onClick={() => setActiveTab('treatments')}\r\n            className={`whitespace-nowrap border-b-2 px-1 py-4 text-sm font-medium ${\r\n              activeTab === 'treatments'\r\n                ? 'border-purple-500 text-purple-600'\r\n                : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700'\r\n            }`}\r\n          >\r\n            Behandeleffectiviteit\r\n          </button>\r\n          <button\r\n            onClick={() => setActiveTab('knowledge')}\r\n            className={`whitespace-nowrap border-b-2 px-1 py-4 text-sm font-medium ${\r\n              activeTab === 'knowledge'\r\n                ? 'border-purple-500 text-purple-600'\r\n                : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700'\r\n            }`}\r\n          >\r\n            Kennishiaten\r\n          </button>\r\n        </nav>\r\n      </div>\r\n      \r\n      {/* Alerts & Predictions Tab */}\r\n      {activeTab === 'alerts' && (\r\n        <div>\r\n          <div className=\"mb-6\">\r\n            <h3 className=\"mb-4 text-lg font-medium text-gray-900\">Kritieke Patiënten</h3>\r\n            <div className=\"overflow-hidden rounded-lg border border-gray-200\">\r\n              <table className=\"min-w-full divide-y divide-gray-200\">\r\n                <thead className=\"bg-gray-50\">\r\n                  <tr>\r\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500\">\r\n                      Patiënt\r\n                    </th>\r\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500\">\r\n                      Risicoscore\r\n                    </th>\r\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500\">\r\n                      Actie\r\n                    </th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody className=\"divide-y divide-gray-200 bg-white\">\r\n                  {dashboardData.criticalPatients.map(patient => (\r\n                    <tr key={patient.id}>\r\n                      <td className=\"whitespace-nowrap px-6 py-4\">\r\n                        <div className=\"flex items-center\">\r\n                          <div className=\"h-10 w-10 flex-shrink-0\">\r\n                            {patient.avatar_url ? (\r\n                              <img className=\"h-10 w-10 rounded-full\" src={patient.avatar_url} alt=\"\" />\r\n                            ) : (\r\n                              <div className=\"flex h-10 w-10 items-center justify-center rounded-full bg-purple-100 text-sm font-medium text-purple-800\">\r\n                                {patient.voornaam.charAt(0)}{patient.achternaam.charAt(0)}\r\n                              </div>\r\n                            )}\r\n                          </div>\r\n                          <div className=\"ml-4\">\r\n                            <div className=\"text-sm font-medium text-gray-900\">{patient.voornaam} {patient.achternaam}</div>\r\n                            <div className=\"text-sm text-gray-500\">{patient.email}</div>\r\n                          </div>\r\n                        </div>\r\n                      </td>\r\n                      <td className=\"whitespace-nowrap px-6 py-4\">\r\n                        <div className=\"flex items-center\">\r\n                          <div className={`mr-2 h-2.5 w-2.5 rounded-full ${\r\n                            (patient.risk_score || 0) > 0.7 ? 'bg-red-500' : \r\n                            (patient.risk_score || 0) > 0.4 ? 'bg-yellow-500' : 'bg-green-500'\r\n                          }`}></div>\r\n                          <span className={`text-sm ${\r\n                            (patient.risk_score || 0) > 0.7 ? 'text-red-800' : \r\n                            (patient.risk_score || 0) > 0.4 ? 'text-yellow-800' : 'text-green-800'\r\n                          }`}>\r\n                            {formatPercentage(patient.risk_score || 0)}\r\n                          </span>\r\n                        </div>\r\n                      </td>\r\n                      <td className=\"whitespace-nowrap px-6 py-4 text-sm text-gray-500\">\r\n                        <a href={`/specialisten/patient/${patient.id}`} className=\"text-purple-600 hover:text-purple-900\">\r\n                          Details bekijken\r\n                        </a>\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n          \r\n          <div>\r\n            <h3 className=\"mb-4 text-lg font-medium text-gray-900\">Voorspellende Alerts</h3>\r\n            <div className=\"space-y-4\">\r\n              {dashboardData.predictiveAlerts.map(alert => (\r\n                <div \r\n                  key={alert.id} \r\n                  className={`rounded-lg border p-4 ${\r\n                    alert.urgency === 'high' ? 'border-red-200 bg-red-50' :\r\n                    alert.urgency === 'medium' ? 'border-yellow-200 bg-yellow-50' :\r\n                    'border-blue-200 bg-blue-50'\r\n                  }`}\r\n                >\r\n                  <div className=\"mb-2 flex items-center justify-between\">\r\n                    <h4 className=\"text-base font-medium text-gray-900\">\r\n                      {alert.patient_name} - {\r\n                        alert.alert_type === 'symptom_flare' ? 'Symptoomverergering' :\r\n                        alert.alert_type === 'treatment_opportunity' ? 'Behandelkans' :\r\n                        'Risicofactor'\r\n                      }\r\n                    </h4>\r\n                    <span className={`inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium ${\r\n                      alert.urgency === 'high' ? 'bg-red-100 text-red-800' :\r\n                      alert.urgency === 'medium' ? 'bg-yellow-100 text-yellow-800' :\r\n                      'bg-blue-100 text-blue-800'\r\n                    }`}>\r\n                      {alert.urgency === 'high' ? 'Hoge urgentie' :\r\n                       alert.urgency === 'medium' ? 'Gemiddelde urgentie' :\r\n                       'Lage urgentie'}\r\n                    </span>\r\n                  </div>\r\n                  <p className=\"mb-2 text-sm text-gray-700\">{alert.description}</p>\r\n                  {alert.recommended_action && (\r\n                    <p className=\"mb-2 text-sm font-medium text-gray-900\">\r\n                      Aanbevolen actie: {alert.recommended_action}\r\n                    </p>\r\n                  )}\r\n                  <div className=\"mt-2 flex items-center justify-between\">\r\n                    <span className=\"text-xs text-gray-500\">\r\n                      Betrouwbaarheid: {formatPercentage(alert.confidence)}\r\n                    </span>\r\n                    <a \r\n                      href={`/specialisten/patient/${alert.patient_id}`}\r\n                      className=\"text-sm font-medium text-purple-600 hover:text-purple-900\"\r\n                    >\r\n                      Patiënt bekijken\r\n                    </a>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      {/* Symptom Patterns Tab */}\r\n      {activeTab === 'patterns' && (\r\n        <div>\r\n          <h3 className=\"mb-4 text-lg font-medium text-gray-900\">Trending Symptoompatronen</h3>\r\n          <div className=\"space-y-6\">\r\n            {dashboardData.trendingPatterns.map(pattern => (\r\n              <div key={pattern.id} className=\"rounded-lg border border-gray-200 bg-white p-4 shadow-sm\">\r\n                <div className=\"mb-2 flex items-center justify-between\">\r\n                  <h4 className=\"text-base font-medium text-gray-900\">{pattern.name}</h4>\r\n                  <span className={`inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium ${\r\n                    pattern.trend === 'increasing' ? 'bg-red-100 text-red-800' :\r\n                    pattern.trend === 'decreasing' ? 'bg-green-100 text-green-800' :\r\n                    'bg-blue-100 text-blue-800'\r\n                  }`}>\r\n                    {pattern.trend === 'increasing' ? 'Toenemend' :\r\n                     pattern.trend === 'decreasing' ? 'Afnemend' :\r\n                     'Stabiel'}\r\n                  </span>\r\n                </div>\r\n                <p className=\"mb-4 text-sm text-gray-700\">{pattern.description}</p>\r\n                <div className=\"grid grid-cols-3 gap-4\">\r\n                  <div className=\"rounded-lg bg-gray-50 p-3 text-center\">\r\n                    <p className=\"text-xs text-gray-500\">Frequentie</p>\r\n                    <p className=\"text-lg font-semibold text-gray-900\">{formatPercentage(pattern.frequency)}</p>\r\n                  </div>\r\n                  <div className=\"rounded-lg bg-gray-50 p-3 text-center\">\r\n                    <p className=\"text-xs text-gray-500\">Ernst</p>\r\n                    <p className=\"text-lg font-semibold text-gray-900\">{formatPercentage(pattern.severity)}</p>\r\n                  </div>\r\n                  <div className=\"rounded-lg bg-gray-50 p-3 text-center\">\r\n                    <p className=\"text-xs text-gray-500\">Getroffen patiënten</p>\r\n                    <p className=\"text-lg font-semibold text-gray-900\">{pattern.affected_patients}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      {/* Treatment Effectiveness Tab */}\r\n      {activeTab === 'treatments' && (\r\n        <div>\r\n          <h3 className=\"mb-4 text-lg font-medium text-gray-900\">Behandeleffectiviteit</h3>\r\n          <div className=\"space-y-6\">\r\n            {dashboardData.treatmentEffectiveness.map(treatment => (\r\n              <div key={treatment.id} className=\"rounded-lg border border-gray-200 bg-white p-4 shadow-sm\">\r\n                <h4 className=\"mb-2 text-base font-medium text-gray-900\">{treatment.treatment_name}</h4>\r\n                <div className=\"mb-4 grid grid-cols-3 gap-4\">\r\n                  <div className=\"rounded-lg bg-gray-50 p-3 text-center\">\r\n                    <p className=\"text-xs text-gray-500\">Succespercentage</p>\r\n                    <p className=\"text-lg font-semibold text-gray-900\">{formatPercentage(treatment.success_rate)}</p>\r\n                  </div>\r\n                  <div className=\"rounded-lg bg-gray-50 p-3 text-center\">\r\n                    <p className=\"text-xs text-gray-500\">Aantal patiënten</p>\r\n                    <p className=\"text-lg font-semibold text-gray-900\">{treatment.patient_count}</p>\r\n                  </div>\r\n                  <div className=\"rounded-lg bg-gray-50 p-3 text-center\">\r\n                    <p className=\"text-xs text-gray-500\">Gem. verbetering</p>\r\n                    <p className=\"text-lg font-semibold text-gray-900\">{formatPercentage(treatment.avg_improvement)}</p>\r\n                  </div>\r\n                </div>\r\n                {treatment.side_effects.length > 0 && (\r\n                  <div>\r\n                    <p className=\"mb-2 text-sm font-medium text-gray-700\">Bijwerkingen:</p>\r\n                    <ul className=\"list-inside list-disc text-sm text-gray-600\">\r\n                      {treatment.side_effects.map((effect, index) => (\r\n                        <li key={index}>{effect}</li>\r\n                      ))}\r\n                    </ul>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      {/* Knowledge Gaps Tab */}\r\n      {activeTab === 'knowledge' && (\r\n        <div>\r\n          <h3 className=\"mb-4 text-lg font-medium text-gray-900\">Kennishiaten</h3>\r\n          <div className=\"space-y-6\">\r\n            {dashboardData.knowledgeGaps.map(gap => (\r\n              <div key={gap.id} className=\"rounded-lg border border-gray-200 bg-white p-4 shadow-sm\">\r\n                <div className=\"mb-2 flex items-center justify-between\">\r\n                  <h4 className=\"text-base font-medium text-gray-900\">{gap.topic}</h4>\r\n                  <span className=\"inline-flex items-center rounded-full bg-purple-100 px-2.5 py-0.5 text-xs font-medium text-purple-800\">\r\n                    Relevantie: {formatPercentage(gap.relevance_score)}\r\n                  </span>\r\n                </div>\r\n                <p className=\"mb-3 text-sm text-gray-700\">{gap.description}</p>\r\n                <p className=\"text-sm text-gray-600\">Betreft {gap.patient_count} patiënten</p>\r\n                \r\n                {gap.suggested_resources && gap.suggested_resources.length > 0 && (\r\n                  <div className=\"mt-4\">\r\n                    <p className=\"mb-2 text-sm font-medium text-gray-700\">Aanbevolen bronnen:</p>\r\n                    <ul className=\"list-inside list-disc text-sm text-gray-600\">\r\n                      {gap.suggested_resources.map((resource, index) => (\r\n                        <li key={index}>{resource}</li>\r\n                      ))}\r\n                    </ul>\r\n                  </div>\r\n                )}\r\n                \r\n                <div className=\"mt-4\">\r\n                  <a \r\n                    href=\"/specialisten/kennisbank\" \r\n                    className=\"text-sm font-medium text-purple-600 hover:text-purple-900\"\r\n                  >\r\n                    Kennisbank raadplegen\r\n                  </a>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\auth\\AuthForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\auth\\AuthProvider.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":104,"fix":{"range":[118,118],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":55,"fix":{"range":[174,174],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":66,"fix":{"range":[241,241],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":58,"fix":{"range":[300,300],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`next/navigation` import should occur before import of `@/lib/supabase-client`","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":58,"fix":{"range":[176,302],"text":"import { useRouter, usePathname } from 'next/navigation';\r\nimport { getSupabaseBrowserClient } from '@/lib/supabase-client';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/lib/monitoring/logger` import should occur before import of `@/lib/supabase-client`","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":50,"fix":{"range":[176,389],"text":"import { logger } from '@/lib/monitoring/logger';\r\nimport { getSupabaseBrowserClient } from '@/lib/supabase-client';\r\nimport { useRouter, usePathname } from 'next/navigation';\r\nimport { Profile } from '@/types';\r\n"}},{"ruleId":"no-restricted-imports","severity":2,"message":"'@/hooks/useSupabaseQuery' import is restricted from being used. Data fetching hooks (useSupabaseQuery/*) mogen niet in presentational components.","line":8,"column":1,"nodeType":"ImportDeclaration","messageId":"pathWithCustomMessage","endLine":8,"endColumn":57},{"ruleId":"import/order","severity":2,"message":"`@/hooks/useSupabaseQuery` import should occur before import of `@/lib/supabase-client`","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":57,"fix":{"range":[176,473],"text":"import { ErrorMessage } from '@/hooks/useSupabaseQuery'; // Importeer ErrorMessage\r\nimport { getSupabaseBrowserClient } from '@/lib/supabase-client';\r\nimport { useRouter, usePathname } from 'next/navigation';\r\nimport { Profile } from '@/types';\r\nimport { logger } from '@/lib/monitoring/logger';\r\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ErrorMessage' is defined but never used.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":22},{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'ErrorMessage' is defined but never used.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":22,"fix":{"range":[389,446],"text":""}},{"ruleId":"import/order","severity":2,"message":"`@/hooks/useProfile` import should occur before import of `@/lib/supabase-client`","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":49,"fix":{"range":[176,547],"text":"import { useProfile } from '@/hooks/useProfile'; // Importeer useProfile\r\nimport { getSupabaseBrowserClient } from '@/lib/supabase-client';\r\nimport { useRouter, usePathname } from 'next/navigation';\r\nimport { Profile } from '@/types';\r\nimport { logger } from '@/lib/monitoring/logger';\r\nimport { ErrorMessage } from '@/hooks/useSupabaseQuery'; // Importeer ErrorMessage\r\n"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":32,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1064,1067],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1064,1067],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":63,"column":27,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":63,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":71,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":71,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":91,"column":89,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":92,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3283,3286],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3283,3286],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":143,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":143,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5148,5151],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5148,5151],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":185,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":185,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6773,7072],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":226,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":226,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8265,8445],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":261,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":261,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9922,9925],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9922,9925],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":288,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":288,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11192,11256],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":307,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":307,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11811,11923],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":310,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":310,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11976,12205],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":325,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":325,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12486,12721],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":357,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":357,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13698,13793],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":378,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":378,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14683,14773],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":381,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":381,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14863,15029],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":388,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":388,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15222,15300],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":391,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":391,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15463,15541],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":417,"column":38,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":417,"endColumn":162,"fix":{"range":[16211,16323],"text":"fixed bottom-0 right-0 z-50 hidden max-h-48 max-w-xs overflow-auto bg-gray-800 p-2 text-xs text-white opacity-75"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":423,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":423,"endColumn":40,"fix":{"range":[16813,16825],"text":"mt-1 text-xs"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":424,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":424,"endColumn":60,"fix":{"range":[16875,16907],"text":"max-h-20 overflow-y-auto text-xs"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":434,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":434,"endColumn":98,"fix":{"range":[17307,17380],"text":"mt-1 rounded bg-blue-500 px-1 py-0.5 text-xs text-white hover:bg-blue-600"}}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":9,"fixableWarningCount":4,"source":"'use client';\r\nimport { createContext, useContext, useState, useEffect, ReactNode, useCallback, useRef } from 'react';\r\nimport { Session, User } from '@supabase/supabase-js';\r\nimport { getSupabaseBrowserClient } from '@/lib/supabase-client';\r\nimport { useRouter, usePathname } from 'next/navigation';\r\nimport { Profile } from '@/types';\r\nimport { logger } from '@/lib/monitoring/logger';\r\nimport { ErrorMessage } from '@/hooks/useSupabaseQuery'; // Importeer ErrorMessage\r\nimport { useProfile } from '@/hooks/useProfile'; // Importeer useProfile\r\n\r\n// Schema voor auth events voor diagnostiek\r\ntype AuthEventType = \r\n  | 'AUTH_INITIALIZED'\r\n  | 'SESSION_REQUESTED'\r\n  | 'SESSION_LOADED' \r\n  | 'SESSION_ERROR'\r\n  | 'SESSION_REFRESHED'\r\n  | 'SESSION_EXPIRED'\r\n  | 'TOKEN_REFRESHED'\r\n  | 'TOKEN_REFRESH_ERROR'\r\n  | 'SIGNED_IN'\r\n  | 'SIGNED_OUT'\r\n  | 'USER_UPDATED'\r\n  | 'AUTH_ERROR';\r\n\r\ninterface AuthEvent {\r\n  type: AuthEventType;\r\n  timestamp: number;\r\n  sessionId?: string | null;\r\n  userId?: string | null;\r\n  error?: string | null;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  session: Session | null;\r\n  profile: Profile | null;\r\n  loading: boolean;\r\n  loadingAuth: boolean;\r\n  loadingProfile: boolean;\r\n  authEvents: AuthEvent[]; // Diagnostiek: historiek van auth events\r\n  lastError: Error | null;\r\n  refreshSession: () => Promise<void>; // Handmatige refresh functie\r\n  lastRefreshAttempt: number | null; // Timestamp van laatste refresh poging\r\n  lastSuccessfulRefresh: number | null; // Timestamp van laatste succesvolle refresh\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType>({\r\n  user: null,\r\n  session: null,\r\n  profile: null,\r\n  loading: true,\r\n  loadingAuth: true,\r\n  loadingProfile: false,\r\n  authEvents: [],\r\n  lastError: null,\r\n  refreshSession: async () => {},\r\n  lastRefreshAttempt: null,\r\n  lastSuccessfulRefresh: null,\r\n});\r\n \r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n\r\n// Configuratie voor diagnostiek\r\nconst AUTH_DIAGNOSTICS_ENABLED = process.env.NODE_ENV === 'development' || true;\r\nconst MAX_AUTH_EVENTS = 100; // Maximum aantal events om bij te houden\r\n\r\nexport function AuthProvider({ children }: { children: ReactNode }) {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [session, setSession] = useState<Session | null>(null);\r\n  const [loadingAuth, setLoadingAuth] = useState(true);\r\n  const [lastError, setLastError] = useState<Error | null>(null);\r\n  const [authEvents, setAuthEvents] = useState<AuthEvent[]>([]);\r\n  const [lastRefreshAttempt, setLastRefreshAttempt] = useState<number | null>(null);\r\n  const [lastSuccessfulRefresh, setLastSuccessfulRefresh] = useState<number | null>(null);\r\n  const supabaseRef = useRef<ReturnType<typeof getSupabaseBrowserClient> | null>(null); // Initialize with null\r\n  const router = useRouter();\r\n  const pathname = usePathname();\r\n\r\n  useEffect(() => {\r\n    // Initialize Supabase client instance on the client side\r\n    if (typeof window !== 'undefined' && !supabaseRef.current) {\r\n      supabaseRef.current = getSupabaseBrowserClient();\r\n    }\r\n  }, []);\r\n\r\n  // Functie om auth events te loggen voor diagnostiek\r\n  const logAuthEvent = useCallback((eventType: AuthEventType, metadata?: Record<string, any>, error?: Error | null) => {\r\n    if (!AUTH_DIAGNOSTICS_ENABLED) return;\r\n    \r\n    const newEvent: AuthEvent = {\r\n      type: eventType,\r\n      timestamp: Date.now(),\r\n      sessionId: session?.user?.id || null, // Gebruik user.id voor sessie-identificatie\r\n      userId: user?.id,\r\n      error: error ? (error.message || 'Unknown error') : null,\r\n      metadata\r\n    };\r\n    \r\n    setAuthEvents(prev => {\r\n      const updated = [newEvent, ...prev].slice(0, MAX_AUTH_EVENTS);\r\n      \r\n      try {\r\n        localStorage.setItem('fibroguardian_auth_events', JSON.stringify(updated));\r\n      } catch (e) {\r\n        console.error('Failed to save auth events to localStorage', e);\r\n      }\r\n      \r\n      return updated;\r\n    });\r\n    \r\n    if (process.env.NODE_ENV === 'development') {\r\n      logger.info(`[Auth Event] ${eventType}`, { \r\n        ...newEvent, \r\n        timestamp: new Date(newEvent.timestamp).toISOString() \r\n      });\r\n    }\r\n  }, [session?.user?.id, user?.id]); // Gebruik session?.user?.id in deps\r\n\r\n  // Functie om sessie handmatig te vernieuwen\r\n  const refreshSession = useCallback(async () => {\r\n    try {\r\n      setLastRefreshAttempt(Date.now());\r\n      logAuthEvent('SESSION_REQUESTED', { manual: true });\r\n      \r\n      const supabase = supabaseRef.current;\r\n      if (!supabase) {\r\n        console.error(\"[AuthProvider] Supabase client not initialized in refreshSession.\");\r\n        logAuthEvent('AUTH_ERROR', { context: 'refreshSession', detail: 'Supabase client missing' });\r\n        return;\r\n      }\r\n      const start = performance.now();\r\n      const { data, error } = await supabase.auth.refreshSession();\r\n      const duration = performance.now() - start;\r\n      \r\n      if (error) {\r\n        setLastError(error);\r\n        logAuthEvent('TOKEN_REFRESH_ERROR', { \r\n          duration_ms: duration,\r\n          error_code: (error as any).code || 'unknown' // Cast error to any to access code\r\n        }, error);\r\n        console.error(\"[AuthProvider] Session refresh error:\", error.message, error);\r\n        \r\n        try {\r\n          const cookies = document.cookie.split(';').map(c => c.trim());\r\n          const sbCookies = cookies.filter(c => c.startsWith('sb-'));\r\n          logAuthEvent('AUTH_ERROR', { \r\n            supabase_cookies_present: sbCookies.length > 0,\r\n            cookies_count: cookies.length\r\n          }, error);\r\n        } catch (e) {\r\n          console.error(\"[AuthProvider] Error inspecting cookies:\", e);\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      if (data.session) {\r\n        setSession(data.session);\r\n        setUser(data.session.user);\r\n        setLastSuccessfulRefresh(Date.now());\r\n        logAuthEvent('TOKEN_REFRESHED', { \r\n          duration_ms: duration,\r\n          expires_at: data.session.expires_at,\r\n          access_token_length: data.session.access_token?.length || 0,\r\n          has_refresh_token: !!data.session.refresh_token\r\n        });\r\n      } else {\r\n        setSession(null);\r\n        setUser(null);\r\n        logAuthEvent('SESSION_EXPIRED', { duration_ms: duration });\r\n      }\r\n    } catch (error) {\r\n      console.error('[AuthProvider] Unexpected error during refreshSession:', error);\r\n      const err = error instanceof Error ? error : new Error(String(error));\r\n      setLastError(err);\r\n      logAuthEvent('AUTH_ERROR', { context: 'refreshSession' }, err);\r\n    }\r\n  }, [logAuthEvent]);\r\n\r\n  const handleAuthStateChange = useCallback(async (event: string, sessionState: Session | null) => {\r\n    console.log(`[AuthProvider] Auth state change: ${event}`, sessionState ? { \r\n      user_id: sessionState.user.id,\r\n      expires_at: sessionState.expires_at, \r\n      expires_in: sessionState.expires_at ? new Date(sessionState.expires_at * 1000).getTime() - Date.now() : null \r\n    } : 'No session');\r\n    \r\n    let eventType: AuthEventType;\r\n    switch (event) {\r\n      case 'SIGNED_IN':\r\n        eventType = 'SIGNED_IN';\r\n        break;\r\n      case 'SIGNED_OUT':\r\n        eventType = 'SIGNED_OUT';\r\n        break;\r\n      case 'TOKEN_REFRESHED':\r\n        eventType = 'TOKEN_REFRESHED';\r\n        setLastSuccessfulRefresh(Date.now());\r\n        break;\r\n      case 'USER_UPDATED':\r\n        eventType = 'USER_UPDATED';\r\n        break;\r\n      default:\r\n        eventType = 'SESSION_LOADED'; // Default for other events like INITIAL_SESSION, PASSWORD_RECOVERY etc.\r\n    }\r\n    \r\n    logAuthEvent(eventType, { \r\n      event_name: event,\r\n      session_expires_at: sessionState?.expires_at,\r\n      access_token_length: sessionState?.access_token?.length || 0,\r\n      has_refresh_token: !!sessionState?.refresh_token\r\n    });\r\n\r\n    setSession(sessionState);\r\n    const currentUser = sessionState?.user ?? null;\r\n    setUser(currentUser);\r\n    setLoadingAuth(false);\r\n    \r\n    if (sessionState?.expires_at) {\r\n      const expiresAt = new Date(sessionState.expires_at * 1000);\r\n      const now = new Date();\r\n      const minutesUntilExpiry = (expiresAt.getTime() - now.getTime()) / (60 * 1000);\r\n      console.log(`[AuthProvider] Session expires in ${minutesUntilExpiry.toFixed(2)} minutes`, {\r\n        now: now.toISOString(),\r\n        expires_at: expiresAt.toISOString()\r\n      });\r\n      \r\n      if (minutesUntilExpiry < 10) {\r\n        console.warn(`[AuthProvider] Session expiring soon: ${minutesUntilExpiry.toFixed(2)} minutes remaining`);\r\n      }\r\n    }\r\n  }, [logAuthEvent]);\r\n\r\n  useEffect(() => {\r\n    setLoadingAuth(true);\r\n    logAuthEvent('AUTH_INITIALIZED');\r\n    \r\n    const supabase = supabaseRef.current;\r\n    if (!supabase) {\r\n      // This might happen if the effect runs before the client initialization effect.\r\n      // However, getSession should ideally wait or be called after client is ensured.\r\n      // For now, we'll let it proceed, but this indicates a potential timing issue if supabase is null.\r\n      // The main useEffect for auth state changes will re-run once supabaseRef.current is set.\r\n      console.warn(\"[AuthProvider] Supabase client not yet initialized in auth state effect. Will retry.\");\r\n      setLoadingAuth(false); // Avoid infinite loading if client never initializes\r\n      return;\r\n    }\r\n    const initStart = performance.now();\r\n    \r\n    supabase.auth.getSession().then(({ data: { session: initialSession } , error: sessionError }) => {\r\n      const duration = performance.now() - initStart;\r\n      \r\n      if (sessionError) {\r\n        console.error(\"[AuthProvider] Error getting initial session:\", sessionError.message);\r\n        setLastError(sessionError as Error); // Cast error to Error\r\n        logAuthEvent('SESSION_ERROR', { \r\n          duration_ms: duration,\r\n          error_code: (sessionError as any).code || 'unknown'\r\n        }, sessionError as Error); // Cast error to Error\r\n        handleAuthStateChange('INITIAL_SESSION_ERROR', null);\r\n      } else if (initialSession) {\r\n        logAuthEvent('SESSION_LOADED', { \r\n          duration_ms: duration,\r\n          expires_at: initialSession.expires_at,\r\n          access_token_length: initialSession.access_token?.length || 0,\r\n          has_refresh_token: !!initialSession.refresh_token\r\n        });\r\n        handleAuthStateChange('INITIAL_SESSION_SUCCESS', initialSession);\r\n      } else {\r\n        logAuthEvent('SESSION_LOADED', { duration_ms: duration, no_session: true });\r\n        handleAuthStateChange('NO_INITIAL_SESSION', null);\r\n      }\r\n    }).catch(error => {\r\n      console.error(\"[AuthProvider] Unexpected error in getSession():\", error);\r\n      const err = error instanceof Error ? error : new Error(String(error));\r\n      setLastError(err);\r\n      logAuthEvent('AUTH_ERROR', { \r\n        context: 'getSession',\r\n        duration_ms: performance.now() - initStart\r\n      }, err);\r\n      handleAuthStateChange('INITIAL_SESSION_PROMISE_ERROR', null);\r\n    });\r\n\r\n    const { data: { subscription } } = supabase.auth.onAuthStateChange((event, sessionState) => { // Renamed session to sessionState\r\n      console.log(`[AuthProvider] Auth state change event: ${event}`);\r\n      handleAuthStateChange(event, sessionState); // Pass sessionState\r\n    });\r\n    \r\n    return () => {\r\n      subscription?.unsubscribe();\r\n    };\r\n  }, [handleAuthStateChange, logAuthEvent]);\r\n\r\n  useEffect(() => {\r\n    if (!session) return;\r\n    \r\n    const healthCheckInterval = setInterval(() => {\r\n      if (!session) return;\r\n      \r\n      const nowInSeconds = Math.floor(Date.now() / 1000);\r\n      const tokenExpiryBuffer = 10 * 60; \r\n      \r\n      if (session.expires_at && (session.expires_at - nowInSeconds < tokenExpiryBuffer)) {\r\n        console.log(`[AuthProvider] Token expiring soon, refreshing. Expires in ${session.expires_at - nowInSeconds}s`);\r\n        refreshSession();\r\n      } else {\r\n        console.log('[AuthProvider] Token health check: Token still valid', {\r\n          expires_in_seconds: session.expires_at ? session.expires_at - nowInSeconds : 'unknown',\r\n          check_time: new Date().toISOString()\r\n        });\r\n      }\r\n    }, 5 * 60 * 1000); \r\n    \r\n    return () => {\r\n      clearInterval(healthCheckInterval);\r\n    };\r\n  }, [session, refreshSession]);\r\n\r\n  useEffect(() => {\r\n    const handleStorageChange = (e: StorageEvent) => {\r\n      if (e.key && e.key.startsWith('sb-')) {\r\n        console.log(`[AuthProvider] Supabase storage changed: ${e.key}`, {\r\n          old_value_length: e.oldValue?.length || 0,\r\n          new_value_length: e.newValue?.length || 0,\r\n          changed_at: new Date().toISOString()\r\n        });\r\n        logAuthEvent('SESSION_LOADED', { // Changed 'AUTH_EVENT' to 'SESSION_LOADED'\r\n          storage_key: e.key,\r\n          has_new_value: !!e.newValue,\r\n          storage_event: true,\r\n          detail: 'Storage event detected, session might have changed in another tab.'\r\n        }, null);\r\n      }\r\n    };\r\n    \r\n    window.addEventListener('storage', handleStorageChange);\r\n    return () => window.removeEventListener('storage', handleStorageChange);\r\n  }, [logAuthEvent]);\r\n\r\n  // Importeer useProfile hook\r\n  const {\r\n    data: profile,\r\n    isLoading: loadingProfile,\r\n    error: profileError,\r\n  } = useProfile(user?.id, {\r\n    enabled: !!user,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (profileError) {\r\n      console.error('[AuthProvider] Error fetching profile:', profileError);\r\n      logAuthEvent('AUTH_ERROR', { context: 'profileFetch' }, profileError instanceof Error ? profileError : new Error(String(profileError)));\r\n    } else if (profile && user) {\r\n      console.log('[AuthProvider] Profile loaded', { user_id: user.id, profile_type: profile.type });\r\n    }\r\n  }, [profile, profileError, user, logAuthEvent]);\r\n \r\n  useEffect(() => {\r\n    if (loadingAuth) return;\r\n\r\n    const authRoutes = ['/auth/login', '/auth/register', '/auth/forgot-password']; \r\n    const isAuthRoute = authRoutes.some(route => pathname?.startsWith(route));\r\n    const commonProtectedRoutes = [\r\n      '/dashboard', '/taken', '/reflecties', '/rapporten', '/instellingen', '/inzichten', '/auth-test', '/pricing', '/abonnement'\r\n    ];\r\n    const patientOnlyRoutes = ['/mijn-specialisten', '/overzicht'];\r\n    const specialistOnlyRoutes = ['/specialisten/patienten'];\r\n\r\n    const isProtectedRoute = \r\n      commonProtectedRoutes.some(prefix => pathname?.startsWith(prefix)) ||\r\n      patientOnlyRoutes.some(prefix => pathname?.startsWith(prefix)) ||\r\n      specialistOnlyRoutes.some(prefix => pathname?.startsWith(prefix));\r\n\r\n    if (session && isAuthRoute) {\r\n      console.log('[AuthProvider] Redirecting authenticated user from auth route to dashboard');\r\n      router.push('/dashboard');\r\n    } else if (!session && isProtectedRoute) {\r\n      console.log('[AuthProvider] Redirecting unauthenticated user from protected route to login', {\r\n        path: pathname,\r\n        session_present: !!session\r\n      });\r\n      router.push('/auth/login');\r\n    } else if (session && profile) {\r\n      if (profile.type === 'patient' && specialistOnlyRoutes.some(prefix => pathname?.startsWith(prefix))) {\r\n        console.log('[AuthProvider] Patient accessing specialist route, redirecting');\r\n        router.push('/dashboard');\r\n      } else if (profile.type === 'specialist' && patientOnlyRoutes.some(prefix => pathname?.startsWith(prefix))) {\r\n        console.log('[AuthProvider] Specialist accessing patient route, redirecting');\r\n        router.push('/dashboard');\r\n      }\r\n    }\r\n  }, [session, profile, loadingAuth, router, pathname]);\r\n\r\n  const overallLoading = loadingAuth || (!!user && loadingProfile);\r\n\r\n  const authContextValue = {\r\n    user, \r\n    session, \r\n    profile: profile ?? null, \r\n    loading: overallLoading, \r\n    loadingAuth, \r\n    loadingProfile,\r\n    authEvents,\r\n    lastError,\r\n    refreshSession,\r\n    lastRefreshAttempt,\r\n    lastSuccessfulRefresh\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={authContextValue}>\r\n      {children}\r\n      {AUTH_DIAGNOSTICS_ENABLED && process.env.NODE_ENV === 'development' && (\r\n        <div id=\"auth-debug-overlay\" className=\"hidden fixed bottom-0 right-0 bg-gray-800 text-xs text-white p-2 opacity-75 max-w-xs overflow-auto max-h-48 z-50\">\r\n          <div>User: {user?.id ? user.id.substring(0, 6) + '...' : 'Not logged in'}</div>\r\n          <div>Session: {session ? 'Active' : 'None'}</div>\r\n          <div>Expires: {session?.expires_at ? new Date(session.expires_at * 1000).toLocaleTimeString() : 'N/A'}</div>\r\n          <div>Last refresh: {lastSuccessfulRefresh ? new Date(lastSuccessfulRefresh).toLocaleTimeString() : 'Never'}</div>\r\n          <div>Profile: {profile?.type || 'Not loaded'}</div>\r\n          <div className=\"text-xs mt-1\">Recent events:</div>\r\n          <div className=\"text-xs max-h-20 overflow-y-auto\">\r\n            {authEvents.slice(0, 5).map((event, i) => (\r\n              <div key={i} className=\"opacity-90\">\r\n                [{new Date(event.timestamp).toLocaleTimeString()}] {event.type} \r\n                {event.error ? ` (${event.error})` : ''}\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <button \r\n            onClick={() => refreshSession()} \r\n            className=\"mt-1 text-xs bg-blue-500 hover:bg-blue-600 text-white py-0.5 px-1 rounded\">\r\n            Refresh Session\r\n          </button>\r\n        </div>\r\n      )}\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\charts\\EnergyTrendChart.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":14,"column":1,"nodeType":"ImportDeclaration","endLine":14,"endColumn":40,"fix":{"range":[252,252],"text":"\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":33,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":33,"endColumn":41}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  TimeScale,\r\n} from 'chart.js';\r\nimport { Line } from 'react-chartjs-2'; // react-chartjs-2 na chart.js\r\nimport 'chartjs-adapter-date-fns';\r\nimport { TaskLog } from '@/types';\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  TimeScale\r\n);\r\n\r\ninterface EnergyTrendChartProps {\r\n  taskLogs: Pick<TaskLog, 'created_at' | 'energie_na' | 'energie_voor'>[]; // energie_voor is optioneel\r\n}\r\n\r\nexport default function EnergyTrendChart({ taskLogs }: EnergyTrendChartProps) {\r\n  if (!taskLogs || taskLogs.length === 0) {\r\n    return <p className=\"text-sm text-gray-500\">Geen energiedata beschikbaar voor grafiek.</p>;\r\n  }\r\n\r\n  // Filter logs met een energie_na score en sorteer op datum\r\n  const filteredLogs = taskLogs\r\n    .filter(log => log.energie_na !== null && log.energie_na !== undefined)\r\n    .sort((a, b) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime());\r\n\r\n  if (filteredLogs.length < 2) { // Minimaal 2 punten nodig voor een lijn\r\n    return <p className=\"text-sm text-gray-500\">Te weinig data voor een energietrend grafiek.</p>;\r\n  }\r\n\r\n  const datasets = [\r\n    {\r\n      label: 'Energie Na Activiteit (0-20)', // Aangepast naar 0-20 schaal\r\n      data: filteredLogs.map(log => log.energie_na),\r\n      fill: false,\r\n      borderColor: 'rgb(75, 192, 75)', // Groenachtig\r\n      tension: 0.1,\r\n    }\r\n  ];\r\n\r\n  // Optioneel: voeg energie_voor toe als een tweede lijn als die data er is\r\n  const energieVoorData = filteredLogs.filter(log => log.energie_voor !== null && log.energie_voor !== undefined);\r\n  if (energieVoorData.length >= 2) { // Alleen toevoegen als er genoeg data is voor een lijn\r\n    datasets.push({\r\n      label: 'Energie Voor Activiteit (0-20)', // Aangepast naar 0-20 schaal\r\n      data: filteredLogs.map(log => log.energie_voor), // Gebruik filteredLogs om x-as consistent te houden\r\n      fill: false,\r\n      borderColor: 'rgb(255, 159, 64)', // Oranjeachtig\r\n      tension: 0.1,\r\n      // borderDash: [5, 5], // Tijdelijk verwijderd om TS error op te lossen\r\n    });\r\n  }\r\n\r\n\r\n  const data = {\r\n    labels: filteredLogs.map(log => new Date(log.created_at)),\r\n    datasets: datasets,\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    scales: {\r\n      x: {\r\n        type: 'time' as const,\r\n        time: {\r\n          tooltipFormat: 'dd MMM yyyy HH:mm' as const,\r\n          displayFormats: { \r\n            millisecond: 'HH:mm:ss.SSS',\r\n            second: 'HH:mm:ss',\r\n            minute: 'HH:mm',\r\n            hour: 'HH:mm',\r\n            day: 'dd MMM',\r\n            week: 'll',\r\n            month: 'MMM yyyy',\r\n            quarter: 'qqq yyyy',\r\n            year: 'yyyy',\r\n          }\r\n        },\r\n        title: {\r\n          display: true,\r\n          text: 'Datum',\r\n        },\r\n      },\r\n      y: {\r\n        beginAtZero: true,\r\n        max: 20, // Aangepast naar 0-20 schaal\r\n        title: {\r\n          display: true,\r\n          text: 'Energiescore',\r\n        },\r\n      },\r\n    },\r\n    plugins: {\r\n      legend: {\r\n        position: 'top' as const,\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: 'Energie Trend over Tijd',\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div className=\"h-64 md:h-80\">\r\n      <Line data={data} options={options} />\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\charts\\FatigueTrendChart.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":14,"column":1,"nodeType":"ImportDeclaration","endLine":14,"endColumn":40,"fix":{"range":[252,252],"text":"\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":33,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":33,"endColumn":42}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  TimeScale,\r\n} from 'chart.js';\r\nimport { Line } from 'react-chartjs-2'; // react-chartjs-2 na chart.js\r\nimport 'chartjs-adapter-date-fns';\r\nimport { TaskLog } from '@/types';\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  TimeScale\r\n);\r\n\r\ninterface FatigueTrendChartProps {\r\n  taskLogs: Pick<TaskLog, 'created_at' | 'vermoeidheid_score'>[];\r\n}\r\n\r\nexport default function FatigueTrendChart({ taskLogs }: FatigueTrendChartProps) {\r\n  if (!taskLogs || taskLogs.length === 0) {\r\n    return <p className=\"text-sm text-gray-500\">Geen vermoeidheidsscore data beschikbaar voor grafiek.</p>;\r\n  }\r\n\r\n  const filteredLogs = taskLogs\r\n    .filter(log => log.vermoeidheid_score !== null && log.vermoeidheid_score !== undefined)\r\n    .sort((a, b) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime());\r\n\r\n  if (filteredLogs.length < 2) {\r\n    return <p className=\"text-sm text-gray-500\">Te weinig data voor een vermoeidheidstrend grafiek.</p>;\r\n  }\r\n\r\n  const data = {\r\n    labels: filteredLogs.map(log => new Date(log.created_at)),\r\n    datasets: [\r\n      {\r\n        label: 'Vermoeidheidsscore (0-20)', // Aangepast label\r\n        data: filteredLogs.map(log => log.vermoeidheid_score),\r\n        fill: false,\r\n        borderColor: 'rgb(75, 192, 192)', // Teal achtig\r\n        tension: 0.1,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    scales: {\r\n      x: {\r\n        type: 'time' as const,\r\n        time: {\r\n          // unit: 'day' as const, // Tijdelijk verwijderd om auto-detectie te testen\r\n          tooltipFormat: 'dd MMM yyyy HH:mm' as const,\r\n          displayFormats: { // Zorg dat deze overeenkomen met wat je wilt zien\r\n            millisecond: 'HH:mm:ss.SSS',\r\n            second: 'HH:mm:ss',\r\n            minute: 'HH:mm',\r\n            hour: 'HH:mm',\r\n            day: 'dd MMM',\r\n            week: 'll',\r\n            month: 'MMM yyyy',\r\n            quarter: 'qqq yyyy',\r\n            year: 'yyyy',\r\n          }\r\n        },\r\n        title: {\r\n          display: true,\r\n          text: 'Datum',\r\n        },\r\n      },\r\n      y: {\r\n        beginAtZero: true,\r\n        max: 20, // Aangepast voor Borgschaal of andere 0-20 schaal\r\n        title: {\r\n          display: true,\r\n          text: 'Vermoeidheidsscore',\r\n        },\r\n      },\r\n    },\r\n    plugins: {\r\n      legend: {\r\n        position: 'top' as const,\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: 'Vermoeidheid Trend over Tijd',\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div className=\"h-64 md:h-80\">\r\n      <Line data={data} options={options} />\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\charts\\HeartRateTrendChart.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":14,"column":1,"nodeType":"ImportDeclaration","endLine":14,"endColumn":40,"fix":{"range":[252,252],"text":"\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":33,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":33,"endColumn":44}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  TimeScale,\r\n} from 'chart.js';\r\nimport { Line } from 'react-chartjs-2'; // react-chartjs-2 na chart.js\r\nimport 'chartjs-adapter-date-fns';\r\nimport { TaskLog } from '@/types';\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  TimeScale\r\n);\r\n\r\ninterface HeartRateTrendChartProps {\r\n  taskLogs: Pick<TaskLog, 'created_at' | 'hartslag'>[];\r\n}\r\n\r\nexport default function HeartRateTrendChart({ taskLogs }: HeartRateTrendChartProps) {\r\n  if (!taskLogs || taskLogs.length === 0) {\r\n    return <p className=\"text-sm text-gray-500\">Geen hartslagdata beschikbaar voor grafiek.</p>;\r\n  }\r\n\r\n  const filteredLogs = taskLogs\r\n    .filter(log => log.hartslag !== null && log.hartslag !== undefined)\r\n    .sort((a, b) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime());\r\n\r\n  if (filteredLogs.length < 2) {\r\n    return <p className=\"text-sm text-gray-500\">Te weinig data voor een hartslagtrend grafiek.</p>;\r\n  }\r\n\r\n  const data = {\r\n    labels: filteredLogs.map(log => new Date(log.created_at)),\r\n    datasets: [\r\n      {\r\n        label: 'Hartslag (bpm)',\r\n        data: filteredLogs.map(log => log.hartslag),\r\n        fill: false,\r\n        borderColor: 'rgb(255, 99, 132)', // Roodachtig\r\n        tension: 0.1,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    scales: {\r\n      x: {\r\n        type: 'time' as const,\r\n        time: {\r\n          tooltipFormat: 'dd MMM yyyy HH:mm' as const,\r\n          displayFormats: { \r\n            millisecond: 'HH:mm:ss.SSS',\r\n            second: 'HH:mm:ss',\r\n            minute: 'HH:mm',\r\n            hour: 'HH:mm',\r\n            day: 'dd MMM',\r\n            week: 'll',\r\n            month: 'MMM yyyy',\r\n            quarter: 'qqq yyyy',\r\n            year: 'yyyy',\r\n          }\r\n        },\r\n        title: {\r\n          display: true,\r\n          text: 'Datum',\r\n        },\r\n      },\r\n      y: {\r\n        beginAtZero: false, // Hartslag begint meestal niet bij 0\r\n        // Geen max, laat Chart.js dit bepalen\r\n        title: {\r\n          display: true,\r\n          text: 'Hartslag (bpm)',\r\n        },\r\n      },\r\n    },\r\n    plugins: {\r\n      legend: {\r\n        position: 'top' as const,\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: 'Hartslag Trend over Tijd',\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div className=\"h-64 md:h-80\">\r\n      <Line data={data} options={options} />\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\charts\\PainTrendChart.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":14,"column":1,"nodeType":"ImportDeclaration","endLine":14,"endColumn":40,"fix":{"range":[253,253],"text":"\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":33,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":33,"endColumn":39}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  TimeScale, \r\n} from 'chart.js';\r\nimport { Line } from 'react-chartjs-2'; // react-chartjs-2 na chart.js\r\nimport 'chartjs-adapter-date-fns'; \r\nimport { TaskLog } from '@/types';\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  TimeScale // Register TimeScale\r\n);\r\n\r\ninterface PainTrendChartProps {\r\n  taskLogs: Pick<TaskLog, 'created_at' | 'pijn_score'>[];\r\n}\r\n\r\nexport default function PainTrendChart({ taskLogs }: PainTrendChartProps) {\r\n  if (!taskLogs || taskLogs.length === 0) {\r\n    return <p className=\"text-sm text-gray-500\">Geen pijnscore data beschikbaar voor grafiek.</p>;\r\n  }\r\n\r\n  // Filter logs met een pijnscore en sorteer op datum\r\n  const filteredLogs = taskLogs\r\n    .filter(log => log.pijn_score !== null && log.pijn_score !== undefined)\r\n    .sort((a, b) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime());\r\n\r\n  if (filteredLogs.length < 2) { // Minimaal 2 punten nodig voor een lijn\r\n    return <p className=\"text-sm text-gray-500\">Te weinig data voor een pijntrend grafiek.</p>;\r\n  }\r\n\r\n  const data = {\r\n    labels: filteredLogs.map(log => new Date(log.created_at)), // Gebruik Date objecten voor labels\r\n    datasets: [\r\n      {\r\n        label: 'Pijnscore (0-20)', // Aangepast label\r\n        data: filteredLogs.map(log => log.pijn_score),\r\n        fill: false,\r\n        borderColor: 'rgb(192, 75, 192)', // Paarsachtig\r\n        tension: 0.1,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    scales: {\r\n      x: {\r\n        type: 'time' as const,\r\n        time: {\r\n          // unit: 'day' as const, // Tijdelijk verwijderd om auto-detectie te testen\r\n          tooltipFormat: 'dd MMM yyyy HH:mm' as const, \r\n          displayFormats: { // Zorg dat deze overeenkomen met wat je wilt zien\r\n            millisecond: 'HH:mm:ss.SSS',\r\n            second: 'HH:mm:ss',\r\n            minute: 'HH:mm',\r\n            hour: 'HH:mm',\r\n            day: 'dd MMM',\r\n            week: 'll',\r\n            month: 'MMM yyyy',\r\n            quarter: 'qqq yyyy',\r\n            year: 'yyyy',\r\n          }\r\n        },\r\n        title: {\r\n          display: true,\r\n          text: 'Datum',\r\n        },\r\n      },\r\n      y: {\r\n        beginAtZero: true,\r\n        max: 20, // Aangepast voor Borgschaal of andere 0-20 schaal\r\n        title: {\r\n          display: true,\r\n          text: 'Pijnscore',\r\n        },\r\n      },\r\n    },\r\n    plugins: {\r\n      legend: {\r\n        position: 'top' as const,\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: 'Pijntrend over Tijd',\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div className=\"h-64 md:h-80\"> {/* Geef de grafiek een vaste hoogte */}\r\n      <Line data={data} options={options} />\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\charts\\ProgressVisualization.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":52,"fix":{"range":[68,68],"text":"\n"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":351,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":351,"endColumn":65,"fix":{"range":[12766,12805],"text":"flex h-full items-center justify-center"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":352,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":352,"endColumn":68,"fix":{"range":[12835,12875],"text":"flex animate-pulse flex-col items-center"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":353,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":353,"endColumn":71,"fix":{"range":[12907,12948],"text":"mb-2 h-12 w-12 rounded-full bg-purple-200"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'w-12, h-12' could be replaced by the 'size-12' shorthand!","line":353,"column":18,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":353,"endColumn":71,"fix":{"range":[12907,12948],"text":"size-12 bg-purple-200 rounded-full mb-2"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":354,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":354,"endColumn":65,"fix":{"range":[12986,13021],"text":"mb-2 h-4 w-24 rounded bg-purple-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":355,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":355,"endColumn":60,"fix":{"range":[13059,13089],"text":"h-3 w-16 rounded bg-purple-100"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":363,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":363,"endColumn":65,"fix":{"range":[13214,13253],"text":"flex h-full items-center justify-center"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":364,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":364,"endColumn":52,"fix":{"range":[13283,13307],"text":"text-center text-red-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":368,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":368,"endColumn":92,"fix":{"range":[13460,13525],"text":"rounded-md bg-purple-600 px-4 py-2 text-white hover:bg-purple-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":379,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":379,"endColumn":65,"fix":{"range":[13724,13763],"text":"flex h-full items-center justify-center"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":380,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":380,"endColumn":53,"fix":{"range":[13793,13818],"text":"text-center text-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":464,"column":10,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":464,"endColumn":70,"fix":{"range":[16974,17011],"text":"`rounded-xl bg-white p-6 shadow-lg ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":465,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":465,"endColumn":98,"fix":{"range":[17048,17122],"text":"mb-6 flex flex-col items-start justify-between md:flex-row md:items-center"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":466,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":466,"endColumn":73,"fix":{"range":[17149,17197],"text":"mb-2 text-xl font-semibold text-gray-800 md:mb-0"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":478,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":478,"endColumn":135,"fix":{"range":[17665,17773],"text":"rounded-md border border-gray-300 bg-white px-3 py-1.5 text-sm focus:border-purple-500 focus:ring-purple-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":490,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":490,"endColumn":135,"fix":{"range":[18245,18353],"text":"rounded-md border border-gray-300 bg-white px-3 py-1.5 text-sm focus:border-purple-500 focus:ring-purple-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":502,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":502,"endColumn":135,"fix":{"range":[18822,18930],"text":"rounded-md border border-gray-300 bg-white px-3 py-1.5 text-sm focus:border-purple-500 focus:ring-purple-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":518,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":522,"endColumn":12,"fix":{"range":[19404,19427],"text":"`mt-4 rounded-lg p-3 ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":525,"column":20,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":525,"endColumn":44,"fix":{"range":[19727,19739],"text":"mr-2 h-5 w-5"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'w-5, h-5' could be replaced by the 'size-5' shorthand!","line":525,"column":20,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":525,"endColumn":44,"fix":{"range":[19727,19739],"text":"size-5 mr-2"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":530,"column":20,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":530,"endColumn":44,"fix":{"range":[20063,20075],"text":"mr-2 h-5 w-5"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'w-5, h-5' could be replaced by the 'size-5' shorthand!","line":530,"column":20,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":530,"endColumn":44,"fix":{"range":[20063,20075],"text":"size-5 mr-2"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":535,"column":20,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":535,"endColumn":44,"fix":{"range":[20397,20409],"text":"mr-2 h-5 w-5"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'w-5, h-5' could be replaced by the 'size-5' shorthand!","line":535,"column":20,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":535,"endColumn":44,"fix":{"range":[20397,20409],"text":"size-5 mr-2"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":1,"fixableWarningCount":24,"source":"'use client';\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { \r\n  LineChart, \r\n  Line, \r\n  XAxis, \r\n  YAxis, \r\n  CartesianGrid, \r\n  Tooltip, \r\n  Legend, \r\n  ResponsiveContainer,\r\n  AreaChart,\r\n  Area,\r\n  BarChart,\r\n  Bar\r\n} from 'recharts';\r\n\r\n\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\nimport { getSupabaseBrowserClient } from '@/lib/supabase-client';\r\n\r\ntype ChartType = 'line' | 'area' | 'bar';\r\ntype TimeRange = 'week' | 'month' | 'quarter' | 'year';\r\ntype MetricType = 'pain' | 'fatigue' | 'mood' | 'tasks';\r\n\r\ninterface ProgressVisualizationProps {\r\n  className?: string;\r\n  defaultMetric?: MetricType;\r\n  defaultTimeRange?: TimeRange;\r\n  defaultChartType?: ChartType;\r\n  showControls?: boolean;\r\n  height?: number;\r\n}\r\n\r\nexport const ProgressVisualization: React.FC<ProgressVisualizationProps> = ({\r\n  className = '',\r\n  defaultMetric = 'pain',\r\n  defaultTimeRange = 'month',\r\n  defaultChartType = 'line',\r\n  showControls = true,\r\n  height = 300\r\n}) => {\r\n  const { user } = useAuth();\r\n  const [chartType, setChartType] = useState<ChartType>(defaultChartType);\r\n  const [timeRange, setTimeRange] = useState<TimeRange>(defaultTimeRange);\r\n  const [metric, setMetric] = useState<MetricType>(defaultMetric);\r\n  const [data, setData] = useState<Array<{\r\n    date: string;\r\n    value: number;\r\n    timestamp: number;\r\n    mood?: string;\r\n    completed?: number;\r\n    total?: number;\r\n  }>>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [trend, setTrend] = useState<'improving' | 'worsening' | 'stable' | null>(null);\r\n  const [averageValue, setAverageValue] = useState<number | null>(null);\r\n  \r\n  // Fetch data based on selected metric and time range\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      if (!user) return;\r\n      \r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      try {\r\n        const supabase = getSupabaseBrowserClient();\r\n        const now = new Date();\r\n        const startDate = new Date();\r\n        \r\n        // Calculate start date based on time range\r\n        switch (timeRange) {\r\n          case 'week':\r\n            startDate.setDate(now.getDate() - 7);\r\n            break;\r\n          case 'month':\r\n            startDate.setMonth(now.getMonth() - 1);\r\n            break;\r\n          case 'quarter':\r\n            startDate.setMonth(now.getMonth() - 3);\r\n            break;\r\n          case 'year':\r\n            startDate.setFullYear(now.getFullYear() - 1);\r\n            break;\r\n        }\r\n        \r\n        let result;\r\n        \r\n        // Fetch data based on metric type\r\n        if (metric === 'pain' || metric === 'fatigue') {\r\n          const scoreField = metric === 'pain' ? 'pijn_score' : 'vermoeidheid_score';\r\n          \r\n          // Fetch from reflecties table\r\n          const { data: reflectieData, error: reflectieError } = await supabase\r\n            .from('reflecties')\r\n            .select(`datum, ${scoreField}`)\r\n            .eq('user_id', user.id)\r\n            .gte('datum', startDate.toISOString())\r\n            .lte('datum', now.toISOString())\r\n            .order('datum', { ascending: true });\r\n          \r\n          if (reflectieError) {\r\n            throw reflectieError;\r\n          }\r\n          \r\n          // Transform data for chart\r\n          result = reflectieData\r\n            .filter(item => item[scoreField as keyof typeof item] !== null)\r\n            .map(item => ({\r\n              date: new Date(item.datum).toLocaleDateString(),\r\n              value: item[scoreField as keyof typeof item] as number,\r\n              timestamp: new Date(item.datum).getTime()\r\n            }));\r\n          \r\n          // Calculate trend\r\n          if (result.length >= 2) {\r\n            const firstValues = result.slice(0, Math.ceil(result.length / 3)).map(item => item.value);\r\n            const lastValues = result.slice(-Math.ceil(result.length / 3)).map(item => item.value);\r\n            \r\n            const firstAvg = firstValues.reduce((sum, val) => sum + val, 0) / firstValues.length;\r\n            const lastAvg = lastValues.reduce((sum, val) => sum + val, 0) / lastValues.length;\r\n            \r\n            const diff = lastAvg - firstAvg;\r\n            const threshold = 1.5; // Threshold for determining significant change\r\n            \r\n            if (Math.abs(diff) < threshold) {\r\n              setTrend('stable');\r\n            } else if ((metric === 'pain' || metric === 'fatigue') && diff > 0) {\r\n              setTrend('worsening');\r\n            } else if ((metric === 'pain' || metric === 'fatigue') && diff < 0) {\r\n              setTrend('improving');\r\n            }\r\n            \r\n            // Calculate average\r\n            const allValues = result.map(item => item.value);\r\n            setAverageValue(allValues.reduce((sum, val) => sum + val, 0) / allValues.length);\r\n          }\r\n        } else if (metric === 'mood') {\r\n          // Fetch mood data from reflecties\r\n          const { data: moodData, error: moodError } = await supabase\r\n            .from('reflecties')\r\n            .select('datum, stemming')\r\n            .eq('user_id', user.id)\r\n            .gte('datum', startDate.toISOString())\r\n            .lte('datum', now.toISOString())\r\n            .order('datum', { ascending: true });\r\n          \r\n          if (moodError) {\r\n            throw moodError;\r\n          }\r\n          \r\n          // Map mood strings to numeric values for visualization\r\n          const moodMap: Record<string, number> = {\r\n            'zeer slecht': 1,\r\n            'slecht': 2,\r\n            'matig': 3,\r\n            'redelijk': 4,\r\n            'goed': 5,\r\n            'zeer goed': 6\r\n          };\r\n          \r\n          // Transform data for chart\r\n          result = moodData\r\n            .filter(item => item.stemming && moodMap[item.stemming.toLowerCase()])\r\n            .map(item => ({\r\n              date: new Date(item.datum).toLocaleDateString(),\r\n              value: moodMap[item.stemming.toLowerCase()] || 3,\r\n              mood: item.stemming,\r\n              timestamp: new Date(item.datum).getTime()\r\n            }));\r\n          \r\n          // Calculate trend for mood (higher is better)\r\n          if (result.length >= 2) {\r\n            const firstValues = result.slice(0, Math.ceil(result.length / 3)).map(item => item.value);\r\n            const lastValues = result.slice(-Math.ceil(result.length / 3)).map(item => item.value);\r\n            \r\n            const firstAvg = firstValues.reduce((sum, val) => sum + val, 0) / firstValues.length;\r\n            const lastAvg = lastValues.reduce((sum, val) => sum + val, 0) / lastValues.length;\r\n            \r\n            const diff = lastAvg - firstAvg;\r\n            const threshold = 0.5; // Threshold for determining significant change\r\n            \r\n            if (Math.abs(diff) < threshold) {\r\n              setTrend('stable');\r\n            } else if (diff > 0) {\r\n              setTrend('improving');\r\n            } else {\r\n              setTrend('worsening');\r\n            }\r\n            \r\n            // Calculate average\r\n            const allValues = result.map(item => item.value);\r\n            setAverageValue(allValues.reduce((sum, val) => sum + val, 0) / allValues.length);\r\n          }\r\n        } else if (metric === 'tasks') {\r\n          // Fetch task completion data\r\n          const { data: taskData, error: taskError } = await supabase\r\n            .from('task_logs')\r\n            .select('created_at, status')\r\n            .eq('user_id', user.id)\r\n            .gte('created_at', startDate.toISOString())\r\n            .lte('created_at', now.toISOString())\r\n            .order('created_at', { ascending: true });\r\n          \r\n          if (taskError) {\r\n            throw taskError;\r\n          }\r\n          \r\n          // Group tasks by date and calculate completion rate\r\n          const tasksByDate: Record<string, { completed: number, total: number }> = {};\r\n          \r\n          taskData.forEach(task => {\r\n            const date = new Date(task.created_at).toLocaleDateString();\r\n            \r\n            if (!tasksByDate[date]) {\r\n              tasksByDate[date] = { completed: 0, total: 0 };\r\n            }\r\n            \r\n            tasksByDate[date].total++;\r\n            \r\n            if (task.status === 'completed') {\r\n              tasksByDate[date].completed++;\r\n            }\r\n          });\r\n          \r\n          // Transform data for chart\r\n          result = Object.entries(tasksByDate).map(([date, stats]) => ({\r\n            date,\r\n            value: stats.total > 0 ? (stats.completed / stats.total) * 100 : 0,\r\n            completed: stats.completed,\r\n            total: stats.total,\r\n            timestamp: new Date(date).getTime()\r\n          }));\r\n          \r\n          // Calculate trend for task completion (higher is better)\r\n          if (result.length >= 2) {\r\n            const firstValues = result.slice(0, Math.ceil(result.length / 3)).map(item => item.value);\r\n            const lastValues = result.slice(-Math.ceil(result.length / 3)).map(item => item.value);\r\n            \r\n            const firstAvg = firstValues.reduce((sum, val) => sum + val, 0) / firstValues.length;\r\n            const lastAvg = lastValues.reduce((sum, val) => sum + val, 0) / lastValues.length;\r\n            \r\n            const diff = lastAvg - firstAvg;\r\n            const threshold = 5; // Threshold for determining significant change in percentage\r\n            \r\n            if (Math.abs(diff) < threshold) {\r\n              setTrend('stable');\r\n            } else if (diff > 0) {\r\n              setTrend('improving');\r\n            } else {\r\n              setTrend('worsening');\r\n            }\r\n            \r\n            // Calculate average\r\n            const allValues = result.map(item => item.value);\r\n            setAverageValue(allValues.reduce((sum, val) => sum + val, 0) / allValues.length);\r\n          }\r\n        }\r\n        \r\n        // Sort data by timestamp\r\n        if (result && result.length > 0) {\r\n          result.sort((a, b) => a.timestamp - b.timestamp);\r\n          setData(result);\r\n        } else {\r\n          setData([]);\r\n        }\r\n      } catch (err) {\r\n        console.error('Error fetching data:', err);\r\n        setError('Er is een fout opgetreden bij het ophalen van de gegevens.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchData();\r\n  }, [user, metric, timeRange]);\r\n  \r\n  // Get chart color based on metric\r\n  const getChartColor = () => {\r\n    switch (metric) {\r\n      case 'pain':\r\n        return '#ef4444'; // Red\r\n      case 'fatigue':\r\n        return '#f97316'; // Orange\r\n      case 'mood':\r\n        return '#3b82f6'; // Blue\r\n      case 'tasks':\r\n        return '#10b981'; // Green\r\n      default:\r\n        return '#8b5cf6'; // Purple\r\n    }\r\n  };\r\n  \r\n  // Get chart label based on metric\r\n  const getChartLabel = () => {\r\n    switch (metric) {\r\n      case 'pain':\r\n        return 'Pijnscore';\r\n      case 'fatigue':\r\n        return 'Vermoeidheid';\r\n      case 'mood':\r\n        return 'Stemming';\r\n      case 'tasks':\r\n        return 'Taakvoltooing (%)';\r\n      default:\r\n        return 'Waarde';\r\n    }\r\n  };\r\n  \r\n  // Get trend message based on trend and metric\r\n  const getTrendMessage = () => {\r\n    if (!trend) return null;\r\n    \r\n    switch (metric) {\r\n      case 'pain':\r\n        return trend === 'improving' \r\n          ? 'Uw pijnscores vertonen een dalende trend. Goed bezig!' \r\n          : trend === 'worsening' \r\n            ? 'Uw pijnscores vertonen een stijgende trend. Bespreek dit met uw zorgverlener.' \r\n            : 'Uw pijnscores zijn stabiel.';\r\n      case 'fatigue':\r\n        return trend === 'improving' \r\n          ? 'Uw vermoeidheidsscores vertonen een dalende trend. Goed bezig!' \r\n          : trend === 'worsening' \r\n            ? 'Uw vermoeidheidsscores vertonen een stijgende trend. Bespreek dit met uw zorgverlener.' \r\n            : 'Uw vermoeidheidsscores zijn stabiel.';\r\n      case 'mood':\r\n        return trend === 'improving' \r\n          ? 'Uw stemming vertoont een positieve trend. Goed bezig!' \r\n          : trend === 'worsening' \r\n            ? 'Uw stemming vertoont een negatieve trend. Bespreek dit met uw zorgverlener.' \r\n            : 'Uw stemming is stabiel.';\r\n      case 'tasks':\r\n        return trend === 'improving' \r\n          ? 'Uw taakvoltooing vertoont een stijgende trend. Goed bezig!' \r\n          : trend === 'worsening' \r\n            ? 'Uw taakvoltooing vertoont een dalende trend. Probeer kleinere taken te plannen.' \r\n            : 'Uw taakvoltooing is stabiel.';\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n  \r\n  // Render chart based on chart type\r\n  const renderChart = () => {\r\n    if (loading) {\r\n      return (\r\n        <div className=\"flex items-center justify-center h-full\">\r\n          <div className=\"animate-pulse flex flex-col items-center\">\r\n            <div className=\"w-12 h-12 bg-purple-200 rounded-full mb-2\"></div>\r\n            <div className=\"h-4 w-24 bg-purple-200 rounded mb-2\"></div>\r\n            <div className=\"h-3 w-16 bg-purple-100 rounded\"></div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    \r\n    if (error) {\r\n      return (\r\n        <div className=\"flex items-center justify-center h-full\">\r\n          <div className=\"text-red-500 text-center\">\r\n            <p className=\"mb-2\">{error}</p>\r\n            <button \r\n              onClick={() => window.location.reload()} \r\n              className=\"px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700\"\r\n            >\r\n              Probeer opnieuw\r\n            </button>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    \r\n    if (data.length === 0) {\r\n      return (\r\n        <div className=\"flex items-center justify-center h-full\">\r\n          <div className=\"text-gray-500 text-center\">\r\n            <p className=\"mb-2\">Geen gegevens beschikbaar voor deze periode.</p>\r\n            <p className=\"text-sm\">Probeer een andere periode of metriek.</p>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    \r\n    const color = getChartColor();\r\n    const label = getChartLabel();\r\n    \r\n    switch (chartType) {\r\n      case 'line':\r\n        return (\r\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n            <LineChart data={data} margin={{ top: 5, right: 20, bottom: 5, left: 0 }}>\r\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e5e7eb\" />\r\n              <XAxis dataKey=\"date\" stroke=\"#6b7280\" />\r\n              <YAxis stroke=\"#6b7280\" />\r\n              <Tooltip \r\n                contentStyle={{ backgroundColor: 'white', borderRadius: '0.375rem', boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)' }}\r\n                formatter={(value) => [value, label]}\r\n              />\r\n              <Legend />\r\n              <Line \r\n                type=\"monotone\" \r\n                dataKey=\"value\" \r\n                name={label} \r\n                stroke={color} \r\n                strokeWidth={2} \r\n                dot={{ r: 4, strokeWidth: 1 }} \r\n                activeDot={{ r: 6 }} \r\n              />\r\n            </LineChart>\r\n          </ResponsiveContainer>\r\n        );\r\n      \r\n      case 'area':\r\n        return (\r\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n            <AreaChart data={data} margin={{ top: 5, right: 20, bottom: 5, left: 0 }}>\r\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e5e7eb\" />\r\n              <XAxis dataKey=\"date\" stroke=\"#6b7280\" />\r\n              <YAxis stroke=\"#6b7280\" />\r\n              <Tooltip \r\n                contentStyle={{ backgroundColor: 'white', borderRadius: '0.375rem', boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)' }}\r\n                formatter={(value) => [value, label]}\r\n              />\r\n              <Legend />\r\n              <Area \r\n                type=\"monotone\" \r\n                dataKey=\"value\" \r\n                name={label} \r\n                stroke={color} \r\n                fill={`${color}33`} // Add transparency to fill color\r\n                strokeWidth={2} \r\n              />\r\n            </AreaChart>\r\n          </ResponsiveContainer>\r\n        );\r\n      \r\n      case 'bar':\r\n        return (\r\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n            <BarChart data={data} margin={{ top: 5, right: 20, bottom: 5, left: 0 }}>\r\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e5e7eb\" />\r\n              <XAxis dataKey=\"date\" stroke=\"#6b7280\" />\r\n              <YAxis stroke=\"#6b7280\" />\r\n              <Tooltip \r\n                contentStyle={{ backgroundColor: 'white', borderRadius: '0.375rem', boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)' }}\r\n                formatter={(value) => [value, label]}\r\n              />\r\n              <Legend />\r\n              <Bar dataKey=\"value\" name={label} fill={color} radius={[4, 4, 0, 0]} />\r\n            </BarChart>\r\n          </ResponsiveContainer>\r\n        );\r\n      \r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div className={`bg-white rounded-xl shadow-lg p-6 ${className}`}>\r\n      <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center mb-6\">\r\n        <h2 className=\"text-xl font-semibold text-gray-800 mb-2 md:mb-0\">\r\n          {metric === 'pain' && 'Pijnverloop'}\r\n          {metric === 'fatigue' && 'Vermoeidheidsverloop'}\r\n          {metric === 'mood' && 'Stemmingsverloop'}\r\n          {metric === 'tasks' && 'Taakvoltooing'}\r\n        </h2>\r\n        \r\n        {showControls && (\r\n          <div className=\"flex flex-wrap gap-2\">\r\n            <select\r\n              value={metric}\r\n              onChange={(e) => setMetric(e.target.value as MetricType)}\r\n              className=\"px-3 py-1.5 bg-white border border-gray-300 rounded-md text-sm focus:ring-purple-500 focus:border-purple-500\"\r\n              aria-label=\"Selecteer metriek\"\r\n            >\r\n              <option value=\"pain\">Pijn</option>\r\n              <option value=\"fatigue\">Vermoeidheid</option>\r\n              <option value=\"mood\">Stemming</option>\r\n              <option value=\"tasks\">Taken</option>\r\n            </select>\r\n            \r\n            <select\r\n              value={timeRange}\r\n              onChange={(e) => setTimeRange(e.target.value as TimeRange)}\r\n              className=\"px-3 py-1.5 bg-white border border-gray-300 rounded-md text-sm focus:ring-purple-500 focus:border-purple-500\"\r\n              aria-label=\"Selecteer tijdsperiode\"\r\n            >\r\n              <option value=\"week\">Week</option>\r\n              <option value=\"month\">Maand</option>\r\n              <option value=\"quarter\">Kwartaal</option>\r\n              <option value=\"year\">Jaar</option>\r\n            </select>\r\n            \r\n            <select\r\n              value={chartType}\r\n              onChange={(e) => setChartType(e.target.value as ChartType)}\r\n              className=\"px-3 py-1.5 bg-white border border-gray-300 rounded-md text-sm focus:ring-purple-500 focus:border-purple-500\"\r\n              aria-label=\"Selecteer grafiektype\"\r\n            >\r\n              <option value=\"line\">Lijn</option>\r\n              <option value=\"area\">Gebied</option>\r\n              <option value=\"bar\">Staaf</option>\r\n            </select>\r\n          </div>\r\n        )}\r\n      </div>\r\n      \r\n      <div style={{ height: `${height}px` }} className=\"mb-4\">\r\n        {renderChart()}\r\n      </div>\r\n      \r\n      {trend && averageValue !== null && (\r\n        <div className={`mt-4 p-3 rounded-lg ${\r\n          trend === 'improving' ? 'bg-green-50 text-green-700' :\r\n          trend === 'worsening' ? 'bg-red-50 text-red-700' :\r\n          'bg-blue-50 text-blue-700'\r\n        }`}>\r\n          <div className=\"flex items-center\">\r\n            {trend === 'improving' && (\r\n              <svg className=\"w-5 h-5 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M5 10l7-7m0 0l7 7m-7-7v18\"></path>\r\n              </svg>\r\n            )}\r\n            {trend === 'worsening' && (\r\n              <svg className=\"w-5 h-5 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M19 14l-7 7m0 0l-7-7m7 7V3\"></path>\r\n              </svg>\r\n            )}\r\n            {trend === 'stable' && (\r\n              <svg className=\"w-5 h-5 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M5 12h14\"></path>\r\n              </svg>\r\n            )}\r\n            <p>{getTrendMessage()}</p>\r\n          </div>\r\n          <p className=\"mt-1 text-sm\">\r\n            Gemiddelde {getChartLabel().toLowerCase()}: {metric === 'tasks' ? `${averageValue.toFixed(1)}%` : averageValue.toFixed(1)}\r\n          </p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProgressVisualization;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\common\\AlertMessage.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":11,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":11,"endColumn":29},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":25,"column":14,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":25,"endColumn":46,"fix":{"range":[569,589],"text":"size-5 text-red-400"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":36,"column":14,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":36,"endColumn":48,"fix":{"range":[1170,1192],"text":"size-5 text-green-400"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":47,"column":14,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":47,"endColumn":49,"fix":{"range":[1672,1695],"text":"size-5 text-yellow-400"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":58,"column":14,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":58,"endColumn":47,"fix":{"range":[2238,2259],"text":"size-5 text-blue-400"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":70,"column":10,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":70,"endColumn":86,"fix":{"range":[2654,2679],"text":"`rounded-md border p-4 ${"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'flex-shrink-0' should be updated to 'shrink-0' in Tailwind CSS v3!","line":72,"column":14,"nodeType":"JSXAttribute","messageId":"classnameChanged","endLine":72,"endColumn":39,"fix":{"range":[2776,2789],"text":"shrink-0"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames '-mx-1.5, -my-1.5' could be replaced by the '-m-1.5' shorthand!","line":83,"column":18,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":83,"endColumn":45,"fix":{"range":[3193,3208],"text":"-m-1.5"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":86,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":92,"endColumn":29,"fix":{"range":[3469,3542],"text":"text-red-500 hover:bg-red-100 focus:ring-red-600 focus:ring-offset-red-50"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":86,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":92,"endColumn":29,"fix":{"range":[3603,3684],"text":"text-green-500 hover:bg-green-100 focus:ring-green-600 focus:ring-offset-green-50"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":86,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":92,"endColumn":29,"fix":{"range":[3745,3830],"text":"text-yellow-500 hover:bg-yellow-100 focus:ring-yellow-600 focus:ring-offset-yellow-50"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":86,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":92,"endColumn":29,"fix":{"range":[3888,3965],"text":"text-blue-500 hover:bg-blue-100 focus:ring-blue-600 focus:ring-offset-blue-50"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":97,"column":22,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":97,"endColumn":41,"fix":{"range":[4186,4193],"text":"size-5"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":12,"source":"import { ReactNode } from 'react';\r\n\r\ninterface AlertMessageProps {\r\n  type: 'error' | 'success' | 'warning' | 'info';\r\n  title?: string;\r\n  message: string | ReactNode;\r\n  onDismiss?: () => void;\r\n  className?: string;\r\n}\r\n\r\nexport function AlertMessage({ \r\n  type, \r\n  title, \r\n  message, \r\n  onDismiss, \r\n  className = '' \r\n}: AlertMessageProps) {\r\n  const styles = {\r\n    error: {\r\n      bg: 'bg-red-50',\r\n      border: 'border-red-200',\r\n      text: 'text-red-700',\r\n      titleColor: 'text-red-800', // Renamed for clarity\r\n      icon: (\r\n        <svg className=\"h-5 w-5 text-red-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\r\n          <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\r\n        </svg>\r\n      )\r\n    },\r\n    success: {\r\n      bg: 'bg-green-50',\r\n      border: 'border-green-200',\r\n      text: 'text-green-700',\r\n      titleColor: 'text-green-800', // Renamed for clarity\r\n      icon: (\r\n        <svg className=\"h-5 w-5 text-green-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\r\n          <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\r\n        </svg>\r\n      )\r\n    },\r\n    warning: {\r\n      bg: 'bg-yellow-50',\r\n      border: 'border-yellow-200',\r\n      text: 'text-yellow-700',\r\n      titleColor: 'text-yellow-800',\r\n      icon: (\r\n        <svg className=\"h-5 w-5 text-yellow-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\r\n          <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.33-.25 3.03-1.742 3.03H4.42c-1.492 0-2.492-1.7-1.742-3.03l5.58-9.92zM10 13a1 1 0 110-2 1 1 0 010 2zm-1-3a1 1 0 011-1h.01a1 1 0 110 2H10a1 1 0 01-1-1z\" clipRule=\"evenodd\" />\r\n        </svg>\r\n      )\r\n    },\r\n    info: {\r\n      bg: 'bg-blue-50',\r\n      border: 'border-blue-200',\r\n      text: 'text-blue-700',\r\n      titleColor: 'text-blue-800',\r\n      icon: (\r\n        <svg className=\"h-5 w-5 text-blue-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\r\n          <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clipRule=\"evenodd\" />\r\n        </svg>\r\n      )\r\n    }\r\n  };\r\n  \r\n  const style = styles[type];\r\n  \r\n  if (!message) return null;\r\n\r\n  return (\r\n    <div className={`p-4 rounded-md border ${style.bg} ${style.border} ${className}`}>\r\n      <div className=\"flex\">\r\n        <div className=\"flex-shrink-0\">\r\n          {style.icon}\r\n        </div>\r\n        <div className=\"ml-3 flex-1\">\r\n          {title && <h3 className={`text-sm font-medium ${style.titleColor}`}>{title}</h3>}\r\n          <div className={`text-sm ${style.text} ${title ? 'mt-1' : ''}`}>\r\n            {message}\r\n          </div>\r\n        </div>\r\n        {onDismiss && (\r\n          <div className=\"ml-auto pl-3\">\r\n            <div className=\"-mx-1.5 -my-1.5\">\r\n              <button\r\n                type=\"button\"\r\n                className={`inline-flex rounded-md p-1.5 focus:outline-none focus:ring-2 focus:ring-offset-2 \r\n                            ${style.bg} \r\n                            ${type === 'error' ? 'text-red-500 hover:bg-red-100 focus:ring-offset-red-50 focus:ring-red-600' : ''}\r\n                            ${type === 'success' ? 'text-green-500 hover:bg-green-100 focus:ring-offset-green-50 focus:ring-green-600' : ''}\r\n                            ${type === 'warning' ? 'text-yellow-500 hover:bg-yellow-100 focus:ring-offset-yellow-50 focus:ring-yellow-600' : ''}\r\n                            ${type === 'info' ? 'text-blue-500 hover:bg-blue-100 focus:ring-offset-blue-50 focus:ring-blue-600' : ''}\r\n                          `}\r\n                onClick={onDismiss}\r\n                aria-label=\"Sluiten\"\r\n              >\r\n                <span className=\"sr-only\">Sluiten</span>\r\n                <svg className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\r\n                  <path fillRule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\r\n                </svg>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\common\\ErrorBoundary.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":64,"fix":{"range":[63,63],"text":"\n"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":125,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":125,"endColumn":82,"fix":{"range":[3349,3405],"text":"rounded border border-red-300 bg-red-50 p-4 text-red-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":126,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":126,"endColumn":53,"fix":{"range":[3434,3460],"text":"mb-2 text-lg font-semibold"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":134,"column":20,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":134,"endColumn":81,"fix":{"range":[3950,3999],"text":"mt-2 overflow-auto rounded bg-red-100 p-2 text-xs"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":1,"fixableWarningCount":3,"source":"import React, { Component, ErrorInfo, ReactNode } from 'react';\r\nimport { logger } from '@/lib/monitoring/logger';\r\n\r\ninterface ErrorBoundaryProps {\r\n  children: ReactNode;\r\n  fallback?: ReactNode | ((error: Error, errorInfo: ErrorInfo) => ReactNode);\r\n  onError?: (error: Error, errorInfo: ErrorInfo) => void;\r\n  resetOnPropsChange?: boolean;\r\n}\r\n\r\ninterface ErrorBoundaryState {\r\n  hasError: boolean;\r\n  error: Error | null;\r\n  errorInfo: ErrorInfo | null;\r\n}\r\n\r\n/**\r\n * ErrorBoundary component to catch JavaScript errors anywhere in the child component tree\r\n * and display a fallback UI instead of crashing the whole app\r\n * \r\n * Features:\r\n * - Custom fallback UI (component or render function)\r\n * - Error logging\r\n * - Optional error callback\r\n * - Reset on props change option\r\n * \r\n * @example\r\n * // Basic usage\r\n * <ErrorBoundary>\r\n *   <MyComponent />\r\n * </ErrorBoundary>\r\n * \r\n * @example\r\n * // With custom fallback\r\n * <ErrorBoundary fallback={<p>Something went wrong</p>}>\r\n *   <MyComponent />\r\n * </ErrorBoundary>\r\n * \r\n * @example\r\n * // With render function fallback\r\n * <ErrorBoundary \r\n *   fallback={(error, errorInfo) => (\r\n *     <div>\r\n *       <h2>Something went wrong</h2>\r\n *       <details>\r\n *         <summary>Error details</summary>\r\n *         <p>{error.toString()}</p>\r\n *         <p>{errorInfo.componentStack}</p>\r\n *       </details>\r\n *     </div>\r\n *   )}\r\n * >\r\n *   <MyComponent />\r\n * </ErrorBoundary>\r\n */\r\nexport class ErrorBoundary extends Component<ErrorBoundaryProps, ErrorBoundaryState> {\r\n  constructor(props: ErrorBoundaryProps) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false,\r\n      error: null,\r\n      errorInfo: null\r\n    };\r\n  }\r\n\r\n  static getDerivedStateFromError(error: Error): Partial<ErrorBoundaryState> {\r\n    // Update state so the next render will show the fallback UI\r\n    return {\r\n      hasError: true,\r\n      error\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error: Error, errorInfo: ErrorInfo): void {\r\n    // Log the error\r\n    logger.error('Error caught by ErrorBoundary:', {\r\n      error: error.toString(),\r\n      componentStack: errorInfo.componentStack,\r\n      errorInfo\r\n    });\r\n\r\n    // Update state with error info\r\n    this.setState({\r\n      errorInfo\r\n    });\r\n\r\n    // Call the onError callback if provided\r\n    if (this.props.onError) {\r\n      this.props.onError(error, errorInfo);\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps: ErrorBoundaryProps): void {\r\n    // Reset the error state if props changed and resetOnPropsChange is true\r\n    if (\r\n      this.state.hasError &&\r\n      this.props.resetOnPropsChange &&\r\n      prevProps !== this.props\r\n    ) {\r\n      this.setState({\r\n        hasError: false,\r\n        error: null,\r\n        errorInfo: null\r\n      });\r\n    }\r\n  }\r\n\r\n  render(): ReactNode {\r\n    const { hasError, error, errorInfo } = this.state;\r\n    const { children, fallback } = this.props;\r\n\r\n    if (hasError && error) {\r\n      // If a fallback is provided, use it\r\n      if (fallback) {\r\n        // If fallback is a function, call it with the error and errorInfo\r\n        if (typeof fallback === 'function') {\r\n          return fallback(error, errorInfo as ErrorInfo);\r\n        }\r\n        // Otherwise, render the fallback component\r\n        return fallback;\r\n      }\r\n\r\n      // Default fallback UI\r\n      return (\r\n        <div className=\"p-4 border border-red-300 rounded bg-red-50 text-red-800\">\r\n          <h2 className=\"text-lg font-semibold mb-2\">Er is iets misgegaan</h2>\r\n          <p className=\"mb-4\">\r\n            Er is een fout opgetreden bij het weergeven van deze component. \r\n            Probeer de pagina te vernieuwen of neem contact op met ondersteuning als het probleem aanhoudt.\r\n          </p>\r\n          {process.env.NODE_ENV === 'development' && (\r\n            <details className=\"mt-2\">\r\n              <summary className=\"cursor-pointer text-sm font-medium\">Technische details</summary>\r\n              <pre className=\"mt-2 p-2 bg-red-100 rounded text-xs overflow-auto\">\r\n                {error.toString()}\r\n                {errorInfo && errorInfo.componentStack}\r\n              </pre>\r\n            </details>\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    // If there's no error, render the children\r\n    return children;\r\n  }\r\n}\r\n\r\n/**\r\n * Higher-order component that wraps a component with an ErrorBoundary\r\n * \r\n * @param Component The component to wrap\r\n * @param errorBoundaryProps Props for the ErrorBoundary\r\n * @returns The wrapped component\r\n * \r\n * @example\r\n * const SafeComponent = withErrorBoundary(MyComponent, {\r\n *   fallback: <p>Something went wrong</p>\r\n * });\r\n */\r\nexport function withErrorBoundary<P extends object>(\r\n  Component: React.ComponentType<P>,\r\n  errorBoundaryProps: Omit<ErrorBoundaryProps, 'children'> = {}\r\n): React.FC<P> {\r\n  const displayName = Component.displayName || Component.name || 'Component';\r\n  \r\n  const WrappedComponent: React.FC<P> = (props) => (\r\n    <ErrorBoundary {...errorBoundaryProps}>\r\n      <Component {...props} />\r\n    </ErrorBoundary>\r\n  );\r\n  \r\n  WrappedComponent.displayName = `withErrorBoundary(${displayName})`;\r\n  \r\n  return WrappedComponent;\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\common\\LazyImage.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":53,"fix":{"range":[52,52],"text":"\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":28,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":28,"endColumn":34},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":138,"column":11,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":138,"endColumn":62,"fix":{"range":[3994,4033],"text":"h-full w-full animate-pulse bg-gray-200"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'w-full, h-full' could be replaced by the 'size-full' shorthand!","line":138,"column":11,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":138,"endColumn":62,"fix":{"range":[3994,4033],"text":"size-full bg-gray-200 animate-pulse"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":1,"fixableWarningCount":2,"source":"import { useState, useEffect, useRef } from 'react';\r\nimport Image, { ImageProps } from 'next/image';\r\nimport { useInView } from 'react-intersection-observer';\r\n\r\ninterface LazyImageProps extends Omit<ImageProps, 'src' | 'onLoad'> {\r\n  src: string;\r\n  lowQualitySrc?: string;\r\n  fallbackSrc?: string;\r\n  threshold?: number;\r\n  loadingComponent?: React.ReactNode;\r\n  onLoad?: () => void;\r\n  onError?: () => void;\r\n}\r\n\r\n/**\r\n * LazyImage component that implements progressive loading and lazy loading\r\n *\r\n * Features:\r\n * - Lazy loading using Intersection Observer\r\n * - Progressive loading with low quality image placeholder\r\n * - Fallback image for error handling\r\n * - Customizable loading component\r\n * - Accessibility support\r\n *\r\n * @param props Component properties\r\n * @returns LazyImage component\r\n */\r\nexport default function LazyImage({\r\n  src,\r\n  lowQualitySrc,\r\n  fallbackSrc = '/icons/fallback-image.svg',\r\n  alt,\r\n  width,\r\n  height,\r\n  threshold = 0.1,\r\n  loadingComponent,\r\n  onLoad,\r\n  onError,\r\n  ...props\r\n}: LazyImageProps) {\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [imgSrc, setImgSrc] = useState(lowQualitySrc || src);\r\n  const [hasError, setHasError] = useState(false);\r\n  const { ref, inView } = useInView({\r\n    threshold,\r\n    triggerOnce: true,\r\n  });\r\n\r\n  // Handle image loading when in view\r\n  useEffect(() => {\r\n    if (!inView || isLoaded) return;\r\n\r\n    // If we don't have a low quality src or already using the main src, no need to preload\r\n    if (!lowQualitySrc || imgSrc === src) return;\r\n\r\n    const img = new window.Image();\r\n    img.src = src;\r\n\r\n    img.onload = () => {\r\n      setImgSrc(src);\r\n      setIsLoaded(true);\r\n      if (onLoad) onLoad();\r\n    };\r\n\r\n    img.onerror = () => {\r\n      setImgSrc(fallbackSrc);\r\n      setHasError(true);\r\n      if (onError) onError();\r\n    };\r\n  }, [inView, isLoaded, imgSrc, lowQualitySrc, src, fallbackSrc, onLoad, onError]);\r\n\r\n  // Handle direct loading without low quality image\r\n  const handleImageLoad = () => {\r\n    setIsLoaded(true);\r\n    if (onLoad) onLoad();\r\n  };\r\n\r\n  // Handle image error\r\n  const handleImageError = () => {\r\n    if (!hasError) {\r\n      setImgSrc(fallbackSrc);\r\n      setHasError(true);\r\n      if (onError) onError();\r\n    }\r\n  };\r\n\r\n  // Use the CSS class defined in globals.css\r\n  const dimensionClasses = `${props.className || ''}`;\r\n  \r\n  // Create a ref to store the div element\r\n  const divRef = useRef<HTMLDivElement>(null);\r\n  \r\n  // Set CSS variables using CSS custom properties\r\n  useEffect(() => {\r\n    if (divRef.current) {\r\n      divRef.current.style.setProperty('--img-width', typeof width === 'number' ? `${width}px` : width as string);\r\n      divRef.current.style.setProperty('--img-height', typeof height === 'number' ? `${height}px` : height as string);\r\n    }\r\n  }, [width, height]);\r\n\r\n  return (\r\n    <div\r\n      ref={(node) => {\r\n        // This handles both the IntersectionObserver ref and our local ref\r\n        if (typeof ref === 'function') ref(node);\r\n        // Safe way to set the ref without modifying read-only property\r\n        if (node && divRef.current !== node) {\r\n          // Using a non-direct assignment approach\r\n          Object.defineProperty(divRef, 'current', {\r\n            value: node,\r\n            writable: true\r\n          });\r\n        }\r\n      }}\r\n      className={`lazy-image-container relative ${dimensionClasses}`}\r\n    >\r\n      {!isLoaded && loadingComponent && (\r\n        <div className=\"absolute inset-0 flex items-center justify-center\">\r\n          {loadingComponent}\r\n        </div>\r\n      )}\r\n\r\n      {inView && (\r\n        <Image\r\n          src={imgSrc}\r\n          alt={alt}\r\n          width={width}\r\n          height={height}\r\n          onLoad={handleImageLoad}\r\n          onError={handleImageError}\r\n          className={`transition-opacity duration-300 ${isLoaded ? 'opacity-100' : 'opacity-0'}`}\r\n          {...props}\r\n        />\r\n      )}\r\n\r\n      {!inView && (\r\n        <div\r\n          className=\"w-full h-full bg-gray-200 animate-pulse\"\r\n          aria-label={`Loading image: ${alt}`}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\common\\OfflineIndicator.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":13,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":13,"endColumn":41},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":40,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":40,"endColumn":104,"fix":{"range":[1053,1133],"text":"flex items-center rounded-lg border border-yellow-200 bg-yellow-50 p-3 shadow-lg"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":41,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":41,"endColumn":44,"fix":{"range":[1161,1179],"text":"mr-3 flex-shrink-0"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'flex-shrink-0' should be updated to 'shrink-0' in Tailwind CSS v3!","line":41,"column":14,"nodeType":"JSXAttribute","messageId":"classnameChanged","endLine":41,"endColumn":44,"fix":{"range":[1161,1179],"text":"shrink-0 mr-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":42,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":42,"endColumn":76,"fix":{"range":[1209,1257],"text":"h-3 w-3 animate-pulse rounded-full bg-yellow-500"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'w-3, h-3' could be replaced by the 'size-3' shorthand!","line":42,"column":16,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":42,"endColumn":76,"fix":{"range":[1209,1257],"text":"size-3 bg-yellow-500 rounded-full animate-pulse"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'flex-grow' should be updated to 'grow' in Tailwind CSS v3!","line":44,"column":14,"nodeType":"JSXAttribute","messageId":"classnameChanged","endLine":44,"endColumn":35,"fix":{"range":[1307,1316],"text":"grow"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":45,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":45,"endColumn":61,"fix":{"range":[1344,1379],"text":"text-sm font-medium text-yellow-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":54,"column":11,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":54,"endColumn":121,"fix":{"range":[1634,1732],"text":"ml-3 rounded bg-yellow-100 px-2 py-1 text-xs text-yellow-800 transition-colors hover:bg-yellow-200"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":8,"source":"'use client';\r\n\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nimport Link from 'next/link';\r\n\r\nimport { isOnline } from '@/utils/service-worker';\r\n\r\ninterface OfflineIndicatorProps {\r\n  className?: string;\r\n}\r\n\r\nexport default function OfflineIndicator({ className = '' }: OfflineIndicatorProps) {\r\n  const [offline, setOffline] = useState(false);\r\n  \r\n  useEffect(() => {\r\n    // Set initial state\r\n    setOffline(!isOnline());\r\n    \r\n    // Listen for online/offline events\r\n    const handleOnline = () => setOffline(false);\r\n    const handleOffline = () => setOffline(true);\r\n    \r\n    window.addEventListener('online', handleOnline);\r\n    window.addEventListener('offline', handleOffline);\r\n    \r\n    // Clean up event listeners\r\n    return () => {\r\n      window.removeEventListener('online', handleOnline);\r\n      window.removeEventListener('offline', handleOffline);\r\n    };\r\n  }, []);\r\n  \r\n  if (!offline) {\r\n    return null;\r\n  }\r\n  \r\n  return (\r\n    <div className={`fixed bottom-4 right-4 z-50 ${className}`}>\r\n      <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg shadow-lg p-3 flex items-center\">\r\n        <div className=\"flex-shrink-0 mr-3\">\r\n          <div className=\"w-3 h-3 bg-yellow-500 rounded-full animate-pulse\"></div>\r\n        </div>\r\n        <div className=\"flex-grow\">\r\n          <p className=\"text-sm text-yellow-700 font-medium\">\r\n            Offline modus\r\n          </p>\r\n          <p className=\"text-xs text-yellow-600\">\r\n            Sommige functies zijn beperkt beschikbaar\r\n          </p>\r\n        </div>\r\n        <Link \r\n          href=\"/offline/help\" \r\n          className=\"ml-3 px-2 py-1 text-xs bg-yellow-100 hover:bg-yellow-200 text-yellow-800 rounded transition-colors\"\r\n        >\r\n          Meer info\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\common\\ServiceWorkerInitializer.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":8,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":8,"endColumn":49}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useEffect } from 'react';\r\n\r\nimport { useNotification } from '@/context/NotificationContext';\r\nimport { initializeOfflineSupport, isOnline } from '@/utils/service-worker';\r\n\r\nexport default function ServiceWorkerInitializer() {\r\n  const { addNotification } = useNotification();\r\n  \r\n  useEffect(() => {\r\n    // Initialize service worker\r\n    initializeOfflineSupport().catch(error => {\r\n      console.error('Failed to initialize service worker:', error);\r\n    });\r\n    \r\n    // Listen for online/offline events\r\n    const handleOnline = () => {\r\n      addNotification({\r\n        type: 'success',\r\n        message: 'Online: U bent weer online. Uw gegevens worden gesynchroniseerd.',\r\n        duration: 5000\r\n      });\r\n    };\r\n    \r\n    const handleOffline = () => {\r\n      addNotification({\r\n        type: 'warning',\r\n        message: 'Offline: U bent offline. Sommige functies zijn nog steeds beschikbaar.',\r\n        duration: 5000\r\n      });\r\n    };\r\n    \r\n    // Add event listeners\r\n    window.addEventListener('online', handleOnline);\r\n    window.addEventListener('offline', handleOffline);\r\n    \r\n    // Show initial status notification if offline\r\n    if (!isOnline()) {\r\n      addNotification({\r\n        type: 'warning',\r\n        message: 'Offline: U bent offline. Sommige functies zijn nog steeds beschikbaar.',\r\n        duration: 5000\r\n      });\r\n    }\r\n    \r\n    // Listen for service worker update events\r\n    const handleServiceWorkerUpdate = (event: CustomEvent) => {\r\n      const registration = event.detail;\r\n      \r\n      addNotification({\r\n        type: 'info',\r\n        message: 'Update beschikbaar: Er is een nieuwe versie van de app beschikbaar. Vernieuw de pagina om de update te installeren.',\r\n        duration: 0, // Don't auto-dismiss\r\n        action: {\r\n          label: 'Vernieuwen',\r\n          onClick: () => {\r\n            if (registration && registration.waiting) {\r\n              registration.waiting.postMessage({ type: 'SKIP_WAITING' });\r\n            } else {\r\n              window.location.reload();\r\n            }\r\n          }\r\n        }\r\n      });\r\n    };\r\n    \r\n    window.addEventListener('serviceWorkerUpdateReady', handleServiceWorkerUpdate as EventListener);\r\n    \r\n    // Clean up event listeners\r\n    return () => {\r\n      window.removeEventListener('online', handleOnline);\r\n      window.removeEventListener('offline', handleOffline);\r\n      window.removeEventListener('serviceWorkerUpdateReady', handleServiceWorkerUpdate as EventListener);\r\n    };\r\n  }, [addNotification]);\r\n  \r\n  // This component doesn't render anything\r\n  return null;\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\common\\SkeletonLoader.tsx","messages":[{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":26,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":26,"endColumn":134,"fix":{"range":[771,808],"text":"`animate-pulse rounded bg-gray-200 ${"}},{"ruleId":"tailwindcss/no-custom-classname","severity":1,"message":"Classname '10' is not a Tailwind CSS class!","line":37,"column":13,"nodeType":"JSXAttribute","messageId":"customClassnameDetected","endLine":37,"endColumn":139},{"ruleId":"tailwindcss/no-custom-classname","severity":1,"message":"Classname 'w-' is not a Tailwind CSS class!","line":37,"column":13,"nodeType":"JSXAttribute","messageId":"customClassnameDetected","endLine":37,"endColumn":139},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":37,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":37,"endColumn":139,"fix":{"range":[1173,1215],"text":"`animate-pulse rounded-full bg-gray-200 ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":46,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":46,"endColumn":100,"fix":{"range":[1517,1561],"text":"`w-full animate-pulse rounded bg-gray-200 ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":54,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":54,"endColumn":75,"fix":{"range":[1867,1912],"text":"mb-1 h-10 animate-pulse rounded-t bg-gray-300"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":58,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":58,"endColumn":72,"fix":{"range":[2070,2113],"text":"mb-1 h-12 animate-pulse rounded bg-gray-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":66,"column":28,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":66,"endColumn":120,"fix":{"range":[2342,2411],"text":"`flex animate-pulse items-center space-x-3 rounded bg-gray-100 p-2 ${"}},{"ruleId":"tailwindcss/no-custom-classname","severity":1,"message":"Classname '10' is not a Tailwind CSS class!","line":67,"column":18,"nodeType":"JSXAttribute","messageId":"customClassnameDetected","endLine":67,"endColumn":117},{"ruleId":"tailwindcss/no-custom-classname","severity":1,"message":"Classname 'w-' is not a Tailwind CSS class!","line":67,"column":18,"nodeType":"JSXAttribute","messageId":"customClassnameDetected","endLine":67,"endColumn":117},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":69,"column":20,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":69,"endColumn":61,"fix":{"range":[2634,2663],"text":"h-3 w-3/4 rounded bg-gray-300"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":70,"column":20,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":70,"endColumn":61,"fix":{"range":[2703,2732],"text":"h-3 w-5/6 rounded bg-gray-300"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":79,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":79,"endColumn":96,"fix":{"range":[2911,2951],"text":"`animate-pulse rounded-lg bg-gray-200 ${"}},{"ruleId":"import/no-named-as-default-member","severity":1,"message":"Caution: `React` also has a named export `memo`. Check if you meant to write `import {memo} from 'react'` instead.","line":95,"column":16,"nodeType":"MemberExpression","endLine":95,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":9,"source":"import React from 'react';\r\n\r\ninterface SkeletonProps {\r\n  type: 'card' | 'text' | 'avatar' | 'table' | 'chart' | 'listitem'; // Added listitem\r\n  count?: number;\r\n  className?: string;\r\n  textLines?: number; // For multi-line text skeleton\r\n  height?: string; // For custom height, e.g., 'h-8'\r\n}\r\n\r\nconst SkeletonLoader: React.FC<SkeletonProps> = ({ \r\n  type, \r\n  count = 1, \r\n  className = '',\r\n  textLines = 3,\r\n  height \r\n}) => {\r\n  const renderSkeleton = (index: number) => {\r\n    switch (type) {\r\n      case 'text':\r\n        return (\r\n          <div key={index} className={`space-y-2 ${className}`}>\r\n            {Array.from({ length: textLines }).map((_, lineIndex) => (\r\n              <div \r\n                key={`line-${lineIndex}`}\r\n                className={`bg-gray-200 rounded animate-pulse ${height || 'h-4'} ${lineIndex === textLines -1 ? 'w-3/4' : 'w-full'}`}\r\n                style={{ animationDelay: `${index * 0.05 + lineIndex * 0.05}s` }}\r\n                aria-hidden=\"true\"\r\n              ></div>\r\n            ))}\r\n          </div>\r\n        );\r\n      case 'avatar':\r\n        return (\r\n          <div \r\n            key={index}\r\n            className={`rounded-full bg-gray-200 animate-pulse ${height || 'h-10'} w-${height ? height.substring(2) : '10'} ${className}`}\r\n            style={{ animationDelay: `${index * 0.05}s` }}\r\n            aria-hidden=\"true\"\r\n          ></div>\r\n        );\r\n      case 'chart':\r\n        return (\r\n          <div \r\n            key={index}\r\n            className={`w-full bg-gray-200 rounded animate-pulse ${height || 'h-64'} ${className}`}\r\n            style={{ animationDelay: `${index * 0.05}s` }}\r\n            aria-hidden=\"true\"\r\n          ></div>\r\n        );\r\n      case 'table':\r\n        return (\r\n          <div key={index} className={`w-full ${className}`} aria-hidden=\"true\">\r\n            <div className=\"h-10 bg-gray-300 rounded-t animate-pulse mb-1\"></div> {/* Darker header */}\r\n            {[...Array(5)].map((_, i) => (\r\n              <div \r\n                key={`row-${i}`}\r\n                className=\"h-12 bg-gray-200 rounded mb-1 animate-pulse\" // Lighter rows\r\n                style={{ animationDelay: `${i * 0.08}s` }}\r\n              ></div>\r\n            ))}\r\n          </div>\r\n        );\r\n      case 'listitem':\r\n        return (\r\n          <div key={index} className={`flex items-center space-x-3 p-2 bg-gray-100 rounded animate-pulse ${className}`}>\r\n            <div className={`rounded-full bg-gray-300 ${height || 'h-10'} w-${height ? height.substring(2) : '10'}`}></div>\r\n            <div className=\"flex-1 space-y-2 py-1\">\r\n              <div className=\"h-3 bg-gray-300 rounded w-3/4\"></div>\r\n              <div className=\"h-3 bg-gray-300 rounded w-5/6\"></div>\r\n            </div>\r\n          </div>\r\n        );\r\n      case 'card':\r\n      default:\r\n        return (\r\n          <div \r\n            key={index}\r\n            className={`bg-gray-200 rounded-lg animate-pulse ${height || 'h-32'} ${className}`}\r\n            style={{ animationDelay: `${index * 0.05}s` }}\r\n            aria-hidden=\"true\"\r\n          ></div>\r\n        );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-3\" role=\"status\" aria-live=\"polite\">\r\n      <span className=\"sr-only\">Laden...</span> {/* Changed to Dutch */}\r\n      {Array.from({ length: count }).map((_, index) => renderSkeleton(index))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(SkeletonLoader);","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\common\\SkipLink.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":1,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":1,"endColumn":33},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":5,"column":7,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":5,"endColumn":203,"fix":{"range":[103,287],"text":"sr-only z-50 rounded-md bg-purple-600 p-2 text-white focus:not-sr-only focus:absolute focus:left-4 focus:top-4 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"export default function SkipLink() {\r\n  return (\r\n    <a\r\n      href=\"#main-content\"\r\n      className=\"sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-purple-600 text-white p-2 z-50 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500\"\r\n    >\r\n      Ga naar hoofdinhoud\r\n    </a>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\dashboard\\AIInsightsPresentational.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":27,"fix":{"range":[159,159],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":30,"fix":{"range":[190,190],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/types` import should occur after import of `@/lib/error-handler`","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":44,"fix":{"range":[192,500],"text":"import AIInsightVisualization from '@/components/ai/AIInsightVisualization';\r\nimport { SkeletonLoader } from '@/components/ui/SkeletonLoader';\r\nimport { AlertMessage } from '@/components/common/AlertMessage';\r\nimport { ErrorMessage } from '@/lib/error-handler';\r\nimport { Inzicht, TaskLog } from '@/types';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/components/ui/SkeletonLoader` import should occur after import of `@/components/common/AlertMessage`","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":65,"fix":{"range":[315,447],"text":"import { AlertMessage } from '@/components/common/AlertMessage';\r\nimport { SkeletonLoader } from '@/components/ui/SkeletonLoader';\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":21,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":21,"endColumn":49},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":35,"column":36,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":35,"endColumn":70,"fix":{"range":[1413,1435],"text":"size-5 text-green-500"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":36,"column":36,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":36,"endColumn":68,"fix":{"range":[1751,1771],"text":"size-5 text-red-500"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":37,"column":35,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":37,"endColumn":68,"fix":{"range":[2087,2108],"text":"size-5 text-blue-500"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":38,"column":28,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":38,"endColumn":63,"fix":{"range":[2297,2320],"text":"size-5 text-purple-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":43,"column":10,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":43,"endColumn":55,"fix":{"range":[2651,2684],"text":"rounded-lg bg-white p-6 shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":44,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":44,"endColumn":62,"fix":{"range":[2710,2748],"text":"mb-4 flex items-center justify-between"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":47,"column":51,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":47,"endColumn":75,"fix":{"range":[2961,2973],"text":"mr-1 h-5 w-5"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":47,"column":51,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":47,"endColumn":75,"fix":{"range":[2961,2973],"text":"size-5 mr-1"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":54,"column":33,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":54,"endColumn":94,"fix":{"range":[3352,3401],"text":"overflow-hidden rounded-lg border border-gray-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":57,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":57,"endColumn":175,"fix":{"range":[3523,3671],"text":"flex w-full items-center justify-between px-4 py-3 text-left hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-purple-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":62,"column":22,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":62,"endColumn":57,"fix":{"range":[3917,3940],"text":"mr-3 mt-1 flex-shrink-0"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'flex-shrink-0' should be updated to 'shrink-0' in Tailwind CSS v3!","line":62,"column":22,"nodeType":"JSXAttribute","messageId":"classnameChanged","endLine":62,"endColumn":57,"fix":{"range":[3917,3940],"text":"shrink-0 mt-1 mr-3"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'flex-grow' should be updated to 'grow' in Tailwind CSS v3!","line":63,"column":22,"nodeType":"JSXAttribute","messageId":"classnameChanged","endLine":63,"endColumn":43,"fix":{"range":[4016,4025],"text":"grow"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":64,"column":22,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":64,"endColumn":59,"fix":{"range":[4061,4086],"text":"font-medium text-gray-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":65,"column":24,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":65,"endColumn":80,"fix":{"range":[4150,4194],"text":"mt-2 flex items-center text-xs text-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":71,"column":55,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":71,"endColumn":190,"fix":{"range":[4683,4703],"text":"rotate-180 transform"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":71,"column":55,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":71,"endColumn":190,"fix":{"range":[4588,4647],"text":"`size-5 text-gray-400 transition-transform duration-200 ${"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'transform' is not needed in Tailwind CSS v3!","line":71,"column":55,"nodeType":"JSXAttribute","messageId":"classnameNotNeeded","endLine":71,"endColumn":190,"fix":{"range":[4683,4703],"text":"rotate-180"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":92,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":92,"endColumn":44,"fix":{"range":[5959,5975],"text":"mt-4 text-center"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":93,"column":37,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":93,"endColumn":106,"fix":{"range":[6026,6083],"text":"text-sm font-medium text-purple-600 hover:text-purple-800"}}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":4,"fixableWarningCount":20,"source":"// components/dashboard/AIInsightsPresentational.tsx\r\n'use client'; // Client component due to interactive elements (expand button)\r\nimport React from 'react';\r\nimport Link from 'next/link';\r\nimport { Inzicht, TaskLog } from '@/types';\r\nimport AIInsightVisualization from '@/components/ai/AIInsightVisualization';\r\nimport { SkeletonLoader } from '@/components/ui/SkeletonLoader';\r\nimport { AlertMessage } from '@/components/common/AlertMessage';\r\nimport { ErrorMessage } from '@/lib/error-handler';\r\n\r\ninterface AIInsightsPresentationalProps {\r\n  insights: Inzicht[];\r\n  expandedInsightId: string | null;\r\n  onToggleExpand: (id: string) => void;\r\n  isLoadingLogs: boolean;\r\n  logsForInsight: TaskLog[];\r\n  logsError: ErrorMessage | null; // Error specific to fetching logs for an insight\r\n  limit?: number; // To show \"Bekijk alle inzichten\" link\r\n}\r\n\r\nexport default function AIInsightsPresentational({\r\n  insights,\r\n  expandedInsightId,\r\n  onToggleExpand,\r\n  isLoadingLogs,\r\n  logsForInsight,\r\n  logsError,\r\n  limit = 3, // Default limit consistent with container\r\n}: AIInsightsPresentationalProps) {\r\n\r\n  const formatDate = (dateString: Date | string) => new Date(dateString).toLocaleDateString('nl-BE', { day: '2-digit', month: '2-digit', year: 'numeric' });\r\n\r\n  const getTrendIcon = (trendType: string | undefined) => {\r\n    switch(trendType?.toLowerCase()) {\r\n      case 'positief': return <svg className=\"h-5 w-5 text-green-500\" viewBox=\"0 0 20 20\" fill=\"currentColor\"><path fillRule=\"evenodd\" d=\"M12 7a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0V8.414l-4.293 4.293a1 1 0 01-1.414 0L8 10.414l-4.293 4.293a1 1 0 01-1.414-1.414l5-5a1 1 0 011.414 0L11 10.586 14.586 7H12z\" clipRule=\"evenodd\" /></svg>;\r\n      case 'negatief': return <svg className=\"h-5 w-5 text-red-500\" viewBox=\"0 0 20 20\" fill=\"currentColor\"><path fillRule=\"evenodd\" d=\"M12 13a1 1 0 100 2h5a1 1 0 001-1v-5a1 1 0 10-2 0v2.586l-4.293-4.293a1 1 0 00-1.414 0L8 9.586l-4.293-4.293a1 1 0 00-1.414 1.414l5 5a1 1 0 001.414 0L11 9.414 14.586 13H12z\" clipRule=\"evenodd\" /></svg>;\r\n      case 'stabiel': return <svg className=\"h-5 w-5 text-blue-500\" viewBox=\"0 0 20 20\" fill=\"currentColor\"><path fillRule=\"evenodd\" d=\"M18 10a1 1 0 01-1 1H3a1 1 0 110-2h14a1 1 0 011 1z\" clipRule=\"evenodd\" /></svg>;\r\n      default: return <svg className=\"h-5 w-5 text-purple-500\" viewBox=\"0 0 20 20\" fill=\"currentColor\"><path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z\" clipRule=\"evenodd\" /></svg>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-white rounded-lg shadow-md p-6\">\r\n      <div className=\"flex items-center justify-between mb-4\">\r\n        <h2 className=\"text-lg font-semibold text-gray-800\">AI-Inzichten</h2>\r\n        <div className=\"flex items-center text-sm text-purple-600\">\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 mr-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" aria-hidden=\"true\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 10V3L4 14h7v7l9-11h-7z\" /></svg>\r\n          <span>Gegenereerd door AI</span>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"space-y-6\">\r\n        {insights.map(insight => (\r\n          <div key={insight.id} className=\"border border-gray-200 rounded-lg overflow-hidden\">\r\n            <button\r\n              type=\"button\" onClick={() => onToggleExpand(insight.id)}\r\n              className=\"w-full px-4 py-3 text-left flex justify-between items-center hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-inset\"\r\n              aria-expanded={expandedInsightId === insight.id ? 'true' : 'false'}\r\n              aria-controls={`insight-details-${insight.id}`}\r\n            >\r\n              <div className=\"flex items-start\">\r\n                <div className=\"flex-shrink-0 mt-1 mr-3\">{getTrendIcon(insight.trend_type)}</div>\r\n                <div className=\"flex-grow\">\r\n                  <p className=\"text-gray-800 font-medium\">{insight.beschrijving}</p>\r\n                  <div className=\"flex items-center mt-2 text-xs text-gray-500\">\r\n                    <span className=\"mr-3 capitalize\">{insight.periode === 'dag' ? 'Dagelijks' : insight.periode === 'week' ? 'Wekelijks' : 'Maandelijks'} inzicht</span>\r\n                    <span>Gegenereerd op {formatDate(insight.created_at)}</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className={`h-5 w-5 text-gray-400 transition-transform duration-200 ${expandedInsightId === insight.id ? 'transform rotate-180' : ''}`} viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\"><path fillRule=\"evenodd\" d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\" clipRule=\"evenodd\" /></svg>\r\n            </button>\r\n            \r\n            {expandedInsightId === insight.id && (\r\n              <div id={`insight-details-${insight.id}`} className=\"border-t border-gray-200\">\r\n                {isLoadingLogs ? (\r\n                   <div className=\"p-4\"><SkeletonLoader type=\"list\" count={1} /></div>\r\n                ) : logsError ? (\r\n                  <div className=\"p-4\">\r\n                    <AlertMessage type=\"error\" title=\"Fout bij laden logs\" message={logsError.userMessage || \"Kon gerelateerde logs niet laden.\"} />\r\n                  </div>\r\n                ) : logsForInsight && logsForInsight.length > 0 ? (\r\n                  <AIInsightVisualization insight={insight} logs={logsForInsight} />\r\n                ) : (\r\n                  <div className=\"p-4 text-sm text-gray-500\">Geen gerelateerde logs beschikbaar voor dit inzicht.</div>\r\n                )}\r\n              </div>\r\n            )}\r\n          </div>\r\n        ))}\r\n        {insights.length >= limit && (\r\n          <div className=\"text-center mt-4\">\r\n            <Link href=\"/inzichten\" className=\"text-purple-600 hover:text-purple-800 text-sm font-medium\">Bekijk alle inzichten</Link>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Optimize with React.memo\r\n// export default React.memo(AIInsightsPresentational); \r\n// Memoization can be added once props comparison logic is clear, especially for logsForInsight\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\dashboard\\DailyPlanner.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":27,"fix":{"range":[106,106],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":30,"fix":{"range":[137,137],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/types` import should occur after import of `@/lib/error-handler`","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":32,"fix":{"range":[139,429],"text":"import TaskCard from '@/components/tasks/TaskCard';\r\nimport { useDeleteTask } from '@/hooks/useMutations';\r\nimport { useNotification } from '@/context/NotificationContext';\r\nimport { ErrorMessage } from '@/lib/error-handler'; // For typing error from hook\r\nimport { Task } from '@/types';\r\n"}},{"ruleId":"no-restricted-imports","severity":2,"message":"'@/hooks/useMutations' import is restricted from being used. Mutation hooks (useMutations/*) mogen niet in presentational components.","line":6,"column":1,"nodeType":"ImportDeclaration","messageId":"pathWithCustomMessage","endLine":6,"endColumn":54},{"ruleId":"import/order","severity":2,"message":"`@/hooks/useMutations` import should occur after import of `@/context/NotificationContext`","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":54,"fix":{"range":[225,346],"text":"import { useNotification } from '@/context/NotificationContext';\r\nimport { useDeleteTask } from '@/hooks/useMutations';\r\n"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":50,"column":10,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":50,"endColumn":55,"fix":{"range":[1986,2019],"text":"rounded-lg bg-white p-6 shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":51,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":51,"endColumn":72,"fix":{"range":[2045,2093],"text":"mb-4 flex flex-wrap items-center justify-between"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":54,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":54,"endColumn":53,"fix":{"range":[2209,2236],"text":"mt-2 flex space-x-2 sm:mt-0"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":57,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":61,"endColumn":16,"fix":{"range":[2333,2383],"text":"`rounded-md px-3 py-1 text-sm transition-colors ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":69,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":73,"endColumn":16,"fix":{"range":[2791,2841],"text":"`rounded-md px-3 py-1 text-sm transition-colors ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":81,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":85,"endColumn":16,"fix":{"range":[3257,3307],"text":"`rounded-md px-3 py-1 text-sm transition-colors ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":111,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":111,"endColumn":42,"fix":{"range":[4568,4584],"text":"py-8 text-center"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":112,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":112,"endColumn":44,"fix":{"range":[4612,4630],"text":"mb-4 text-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":119,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":119,"endColumn":120,"fix":{"range":[4968,5063],"text":"rounded-md bg-purple-600 px-4 py-2 font-medium text-white transition-colors hover:bg-purple-700"}},{"ruleId":"import/no-named-as-default-member","severity":1,"message":"Caution: `React` also has a named export `memo`. Check if you meant to write `import {memo} from 'react'` instead.","line":129,"column":16,"nodeType":"MemberExpression","endLine":129,"endColumn":26}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":4,"fixableWarningCount":9,"source":"'use client';\r\nimport React from 'react'; // Keep useState for confirmDelete if needed locally in TaskCard\r\nimport Link from 'next/link';\r\nimport { Task } from '@/types';\r\nimport TaskCard from '@/components/tasks/TaskCard';\r\nimport { useDeleteTask } from '@/hooks/useMutations';\r\nimport { useNotification } from '@/context/NotificationContext';\r\nimport { ErrorMessage } from '@/lib/error-handler'; // For typing error from hook\r\n\r\ninterface DailyPlannerProps {\r\n  tasks: Task[]; // This will be pre-filtered tasks from the container\r\n  userId: string; // Needed for context or if actions are user-specific\r\n  activeFilter: string;\r\n  onFilterChange: (filter: string) => void;\r\n  // isLoading?: boolean; // If container wants to pass loading state for individual items\r\n}\r\n\r\nfunction DailyPlanner({\r\n  tasks,\r\n  // userId, // userId might not be directly used if tasks are already filtered for the user\r\n  activeFilter,\r\n  onFilterChange,\r\n}: DailyPlannerProps) {\r\n  \r\n  const { \r\n    mutate: deleteTask, \r\n    isPending: isDeletingTask, // This is a general deleting state for any task\r\n    // error: deleteTaskError, // Handled by addNotification\r\n    // isError: isDeleteError // Handled by addNotification\r\n  } = useDeleteTask();\r\n  const { addNotification } = useNotification();\r\n  \r\n  const handleDeleteTask = (taskId: string) => {\r\n    deleteTask(taskId, {\r\n      onSuccess: () => {\r\n        addNotification({ type: 'success', message: 'Taak succesvol verwijderd.' });\r\n        // Query invalidation is handled by the useDeleteTask hook,\r\n        // which should cause DailyPlannerContainer to re-fetch/re-filter tasks.\r\n      },\r\n      onError: (error: ErrorMessage) => { // Explicitly type error\r\n        addNotification({ type: 'error', message: error.userMessage || 'Fout bij verwijderen van taak.' });\r\n      }\r\n    });\r\n  };\r\n  \r\n  // tasks prop is now the already filtered list from DailyPlannerContainer\r\n  const tasksToDisplay = tasks;\r\n\r\n  return (\r\n    <div className=\"bg-white rounded-lg shadow-md p-6\">\r\n      <div className=\"flex flex-wrap items-center justify-between mb-4\">\r\n        <h2 className=\"text-lg font-semibold text-gray-800\">Dagplanning</h2>\r\n        \r\n        <div className=\"flex space-x-2 mt-2 sm:mt-0\">\r\n          <button\r\n            onClick={() => onFilterChange('all')}\r\n            className={`px-3 py-1 text-sm rounded-md transition-colors ${\r\n              activeFilter === 'all'\r\n                ? 'bg-purple-600 text-white'\r\n                : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\r\n            }`}\r\n            aria-pressed={activeFilter === 'all'}\r\n            aria-label=\"Toon alle taken\"\r\n          >\r\n            Alles\r\n          </button>\r\n          <button\r\n            onClick={() => onFilterChange('taak')}\r\n            className={`px-3 py-1 text-sm rounded-md transition-colors ${\r\n              activeFilter === 'taak'\r\n                ? 'bg-purple-600 text-white'\r\n                : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\r\n            }`}\r\n            aria-pressed={activeFilter === 'taak'}\r\n            aria-label=\"Toon alleen taken\"\r\n          >\r\n            Taken\r\n          </button>\r\n          <button\r\n            onClick={() => onFilterChange('opdracht')}\r\n            className={`px-3 py-1 text-sm rounded-md transition-colors ${\r\n              activeFilter === 'opdracht'\r\n                ? 'bg-purple-600 text-white'\r\n                : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\r\n            }`}\r\n            aria-pressed={activeFilter === 'opdracht'}\r\n            aria-label=\"Toon alleen opdrachten\"\r\n          >\r\n            Opdrachten\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      {tasksToDisplay.length > 0 ? (\r\n        <div className=\"grid grid-cols-1 gap-4\">\r\n          {tasksToDisplay.map(task => (\r\n            <TaskCard \r\n              key={task.id} \r\n              task={task} \r\n              onDelete={handleDeleteTask}\r\n              // Pass isDeletingTask if TaskCard should show a global deleting indicator.\r\n              // If TaskCard handles its own confirm/delete spinner, this might not be needed,\r\n              // or it could be `isDeleting={isDeletingTask && deletingTaskId === task.id}` if we track specific ID.\r\n              // For simplicity, TaskCard's internal confirm/delete spinner is often sufficient.\r\n              // The `isDeleting` prop was added to TaskCard to show a spinner on its delete button.\r\n              isDeleting={isDeletingTask} \r\n            />\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <div className=\"text-center py-8\">\r\n          <p className=\"text-gray-500 mb-4\">\r\n            {activeFilter === 'all' ? 'Geen taken gepland voor vandaag' : \r\n             activeFilter === 'taak' ? 'Geen taken van het type \"Taak\" gepland voor vandaag' :\r\n             'Geen taken van het type \"Opdracht\" gepland voor vandaag'}\r\n          </p>\r\n          <Link\r\n            href=\"/taken/nieuw\"\r\n            className=\"px-4 py-2 bg-purple-600 text-white font-medium rounded-md hover:bg-purple-700 transition-colors\"\r\n          >\r\n            Taak toevoegen\r\n          </Link>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default React.memo(DailyPlanner);\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\dashboard\\HealthMetrics.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":43,"fix":{"range":[89,89],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":111,"fix":{"range":[201,201],"text":"\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":24,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":24,"endColumn":38},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":70,"column":10,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":70,"endColumn":55,"fix":{"range":[2529,2562],"text":"rounded-lg bg-white p-6 shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":71,"column":37,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":71,"endColumn":89,"fix":{"range":[2652,2692],"text":"mb-4 text-lg font-semibold text-gray-800"}},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":75,"column":9,"nodeType":"JSXOpeningElement","endLine":75,"endColumn":63},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":77,"column":11,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":77,"endColumn":48,"fix":{"range":[2916,2941],"text":"mb-3 flex flex-wrap gap-2"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":86,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":90,"endColumn":18,"fix":{"range":[3240,3290],"text":"`rounded-md px-3 py-1 text-sm transition-colors ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":153,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":153,"endColumn":121,"fix":{"range":[6056,6149],"text":"flex h-full items-center justify-center rounded-lg border-2 border-dashed border-gray-300 p-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":154,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":154,"endColumn":53,"fix":{"range":[6179,6204],"text":"text-center text-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":163,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":163,"endColumn":55,"fix":{"range":[6469,6499],"text":"mb-2 font-medium text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":165,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":165,"endColumn":80,"fix":{"range":[6589,6642],"text":"list-inside list-disc space-y-1 text-sm text-gray-700"}}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":2,"fixableWarningCount":8,"source":"'use client';\r\nimport { useState, useMemo } from 'react'; // Changed useEffect to useMemo\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from 'recharts';\r\nimport { TaskLog } from '@/types';\r\n\r\n// Define the keys for metrics explicitly for better type safety\r\ntype MetricKey = 'pijn' | 'vermoeidheid' | 'energie_voor' | 'energie_na' | 'hartslag';\r\n\r\ninterface ChartDataItem {\r\n  originalDate: Date;\r\n  name: string;\r\n  pijn?: number;\r\n  vermoeidheid?: number;\r\n  energie_voor?: number;\r\n  energie_na?: number;\r\n  hartslag?: number;\r\n  // No index signature needed if we use MetricKey for activeMetric\r\n}\r\n\r\ninterface HealthMetricsProps {\r\n  logs: TaskLog[];\r\n}\r\n\r\nexport default function HealthMetrics({ logs }: HealthMetricsProps) {\r\n  const [activeMetric, setActiveMetric] = useState<MetricKey>('pijn'); // Use MetricKey type\r\n  // const [chartData, setChartData] = useState<any[]>([]); // Replaced by useMemo\r\n\r\n  const chartData: ChartDataItem[] = useMemo(() => {\r\n    if (!logs || logs.length === 0) {\r\n      return [];\r\n    }\r\n    return logs.map(log => {\r\n      const date = new Date(log.start_tijd);\r\n      return {\r\n        originalDate: date,\r\n        pijn: log.pijn_score,\r\n        vermoeidheid: log.vermoeidheid_score,\r\n        energie_voor: log.energie_voor,\r\n        energie_na: log.energie_na,\r\n        hartslag: log.hartslag,\r\n        name: date.toLocaleDateString('nl-BE', {\r\n          day: '2-digit',\r\n          month: '2-digit',\r\n        })\r\n      };\r\n    })\r\n    .sort((a, b) => a.originalDate.getTime() - b.originalDate.getTime());\r\n  }, [logs]);\r\n\r\n  const metrics: Array<{ key: MetricKey; label: string; color: string }> = [\r\n    { key: 'pijn', label: 'Pijn', color: '#ef4444' },\r\n    { key: 'vermoeidheid', label: 'Vermoeidheid', color: '#f97316' },\r\n    { key: 'energie_voor', label: 'Energie (voor)', color: '#84cc16' },\r\n    { key: 'energie_na', label: 'Energie (na)', color: '#10b981' },\r\n    { key: 'hartslag', label: 'Hartslag', color: '#6366f1' }\r\n  ];\r\n\r\n  // Vind de huidige metriek\r\n  const currentMetric = metrics.find(m => m.key === activeMetric);\r\n\r\n  const recentMoods = useMemo(() => {\r\n    // Filter logs die een stemming hebben en sorteer op datum\r\n    return logs\r\n      .filter(log => log.stemming !== undefined && log.stemming !== null)\r\n      .sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())\r\n      .slice(0, 5); // Toon de 5 meest recente stemmingen\r\n  }, [logs]);\r\n\r\n  return (\r\n    <div className=\"bg-white rounded-lg shadow-md p-6\" aria-labelledby=\"health-metrics-title\">\r\n      <h2 id=\"health-metrics-title\" className=\"text-lg font-semibold mb-4 text-gray-800\">Gezondheidsmetrieken</h2>\r\n      \r\n      {/* Metriek selectie */}\r\n      <div className=\"mb-4\">\r\n        <label id=\"metric-selector-label\" className=\"sr-only\">Selecteer metriek</label>\r\n        <div \r\n          className=\"flex flex-wrap gap-2 mb-3\" \r\n          role=\"radiogroup\" \r\n          aria-labelledby=\"metric-selector-label\"\r\n        >\r\n          {metrics.map(metric => (\r\n            <button\r\n              key={metric.key}\r\n              type=\"button\"\r\n              onClick={() => setActiveMetric(metric.key)} \r\n              className={`px-3 py-1 text-sm rounded-md transition-colors ${\r\n                activeMetric === metric.key\r\n                  ? 'bg-purple-600 text-white'\r\n                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\r\n              }`}\r\n              role=\"radio\"\r\n              aria-checked={activeMetric === metric.key ? 'true' : 'false'} \r\n              aria-label={`Bekijk ${metric.label} data`}\r\n            >\r\n              {metric.label}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Grafiek gebied */}\r\n      <div className=\"h-64\" aria-live=\"polite\">\r\n        {chartData.length > 0 ? (\r\n          <>\r\n            <div className=\"sr-only\" aria-live=\"assertive\">\r\n              Grafiek van {currentMetric?.label || activeMetric} gegevens over tijd. \r\n              {chartData.map((item, index) => (\r\n                <span key={index}>\r\n                  {item.name}: {item[activeMetric as MetricKey]}\r\n                  {activeMetric === 'hartslag' ? ' BPM' : ' op schaal van 20'}.\r\n                </span>\r\n              ))}\r\n            </div>\r\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n              <LineChart\r\n                data={chartData}\r\n                margin={{ top: 5, right: 10, left: -20, bottom: 20 }}\r\n                aria-label={`Lijndiagram van ${currentMetric?.label || activeMetric} over tijd`}\r\n              >\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis \r\n                  dataKey=\"name\" \r\n                  angle={-45} \r\n                  textAnchor=\"end\" \r\n                  height={60} \r\n                  tick={{ fontSize: 10 }}\r\n                  aria-label=\"Tijd\"\r\n                />\r\n                <YAxis \r\n                  domain={activeMetric === 'hartslag' ? [40, 'auto'] : [0, 20]} \r\n                  allowDataOverflow={true}\r\n                  tick={{ fontSize: 10 }}\r\n                  aria-label={currentMetric?.label || activeMetric.toString()}\r\n                />\r\n                <Tooltip\r\n                  formatter={(value: number) => [`${value} ${activeMetric === 'hartslag' ? 'BPM' : '/ 20'}`, currentMetric?.label || activeMetric]} \r\n                  labelFormatter={(label: string) => `Datum: ${label}`}\r\n                />\r\n                <Legend verticalAlign=\"top\" height={36}/>\r\n                <Line \r\n                  type=\"monotone\" \r\n                  dataKey={activeMetric} \r\n                  stroke={currentMetric?.color || '#8884d8'} \r\n                  activeDot={{ r: 6 }}\r\n                  strokeWidth={2}\r\n                  name={currentMetric?.label || activeMetric.toString()}\r\n                  dot={false}\r\n                />\r\n              </LineChart>\r\n            </ResponsiveContainer>\r\n          </>\r\n        ) : (\r\n          <div className=\"flex items-center justify-center h-full border-2 border-dashed border-gray-300 rounded-lg p-4\">\r\n            <p className=\"text-gray-500 text-center\">\r\n              Nog geen gegevens beschikbaar. Voer taken uit om metrieken te verzamelen.\r\n            </p>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Recente Stemmingen sectie */}\r\n      <div className=\"mt-6 border-t pt-4\">\r\n        <h3 className=\"font-medium text-gray-700 mb-2\">Recente Stemmingen:</h3>\r\n        {recentMoods.length > 0 ? (\r\n          <ul className=\"list-disc list-inside space-y-1 text-sm text-gray-700\">\r\n            {recentMoods.map((log, index) => (\r\n              <li key={log.id || index}>\r\n                {new Date(log.created_at).toLocaleDateString('nl-BE')}: {log.stemming}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        ) : (\r\n          <p className=\"text-sm text-gray-500\">Geen recente stemmingen gelogd.</p>\r\n        )}\r\n      </div>\r\n\r\n      {/* Legende en uitleg */}\r\n      <div className=\"mt-6 text-sm text-gray-600\" aria-live=\"polite\">\r\n        <p>\r\n          {activeMetric === 'hartslag' ? (\r\n            <>Hartslag wordt gemeten in BPM (slagen per minuut).</>\r\n          ) : (\r\n            <>\r\n              {currentMetric?.label || activeMetric} wordt gemeten op een schaal van 1-20, \r\n              waarbij 1 de laagste waarde is en 20 de hoogste.\r\n            </>\r\n          )}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\dashboard\\HealthMetricsChart.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":111,"fix":{"range":[125,125],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":35,"fix":{"range":[161,161],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`react` import should occur before import of `recharts`","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":54,"fix":{"range":[15,235],"text":"import { useEffect, useState, useMemo } from 'react'; // Added useMemo\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from 'recharts';\r\nimport { TaskLog } from '@/types';\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":22,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":22,"endColumn":43},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":59,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":59,"endColumn":82,"fix":{"range":[2300,2353],"text":"flex h-full items-center justify-center text-gray-500"}}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":3,"fixableWarningCount":1,"source":"'use client';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from 'recharts';\r\nimport { TaskLog } from '@/types';\r\nimport { useEffect, useState, useMemo } from 'react'; // Added useMemo\r\n\r\n// Define the keys for metrics explicitly for better type safety, matching HealthMetrics component\r\ntype PlottableMetricKey = 'pijn_score' | 'vermoeidheid_score' | 'energie_na' | 'hartslag';\r\n\r\ninterface ChartDataItem {\r\n  originalDate: Date;\r\n  name: string;\r\n  pijn_score?: number;\r\n  vermoeidheid_score?: number;\r\n  energie_na?: number;\r\n  hartslag?: number;\r\n}\r\ninterface HealthMetricsChartProps {\r\n  logs: TaskLog[];\r\n  metricKey?: PlottableMetricKey; // Optional specific metric\r\n}\r\n\r\nexport default function HealthMetricsChart({ logs, metricKey }: HealthMetricsChartProps) {\r\n  // const [chartData, setChartData] = useState<any[]>([]); // Replaced by useMemo\r\n  const [activeMetric, setActiveMetric] = useState<PlottableMetricKey>(metricKey || 'pijn_score');\r\n\r\n  useEffect(() => {\r\n    if (metricKey) {\r\n      setActiveMetric(metricKey);\r\n    }\r\n  }, [metricKey]);\r\n\r\n  const chartData: ChartDataItem[] = useMemo(() => {\r\n    if (!logs || logs.length === 0) {\r\n      return [];\r\n    }\r\n    return logs.map(log => {\r\n      const date = new Date(log.start_tijd);\r\n      return {\r\n        originalDate: date,\r\n        pijn_score: log.pijn_score,\r\n        vermoeidheid_score: log.vermoeidheid_score,\r\n        energie_na: log.energie_na,\r\n        hartslag: log.hartslag,\r\n        name: date.toLocaleDateString('nl-BE', { day: '2-digit', month: 'short' })\r\n      };\r\n    }).sort((a, b) => a.originalDate.getTime() - b.originalDate.getTime());\r\n  }, [logs]);\r\n\r\n  const metricsInfo: Record<PlottableMetricKey, { label: string, color: string, domain?: [number, number | 'auto'] }> = {\r\n    'pijn_score': { label: 'Pijn', color: '#ef4444', domain: [0, 20] },\r\n    'vermoeidheid_score': { label: 'Vermoeidheid', color: '#f97316', domain: [0, 20] },\r\n    'energie_na': { label: 'Energie (na)', color: '#10b981', domain: [0, 20] },\r\n    'hartslag': { label: 'Hartslag', color: '#6366f1', domain: [40, 'auto'] }\r\n  };\r\n\r\n  const currentMetricInfo = metricsInfo[activeMetric] || metricsInfo['pijn_score'];\r\n\r\n  if (chartData.length === 0) {\r\n    return <div className=\"flex items-center justify-center h-full text-gray-500\">Geen log data beschikbaar voor grafiek.</div>;\r\n  }\r\n\r\n  return (\r\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n      <LineChart data={chartData} margin={{ top: 5, right: 5, left: -25, bottom: 5 }}>\r\n        <CartesianGrid strokeDasharray=\"3 3\" strokeOpacity={0.5} />\r\n        <XAxis dataKey=\"name\" tick={{ fontSize: 10 }} />\r\n        <YAxis domain={currentMetricInfo.domain} tick={{ fontSize: 10 }} />\r\n        <Tooltip\r\n          formatter={(value: number) => [`${value}${activeMetric === 'hartslag' ? ' BPM' : ' /20'}`, currentMetricInfo.label]}\r\n          labelFormatter={(label: string) => `Datum: ${label}`}\r\n        />\r\n        <Legend verticalAlign=\"top\" height={30} />\r\n        <Line\r\n          type=\"monotone\"\r\n          dataKey={activeMetric}\r\n          stroke={currentMetricInfo.color}\r\n          name={currentMetricInfo.label}\r\n          strokeWidth={2}\r\n          activeDot={{ r: 5 }}\r\n          dot={chartData.length < 50} // Show dots if not too many data points\r\n        />\r\n      </LineChart>\r\n    </ResponsiveContainer>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\dashboard\\QuickActions.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":30,"fix":{"range":[44,44],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`react` import should occur before import of `next/link`","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":38,"fix":{"range":[15,122],"text":"import { ReactElement } from 'react'; // Import ReactElement for icon type\r\nimport Link from 'next/link';\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":13,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":13,"endColumn":37},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-6, w-6' could be replaced by the 'size-6' shorthand!","line":19,"column":49,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":19,"endColumn":68,"fix":{"range":[563,570],"text":"size-6"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-6, w-6' could be replaced by the 'size-6' shorthand!","line":30,"column":49,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":30,"endColumn":68,"fix":{"range":[1060,1067],"text":"size-6"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-6, w-6' could be replaced by the 'size-6' shorthand!","line":42,"column":49,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":42,"endColumn":68,"fix":{"range":[1749,1756],"text":"size-6"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-6, w-6' could be replaced by the 'size-6' shorthand!","line":53,"column":49,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":53,"endColumn":68,"fix":{"range":[2345,2352],"text":"size-6"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":63,"column":10,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":63,"endColumn":55,"fix":{"range":[2805,2838],"text":"rounded-lg bg-white p-6 shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":64,"column":11,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":64,"endColumn":63,"fix":{"range":[2863,2903],"text":"mb-4 text-lg font-semibold text-gray-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":66,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":66,"endColumn":76,"fix":{"range":[2983,3035],"text":"grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":71,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":71,"endColumn":160,"fix":{"range":[3179,3314],"text":"group flex flex-col items-center rounded-lg border border-gray-200 p-4 text-center transition-all hover:border-gray-300 hover:shadow-lg"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":73,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":73,"endColumn":162,"fix":{"range":[3382,3395],"text":"`h-12 w-12 ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":73,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":73,"endColumn":162,"fix":{"range":[3407,3514],"text":"} mb-3 flex items-center justify-center rounded-full text-white transition-transform group-hover:scale-110`"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'w-12, h-12' could be replaced by the 'size-12' shorthand!","line":73,"column":18,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":73,"endColumn":162,"fix":{"range":[3382,3395],"text":"`size-12 ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":76,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":76,"endColumn":67,"fix":{"range":[3594,3632],"text":"mb-1 text-sm font-medium text-gray-900"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":2,"fixableWarningCount":12,"source":"'use client';\r\nimport Link from 'next/link';\r\nimport { ReactElement } from 'react'; // Import ReactElement for icon type\r\n\r\ninterface ActionItem {\r\n  title: string;\r\n  description: string;\r\n  icon: ReactElement; // Type for JSX element\r\n  link: string;\r\n  color: string; // Tailwind background color class\r\n}\r\n\r\nexport default function QuickActions() {\r\n  const actions: ActionItem[] = [\r\n    {\r\n      title: 'Nieuwe Taak',\r\n      description: 'Voeg een nieuwe taak toe aan uw planning',\r\n      icon: (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" aria-hidden=\"true\">\r\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\r\n        </svg>\r\n      ),\r\n      link: '/taken/nieuw', // Assuming this route exists\r\n      color: 'bg-blue-500'\r\n    },\r\n    {\r\n      title: 'Nieuwe Opdracht',\r\n      description: 'Voeg een nieuwe opdracht toe voor training',\r\n      icon: (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" aria-hidden=\"true\">\r\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z\" />\r\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n        </svg>\r\n      ),\r\n      link: '/opdrachten/nieuw', // Assuming this route exists\r\n      color: 'bg-green-500'\r\n    },\r\n    {\r\n      title: 'Reflectie Toevoegen',\r\n      description: 'Voeg een reflectie toe over uw dag',\r\n      icon: (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" aria-hidden=\"true\">\r\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\r\n        </svg>\r\n      ),\r\n      link: '/reflecties/nieuw', // Assuming this route exists\r\n      color: 'bg-purple-500'\r\n    },\r\n    {\r\n      title: 'Genereer Rapport',\r\n      description: 'Maak een rapport van uw gezondheidsgegevens',\r\n      icon: (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" aria-hidden=\"true\">\r\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 17v-2m3 2v-4m3 4v-6m2 10H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\r\n        </svg>\r\n      ),\r\n      link: '/rapporten/nieuw', // Assuming this route exists\r\n      color: 'bg-amber-500'\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <div className=\"bg-white rounded-lg shadow-md p-6\">\r\n      <h2 className=\"text-lg font-semibold mb-4 text-gray-800\">Snelle Acties</h2> {/* Adjusted text color */}\r\n      \r\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n        {actions.map((action, index) => (\r\n          <Link\r\n            key={index}\r\n            href={action.link}\r\n            className=\"flex flex-col items-center p-4 rounded-lg border border-gray-200 hover:border-gray-300 hover:shadow-lg transition-all group text-center\" /* Added text-center */\r\n          >\r\n            <div className={`w-12 h-12 ${action.color} text-white rounded-full flex items-center justify-center mb-3 group-hover:scale-110 transition-transform`}>\r\n              {action.icon}\r\n            </div>\r\n            <h3 className=\"font-medium text-gray-900 mb-1 text-sm\">{action.title}</h3> {/* Adjusted font size */}\r\n            <p className=\"text-xs text-gray-500\">{action.description}</p> {/* Adjusted font size */}\r\n          </Link>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\debug\\SessionStatus.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":4,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":4,"endColumn":38},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":21,"column":10,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":21,"endColumn":72,"fix":{"range":[628,678],"text":"mb-4 rounded bg-gray-100 p-2 text-sm text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":23,"column":25,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":23,"endColumn":48,"fix":{"range":[772,783],"text":"ml-1 italic"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"'use client';\r\nimport { useAuth } from '@/components/auth/AuthProvider'; // Import useAuth\r\n\r\nexport default function SessionStatus() {\r\n  const { user, session, loading, profile } = useAuth();\r\n\r\n  let statusMessage = 'Laden...';\r\n\r\n  if (!loading) {\r\n    if (session && user) {\r\n      statusMessage = `Actieve sessie: ${user.email} (Type: ${profile?.type || 'onbekend'})`;\r\n    } else if (session && !user) {\r\n      statusMessage = 'Sessie gevonden, maar geen user object. Controleer Supabase logs.';\r\n    }\r\n     else {\r\n      statusMessage = 'Geen actieve sessie gevonden.';\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <div className=\"p-2 bg-gray-100 text-sm text-gray-700 rounded mb-4\">\r\n      <strong>Session Debug:</strong> {statusMessage}\r\n      {loading && <span className=\"italic ml-1\">(Auth context laden...)</span>}\r\n      {/* {profile && <pre className=\"mt-1 text-xs bg-gray-200 p-1 rounded overflow-x-auto\">Profile: {JSON.stringify(profile, null, 2)}</pre>} */}\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\dev\\PerformanceDashboard.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":58,"fix":{"range":[72,72],"text":"\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Doughnut' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":18},{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'Doughnut' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":18,"fix":{"range":[82,92],"text":""}},{"ruleId":"import/order","severity":2,"message":"`chart.js` import should occur before import of `react-chartjs-2`","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":14,"endColumn":19,"fix":{"range":[74,307],"text":"import {\r\n  Chart as ChartJS,\r\n  ArcElement,\r\n  Tooltip,\r\n  Legend,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Colors, // Import Colors plugin\r\n} from 'chart.js';\r\nimport { Doughnut, Bar } from 'react-chartjs-2';\r\n"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":92,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3468,3471],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3468,3471],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":132,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":132,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onFCP' is defined but never used. Allowed unused args must match /^_/u.","line":143,"column":57,"nodeType":null,"messageId":"unusedVar","endLine":143,"endColumn":62},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Metric' is defined but never used. Allowed unused args must match /^_/u.","line":143,"column":64,"nodeType":null,"messageId":"unusedVar","endLine":143,"endColumn":70},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":186,"column":10,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":186,"endColumn":49,"fix":{"range":[7300,7327],"text":"min-h-screen bg-gray-50 p-6"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":188,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":188,"endColumn":64,"fix":{"range":[7387,7426],"text":"mb-2 text-3xl font-bold text-purple-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":199,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":203,"endColumn":16,"fix":{"range":[7996,8049],"text":"border-b-2 border-purple-700 bg-purple-600 text-white"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":199,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":203,"endColumn":16,"fix":{"range":[7884,7948],"text":"`rounded-t-md px-4 py-2 text-sm font-medium transition-colors ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":211,"column":40,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":211,"endColumn":109,"fix":{"range":[8351,8408],"text":"mb-8 grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":222,"column":41,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":222,"endColumn":93,"fix":{"range":[9352,9392],"text":"space-y-6 rounded-lg bg-white p-6 shadow"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":223,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":223,"endColumn":67,"fix":{"range":[9421,9461],"text":"mb-4 text-xl font-semibold text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":232,"column":38,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":232,"endColumn":80,"fix":{"range":[9875,9905],"text":"rounded-lg bg-white p-6 shadow"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":233,"column":37,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":233,"endColumn":79,"fix":{"range":[10070,10100],"text":"rounded-lg bg-white p-6 shadow"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":238,"column":11,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":238,"endColumn":201,"fix":{"range":[10360,10538],"text":"rounded-md bg-purple-600 px-6 py-2 font-semibold text-white shadow transition-colors hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":242,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":242,"endColumn":50,"fix":{"range":[10622,10648],"text":"mt-2 text-xs text-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":275,"column":10,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":275,"endColumn":59,"fix":{"range":[11943,11970],"text":"} rounded-lg p-4 shadow-md`"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":276,"column":11,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":276,"endColumn":65,"fix":{"range":[11995,12037],"text":"truncate text-sm font-medium text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":279,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":279,"endColumn":51,"fix":{"range":[12222,12246],"text":"ml-1 text-sm font-normal"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":281,"column":10,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":285,"endColumn":10,"fix":{"range":[12295,12311],"text":"`mt-1 text-xs ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":308,"column":10,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":308,"endColumn":42,"fix":{"range":[13306,13326],"text":"mt-6 overflow-x-auto"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":318,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":318,"endColumn":61,"fix":{"range":[13865,13898],"text":"divide-y divide-gray-200 bg-white"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":321,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":321,"endColumn":76,"fix":{"range":[14016,14061],"text":"max-w-xs truncate whitespace-nowrap px-4 py-2"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":325,"column":23,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":331,"endColumn":20,"fix":{"range":[14250,14298],"text":"`rounded-full px-2 py-0.5 text-xs font-medium ${"}}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":3,"fixableWarningCount":19,"source":"'use client';\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport { Doughnut, Bar } from 'react-chartjs-2';\r\nimport {\r\n  Chart as ChartJS,\r\n  ArcElement,\r\n  Tooltip,\r\n  Legend,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Colors, // Import Colors plugin\r\n} from 'chart.js';\r\n\r\nChartJS.register(\r\n  ArcElement,\r\n  Tooltip,\r\n  Legend,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Colors // Register Colors plugin\r\n);\r\n\r\ninterface PerformanceMetrics {\r\n  FCP: number;\r\n  LCP: number;\r\n  INP: number; // Changed from FID to INP\r\n  CLS: number;\r\n  TTI: number;\r\n  TBT: number;\r\n  resourceLoading: Array<{ name: string; startTime: number; duration: number; size: number; category: string }>;\r\n  jsExecution: Array<{ name: string; duration: number; size: number }>;\r\n  renderBlocking: Array<{ name: string; duration: number; size: number }>;\r\n  longTasks: Array<{ name: string; startTime: number; duration: number }>;\r\n}\r\n\r\n// Functie om performance metrics te verzamelen\r\nfunction capturePerformanceMetrics(): PerformanceMetrics | null {\r\n  if (typeof window === 'undefined' || typeof performance === 'undefined') return null;\r\n  \r\n  const metrics: PerformanceMetrics = {\r\n    FCP: 0, LCP: 0, INP: 0, CLS: 0, TTI: 0, TBT: 0, // Changed FID to INP\r\n    resourceLoading: [], jsExecution: [], renderBlocking: [], longTasks: [],\r\n  };\r\n  \r\n  const navigationEntries = performance.getEntriesByType('navigation');\r\n  if (navigationEntries.length > 0) {\r\n    const navEntry = navigationEntries[0] as PerformanceNavigationTiming;\r\n    metrics.TTI = navEntry.domInteractive;\r\n    // TBT is complex, often derived from Long Tasks. Placeholder for now.\r\n  }\r\n  \r\n  performance.getEntriesByType('paint').forEach((entry) => {\r\n    if (entry.name === 'first-contentful-paint') metrics.FCP = entry.startTime;\r\n  });\r\n\r\n  performance.getEntriesByType('largest-contentful-paint').forEach((entry) => {\r\n    // LCP is more complex, this is a simplification. Use web-vitals for accurate LCP.\r\n    metrics.LCP = entry.startTime; \r\n  });\r\n  \r\n  performance.getEntriesByType('resource').forEach((entry) => {\r\n    const resourceEntry = entry as PerformanceResourceTiming;\r\n    let category = 'other';\r\n    if (resourceEntry.name.includes('.js')) category = 'js';\r\n    else if (resourceEntry.name.includes('.css')) category = 'css';\r\n    else if (/\\.(jpe?g|png|gif|svg|webp)$/i.test(resourceEntry.name)) category = 'image';\r\n    else if (resourceEntry.name.includes('/api/')) category = 'api';\r\n    \r\n    metrics.resourceLoading.push({\r\n      name: new URL(resourceEntry.name, window.location.origin).pathname,\r\n      startTime: resourceEntry.startTime,\r\n      duration: resourceEntry.duration,\r\n      size: resourceEntry.transferSize || resourceEntry.decodedBodySize || 0,\r\n      category,\r\n    });\r\n\r\n    if (category === 'js') {\r\n      metrics.jsExecution.push({\r\n        name: new URL(resourceEntry.name, window.location.origin).pathname,\r\n        duration: resourceEntry.duration,\r\n        size: resourceEntry.transferSize || resourceEntry.decodedBodySize || 0,\r\n      });\r\n    }\r\n    // Check for render-blocking resources (simplified: CSS and fonts are often render-blocking)\r\n    // 'renderBlockingStatus' is experimental and might not be available on all PerformanceResourceTiming entries.\r\n    const isRenderBlocking = (entry: PerformanceResourceTiming): boolean => {\r\n      if ('renderBlockingStatus' in entry) {\r\n        return (entry as any).renderBlockingStatus === 'blocking';\r\n      }\r\n      // Fallback for browsers not supporting renderBlockingStatus:\r\n      // Assume CSS and fonts are render-blocking by default if not loaded async/deferred.\r\n      return entry.initiatorType === 'css' || entry.initiatorType === 'font';\r\n    };\r\n\r\n    if (isRenderBlocking(resourceEntry)) {\r\n       metrics.renderBlocking.push({\r\n        name: new URL(resourceEntry.name, window.location.origin).pathname,\r\n        duration: resourceEntry.duration,\r\n        size: resourceEntry.transferSize || resourceEntry.decodedBodySize || 0,\r\n      });\r\n    }\r\n  });\r\n\r\n  if (typeof PerformanceObserver !== 'undefined' && 'observe' in PerformanceObserver.prototype) {\r\n    const longTaskObserver = new PerformanceObserver((list) => {\r\n      for (const entry of list.getEntries()) {\r\n        metrics.longTasks.push({\r\n          name: entry.name,\r\n          startTime: entry.startTime,\r\n          duration: entry.duration,\r\n        });\r\n        // Update TBT based on long tasks over 50ms\r\n        if (entry.duration > 50) {\r\n            metrics.TBT += (entry.duration - 50);\r\n        }\r\n      }\r\n    });\r\n    try {\r\n      longTaskObserver.observe({ type: 'longtask', buffered: true });\r\n    } catch (e) {\r\n      console.warn('Longtask observer not supported or failed.', e);\r\n    }\r\n  }\r\n  \r\n  return metrics;\r\n}\r\n\r\nexport default function PerformanceDashboard() {\r\n  const [metrics, setMetrics] = useState<PerformanceMetrics | null>(null);\r\n  const [view, setView] = useState<'overview' | 'resources' | 'javascript' | 'rendering'>('overview');\r\n  \r\n  const loadMetrics = useCallback(() => {\r\n    const initialMetrics = capturePerformanceMetrics();\r\n    if (initialMetrics) {\r\n      setMetrics(prev => ({...prev, ...initialMetrics})); // Merge, keeping web-vitals if already set\r\n    }\r\n\r\n    if (typeof window !== 'undefined') {\r\n      import('web-vitals').then(({ onCLS, onINP, onLCP, onFCP, Metric }) => { // Updated to onINP, added Metric type\r\n        onCLS((metric: Metric) => setMetrics(prev => ({ ...prev!, CLS: metric.value })), { reportAllChanges: true });\r\n        onINP((metric: Metric) => setMetrics(prev => ({ ...prev!, INP: metric.value }))); // Changed from onFID to onINP\r\n        onLCP((metric: Metric) => setMetrics(prev => ({ ...prev!, LCP: metric.value })));\r\n        // onFCP((metric: Metric) => setMetrics(prev => ({ ...prev!, FCP: metric.value }))); // FCP is also available via web-vitals if needed, but already captured\r\n        // TBT is calculated from long tasks observer, direct onTBT is not standard in web-vitals\r\n      });\r\n    }\r\n  }, []);\r\n  \r\n  useEffect(() => {\r\n    loadMetrics(); // Initial load\r\n    const timeout = setTimeout(loadMetrics, 3000); // Load again after page is likely settled\r\n    return () => clearTimeout(timeout);\r\n  }, [loadMetrics]);\r\n  \r\n  if (!metrics) {\r\n    return <div className=\"p-8 text-center text-gray-500\">Verzamelen van performance metrics...</div>;\r\n  }\r\n  \r\n  // Data for Resource Loading Chart\r\n  const topSlowestResources = [...metrics.resourceLoading]\r\n    .sort((a, b) => b.duration - a.duration)\r\n    .slice(0, 10);\r\n\r\n  const resourceChartData = {\r\n    labels: topSlowestResources.map(r => r.name.split('/').pop() || r.name),\r\n    datasets: [{\r\n      label: 'Laadtijd (ms)',\r\n      data: topSlowestResources.map(r => r.duration),\r\n      backgroundColor: topSlowestResources.map(r => {\r\n        switch(r.category) {\r\n          case 'js': return 'rgba(139, 92, 246, 0.7)'; // purple\r\n          case 'css': return 'rgba(236, 72, 153, 0.7)'; // pink\r\n          case 'image': return 'rgba(6, 182, 212, 0.7)'; // cyan\r\n          case 'api': return 'rgba(245, 158, 11, 0.7)'; // amber\r\n          default: return 'rgba(156, 163, 175, 0.7)'; // gray\r\n        }\r\n      }),\r\n    }],\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-6 bg-gray-50 min-h-screen\">\r\n      <header className=\"mb-8\">\r\n        <h1 className=\"text-3xl font-bold text-purple-700 mb-2\">\r\n          FibroGuardian Pro - Performance Dashboard\r\n        </h1>\r\n        <p className=\"text-gray-600\">Real-time inzichten in de prestaties van de applicatie.</p>\r\n      </header>\r\n      \r\n      <nav className=\"mb-6 flex space-x-2 border-b border-gray-300 pb-2\">\r\n        {(['overview', 'resources', 'javascript', 'rendering'] as const).map(v => (\r\n          <button\r\n            key={v}\r\n            onClick={() => setView(v)}\r\n            className={`px-4 py-2 rounded-t-md text-sm font-medium transition-colors ${\r\n              view === v \r\n                ? 'bg-purple-600 text-white border-b-2 border-purple-700' \r\n                : 'text-gray-600 hover:bg-gray-200 hover:text-gray-800'\r\n            }`}\r\n          >\r\n            {v.charAt(0).toUpperCase() + v.slice(1)}\r\n          </button>\r\n        ))}\r\n      </nav>\r\n        \r\n      {view === 'overview' && (\r\n        <section id=\"overview-metrics\" className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 mb-8\">\r\n          <MetricCard title=\"First Contentful Paint (FCP)\" value={metrics.FCP} unit=\"ms\" goodThreshold={1800} poorThreshold={3000} />\r\n          <MetricCard title=\"Largest Contentful Paint (LCP)\" value={metrics.LCP} unit=\"ms\" goodThreshold={2500} poorThreshold={4000} />\r\n          <MetricCard title=\"Interaction to Next Paint (INP)\" value={metrics.INP} unit=\"ms\" goodThreshold={200} poorThreshold={500} />\r\n          <MetricCard title=\"Cumulative Layout Shift (CLS)\" value={metrics.CLS} unit=\"\" goodThreshold={0.1} poorThreshold={0.25} precision={3} />\r\n          <MetricCard title=\"Time to Interactive (TTI)\" value={metrics.TTI} unit=\"ms\" goodThreshold={3800} poorThreshold={7300} />\r\n          <MetricCard title=\"Total Blocking Time (TBT)\" value={metrics.TBT} unit=\"ms\" goodThreshold={200} poorThreshold={600} />\r\n        </section>\r\n      )}\r\n      \r\n      {view === 'resources' && (\r\n        <section id=\"resource-analysis\" className=\"space-y-6 bg-white p-6 rounded-lg shadow\">\r\n          <h2 className=\"text-xl font-semibold text-gray-700 mb-4\">Resource Analyse</h2>\r\n          <div className=\"h-96\"> {/* Increased height for better visibility */}\r\n            <Bar data={resourceChartData} options={resourceChartOptions} />\r\n          </div>\r\n          <ResourceTable resources={metrics.resourceLoading} />\r\n        </section>\r\n      )}\r\n      \r\n      {/* TODO: Implement JavaScript and Rendering views */}\r\n      {view === 'javascript' && <div className=\"bg-white p-6 rounded-lg shadow\"><h2 className=\"text-xl font-semibold\">JavaScript Execution</h2><p>Details over JS execution komen hier.</p></div>}\r\n      {view === 'rendering' && <div className=\"bg-white p-6 rounded-lg shadow\"><h2 className=\"text-xl font-semibold\">Render-Blocking Resources</h2><p>Details over render-blocking resources komen hier.</p></div>}\r\n      \r\n      <footer className=\"mt-8 text-center\">\r\n        <button\r\n          onClick={loadMetrics}\r\n          className=\"px-6 py-2 bg-purple-600 text-white font-semibold rounded-md hover:bg-purple-700 transition-colors shadow focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2\"\r\n        >\r\n          Metrics Verversen\r\n        </button>\r\n        <p className=\"text-xs text-gray-500 mt-2\">\r\n          Laatst bijgewerkt: {new Date().toLocaleTimeString()}\r\n        </p>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Helper component voor metrieken\r\nfunction MetricCard({ title, value, unit, goodThreshold, poorThreshold, precision = 0 }: \r\n  { title: string; value?: number; unit: string; goodThreshold: number; poorThreshold: number; precision?: number }\r\n) {\r\n  let status = 'unknown';\r\n  let bgColor = 'bg-gray-100';\r\n  let textColor = 'text-gray-800';\r\n\r\n  if (value !== undefined && value !== null) {\r\n    if (title === 'Cumulative Layout Shift') { // Lower is better for CLS\r\n        if (value <= goodThreshold) status = 'good';\r\n        else if (value <= poorThreshold) status = 'warning';\r\n        else status = 'poor';\r\n    } else { // Higher is better for others (or rather, lower time is better)\r\n        if (value <= goodThreshold) status = 'good';\r\n        else if (value <= poorThreshold) status = 'warning';\r\n        else status = 'poor';\r\n    }\r\n  }\r\n  \r\n  if (status === 'good') { bgColor = 'bg-green-100'; textColor = 'text-green-800'; }\r\n  else if (status === 'warning') { bgColor = 'bg-yellow-100'; textColor = 'text-yellow-800'; }\r\n  else if (status === 'poor') { bgColor = 'bg-red-100'; textColor = 'text-red-800'; }\r\n  \r\n  return (\r\n    <div className={`${bgColor} p-4 rounded-lg shadow-md`}>\r\n      <h3 className=\"text-sm font-medium text-gray-700 truncate\">{title}</h3>\r\n      <p className={`text-3xl font-bold ${textColor} mt-1`}>\r\n        {value !== undefined && value !== null ? value.toFixed(precision) : '-'}\r\n        <span className=\"text-sm font-normal ml-1\">{unit}</span>\r\n      </p>\r\n      <p className={`text-xs mt-1 ${\r\n        status === 'good' ? 'text-green-600' : \r\n        status === 'warning' ? 'text-yellow-600' : \r\n        status === 'poor' ? 'text-red-600' : 'text-gray-500'\r\n      }`}>\r\n        {status === 'good' ? 'Goed' : status === 'warning' ? 'Matig' : status === 'poor' ? 'Slecht' : 'N/A'}\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Chart options for Resource Chart\r\nconst resourceChartOptions = {\r\n  indexAxis: 'y' as const,\r\n  responsive: true,\r\n  maintainAspectRatio: false,\r\n  scales: { x: { beginAtZero: true, title: { display: true, text: 'Laadtijd (ms)' } }, y: { ticks: { autoSkip: false } } },\r\n  plugins: {\r\n    legend: { display: false },\r\n    title: { display: true, text: 'Top 10 Langzaamste Resources (ms)', font: { size: 16 } },\r\n  },\r\n};\r\n\r\n// Table for Resources\r\nfunction ResourceTable({ resources }: { resources: PerformanceMetrics['resourceLoading']}) {\r\n  const sortedResources = [...resources].sort((a,b) => b.duration - a.duration).slice(0, 20);\r\n  return (\r\n    <div className=\"overflow-x-auto mt-6\">\r\n      <table className=\"min-w-full text-sm\">\r\n        <thead className=\"bg-gray-100\">\r\n          <tr>\r\n            <th className=\"px-4 py-2 text-left font-semibold text-gray-600\">Resource</th>\r\n            <th className=\"px-4 py-2 text-left font-semibold text-gray-600\">Type</th>\r\n            <th className=\"px-4 py-2 text-right font-semibold text-gray-600\">Grootte (KB)</th>\r\n            <th className=\"px-4 py-2 text-right font-semibold text-gray-600\">Laadtijd (ms)</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody className=\"bg-white divide-y divide-gray-200\">\r\n          {sortedResources.map((resource, index) => (\r\n            <tr key={index}>\r\n              <td className=\"px-4 py-2 whitespace-nowrap truncate max-w-xs\" title={resource.name}>\r\n                {resource.name.split('/').pop() || resource.name}\r\n              </td>\r\n              <td className=\"px-4 py-2\">\r\n                <span className={`px-2 py-0.5 rounded-full text-xs font-medium ${\r\n                  resource.category === 'js' ? 'bg-purple-100 text-purple-700' :\r\n                  resource.category === 'css' ? 'bg-pink-100 text-pink-700' :\r\n                  resource.category === 'image' ? 'bg-cyan-100 text-cyan-700' :\r\n                  resource.category === 'api' ? 'bg-amber-100 text-amber-700' :\r\n                  'bg-gray-100 text-gray-700'\r\n                }`}>\r\n                  {resource.category}\r\n                </span>\r\n              </td>\r\n              <td className=\"px-4 py-2 text-right\">\r\n                {(resource.size / 1024).toFixed(1)}\r\n              </td>\r\n              <td className={`px-4 py-2 text-right font-medium ${\r\n                resource.duration > 500 ? 'text-red-500' : \r\n                resource.duration > 200 ? 'text-amber-500' : \r\n                'text-green-600'\r\n              }`}>\r\n                {resource.duration.toFixed(0)}\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\examples\\MemoryLeakPreventionExample.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":13,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":13,"endColumn":52},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'clearTimeout' is assigned a value but never used.","line":23,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":48},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'clearInterval' is assigned a value but never used.","line":23,"column":50,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":63},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'removeEventListener' is assigned a value but never used.","line":26,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":48},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'fetchData' function makes the dependencies of useEffect Hook (at line 80) change on every render. To fix this, wrap the definition of 'fetchData' in its own useCallback() Hook.","line":29,"column":9,"nodeType":"VariableDeclarator","endLine":53,"endColumn":4,"suggestions":[{"desc":"Wrap the definition of 'fetchData' in its own useCallback() Hook.","fix":{"range":[1069,1755],"text":"useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      // Using AbortController signal with fetch\r\n      const response = await fetch('/api/data', { signal });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Error: ${response.status}`);\r\n      }\r\n      \r\n      const result = await response.json();\r\n      \r\n      // Safe state update - won't cause memory leak if component unmounts\r\n      setData(result);\r\n    } catch (err) {\r\n      // Don't set error state if the request was aborted\r\n      if (err instanceof Error && err.name !== 'AbortError') {\r\n        setError(err.message);\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  })"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'timer' is assigned a value but never used.","line":58,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":16},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":59,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":59,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1937,1968],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'intervalId' is assigned a value but never used.","line":67,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":67,"endColumn":21},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":68,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":68,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2184,2213],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":73,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":73,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2318,2348],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect } from 'react';\r\n\r\nimport { useAbortController, useEventListener, useSafeState, useTimers } from '@/hooks/useSafeState';\r\n\r\n/**\r\n * This component demonstrates how to prevent memory leaks in React components.\r\n * It shows examples of using custom hooks to safely handle:\r\n * 1. State updates in async operations\r\n * 2. Fetch requests with AbortController\r\n * 3. Timers (setTimeout/setInterval)\r\n * 4. Event listeners\r\n */\r\nexport default function MemoryLeakPreventionExample() {\r\n  // 1. Safe state updates\r\n  const [data, setData] = useSafeState<string[]>([]);\r\n  const [loading, setLoading] = useSafeState<boolean>(false);\r\n  const [error, setError] = useSafeState<string | null>(null);\r\n\r\n  // 2. Abort controller for fetch requests\r\n  const { signal } = useAbortController();\r\n\r\n  // 3. Safe timers\r\n  const { setTimeout, setInterval, clearTimeout, clearInterval } = useTimers();\r\n\r\n  // 4. Safe event listeners\r\n  const { addEventListener, removeEventListener } = useEventListener();\r\n\r\n  // Example of fetching data safely\r\n  const fetchData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      // Using AbortController signal with fetch\r\n      const response = await fetch('/api/data', { signal });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Error: ${response.status}`);\r\n      }\r\n      \r\n      const result = await response.json();\r\n      \r\n      // Safe state update - won't cause memory leak if component unmounts\r\n      setData(result);\r\n    } catch (err) {\r\n      // Don't set error state if the request was aborted\r\n      if (err instanceof Error && err.name !== 'AbortError') {\r\n        setError(err.message);\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Example of using safe timers\r\n  useEffect(() => {\r\n    // This timer will be automatically cleared when the component unmounts\r\n    const timer = setTimeout(() => {\r\n      console.log('Timer completed');\r\n      fetchData();\r\n    }, 2000);\r\n\r\n    // You can still clear the timer manually if needed\r\n    // clearTimeout(timer);\r\n\r\n    // Example of using safe interval\r\n    const intervalId = setInterval(() => {\r\n      console.log('Interval tick');\r\n    }, 5000);\r\n\r\n    // Example of using safe event listeners\r\n    const handleResize = () => {\r\n      console.log('Window resized');\r\n    };\r\n\r\n    addEventListener(window, 'resize', handleResize);\r\n\r\n    // No need to clean up timers or event listeners manually\r\n    // They will be automatically cleaned up when the component unmounts\r\n  }, [setTimeout, setInterval, addEventListener, fetchData]);\r\n\r\n  return (\r\n    <div className=\"rounded-lg border p-4 shadow-sm\">\r\n      <h2 className=\"mb-4 text-xl font-bold\">Memory Leak Prevention Example</h2>\r\n      \r\n      <div className=\"mb-4\">\r\n        <button\r\n          onClick={fetchData}\r\n          className=\"rounded bg-blue-500 px-4 py-2 text-white transition hover:bg-blue-600\"\r\n          disabled={loading}\r\n        >\r\n          {loading ? 'Loading...' : 'Fetch Data'}\r\n        </button>\r\n      </div>\r\n      \r\n      {error && (\r\n        <div className=\"mb-4 rounded bg-red-100 p-3 text-red-700\">\r\n          Error: {error}\r\n        </div>\r\n      )}\r\n      \r\n      <div>\r\n        <h3 className=\"mb-2 font-semibold\">Data:</h3>\r\n        {data.length > 0 ? (\r\n          <ul className=\"list-disc pl-5\">\r\n            {data.map((item, index) => (\r\n              <li key={index}>{item}</li>\r\n            ))}\r\n          </ul>\r\n        ) : (\r\n          <p className=\"text-gray-500\">No data available</p>\r\n        )}\r\n      </div>\r\n      \r\n      <div className=\"mt-6 rounded bg-yellow-50 p-3\">\r\n        <h3 className=\"mb-2 font-semibold\">How This Prevents Memory Leaks:</h3>\r\n        <ul className=\"list-disc space-y-1 pl-5 text-sm\">\r\n          <li>\r\n            <strong>useSafeState</strong>: Prevents state updates after component unmount\r\n          </li>\r\n          <li>\r\n            <strong>useAbortController</strong>: Cancels fetch requests when component unmounts\r\n          </li>\r\n          <li>\r\n            <strong>useTimers</strong>: Automatically clears timers when component unmounts\r\n          </li>\r\n          <li>\r\n            <strong>useEventListener</strong>: Automatically removes event listeners when component unmounts\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\layout\\DashboardLayout.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":67,"fix":{"range":[169,169],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":45,"fix":{"range":[215,215],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`react` import should occur before import of `@/containers/layout/SidebarContainer`","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":45,"fix":{"range":[15,217],"text":"import { useEffect, useState } from 'react';\r\nimport SidebarContainer from '@/containers/layout/SidebarContainer';\r\nimport TopbarContainer from '@/containers/layout/TopbarContainer'; // Updated import\r\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":58,"fix":{"range":[274,274],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/components/auth/AuthProvider` import should occur before import of `@/containers/layout/SidebarContainer`","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":58,"fix":{"range":[15,276],"text":"import { useAuth } from '@/components/auth/AuthProvider';\r\nimport SidebarContainer from '@/containers/layout/SidebarContainer';\r\nimport TopbarContainer from '@/containers/layout/TopbarContainer'; // Updated import\r\nimport { useEffect, useState } from 'react';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`next/navigation` import should occur before import of `@/containers/layout/SidebarContainer`","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":45,"fix":{"range":[15,322],"text":"import { useRouter } from 'next/navigation';\r\nimport SidebarContainer from '@/containers/layout/SidebarContainer';\r\nimport TopbarContainer from '@/containers/layout/TopbarContainer'; // Updated import\r\nimport { useEffect, useState } from 'react';\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRouter' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":19},{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'useRouter' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":19,"fix":{"range":[276,324],"text":"\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":8,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":8,"endColumn":40},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'loading' is assigned a value but never used.","line":9,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":24},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":30,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":30,"endColumn":69,"fix":{"range":[1518,1563],"text":"flex min-h-screen items-center justify-center"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":31,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":31,"endColumn":109,"fix":{"range":[1591,1674],"text":"h-12 w-12 animate-spin rounded-full border-4 border-purple-500 border-t-transparent"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'w-12, h-12' could be replaced by the 'size-12' shorthand!","line":31,"column":14,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":31,"endColumn":109,"fix":{"range":[1591,1674],"text":"size-12 border-4 border-purple-500 border-t-transparent rounded-full animate-spin"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":55,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":55,"endColumn":53,"fix":{"range":[3065,3094],"text":"flex flex-1 flex-col md:ml-64"}}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":7,"fixableWarningCount":4,"source":"'use client';\r\nimport SidebarContainer from '@/containers/layout/SidebarContainer';\r\nimport TopbarContainer from '@/containers/layout/TopbarContainer'; // Updated import\r\nimport { useEffect, useState } from 'react';\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\nimport { useRouter } from 'next/navigation';\r\n\r\nexport default function DashboardLayout({ children }: { children: React.ReactNode }) {\r\n  const { user, loading, loadingAuth, loadingProfile } = useAuth(); // Use more specific loading states from AuthProvider\r\n  // const router = useRouter(); // No longer needed for redirection here\r\n  const [mounted, setMounted] = useState(false);\r\n\r\n  // console.log('[Client DashboardLayout] State:', { user: !!user, loading, mounted });\r\n\r\n  // Voorkomen van hydration mismatch\r\n  useEffect(() => {\r\n    setMounted(true);\r\n  }, []);\r\n\r\n  // Redirection logic is now primarily handled by AuthProvider.\r\n  // This component will show a loading spinner while AuthProvider determines auth state.\r\n  // If AuthProvider determines no user/session for a protected route, it will redirect.\r\n\r\n  // Use the combined loading state from AuthProvider, or specific ones if preferred\r\n  const isLoadingAuthState = loadingAuth || (!!user && loadingProfile); // or simply `loading` from useAuth()\r\n\r\n  if (!mounted || isLoadingAuthState) { // Check mounted and the auth loading state\r\n    // console.log('[Client DashboardLayout] Rendering spinner due to mounting or auth loading');\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-screen\">\r\n        <div className=\"w-12 h-12 border-4 border-purple-500 border-t-transparent rounded-full animate-spin\"></div>\r\n      </div>\r\n    );\r\n  }\r\n \r\n  // If still loading, AuthProvider hasn't finished. If not loading and no user,\r\n  // AuthProvider should have redirected if this is a protected route.\r\n  // So, if we reach here and there's no user, it implies this might be a brief moment before redirect,\r\n  // or the route is public but mistakenly using DashboardLayout without auth.\r\n  // For simplicity, we rely on AuthProvider's redirection. If !user, AuthProvider handles it.\r\n  // If it's a route that *can* be accessed without a user but still uses DashboardLayout (unlikely for a \"dashboard\"),\r\n  // then this check might need adjustment. For now, assume AuthProvider handles the !user case for protected routes.\r\n  if (!user && mounted && !isLoadingAuthState) {\r\n    // This case should ideally not be hit for protected routes as AuthProvider would redirect.\r\n    // If it is, it might indicate a public page using DashboardLayout or a race condition.\r\n    // console.log('[Client DashboardLayout] User is null after loading, AuthProvider should handle redirect.');\r\n    return null; // Or a more graceful \"unauthorized\" message if this layout can be on public pages\r\n  }\r\n \r\n  // console.log('[Client DashboardLayout] Rendering main layout');\r\n  return (\r\n    <div className=\"flex h-screen bg-gray-50\">\r\n      <SidebarContainer /> {/* Updated component */}\r\n      \r\n      <div className=\"flex-1 flex flex-col md:ml-64\">\r\n        <TopbarContainer /> {/* Updated component */}\r\n        \r\n        <main className=\"flex-1 overflow-y-auto p-4\">\r\n          {children}\r\n        </main>\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\layout\\SidebarPresentational.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":45,"fix":{"range":[59,59],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@supabase/supabase-js` import should occur before import of `next/link`","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":46,"fix":{"range":[61,139],"text":"import { User } from '@supabase/supabase-js';\r\nimport Link from 'next/link';\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":24,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":24,"endColumn":46},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":42,"column":9,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":42,"endColumn":174,"fix":{"range":[1140,1293],"text":"fixed left-4 top-4 z-50 rounded-md bg-white p-2 text-gray-600 shadow-md hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-purple-500 md:hidden"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-6, w-6' could be replaced by the 'size-6' shorthand!","line":46,"column":49,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":46,"endColumn":68,"fix":{"range":[1455,1462],"text":"size-6"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":51,"column":23,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":51,"endColumn":86,"fix":{"range":[1811,1862],"text":"fixed inset-0 z-30 bg-black bg-opacity-25 md:hidden"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'bg-opacity-25' should be replaced by an opacity suffix (eg. '/25')","line":51,"column":23,"nodeType":"JSXAttribute","messageId":"classnameOpacityDeprecated","endLine":51,"endColumn":86},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":55,"column":9,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":57,"endColumn":12,"fix":{"range":[1981,2109],"text":"`fixed inset-y-0 left-0 z-40 w-64 transform bg-white shadow-xl transition-transform duration-300 ease-in-out md:translate-x-0 ${"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'transform' is not needed in Tailwind CSS v3!","line":55,"column":9,"nodeType":"JSXAttribute","messageId":"classnameNotNeeded","endLine":57,"endColumn":12,"fix":{"range":[1981,2109],"text":"`fixed inset-y-0 left-0 z-40 w-64 bg-white shadow-xl transition-transform duration-300 ease-in-out md:translate-x-0${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":60,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":60,"endColumn":46,"fix":{"range":[2252,2272],"text":"flex h-full flex-col"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":61,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":61,"endColumn":56,"fix":{"range":[2302,2330],"text":"border-b border-gray-200 p-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":62,"column":37,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":62,"endColumn":82,"fix":{"range":[2381,2414],"text":"group flex items-center space-x-2"}},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":63,"column":15,"nodeType":"JSXOpeningElement","endLine":63,"endColumn":140},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":63,"column":65,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":63,"endColumn":137,"fix":{"range":[2493,2553],"text":"h-8 w-8 rounded-md transition-opacity group-hover:opacity-80"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-8, w-8' could be replaced by the 'size-8' shorthand!","line":63,"column":65,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":63,"endColumn":137,"fix":{"range":[2493,2553],"text":"size-8 rounded-md group-hover:opacity-80 transition-opacity"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":64,"column":21,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":64,"endColumn":116,"fix":{"range":[2590,2673],"text":"text-lg font-semibold text-purple-700 transition-colors group-hover:text-purple-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":76,"column":23,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":78,"endColumn":26,"fix":{"range":[3182,3292],"text":"`group flex items-center rounded-md px-3 py-2.5 text-sm font-medium transition-all duration-150 ease-in-out ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":81,"column":29,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":81,"endColumn":131,"fix":{"range":[3585,3601],"text":"`mr-3 h-5 w-5 ${"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'w-5, h-5' could be replaced by the 'size-5' shorthand!","line":81,"column":29,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":81,"endColumn":131,"fix":{"range":[3585,3601],"text":"`mr-3 size-5 ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":92,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":92,"endColumn":64,"fix":{"range":[3980,4016],"text":"mt-auto border-t border-gray-200 p-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":95,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":95,"endColumn":170,"fix":{"range":[4100,4243],"text":"group flex w-full items-center rounded-md px-3 py-2.5 text-sm font-medium text-gray-600 transition-colors hover:bg-gray-100 hover:text-gray-900"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":98,"column":57,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":98,"endColumn":76,"fix":{"range":[4407,4414],"text":"size-5"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":2,"fixableWarningCount":17,"source":"'use client';\r\nimport React, { ReactElement } from 'react';\r\nimport Link from 'next/link';\r\nimport { User } from '@supabase/supabase-js';\r\n\r\nexport interface MenuItemP {\r\n  href: string;\r\n  label: string;\r\n  iconName: string;\r\n  disabled?: boolean;\r\n}\r\n\r\ninterface SidebarPresentationalProps {\r\n  isOpen: boolean;\r\n  user: User | null; // User object for potential display or conditional rendering\r\n  profileType: 'patient' | 'specialist' | 'admin' | null;\r\n  menuItems: MenuItemP[];\r\n  pathname: string;\r\n  onToggleSidebar: () => void;\r\n  onLogout: () => Promise<void>;\r\n  renderIcon: (iconName: string) => ReactElement;\r\n}\r\n\r\nexport default function SidebarPresentational({\r\n  isOpen,\r\n  user,\r\n  // profileType, // Not directly used in rendering logic here, menuItems are pre-calculated\r\n  menuItems,\r\n  pathname,\r\n  onToggleSidebar,\r\n  onLogout,\r\n  renderIcon,\r\n}: SidebarPresentationalProps) {\r\n  // If no user, don't render the sidebar content (container might return null earlier)\r\n  if (!user) return null;\r\n\r\n  return (\r\n    <>\r\n      <button\r\n        id=\"mobile-menu-button\"\r\n        onClick={onToggleSidebar}\r\n        className=\"md:hidden fixed top-4 left-4 z-50 p-2 rounded-md bg-white text-gray-600 shadow-md hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-purple-500\"\r\n        aria-controls=\"sidebar\"\r\n        aria-label={isOpen ? \"Sluit menu\" : \"Open menu\"}\r\n      >\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n          {isOpen ? <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" /> : <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 6h16M4 12h16M4 18h16\" />}\r\n        </svg>\r\n      </button>\r\n      \r\n      {isOpen && <div className=\"fixed inset-0 bg-black bg-opacity-25 z-30 md:hidden\" onClick={onToggleSidebar} aria-hidden=\"true\"></div>}\r\n      \r\n      <aside\r\n        id=\"sidebar\"\r\n        className={`fixed inset-y-0 left-0 z-40 w-64 bg-white shadow-xl transform transition-transform duration-300 ease-in-out md:translate-x-0 ${\r\n          isOpen ? 'translate-x-0' : '-translate-x-full'\r\n        }`}\r\n        aria-label=\"Hoofdnavigatie\"\r\n      >\r\n        <div className=\"h-full flex flex-col\">\r\n          <div className=\"p-4 border-b border-gray-200\">\r\n            <Link href=\"/dashboard\" className=\"flex items-center space-x-2 group\">\r\n              <img src=\"/logo.png\" alt=\"FibroGuardian Pro Logo\" className=\"h-8 w-8 rounded-md group-hover:opacity-80 transition-opacity\" />\r\n              <span className=\"text-lg font-semibold text-purple-700 group-hover:text-purple-800 transition-colors\">FibroGuardian</span>\r\n            </Link>\r\n          </div>\r\n          \r\n          <nav className=\"flex-1 overflow-y-auto py-3\">\r\n            <ul className=\"space-y-1 px-3\">\r\n              {menuItems.map((item) => {\r\n                const isActive = pathname === item.href || (item.href !== '/dashboard' && pathname.startsWith(item.href));\r\n                return (\r\n                  <li key={item.href}>\r\n                    <Link\r\n                      href={item.href}\r\n                      className={`flex items-center px-3 py-2.5 rounded-md text-sm font-medium transition-all duration-150 ease-in-out group ${\r\n                        isActive ? 'bg-purple-100 text-purple-700 shadow-sm' : 'text-gray-600 hover:bg-gray-100 hover:text-gray-900'\r\n                      }`}\r\n                      aria-current={isActive ? 'page' : undefined}\r\n                    >\r\n                      <span className={`mr-3 w-5 h-5 ${isActive ? 'text-purple-600' : 'text-gray-400 group-hover:text-gray-500'}`}>\r\n                        {renderIcon(item.iconName)}\r\n                      </span>\r\n                      <span>{item.label}</span>\r\n                    </Link>\r\n                  </li>\r\n                );\r\n              })}\r\n            </ul>\r\n          </nav>\r\n          \r\n          <div className=\"p-3 border-t border-gray-200 mt-auto\">\r\n            <button\r\n              onClick={onLogout}\r\n              className=\"flex items-center w-full px-3 py-2.5 rounded-md text-sm font-medium text-gray-600 hover:bg-gray-100 hover:text-gray-900 transition-colors group\"\r\n            >\r\n              <span className=\"mr-3 text-gray-400 group-hover:text-gray-500\">\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1\" /></svg>\r\n              </span>\r\n              <span>Uitloggen</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </aside>\r\n    </>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\layout\\TopbarPresentational.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":27,"fix":{"range":[41,41],"text":"\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":19,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":19,"endColumn":45},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":27,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":27,"endColumn":76,"fix":{"range":[612,663],"text":"sticky top-0 z-10 border-b border-gray-200 bg-white"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":28,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":28,"endColumn":67,"fix":{"range":[689,732],"text":"flex items-center justify-between px-4 py-2"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":33,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":33,"endColumn":62,"fix":{"range":[912,948],"text":"flex flex-1 items-center justify-end"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":37,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":37,"endColumn":105,"fix":{"range":[1074,1152],"text":"flex items-center space-x-2 rounded-md p-2 transition-colors hover:bg-gray-100"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":42,"column":20,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":42,"endColumn":115,"fix":{"range":[1343,1426],"text":"flex h-8 w-8 items-center justify-center overflow-hidden rounded-full bg-purple-100"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-8, w-8' could be replaced by the 'size-8' shorthand!","line":42,"column":20,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":42,"endColumn":115,"fix":{"range":[1343,1426],"text":"size-8 rounded-full bg-purple-100 flex items-center justify-center overflow-hidden"}},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":44,"column":19,"nodeType":"JSXOpeningElement","endLine":48,"endColumn":21},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-full, w-full' could be replaced by the 'size-full' shorthand!","line":47,"column":21,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":47,"endColumn":59,"fix":{"range":[1619,1645],"text":"size-full object-cover"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":56,"column":21,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":56,"endColumn":77,"fix":{"range":[1983,2027],"text":"hidden text-sm text-gray-700 md:inline-block"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":59,"column":55,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":59,"endColumn":88,"fix":{"range":[2184,2205],"text":"size-5 text-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":67,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":67,"endColumn":95,"fix":{"range":[2617,2683],"text":"absolute right-0 z-20 mt-2 w-48 rounded-md bg-white py-1 shadow-lg"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":85,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":85,"endColumn":103,"fix":{"range":[3388,3460],"text":"block w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-gray-100"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":1,"fixableWarningCount":11,"source":"'use client';\r\nimport React from 'react';\r\nimport Link from 'next/link';\r\n\r\nexport interface TopbarProfileData {\r\n  voornaam?: string;\r\n  achternaam?: string;\r\n  avatar_url?: string;\r\n}\r\n\r\ninterface TopbarPresentationalProps {\r\n  profileData: TopbarProfileData;\r\n  menuOpen: boolean;\r\n  onToggleMenu: () => void;\r\n  onLogout: () => Promise<void>;\r\n  onCloseMenu: () => void; // To close menu when a link is clicked\r\n}\r\n\r\nexport default function TopbarPresentational({\r\n  profileData,\r\n  menuOpen,\r\n  onToggleMenu,\r\n  onLogout,\r\n  onCloseMenu,\r\n}: TopbarPresentationalProps) {\r\n  return (\r\n    <header className=\"bg-white border-b border-gray-200 sticky top-0 z-10\">\r\n      <div className=\"flex justify-between items-center px-4 py-2\">\r\n        <div className=\"flex items-center md:hidden\">\r\n          {/* Hamburger menu icon is handled by Sidebar component */}\r\n        </div>\r\n        \r\n        <div className=\"flex-1 flex justify-end items-center\">\r\n          <div className=\"relative\">\r\n            <button\r\n              onClick={onToggleMenu}\r\n              className=\"flex items-center space-x-2 p-2 rounded-md hover:bg-gray-100 transition-colors\"\r\n              aria-expanded={menuOpen ? 'true' : 'false'}\r\n              aria-controls=\"user-menu\"\r\n              aria-label=\"Gebruikersmenu\"\r\n            >\r\n              <div className=\"h-8 w-8 rounded-full bg-purple-100 flex items-center justify-center overflow-hidden\">\r\n                {profileData.avatar_url ? (\r\n                  <img\r\n                    src={profileData.avatar_url}\r\n                    alt=\"Profielfoto\"\r\n                    className=\"h-full w-full object-cover\"\r\n                  />\r\n                ) : (\r\n                  <span className=\"font-medium text-purple-800\">\r\n                    {profileData.voornaam?.charAt(0) || ''}\r\n                    {profileData.achternaam?.charAt(0) || ''}\r\n                  </span>\r\n                )}\r\n              </div>\r\n              <span className=\"hidden md:inline-block text-sm text-gray-700\">\r\n                {profileData.voornaam} {profileData.achternaam}\r\n              </span>\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 text-gray-500\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\r\n                <path fillRule=\"evenodd\" d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\r\n              </svg>\r\n            </button>\r\n            \r\n            {menuOpen && (\r\n              <div\r\n                id=\"user-menu\"\r\n                className=\"absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg py-1 z-20\"\r\n                role=\"menu\"\r\n                aria-orientation=\"vertical\"\r\n                aria-labelledby=\"user-menu-button\" // Assuming button has id=\"user-menu-button\" or similar\r\n              >\r\n                <Link\r\n                  href=\"/instellingen\"\r\n                  className=\"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100\"\r\n                  onClick={onCloseMenu}\r\n                  role=\"menuitem\"\r\n                >\r\n                  Profiel Instellingen\r\n                </Link>\r\n                <button\r\n                  onClick={async () => {\r\n                    await onLogout();\r\n                    onCloseMenu();\r\n                  }}\r\n                  className=\"block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100\"\r\n                  role=\"menuitem\"\r\n                >\r\n                  Uitloggen\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\onboarding\\GuidedTour.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":73,"fix":{"range":[87,87],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":42,"fix":{"range":[130,130],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/hooks/useLocalStorage` import should occur before import of `@/lib/analytics/userJourney`","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":59,"fix":{"range":[206,403],"text":"import { useLocalStorage } from '@/hooks/useLocalStorage'; // Placeholder hook\r\nimport { trackOnboardingStep, OnboardingStepName } from '@/lib/analytics/userJourney'; // Import OnboardingStepName\r\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":58,"fix":{"range":[547,547],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/components/auth/AuthProvider` import should occur before import of `@/lib/analytics/userJourney`","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":58,"fix":{"range":[206,549],"text":"import { useAuth } from '@/components/auth/AuthProvider';\r\nimport { trackOnboardingStep, OnboardingStepName } from '@/lib/analytics/userJourney'; // Import OnboardingStepName\r\nimport { useLocalStorage } from '@/hooks/useLocalStorage'; // Placeholder hook\r\n// import { useFocusTrap } from '@/lib/accessibility/focus-trap'; // Placeholder hook\r\n"}},{"ruleId":"import/order","severity":2,"message":"`lucide-react` import should occur before import of `react-dom`","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":58,"fix":{"range":[89,624],"text":"import { ChevronLeft, ChevronRight } from 'lucide-react'; // X was unused\r\nimport { createPortal } from 'react-dom';\r\n// import { Button } from '@/components/ds/atoms/Button'; // Placeholder\r\nimport { trackOnboardingStep, OnboardingStepName } from '@/lib/analytics/userJourney'; // Import OnboardingStepName\r\nimport { useLocalStorage } from '@/hooks/useLocalStorage'; // Placeholder hook\r\n// import { useFocusTrap } from '@/lib/accessibility/focus-trap'; // Placeholder hook\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'size' is assigned a value but never used. Allowed unused args must match /^_/u.","line":28,"column":59,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":63},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":114,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":117,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1370,1373],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1370,1373],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":31,"column":5,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":31,"endColumn":369,"fix":{"range":[1432,1590],"text":"`rounded-md px-3 py-1.5 text-xs font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-1 disabled:opacity-60 ${"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":72,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":72,"endColumn":27},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":97,"column":18,"nodeType":"MemberExpression","messageId":"unexpected","endLine":97,"endColumn":29},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":101,"column":18,"nodeType":"MemberExpression","messageId":"unexpected","endLine":101,"endColumn":29},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":155,"column":18,"nodeType":"MemberExpression","messageId":"unexpected","endLine":155,"endColumn":29},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":196,"column":16,"nodeType":"MemberExpression","messageId":"unexpected","endLine":196,"endColumn":27},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":206,"column":16,"nodeType":"MemberExpression","messageId":"unexpected","endLine":206,"endColumn":27},{"ruleId":"jsx-a11y/click-events-have-key-events","severity":2,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":227,"column":7,"nodeType":"JSXOpeningElement","endLine":230,"endColumn":9},{"ruleId":"jsx-a11y/no-static-element-interactions","severity":2,"message":"Avoid non-native interactive elements. If using native HTML is not possible, add an appropriate role and support for tabbing, mouse, keyboard, and touch inputs to an interactive content element.","line":227,"column":7,"nodeType":"JSXOpeningElement","endLine":230,"endColumn":9},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":228,"column":9,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":228,"endColumn":66,"fix":{"range":[9619,9664],"text":"fixed inset-0 z-[1000] bg-black bg-opacity-30"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'bg-opacity-30' should be replaced by an opacity suffix (eg. '/30')","line":228,"column":9,"nodeType":"JSXAttribute","messageId":"classnameOpacityDeprecated","endLine":228,"endColumn":66},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":233,"column":9,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":233,"endColumn":118,"fix":{"range":[9818,9915],"text":"fixed z-[1001] max-w-sm rounded-lg bg-white p-5 shadow-xl transition-all duration-300 ease-in-out"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":239,"column":49,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":239,"endColumn":101,"fix":{"range":[10155,10195],"text":"mb-2 text-lg font-semibold text-gray-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":242,"column":52,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":242,"endColumn":90,"fix":{"range":[10307,10333],"text":"mb-4 text-sm text-gray-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":254,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":254,"endColumn":89,"fix":{"range":[10663,10726],"text":"flex items-center justify-between border-t border-gray-200 pt-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":270,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":270,"endColumn":65,"fix":{"range":[11479,11517],"text":"mt-3 text-center text-xs text-gray-400"}}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":6,"fixableWarningCount":7,"source":"'use client';\r\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport { createPortal } from 'react-dom';\r\n// import { Button } from '@/components/ds/atoms/Button'; // Placeholder\r\nimport { trackOnboardingStep, OnboardingStepName } from '@/lib/analytics/userJourney'; // Import OnboardingStepName\r\nimport { useLocalStorage } from '@/hooks/useLocalStorage'; // Placeholder hook\r\n// import { useFocusTrap } from '@/lib/accessibility/focus-trap'; // Placeholder hook\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\nimport { ChevronLeft, ChevronRight } from 'lucide-react'; // X was unused\r\n\r\n// Placeholder voor useFocusTrap hook\r\nconst useFocusTrap = (ref: React.RefObject<HTMLElement>, active: boolean) => {\r\n  useEffect(() => {\r\n    if (active && ref.current) {\r\n      // Basic focus trap logic (kan veel uitgebreider)\r\n      const focusableElements = ref.current.querySelectorAll(\r\n        'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\r\n      );\r\n      if (focusableElements.length > 0) {\r\n        (focusableElements[0] as HTMLElement).focus();\r\n      }\r\n      // TODO: Implement full focus trap logic (tabbing, shift-tabbing)\r\n    }\r\n  }, [active, ref]);\r\n};\r\n\r\n// Basis Button component\r\nconst Button = ({ onClick, children, variant = 'primary', size = 'md', className: btnClassName = '', ...props }: any) => (\r\n  <button \r\n    onClick={onClick} \r\n    className={`px-3 py-1.5 text-xs font-medium rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-1 disabled:opacity-60 ${btnClassName} ${variant === 'primary' ? 'bg-purple-600 text-white hover:bg-purple-700' : variant === 'ghost' ? 'text-gray-600 hover:bg-gray-100' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`}\r\n    {...props}\r\n  >\r\n    {children}\r\n  </button>\r\n);\r\n\r\n\r\nexport interface TourStep {\r\n  id: string; // Unieke ID voor de stap\r\n  target: string; // CSS selector voor het te highlighten element\r\n  title: string;\r\n  content: React.ReactNode; // Kan JSX bevatten\r\n  position?: 'top' | 'right' | 'bottom' | 'left' | 'center'; // Positie van de tooltip\r\n  beaconPosition?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right'; // Voor de beacon\r\n  disableBeacon?: boolean;\r\n  isFixed?: boolean; // Of de tooltip fixed position gebruikt (bv. voor modals)\r\n  offset?: { x?: number; y?: number }; // Extra offset voor tooltip\r\n  onNext?: () => void | Promise<void>; // Callback bij 'Volgende'\r\n  onPrev?: () => void | Promise<void>; // Callback bij 'Vorige'\r\n  onSkip?: () => void | Promise<void>; // Callback bij 'Overslaan'\r\n  action?: { // Optionele actieknop in de tooltip\r\n    text: string;\r\n    onClick: () => void | Promise<void>;\r\n  };\r\n}\r\n\r\ninterface GuidedTourProps {\r\n  tourId: string; // Unieke ID voor de tour (voor localStorage)\r\n  steps: TourStep[];\r\n  onComplete?: () => void; // Callback als de hele tour is voltooid\r\n  onSkipTour?: () => void; // Callback als de hele tour wordt overgeslagen\r\n  autoStart?: boolean; // Start de tour automatisch als nog niet voltooid\r\n  forceStart?: boolean; // Start de tour altijd, negeert localStorage status\r\n  debug?: boolean; // Voor logging\r\n  // Tracking opties\r\n  trackingConfig?: {\r\n    onboardingStepPrefix?: string; // bv. 'dashboard_tour' resulteert in 'dashboard_tour_step_X'\r\n  };\r\n}\r\n\r\nexport function GuidedTour({\r\n  tourId,\r\n  steps,\r\n  onComplete,\r\n  onSkipTour,\r\n  autoStart = false,\r\n  forceStart = false,\r\n  debug = false,\r\n  trackingConfig,\r\n}: GuidedTourProps) {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [currentStepIndex, setCurrentStepIndex] = useState(0);\r\n  const [tourCompleted, setTourCompleted] = useLocalStorage(`tour_completed_${tourId}`, false);\r\n  const [targetElement, setTargetElement] = useState<HTMLElement | null>(null);\r\n  \r\n  const tooltipRef = useRef<HTMLDivElement>(null);\r\n  const { user } = useAuth();\r\n  useFocusTrap(tooltipRef, isOpen && !!targetElement); // Activeer focus trap als open en target gevonden\r\n\r\n  // Start de tour logica\r\n  useEffect(() => {\r\n    if (forceStart) {\r\n      setIsOpen(true);\r\n      setCurrentStepIndex(0);\r\n      setTourCompleted(false); // Reset completed status bij forceStart\r\n      if (debug) console.log(`[Tour ${tourId}] Force started.`);\r\n    } else if (autoStart && !tourCompleted) {\r\n      setIsOpen(true);\r\n      setCurrentStepIndex(0);\r\n      if (debug) console.log(`[Tour ${tourId}] Auto started.`);\r\n    }\r\n  }, [autoStart, forceStart, tourCompleted, tourId, debug, setTourCompleted]);\r\n\r\n  // Huidige stap data\r\n  const currentStep = isOpen && steps.length > 0 ? steps[currentStepIndex] : null;\r\n\r\n  // Update target element en positie\r\n  const updateTargetAndPosition = useCallback(() => {\r\n    if (!currentStep || !tooltipRef.current) {\r\n      setTargetElement(null);\r\n      return;\r\n    }\r\n    \r\n    const element = document.querySelector(currentStep.target) as HTMLElement | null;\r\n    setTargetElement(element);\r\n\r\n    if (element) {\r\n      element.scrollIntoView({ behavior: 'smooth', block: 'center', inline: 'center' });\r\n      // Highlight logic wordt nu via CSS class gedaan\r\n      // Tooltip positionering\r\n      const targetRect = element.getBoundingClientRect();\r\n      const tooltipNode = tooltipRef.current;\r\n      const { innerWidth, innerHeight, scrollX, scrollY } = window;\r\n\r\n      let top = 0, left = 0;\r\n      const tooltipOffset = 10; // Ruimte tussen target en tooltip\r\n\r\n      switch (currentStep.position) {\r\n        case 'top':\r\n          top = targetRect.top - tooltipNode.offsetHeight - tooltipOffset;\r\n          left = targetRect.left + (targetRect.width / 2) - (tooltipNode.offsetWidth / 2);\r\n          break;\r\n        case 'bottom':\r\n          top = targetRect.bottom + tooltipOffset;\r\n          left = targetRect.left + (targetRect.width / 2) - (tooltipNode.offsetWidth / 2);\r\n          break;\r\n        case 'left':\r\n          top = targetRect.top + (targetRect.height / 2) - (tooltipNode.offsetHeight / 2);\r\n          left = targetRect.left - tooltipNode.offsetWidth - tooltipOffset;\r\n          break;\r\n        case 'right':\r\n          top = targetRect.top + (targetRect.height / 2) - (tooltipNode.offsetHeight / 2);\r\n          left = targetRect.right + tooltipOffset;\r\n          break;\r\n        default: // center or undefined\r\n          top = innerHeight / 2 - tooltipNode.offsetHeight / 2;\r\n          left = innerWidth / 2 - tooltipNode.offsetWidth / 2;\r\n      }\r\n      \r\n      // Boundary checks\r\n      tooltipNode.style.top = `${Math.max(tooltipOffset, Math.min(top + scrollY, innerHeight + scrollY - tooltipNode.offsetHeight - tooltipOffset))}px`;\r\n      tooltipNode.style.left = `${Math.max(tooltipOffset, Math.min(left + scrollX, innerWidth + scrollX - tooltipNode.offsetWidth - tooltipOffset))}px`;\r\n      \r\n      if (debug) console.log(`[Tour ${tourId}] Step ${currentStepIndex}: Target found, tooltip positioned.`, element);\r\n    } else {\r\n      if (debug) console.warn(`[Tour ${tourId}] Step ${currentStepIndex}: Target \"${currentStep.target}\" not found.`);\r\n      // Optioneel: ga naar volgende stap of sla over als target niet gevonden wordt\r\n    }\r\n  }, [currentStep, debug, tourId, currentStepIndex]);\r\n\r\n  useEffect(() => {\r\n    if (isOpen && currentStep) {\r\n      const timeoutId = setTimeout(updateTargetAndPosition, 100); // Kleine delay voor dynamische content\r\n      return () => clearTimeout(timeoutId);\r\n    }\r\n  }, [isOpen, currentStep, updateTargetAndPosition]);\r\n  \r\n  // Event handlers\r\n  const handleNext = async () => {\r\n    if (currentStep?.onNext) await currentStep.onNext();\r\n    if (trackingConfig?.onboardingStepPrefix && user) {\r\n      trackOnboardingStep(`${trackingConfig.onboardingStepPrefix}_step_${currentStepIndex + 1}` as OnboardingStepName, { userId: user.id, tourId, stepId: currentStep?.id });\r\n    }\r\n    if (currentStepIndex < steps.length - 1) {\r\n      setCurrentStepIndex(currentStepIndex + 1);\r\n    } else {\r\n      handleComplete();\r\n    }\r\n  };\r\n\r\n  const handlePrev = async () => {\r\n    if (currentStep?.onPrev) await currentStep.onPrev();\r\n    if (currentStepIndex > 0) {\r\n      setCurrentStepIndex(currentStepIndex - 1);\r\n    }\r\n  };\r\n\r\n  const handleSkip = async () => {\r\n    if (currentStep?.onSkip) await currentStep.onSkip();\r\n    setIsOpen(false);\r\n    if (onSkipTour) onSkipTour();\r\n    if (trackingConfig?.onboardingStepPrefix && user && currentStep) {\r\n      trackOnboardingStep(`${trackingConfig.onboardingStepPrefix}_skipped` as OnboardingStepName, { userId: user.id, tourId, skippedAtStepId: currentStep.id });\r\n    }\r\n    if (debug) console.log(`[Tour ${tourId}] Skipped.`);\r\n  };\r\n\r\n  const handleComplete = () => {\r\n    setIsOpen(false);\r\n    setTourCompleted(true);\r\n    if (onComplete) onComplete();\r\n    if (trackingConfig?.onboardingStepPrefix && user) {\r\n      trackOnboardingStep(`${trackingConfig.onboardingStepPrefix}_completed` as OnboardingStepName, { userId: user.id, tourId });\r\n    }\r\n    if (debug) console.log(`[Tour ${tourId}] Completed.`);\r\n  };\r\n\r\n  // Effect om target highlight te beheren\r\n  useEffect(() => {\r\n    const allTargets = steps.map(s => document.querySelector(s.target)).filter(el => el) as HTMLElement[];\r\n    allTargets.forEach(el => el.classList.remove('guided-tour-highlight'));\r\n\r\n    if (isOpen && targetElement) {\r\n      targetElement.classList.add('guided-tour-highlight');\r\n      return () => {\r\n        targetElement.classList.remove('guided-tour-highlight');\r\n      };\r\n    }\r\n  }, [isOpen, targetElement, steps]);\r\n\r\n\r\n  if (!isOpen || !currentStep) return null;\r\n\r\n  return createPortal(\r\n    <>\r\n      <div \r\n        className=\"fixed inset-0 bg-black bg-opacity-30 z-[1000]\" // Overlay\r\n        onClick={handleSkip} // Klik buiten de tooltip om over te slaan\r\n      />\r\n      <div\r\n        ref={tooltipRef}\r\n        className=\"fixed bg-white rounded-lg shadow-xl p-5 max-w-sm z-[1001] transition-all duration-300 ease-in-out\"\r\n        role=\"dialog\"\r\n        aria-modal=\"true\"\r\n        aria-labelledby={`tour-title-${currentStep.id}`}\r\n        aria-describedby={`tour-content-${currentStep.id}`}\r\n      >\r\n        <h3 id={`tour-title-${currentStep.id}`} className=\"text-lg font-semibold text-gray-800 mb-2\">\r\n          {currentStep.title}\r\n        </h3>\r\n        <div id={`tour-content-${currentStep.id}`} className=\"text-sm text-gray-600 mb-4\">\r\n          {currentStep.content}\r\n        </div>\r\n\r\n        {currentStep.action && (\r\n          <div className=\"mb-4\">\r\n            <Button variant=\"outline\" size=\"sm\" onClick={currentStep.action.onClick}>\r\n              {currentStep.action.text}\r\n            </Button>\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"flex justify-between items-center pt-3 border-t border-gray-200\">\r\n          <Button variant=\"ghost\" size=\"sm\" onClick={handleSkip} className=\"text-xs\">\r\n            Tour overslaan\r\n          </Button>\r\n          <div className=\"flex items-center space-x-2\">\r\n            {currentStepIndex > 0 && (\r\n              <Button variant=\"outline\" size=\"sm\" onClick={handlePrev}>\r\n                <ChevronLeft size={16} className=\"mr-1\" /> Vorige\r\n              </Button>\r\n            )}\r\n            <Button variant=\"primary\" size=\"sm\" onClick={handleNext}>\r\n              {currentStepIndex === steps.length - 1 ? 'Voltooien' : 'Volgende'}\r\n              {currentStepIndex < steps.length - 1 && <ChevronRight size={16} className=\"ml-1\" />}\r\n            </Button>\r\n          </div>\r\n        </div>\r\n         <div className=\"text-center text-xs text-gray-400 mt-3\">\r\n            Stap {currentStepIndex + 1} van {steps.length}\r\n        </div>\r\n      </div>\r\n      <style jsx global>{`\r\n        .guided-tour-highlight {\r\n          outline: 3px solid #8b5cf6; /* Paarse outline */\r\n          box-shadow: 0 0 0 9999px rgba(0, 0, 0, 0.3); /* Spotlight effect */\r\n          border-radius: 4px;\r\n          position: relative; /* Noodzakelijk voor z-index stacking context */\r\n          z-index: 1001; /* Boven de overlay, onder de tooltip */\r\n          transition: outline 0.2s ease-in-out, box-shadow 0.2s ease-in-out;\r\n        }\r\n      `}</style>\r\n    </>,\r\n    document.body\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\onboarding\\ProgressIndicator.tsx","messages":[{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":24,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":24,"endColumn":64,"fix":{"range":[784,822],"text":"mb-2 flex items-center justify-between"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":28,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":28,"endColumn":63,"fix":{"range":[1042,1079],"text":"h-2.5 w-full rounded-full bg-gray-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":30,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":30,"endColumn":97,"fix":{"range":[1123,1195],"text":"h-2.5 rounded-full bg-purple-600 transition-all duration-500 ease-in-out"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":37,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":37,"endColumn":49,"fix":{"range":[1366,1391],"text":"mb-6 flex flex-wrap gap-2"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":48,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":57,"endColumn":15,"fix":{"range":[2136,2180],"text":"cursor-not-allowed bg-gray-100 text-gray-400"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":48,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":57,"endColumn":15,"fix":{"range":[1818,1930],"text":"`\r\n              flex items-center rounded-full px-3 py-1.5 text-sm font-medium transition-all\r\n              ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":61,"column":22,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":61,"endColumn":41,"fix":{"range":[2416,2423],"text":"h-4 w-4"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'w-4, h-4' could be replaced by the 'size-4' shorthand!","line":61,"column":22,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":61,"endColumn":41,"fix":{"range":[2416,2423],"text":"size-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":65,"column":23,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":65,"endColumn":82,"fix":{"range":[2707,2754],"text":"inline-flex h-4 w-4 items-center justify-center"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'w-4, h-4' could be replaced by the 'size-4' shorthand!","line":65,"column":23,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":65,"endColumn":82,"fix":{"range":[2707,2754],"text":"size-4 inline-flex items-center justify-center"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":10,"source":"'use client';\r\n\r\nimport React from 'react';\r\n\r\nimport { useOnboarding } from '@/context/OnboardingContext';\r\n\r\ninterface ProgressIndicatorProps {\r\n  className?: string;\r\n}\r\n\r\nexport const ProgressIndicator: React.FC<ProgressIndicatorProps> = ({ className = '' }) => {\r\n  const { progress, goToStep } = useOnboarding();\r\n  const { steps, currentStepIndex } = progress;\r\n  \r\n  // Calculate progress percentage\r\n  const completedSteps = steps.filter(step => step.completed).length;\r\n  const totalRequiredSteps = steps.filter(step => step.required).length;\r\n  const progressPercentage = Math.round((completedSteps / totalRequiredSteps) * 100);\r\n  \r\n  return (\r\n    <div className={`w-full ${className}`}>\r\n      {/* Progress bar */}\r\n      <div className=\"mb-6\">\r\n        <div className=\"flex justify-between items-center mb-2\">\r\n          <span className=\"text-sm font-medium text-purple-700\">Voortgang</span>\r\n          <span className=\"text-sm font-medium text-purple-700\">{progressPercentage}%</span>\r\n        </div>\r\n        <div className=\"w-full bg-gray-200 rounded-full h-2.5\">\r\n          <div \r\n            className=\"bg-purple-600 h-2.5 rounded-full transition-all duration-500 ease-in-out\" \r\n            style={{ width: `${progressPercentage}%` }}\r\n          ></div>\r\n        </div>\r\n      </div>\r\n      \r\n      {/* Step indicators */}\r\n      <div className=\"flex flex-wrap gap-2 mb-6\">\r\n        {steps.map((step, index) => (\r\n          <button\r\n            key={step.id}\r\n            onClick={() => {\r\n              // Only allow navigation to completed steps or the current step\r\n              if (step.completed || index === currentStepIndex) {\r\n                goToStep(step.id);\r\n              }\r\n            }}\r\n            disabled={!step.completed && index !== currentStepIndex}\r\n            className={`\r\n              flex items-center px-3 py-1.5 rounded-full text-sm font-medium transition-all\r\n              ${index === currentStepIndex \r\n                ? 'bg-purple-600 text-white' \r\n                : step.completed \r\n                  ? 'bg-purple-100 text-purple-700 hover:bg-purple-200' \r\n                  : 'bg-gray-100 text-gray-400 cursor-not-allowed'\r\n              }\r\n              ${!step.required ? 'border border-dashed border-purple-300' : ''}\r\n            `}\r\n          >\r\n            <span className=\"mr-1.5\">\r\n              {step.completed ? (\r\n                <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M5 13l4 4L19 7\"></path>\r\n                </svg>\r\n              ) : (\r\n                <span className=\"w-4 h-4 inline-flex items-center justify-center\">{index + 1}</span>\r\n              )}\r\n            </span>\r\n            {step.title}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProgressIndicator;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\onboarding\\StepNavigation.tsx","messages":[{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":33,"column":10,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":33,"endColumn":75,"fix":{"range":[797,839],"text":"`mt-8 flex items-center justify-between ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":38,"column":11,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":38,"endColumn":130,"fix":{"range":[1005,1112],"text":"rounded-md border border-purple-300 bg-white px-4 py-2 text-purple-700 transition-colors hover:bg-purple-50"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":51,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":51,"endColumn":126,"fix":{"range":[1492,1593],"text":"rounded-md border border-gray-300 bg-white px-4 py-2 text-gray-600 transition-colors hover:bg-gray-50"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":60,"column":11,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":60,"endColumn":106,"fix":{"range":[1783,1866],"text":"rounded-md bg-purple-600 px-6 py-2 text-white transition-colors hover:bg-purple-700"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":"'use client';\r\n\r\nimport React from 'react';\r\n\r\nimport { useOnboarding } from '@/context/OnboardingContext';\r\n\r\ninterface StepNavigationProps {\r\n  className?: string;\r\n}\r\n\r\nexport const StepNavigation: React.FC<StepNavigationProps> = ({ className = '' }) => {\r\n  const { \r\n    currentStep, \r\n    goToNextStep, \r\n    goToPreviousStep, \r\n    completeCurrentStep, \r\n    skipOnboarding,\r\n    progress\r\n  } = useOnboarding();\r\n  \r\n  const isFirstStep = progress.currentStepIndex === 0;\r\n  const isLastStep = progress.currentStepIndex === progress.steps.length - 1;\r\n  const isCurrentStepCompleted = currentStep?.completed || false;\r\n  \r\n  const handleNext = () => {\r\n    if (!isCurrentStepCompleted) {\r\n      completeCurrentStep();\r\n    }\r\n    goToNextStep();\r\n  };\r\n  \r\n  return (\r\n    <div className={`flex justify-between items-center mt-8 ${className}`}>\r\n      {/* Back button (hidden on first step) */}\r\n      {!isFirstStep ? (\r\n        <button\r\n          onClick={goToPreviousStep}\r\n          className=\"px-4 py-2 text-purple-700 bg-white border border-purple-300 rounded-md hover:bg-purple-50 transition-colors\"\r\n        >\r\n          Vorige\r\n        </button>\r\n      ) : (\r\n        <div></div> // Empty div to maintain layout with flex justify-between\r\n      )}\r\n      \r\n      <div className=\"flex gap-3\">\r\n        {/* Skip button (only shown for non-required steps) */}\r\n        {!currentStep?.required && (\r\n          <button\r\n            onClick={skipOnboarding}\r\n            className=\"px-4 py-2 text-gray-600 bg-white border border-gray-300 rounded-md hover:bg-gray-50 transition-colors\"\r\n          >\r\n            Overslaan\r\n          </button>\r\n        )}\r\n        \r\n        {/* Next/Complete button */}\r\n        <button\r\n          onClick={handleNext}\r\n          className=\"px-6 py-2 text-white bg-purple-600 rounded-md hover:bg-purple-700 transition-colors\"\r\n        >\r\n          {isLastStep ? 'Voltooien' : 'Volgende'}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StepNavigation;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\overzicht\\MetricCard.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":6,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":6,"endColumn":35},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":8,"column":10,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":8,"endColumn":59,"fix":{"range":[184,221],"text":"rounded-lg bg-gray-50 p-4 text-center"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":9,"column":11,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":9,"endColumn":49,"fix":{"range":[246,272],"text":"mb-1 text-sm text-gray-500"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"interface MetricCardProps {\r\n  title: string;\r\n  value: string | number;\r\n}\r\n\r\nexport default function MetricCard({ title, value }: MetricCardProps) {\r\n  return (\r\n    <div className=\"bg-gray-50 p-4 rounded-lg text-center\">\r\n      <h4 className=\"text-sm text-gray-500 mb-1\">{title}</h4>\r\n      <div className=\"text-xl font-bold\">{value}</div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\rapporten\\RapportGeneratorPresentational.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":29,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":29,"endColumn":55},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":40,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":40,"endColumn":59,"fix":{"range":[1100,1133],"text":"rounded-lg bg-white p-6 shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":41,"column":11,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":41,"endColumn":49,"fix":{"range":[1158,1184],"text":"mb-6 text-xl font-semibold"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":44,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":44,"endColumn":68,"fix":{"range":[1261,1303],"text":"mb-4 rounded-md bg-red-50 p-3 text-red-700"}},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":50,"column":9,"nodeType":"JSXOpeningElement","endLine":50,"endColumn":65},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":50,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":50,"endColumn":64,"fix":{"range":[1416,1452],"text":"mb-2 block font-medium text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":53,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":53,"endColumn":63,"fix":{"range":[1522,1559],"text":"grid grid-cols-2 gap-3 md:grid-cols-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":57,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":61,"endColumn":16,"fix":{"range":[1683,1767],"text":"`flex flex-col items-center justify-center rounded-md px-4 py-3 transition-colors ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":64,"column":53,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":64,"endColumn":77,"fix":{"range":[2093,2105],"text":"mb-1 h-6 w-6"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-6, w-6' could be replaced by the 'size-6' shorthand!","line":64,"column":53,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":64,"endColumn":77,"fix":{"range":[2093,2105],"text":"size-6 mb-1"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":73,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":77,"endColumn":16,"fix":{"range":[2549,2633],"text":"`flex flex-col items-center justify-center rounded-md px-4 py-3 transition-colors ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":80,"column":53,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":80,"endColumn":77,"fix":{"range":[2961,2973],"text":"mb-1 h-6 w-6"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-6, w-6' could be replaced by the 'size-6' shorthand!","line":80,"column":53,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":80,"endColumn":77,"fix":{"range":[2961,2973],"text":"size-6 mb-1"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":89,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":93,"endColumn":16,"fix":{"range":[3375,3459],"text":"`flex flex-col items-center justify-center rounded-md px-4 py-3 transition-colors ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":96,"column":53,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":96,"endColumn":77,"fix":{"range":[3789,3801],"text":"mb-1 h-6 w-6"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-6, w-6' could be replaced by the 'size-6' shorthand!","line":96,"column":53,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":96,"endColumn":77,"fix":{"range":[3789,3801],"text":"size-6 mb-1"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":105,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":109,"endColumn":16,"fix":{"range":[4357,4441],"text":"`flex flex-col items-center justify-center rounded-md px-4 py-3 transition-colors ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":112,"column":53,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":112,"endColumn":77,"fix":{"range":[4769,4781],"text":"mb-1 h-6 w-6"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-6, w-6' could be replaced by the 'size-6' shorthand!","line":112,"column":53,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":112,"endColumn":77,"fix":{"range":[4769,4781],"text":"size-6 mb-1"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":120,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":120,"endColumn":140,"fix":{"range":[5279,5309],"text":"pointer-events-none opacity-50"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":120,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":120,"endColumn":140,"fix":{"range":[5201,5247],"text":"`mb-6 grid grid-cols-1 gap-4 md:grid-cols-2 ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":122,"column":39,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":122,"endColumn":87,"fix":{"range":[5385,5421],"text":"mb-2 block font-medium text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":132,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":132,"endColumn":129,"fix":{"range":[5718,5822],"text":"w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-purple-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":138,"column":38,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":138,"endColumn":86,"fix":{"range":[5981,6017],"text":"mb-2 block font-medium text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":149,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":149,"endColumn":129,"fix":{"range":[6338,6442],"text":"w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-purple-500"}},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":156,"column":9,"nodeType":"JSXOpeningElement","endLine":156,"endColumn":65},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":156,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":156,"endColumn":64,"fix":{"range":[6606,6642],"text":"mb-2 block font-medium text-gray-700"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-4, w-4' could be replaced by the 'size-4' shorthand!","line":167,"column":15,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":167,"endColumn":77,"fix":{"range":[6997,7047],"text":"mr-2 size-4 text-purple-600 focus:ring-purple-500"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-4, w-4' could be replaced by the 'size-4' shorthand!","line":179,"column":15,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":179,"endColumn":77,"fix":{"range":[7400,7450],"text":"mr-2 size-4 text-purple-600 focus:ring-purple-500"}},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":187,"column":9,"nodeType":"JSXOpeningElement","endLine":187,"endColumn":65},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":187,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":187,"endColumn":64,"fix":{"range":[7621,7657],"text":"mb-2 block font-medium text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":197,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":197,"endColumn":85,"fix":{"range":[8005,8063],"text":"mr-2 h-4 w-4 rounded text-purple-600 focus:ring-purple-500"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-4, w-4' could be replaced by the 'size-4' shorthand!","line":197,"column":15,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":197,"endColumn":85,"fix":{"range":[8005,8063],"text":"mr-2 size-4 text-purple-600 focus:ring-purple-500 rounded"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":208,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":208,"endColumn":85,"fix":{"range":[8421,8479],"text":"mr-2 h-4 w-4 rounded text-purple-600 focus:ring-purple-500"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-4, w-4' could be replaced by the 'size-4' shorthand!","line":208,"column":15,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":208,"endColumn":85,"fix":{"range":[8421,8479],"text":"mr-2 size-4 text-purple-600 focus:ring-purple-500 rounded"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":219,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":219,"endColumn":85,"fix":{"range":[8867,8925],"text":"mr-2 h-4 w-4 rounded text-purple-600 focus:ring-purple-500"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-4, w-4' could be replaced by the 'size-4' shorthand!","line":219,"column":15,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":219,"endColumn":85,"fix":{"range":[8867,8925],"text":"mr-2 size-4 text-purple-600 focus:ring-purple-500 rounded"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":230,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":230,"endColumn":85,"fix":{"range":[9285,9343],"text":"mr-2 h-4 w-4 rounded text-purple-600 focus:ring-purple-500"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-4, w-4' could be replaced by the 'size-4' shorthand!","line":230,"column":15,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":230,"endColumn":85,"fix":{"range":[9285,9343],"text":"mr-2 size-4 text-purple-600 focus:ring-purple-500 rounded"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":241,"column":9,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":243,"endColumn":30,"fix":{"range":[9581,9635],"text":"`mt-4 w-full rounded-md py-3 font-medium text-white ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":247,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":247,"endColumn":72,"fix":{"range":[9865,9907],"text":"-ml-1 mr-3 h-5 w-5 animate-spin text-white"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":247,"column":18,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":247,"endColumn":72,"fix":{"range":[9865,9907],"text":"animate-spin -ml-1 mr-3 size-5 text-white"}}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":39,"fixableErrorCount":0,"fixableWarningCount":38,"source":"'use client';\r\nimport React from 'react';\r\n\r\nexport type RapportTypeP = 'daily' | 'weekly' | 'monthly' | 'custom';\r\nexport type RapportFormatP = 'pdf' | 'csv';\r\n\r\nexport interface RapportDataStateP {\r\n  type: RapportTypeP;\r\n  format: RapportFormatP;\r\n  startDatum: string;\r\n  eindDatum: string;\r\n  includeTasken: boolean;\r\n  includeMetrieken: boolean;\r\n  includeReflecties: boolean;\r\n  includeInzichten: boolean;\r\n}\r\n\r\ninterface RapportGeneratorPresentationalProps {\r\n  rapportData: RapportDataStateP;\r\n  loading: boolean;\r\n  error: string | null;\r\n  vandaag: string; // YYYY-MM-DD format\r\n  onTypeChange: (type: RapportTypeP) => void;\r\n  onCheckboxChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  onInputChange: (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => void;\r\n  onGenerateRapport: () => void;\r\n}\r\n\r\nexport default function RapportGeneratorPresentational({\r\n  rapportData,\r\n  loading,\r\n  error,\r\n  vandaag,\r\n  onTypeChange,\r\n  onCheckboxChange,\r\n  onInputChange,\r\n  onGenerateRapport,\r\n}: RapportGeneratorPresentationalProps) {\r\n  return (\r\n    <section className=\"bg-white rounded-lg shadow-md p-6\">\r\n      <h2 className=\"text-xl font-semibold mb-6\">Rapport Genereren</h2>\r\n      \r\n      {error && (\r\n        <div className=\"mb-4 p-3 bg-red-50 text-red-700 rounded-md\">\r\n          {error}\r\n        </div>\r\n      )}\r\n      \r\n      <div className=\"mb-6\">\r\n        <label className=\"block text-gray-700 font-medium mb-2\">\r\n          Type Rapport\r\n        </label>\r\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => onTypeChange('daily')}\r\n            className={`px-4 py-3 rounded-md flex flex-col items-center justify-center transition-colors ${\r\n              rapportData.type === 'daily'\r\n                ? 'bg-purple-600 text-white'\r\n                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\r\n            }`}\r\n            aria-pressed={rapportData.type === 'daily' ? 'true' : 'false'}\r\n          >\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6 mb-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z\" />\r\n            </svg>\r\n            <span>Dagelijks</span>\r\n          </button>\r\n          \r\n          <button\r\n            type=\"button\"\r\n            onClick={() => onTypeChange('weekly')}\r\n            className={`px-4 py-3 rounded-md flex flex-col items-center justify-center transition-colors ${\r\n              rapportData.type === 'weekly'\r\n                ? 'bg-purple-600 text-white'\r\n                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\r\n            }`}\r\n            aria-pressed={rapportData.type === 'weekly' ? 'true' : 'false'}\r\n          >\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6 mb-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n            </svg>\r\n            <span>Wekelijks</span>\r\n          </button>\r\n          \r\n          <button\r\n            type=\"button\"\r\n            onClick={() => onTypeChange('monthly')}\r\n            className={`px-4 py-3 rounded-md flex flex-col items-center justify-center transition-colors ${\r\n              rapportData.type === 'monthly'\r\n                ? 'bg-purple-600 text-white'\r\n                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\r\n            }`}\r\n            aria-pressed={rapportData.type === 'monthly' ? 'true' : 'false'}\r\n          >\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6 mb-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\r\n            </svg>\r\n            <span>Maandelijks</span>\r\n          </button>\r\n          \r\n          <button\r\n            type=\"button\"\r\n            onClick={() => onTypeChange('custom')}\r\n            className={`px-4 py-3 rounded-md flex flex-col items-center justify-center transition-colors ${\r\n              rapportData.type === 'custom'\r\n                ? 'bg-purple-600 text-white'\r\n                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\r\n            }`}\r\n            aria-pressed={rapportData.type === 'custom' ? 'true' : 'false'}\r\n          >\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6 mb-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4\" />\r\n            </svg>\r\n            <span>Aangepast</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className={`mb-6 grid grid-cols-1 md:grid-cols-2 gap-4 ${rapportData.type === 'daily' ? 'opacity-50 pointer-events-none' : ''}`}>\r\n        <div>\r\n          <label htmlFor=\"startDatum\" className=\"block text-gray-700 font-medium mb-2\">\r\n            Startdatum\r\n          </label>\r\n          <input\r\n            type=\"date\"\r\n            id=\"startDatum\"\r\n            name=\"startDatum\"\r\n            value={rapportData.startDatum}\r\n            onChange={onInputChange}\r\n            max={rapportData.eindDatum}\r\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500\"\r\n            disabled={rapportData.type === 'daily'}\r\n          />\r\n        </div>\r\n        \r\n        <div>\r\n          <label htmlFor=\"eindDatum\" className=\"block text-gray-700 font-medium mb-2\">\r\n            Einddatum\r\n          </label>\r\n          <input\r\n            type=\"date\"\r\n            id=\"eindDatum\"\r\n            name=\"eindDatum\"\r\n            value={rapportData.eindDatum}\r\n            onChange={onInputChange}\r\n            min={rapportData.startDatum}\r\n            max={vandaag}\r\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500\"\r\n            disabled={rapportData.type === 'daily'}\r\n          />\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"mb-6\">\r\n        <label className=\"block text-gray-700 font-medium mb-2\">\r\n          Formaat\r\n        </label>\r\n        <div className=\"flex space-x-4\">\r\n          <label className=\"flex items-center\">\r\n            <input\r\n              type=\"radio\"\r\n              name=\"format\"\r\n              value=\"pdf\"\r\n              checked={rapportData.format === 'pdf'}\r\n              onChange={onInputChange}\r\n              className=\"mr-2 h-4 w-4 text-purple-600 focus:ring-purple-500\"\r\n            />\r\n            <span>PDF</span>\r\n          </label>\r\n          \r\n          <label className=\"flex items-center\">\r\n            <input\r\n              type=\"radio\"\r\n              name=\"format\"\r\n              value=\"csv\"\r\n              checked={rapportData.format === 'csv'}\r\n              onChange={onInputChange}\r\n              className=\"mr-2 h-4 w-4 text-purple-600 focus:ring-purple-500\"\r\n            />\r\n            <span>CSV (Excel)</span>\r\n          </label>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"mb-6\">\r\n        <label className=\"block text-gray-700 font-medium mb-2\">\r\n          Te includeren gegevens\r\n        </label>\r\n        <div className=\"space-y-2\">\r\n          <label className=\"flex items-center\">\r\n            <input\r\n              type=\"checkbox\"\r\n              name=\"includeTasken\"\r\n              checked={rapportData.includeTasken}\r\n              onChange={onCheckboxChange}\r\n              className=\"mr-2 h-4 w-4 text-purple-600 focus:ring-purple-500 rounded\"\r\n            />\r\n            <span>Taken en opdrachten</span>\r\n          </label>\r\n          \r\n          <label className=\"flex items-center\">\r\n            <input\r\n              type=\"checkbox\"\r\n              name=\"includeMetrieken\"\r\n              checked={rapportData.includeMetrieken}\r\n              onChange={onCheckboxChange}\r\n              className=\"mr-2 h-4 w-4 text-purple-600 focus:ring-purple-500 rounded\"\r\n            />\r\n            <span>Gezondheidsmetrieken (pijn, vermoeidheid, etc.)</span>\r\n          </label>\r\n          \r\n          <label className=\"flex items-center\">\r\n            <input\r\n              type=\"checkbox\"\r\n              name=\"includeReflecties\"\r\n              checked={rapportData.includeReflecties}\r\n              onChange={onCheckboxChange}\r\n              className=\"mr-2 h-4 w-4 text-purple-600 focus:ring-purple-500 rounded\"\r\n            />\r\n            <span>Dagelijkse reflecties</span>\r\n          </label>\r\n          \r\n          <label className=\"flex items-center\">\r\n            <input\r\n              type=\"checkbox\"\r\n              name=\"includeInzichten\"\r\n              checked={rapportData.includeInzichten}\r\n              onChange={onCheckboxChange}\r\n              className=\"mr-2 h-4 w-4 text-purple-600 focus:ring-purple-500 rounded\"\r\n            />\r\n            <span>AI inzichten</span>\r\n          </label>\r\n        </div>\r\n      </div>\r\n      \r\n      <button\r\n        type=\"button\"\r\n        onClick={onGenerateRapport}\r\n        disabled={loading}\r\n        className={`w-full py-3 mt-4 rounded-md text-white font-medium ${\r\n          loading ? 'bg-purple-300' : 'bg-purple-600 hover:bg-purple-700'\r\n        } transition-colors`}\r\n      >\r\n        {loading ? (\r\n          <span className=\"flex items-center justify-center\">\r\n            <svg className=\"animate-spin -ml-1 mr-3 h-5 w-5 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\r\n              <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\r\n              <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\r\n            </svg>\r\n            Rapport genereren...\r\n          </span>\r\n        ) : (\r\n          'Rapport Genereren'\r\n        )}\r\n      </button>\r\n    </section>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\reflecties\\ReflectieFormPresentational.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":42,"fix":{"range":[56,56],"text":"\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":30,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":30,"endColumn":52},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":45,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":45,"endColumn":59,"fix":{"range":[1304,1337],"text":"rounded-lg bg-white p-6 shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":46,"column":11,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":46,"endColumn":49,"fix":{"range":[1362,1388],"text":"mb-6 text-xl font-semibold"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":57,"column":34,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":57,"endColumn":82,"fix":{"range":[1865,1901],"text":"mb-2 block font-medium text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":62,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":62,"endColumn":129,"fix":{"range":[2096,2200],"text":"w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-purple-500"}},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":69,"column":11,"nodeType":"JSXOpeningElement","endLine":69,"endColumn":67},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":69,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":69,"endColumn":66,"fix":{"range":[2421,2457],"text":"mb-2 block font-medium text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":74,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":78,"endColumn":20,"fix":{"range":[2781,2816],"text":"`rounded-md px-4 py-2 transition ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":89,"column":36,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":89,"endColumn":84,"fix":{"range":[3353,3389],"text":"mb-2 block font-medium text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":94,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":94,"endColumn":129,"fix":{"range":[3688,3792],"text":"w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-purple-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":99,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":99,"endColumn":57,"fix":{"range":[3992,4023],"text":"mt-8 flex justify-end space-x-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":102,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":102,"endColumn":117,"fix":{"range":[4115,4207],"text":"rounded-md border border-gray-300 px-4 py-2 text-gray-700 transition-colors hover:bg-gray-50"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":110,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":112,"endColumn":34,"fix":{"range":[4508,4540],"text":"cursor-not-allowed bg-purple-300"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":110,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":112,"endColumn":34,"fix":{"range":[4430,4477],"text":"`rounded-md px-4 py-2 font-medium text-white ${"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":1,"fixableWarningCount":12,"source":"'use client';\r\nimport React, { FormEvent } from 'react';\r\nimport { AlertMessage } from '@/components/common/AlertMessage';\r\nimport { ErrorMessage } from '@/lib/error-handler';\r\nimport { ariaProps } from '@/utils/accessibility';\r\n\r\nexport type StemmingP = 'zeer goed' | 'goed' | 'neutraal' | 'matig' | 'slecht' | 'zeer slecht';\r\n\r\nexport interface ReflectieFormState {\r\n  datum: string;\r\n  stemming: StemmingP;\r\n  notitie: string;\r\n}\r\n\r\ninterface ReflectieFormPresentationalProps {\r\n  formState: ReflectieFormState;\r\n  isUpserting: boolean;\r\n  upsertError: ErrorMessage | null;\r\n  isUpsertSuccess: boolean;\r\n  vandaag: string;\r\n  stemmingOpties: StemmingP[];\r\n  stemmingKleur: (stemming: StemmingP) => string;\r\n  onFormChange: (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void;\r\n  onStemmingSelect: (stemming: StemmingP) => void;\r\n  onSubmit: (e: FormEvent) => void;\r\n  onCancel: () => void;\r\n  submitButtonRef: React.RefObject<HTMLButtonElement>;\r\n}\r\n\r\nexport default function ReflectieFormPresentational({\r\n  formState,\r\n  isUpserting,\r\n  upsertError,\r\n  isUpsertSuccess,\r\n  vandaag,\r\n  stemmingOpties,\r\n  stemmingKleur,\r\n  onFormChange,\r\n  onStemmingSelect,\r\n  onSubmit,\r\n  onCancel,\r\n  submitButtonRef,\r\n}: ReflectieFormPresentationalProps) {\r\n  return (\r\n    <section className=\"bg-white rounded-lg shadow-md p-6\">\r\n      <h2 className=\"text-xl font-semibold mb-6\">Dagelijkse Reflectie</h2>\r\n      \r\n      {upsertError && (\r\n        <AlertMessage type=\"error\" title=\"Opslaan Mislukt\" message={upsertError.userMessage || 'Opslaan van reflectie mislukt'} />\r\n      )}\r\n      {isUpsertSuccess && !upsertError && ( \r\n         <AlertMessage type=\"success\" title=\"Succes\" message=\"Reflectie succesvol opgeslagen!\" />\r\n      )}\r\n      \r\n      <form onSubmit={onSubmit}>\r\n        <div className=\"mb-5\">\r\n          <label htmlFor=\"datum\" className=\"block text-gray-700 font-medium mb-2\">Datum</label>\r\n          <input\r\n            type=\"date\" id=\"datum\" name=\"datum\"\r\n            value={formState.datum} onChange={onFormChange}\r\n            max={vandaag}\r\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500\"\r\n            required\r\n          />\r\n          <p className=\"mt-1 text-sm text-gray-500\">Selecteer de datum voor deze reflectie</p>\r\n        </div>\r\n        \r\n        <div className=\"mb-5\">\r\n          <label className=\"block text-gray-700 font-medium mb-2\">Hoe voelt u zich vandaag?</label>\r\n          <div className=\"flex flex-wrap gap-2\" role=\"radiogroup\" aria-label=\"Stemming selectie\">\r\n            {stemmingOpties.map((stemming) => (\r\n              <button\r\n                key={stemming} type=\"button\" onClick={() => onStemmingSelect(stemming)}\r\n                className={`px-4 py-2 rounded-md transition ${\r\n                  formState.stemming === stemming\r\n                    ? stemmingKleur(stemming)\r\n                    : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\r\n                }`}\r\n                {...ariaProps.checkbox(formState.stemming === stemming)}\r\n                aria-label={`Selecteer stemming: ${stemming}`}\r\n              >\r\n                {stemming}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"mb-5\">\r\n          <label htmlFor=\"notitie\" className=\"block text-gray-700 font-medium mb-2\">Reflectie</label>\r\n          <textarea\r\n            id=\"notitie\" name=\"notitie\" value={formState.notitie}\r\n            onChange={onFormChange} rows={5}\r\n            placeholder=\"Schrijf hier uw reflectie voor vandaag. Hoe voelt u zich? Wat ging er goed? Wat was moeilijk?\"\r\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500\"\r\n          ></textarea>\r\n          <p className=\"mt-1 text-sm text-gray-500\">Dagelijkse reflecties helpen om inzicht te krijgen in uw patronen</p>\r\n        </div>\r\n        \r\n        <div className=\"flex justify-end space-x-3 mt-8\">\r\n          <button\r\n            type=\"button\" onClick={onCancel}\r\n            className=\"px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 transition-colors\"\r\n            disabled={isUpserting}\r\n          >\r\n            Annuleren\r\n          </button>\r\n          <button\r\n            type=\"submit\" disabled={isUpserting}\r\n            ref={submitButtonRef}\r\n            className={`px-4 py-2 rounded-md text-white font-medium ${\r\n              isUpserting ? 'bg-purple-300 cursor-not-allowed' : 'bg-purple-600 hover:bg-purple-700'\r\n            } transition-colors`}\r\n          >\r\n            {isUpserting ? 'Opslaan...' : 'Opslaan'}\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </section>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\reflecties\\ReflectiesList.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":34,"fix":{"range":[48,48],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":30,"fix":{"range":[79,79],"text":"\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":12,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":12,"endColumn":39},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":43,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":43,"endColumn":97,"fix":{"range":[1894,1942],"text":"`rounded-full px-2 py-0.5 text-xs font-medium ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":56,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":56,"endColumn":69,"fix":{"range":[2302,2347],"text":"rounded-lg bg-white p-8 text-center shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":57,"column":49,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":57,"endColumn":97,"fix":{"range":[2436,2472],"text":"mx-auto mb-4 h-16 w-16 text-gray-300"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-16, w-16' could be replaced by the 'size-16' shorthand!","line":57,"column":49,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":57,"endColumn":97,"fix":{"range":[2436,2472],"text":"size-16 mx-auto text-gray-300 mb-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":60,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":60,"endColumn":65,"fix":{"range":[2822,2862],"text":"mb-2 text-xl font-semibold text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":61,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":61,"endColumn":42,"fix":{"range":[2917,2935],"text":"mb-6 text-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":66,"column":51,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":66,"endColumn":75,"fix":{"range":[3208,3220],"text":"mr-2 h-4 w-4"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-4, w-4' could be replaced by the 'size-4' shorthand!","line":66,"column":51,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":66,"endColumn":75,"fix":{"range":[3208,3220],"text":"size-4 mr-2"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":80,"column":11,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":80,"endColumn":108,"fix":{"range":[3671,3756],"text":"overflow-hidden rounded-lg bg-white shadow-md transition-all duration-300 ease-in-out"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":84,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":84,"endColumn":183,"fix":{"range":[3889,4047],"text":"flex w-full items-center justify-between rounded-t-lg p-4 text-left hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-1"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":96,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":96,"endColumn":133,"fix":{"range":[4729,4749],"text":"rotate-180 transform"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":96,"column":17,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":96,"endColumn":133,"fix":{"range":[4653,4698],"text":"`size-5 transition-transform duration-200 ${"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'transform' is not needed in Tailwind CSS v3!","line":96,"column":17,"nodeType":"JSXAttribute","messageId":"classnameNotNeeded","endLine":96,"endColumn":133,"fix":{"range":[4729,4749],"text":"rotate-180"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":107,"column":59,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":107,"endColumn":121,"fix":{"range":[5181,5231],"text":"border-t border-gray-200 bg-gray-50 px-4 pb-4 pt-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":109,"column":22,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":109,"endColumn":92,"fix":{"range":[5330,5388],"text":"mb-3 whitespace-pre-wrap break-words text-sm text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":111,"column":22,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":111,"endColumn":67,"fix":{"range":[5470,5503],"text":"mb-3 text-sm italic text-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":115,"column":22,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":115,"endColumn":99,"fix":{"range":[5647,5712],"text":"mb-3 rounded-md border border-purple-200 bg-purple-50 p-3 text-sm"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":116,"column":24,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":116,"endColumn":86,"fix":{"range":[5750,5800],"text":"mb-1 flex items-center font-medium text-purple-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":117,"column":61,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":117,"endColumn":101,"fix":{"range":[5875,5903],"text":"mr-1.5 h-4 w-4 flex-shrink-0"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-4, w-4' could be replaced by the 'size-4' shorthand!","line":117,"column":61,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":117,"endColumn":101,"fix":{"range":[5875,5903],"text":"size-4 mr-1.5 flex-shrink-0"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'flex-shrink-0' should be updated to 'shrink-0' in Tailwind CSS v3!","line":117,"column":61,"nodeType":"JSXAttribute","messageId":"classnameChanged","endLine":117,"endColumn":101,"fix":{"range":[5875,5903],"text":"h-4 w-4 mr-1.5 shrink-0"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":126,"column":20,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":126,"endColumn":63,"fix":{"range":[6552,6583],"text":"mt-2 flex justify-end space-x-2"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":129,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":129,"endColumn":173,"fix":{"range":[6730,6872],"text":"rounded-md bg-gray-200 px-3 py-1 text-xs text-gray-700 transition-colors hover:bg-gray-300 focus:outline-none focus:ring-1 focus:ring-gray-400"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":146,"column":21,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":150,"endColumn":166,"fix":{"range":[8108,8137],"text":"cursor-not-allowed opacity-50"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":146,"column":21,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":150,"endColumn":166,"fix":{"range":[7641,7723],"text":"`rounded-md px-3 py-1 text-xs transition-colors focus:outline-none focus:ring-1 ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":154,"column":28,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":154,"endColumn":60,"fix":{"range":[8379,8399],"text":"h-3 w-3 animate-spin"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-3, w-3' could be replaced by the 'size-3' shorthand!","line":154,"column":28,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":154,"endColumn":60,"fix":{"range":[8379,8399],"text":"animate-spin size-3"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":2,"fixableWarningCount":27,"source":"'use client';\r\nimport { useState } from 'react';\r\nimport Link from 'next/link';\r\nimport { Reflectie } from '@/types';\r\n\r\ninterface ReflectiesListProps {\r\n  reflecties: Reflectie[];\r\n  onDelete?: (reflectieId: string) => void;\r\n  isDeletingId?: string | null | 'pending'; // To indicate which item (or any) is being deleted\r\n}\r\n\r\nexport default function ReflectiesList({ reflecties, onDelete, isDeletingId }: ReflectiesListProps) {\r\n  const [expandedId, setExpandedId] = useState<string | null>(null);\r\n  const [confirmDeleteId, setConfirmDeleteId] = useState<string | null>(null);\r\n  \r\n  // Helper om datum te formatteren\r\n  const formatDate = (dateString: Date | string | undefined) => {\r\n    if (!dateString) return 'Onbekende datum';\r\n    const date = new Date(dateString);\r\n    return date.toLocaleDateString('nl-BE', {\r\n      weekday: 'long',\r\n      day: 'numeric',\r\n      month: 'long',\r\n      year: 'numeric'\r\n    });\r\n  };\r\n  \r\n  // Helper om stemming te visualiseren\r\n  const getStemmingBadge = (stemming?: string) => {\r\n    if (!stemming) return null;\r\n    \r\n    const stemmingLower = stemming.toLowerCase();\r\n    let style = { bg: 'bg-gray-200', text: 'text-gray-700' }; // Default\r\n\r\n    if (stemmingLower.includes('zeer goed')) style = { bg: 'bg-green-500', text: 'text-white' };\r\n    else if (stemmingLower.includes('goed')) style = { bg: 'bg-green-400', text: 'text-white' };\r\n    else if (stemmingLower.includes('neutraal')) style = { bg: 'bg-blue-400', text: 'text-white' };\r\n    else if (stemmingLower.includes('matig')) style = { bg: 'bg-yellow-400', text: 'text-black' }; // Contrast\r\n    else if (stemmingLower.includes('slecht') && !stemmingLower.includes('zeer slecht')) style = { bg: 'bg-orange-500', text: 'text-white' };\r\n    else if (stemmingLower.includes('zeer slecht')) style = { bg: 'bg-red-500', text: 'text-white' };\r\n    \r\n    return (\r\n      <span className={`px-2 py-0.5 rounded-full text-xs font-medium ${style.bg} ${style.text}`}>\r\n        {stemming.charAt(0).toUpperCase() + stemming.slice(1)}\r\n      </span>\r\n    );\r\n  };\r\n  \r\n  // Toggle reflectie detail weergave\r\n  const toggleExpand = (id: string) => {\r\n    setExpandedId(prevId => (prevId === id ? null : id));\r\n  };\r\n  \r\n  if (!reflecties || reflecties.length === 0) {\r\n    return (\r\n      <div className=\"bg-white rounded-lg shadow-md p-8 text-center\"> {/* Increased padding */}\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-16 w-16 mx-auto text-gray-300 mb-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" aria-hidden=\"true\"> {/* Adjusted icon style */}\r\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1.5} d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\" />\r\n        </svg>\r\n        <h2 className=\"text-xl font-semibold text-gray-700 mb-2\">Geen reflecties gevonden</h2>\r\n        <p className=\"text-gray-500 mb-6\">Deel uw dagelijkse ervaringen en houd bij hoe u zich voelt.</p>\r\n        <Link \r\n          href=\"/reflecties/nieuw\" \r\n          className=\"btn-primary inline-flex items-center\" // Used global style\r\n        >\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\r\n          </svg>\r\n          Eerste Reflectie Toevoegen\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <div className=\"space-y-3\"> {/* Adjusted spacing */}\r\n      {reflecties.map(reflectie => (\r\n        <div \r\n          key={reflectie.id} \r\n          className=\"bg-white rounded-lg shadow-md overflow-hidden transition-all duration-300 ease-in-out\"\r\n        >\r\n          <button // Changed div to button for better accessibility\r\n            type=\"button\"\r\n            className=\"w-full p-4 hover:bg-gray-50 flex justify-between items-center text-left focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-1 rounded-t-lg\"\r\n            onClick={() => toggleExpand(reflectie.id)}\r\n            aria-expanded={expandedId === reflectie.id ? \"true\" : \"false\"}\r\n            aria-controls={`reflectie-details-${reflectie.id}`}\r\n          >\r\n            <div className=\"flex items-center space-x-3\">\r\n              <div className=\"font-medium text-gray-800\">{formatDate(reflectie.datum)}</div>\r\n              {getStemmingBadge(reflectie.stemming)}\r\n            </div>\r\n            <span className=\"text-gray-500\" aria-hidden=\"true\">\r\n              <svg \r\n                xmlns=\"http://www.w3.org/2000/svg\" \r\n                className={`h-5 w-5 transition-transform duration-200 ${expandedId === reflectie.id ? 'transform rotate-180' : ''}`} \r\n                fill=\"none\" \r\n                viewBox=\"0 0 24 24\" \r\n                stroke=\"currentColor\"\r\n              >\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\r\n              </svg>\r\n            </span>\r\n          </button>\r\n          \r\n          {expandedId === reflectie.id && (\r\n            <div id={`reflectie-details-${reflectie.id}`} className=\"px-4 pb-4 pt-3 border-t border-gray-200 bg-gray-50\"> {/* Added bg-gray-50 */}\r\n              {reflectie.notitie ? (\r\n                <div className=\"mb-3 text-sm text-gray-700 whitespace-pre-wrap break-words\">{reflectie.notitie}</div>\r\n              ) : (\r\n                <div className=\"mb-3 text-sm text-gray-500 italic\">Geen notitie toegevoegd.</div>\r\n              )}\r\n              \r\n              {reflectie.ai_validatie && (\r\n                <div className=\"bg-purple-50 border border-purple-200 p-3 rounded-md mb-3 text-sm\">\r\n                  <div className=\"flex items-center text-purple-700 mb-1 font-medium\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 mr-1.5 flex-shrink-0\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" aria-hidden=\"true\">\r\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\" />\r\n                    </svg>\r\n                    <span>AI Inzicht</span>\r\n                  </div>\r\n                  <p className=\"text-purple-800\">{reflectie.ai_validatie}</p>\r\n                </div>\r\n              )}\r\n              \r\n              <div className=\"flex justify-end space-x-2 mt-2\">\r\n                <Link\r\n                  href={`/reflecties/${reflectie.id}/bewerken`} // Assuming an edit route\r\n                  className=\"px-3 py-1 text-xs bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 transition-colors focus:outline-none focus:ring-1 focus:ring-gray-400\"\r\n                >\r\n                  Bewerken\r\n                </Link>\r\n                {onDelete && (\r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={() => {\r\n                      if (confirmDeleteId === reflectie.id) {\r\n                        onDelete(reflectie.id);\r\n                        setConfirmDeleteId(null);\r\n                      } else {\r\n                        setConfirmDeleteId(reflectie.id);\r\n                        setTimeout(() => setConfirmDeleteId(null), 3000); // Auto-cancel confirm\r\n                      }\r\n                    }}\r\n                    disabled={isDeletingId === 'pending' || (typeof isDeletingId === 'string' && isDeletingId === reflectie.id)}\r\n                    className={`px-3 py-1 text-xs rounded-md transition-colors focus:outline-none focus:ring-1 ${\r\n                      confirmDeleteId === reflectie.id \r\n                        ? 'bg-red-500 text-white hover:bg-red-600 focus:ring-red-400' \r\n                        : 'bg-gray-200 text-gray-700 hover:bg-red-100 hover:text-red-700 focus:ring-gray-400'\r\n                    } ${(isDeletingId === 'pending' || (typeof isDeletingId === 'string' && isDeletingId === reflectie.id)) ? 'opacity-50 cursor-not-allowed' : ''}`}\r\n                    aria-label={confirmDeleteId === reflectie.id ? `Bevestig verwijderen` : `Verwijder reflectie`}\r\n                  >\r\n                    {isDeletingId === reflectie.id ? (\r\n                      <svg className=\"animate-spin h-3 w-3\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\r\n                        <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\r\n                        <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\r\n                      </svg>\r\n                    ) : confirmDeleteId === reflectie.id ? 'Bevestig' : 'Verwijder'}\r\n                  </button>\r\n                )}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\reflecties\\ReflectiesListContainer.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"`@/hooks/useMutations` import should occur before import of `@/hooks/useSupabaseQuery`","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":59,"fix":{"range":[17,136],"text":"import { useDeleteReflectie } from '@/hooks/useMutations';\r\nimport { useReflecties } from '@/hooks/useSupabaseQuery';\r\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":71,"fix":{"range":[206,206],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/components/ui/ConditionalRender` import should occur before import of `@/hooks/useSupabaseQuery`","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":71,"fix":{"range":[17,208],"text":"import { ConditionalRender } from '@/components/ui/ConditionalRender';\r\nimport { useReflecties } from '@/hooks/useSupabaseQuery';\r\nimport { useDeleteReflectie } from '@/hooks/useMutations';\r\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":47,"fix":{"range":[306,306],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":52,"fix":{"range":[359,359],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/lib/error-handler` import should occur before import of `./ReflectiesList`","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":52,"fix":{"range":[208,361],"text":"import { ErrorMessage } from '@/lib/error-handler';\r\nimport ReflectiesList from './ReflectiesList'; // Assuming ReflectiesList is in the same directory\r\n"}},{"ruleId":"import/order","severity":2,"message":"`next/link` import should occur before import of `@/hooks/useSupabaseQuery`","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":30,"fix":{"range":[17,422],"text":"import Link from 'next/link'; // For the empty state button\r\nimport { useReflecties } from '@/hooks/useSupabaseQuery';\r\nimport { useDeleteReflectie } from '@/hooks/useMutations';\r\nimport { ConditionalRender } from '@/components/ui/ConditionalRender';\r\nimport ReflectiesList from './ReflectiesList'; // Assuming ReflectiesList is in the same directory\r\nimport { ErrorMessage } from '@/lib/error-handler';\r\n"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":12,"column":8,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":12,"endColumn":65,"fix":{"range":[551,596],"text":"rounded-lg bg-white p-8 text-center shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":13,"column":45,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":13,"endColumn":93,"fix":{"range":[655,691],"text":"mx-auto mb-4 h-16 w-16 text-gray-300"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-16, w-16' could be replaced by the 'size-16' shorthand!","line":13,"column":45,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":13,"endColumn":93,"fix":{"range":[655,691],"text":"size-16 mx-auto text-gray-300 mb-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":16,"column":9,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":16,"endColumn":61,"fix":{"range":[1001,1041],"text":"mb-2 text-xl font-semibold text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":17,"column":8,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":17,"endColumn":38,"fix":{"range":[1092,1110],"text":"mb-6 text-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":20,"column":7,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":20,"endColumn":139,"fix":{"range":[1239,1359],"text":"inline-flex items-center rounded-md bg-purple-600 px-4 py-2 font-medium text-white transition-colors hover:bg-purple-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":22,"column":47,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":22,"endColumn":71,"fix":{"range":[1426,1438],"text":"mr-2 h-4 w-4"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-4, w-4' could be replaced by the 'size-4' shorthand!","line":22,"column":47,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":22,"endColumn":71,"fix":{"range":[1426,1438],"text":"size-4 mr-2"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":30,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":30,"endColumn":40},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":51,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":51,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2563,2615],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":7,"fixableWarningCount":8,"source":"'use client';\r\n\r\nimport { useReflecties } from '@/hooks/useSupabaseQuery';\r\nimport { useDeleteReflectie } from '@/hooks/useMutations';\r\nimport { ConditionalRender } from '@/components/ui/ConditionalRender';\r\nimport ReflectiesList from './ReflectiesList'; // Assuming ReflectiesList is in the same directory\r\nimport { ErrorMessage } from '@/lib/error-handler';\r\nimport Link from 'next/link'; // For the empty state button\r\n\r\n// Define an EmptyState component or use inline JSX for emptyFallback\r\nconst EmptyReflectiesState = () => (\r\n  <div className=\"bg-white rounded-lg shadow-md p-8 text-center\">\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-16 w-16 mx-auto text-gray-300 mb-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" aria-hidden=\"true\">\r\n      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1.5} d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\" />\r\n    </svg>\r\n    <h2 className=\"text-xl font-semibold text-gray-700 mb-2\">Geen reflecties gevonden</h2>\r\n    <p className=\"text-gray-500 mb-6\">Deel uw dagelijkse ervaringen en houd bij hoe u zich voelt.</p>\r\n    <Link \r\n      href=\"/reflecties/nieuw\" \r\n      className=\"px-4 py-2 bg-purple-600 text-white font-medium rounded-md hover:bg-purple-700 transition-colors inline-flex items-center\"\r\n    >\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\r\n      </svg>\r\n      Eerste Reflectie Toevoegen\r\n    </Link>\r\n  </div>\r\n);\r\n\r\nexport function ReflectiesListContainer({ userId }: { userId: string }) {\r\n  const { \r\n    data: reflecties, \r\n    isLoading, \r\n    error, // This will be ErrorMessage type\r\n    isError, // Boolean flag from React Query\r\n    // refetch // Can be used for pull-to-refresh or manual refresh\r\n  } = useReflecties(userId); // Default limit is 10\r\n  \r\n  const { \r\n    mutate: deleteReflectie, \r\n    isPending: isDeleting, \r\n    // error: deleteError, // Error for delete can be handled via onSuccess/onError or a separate state\r\n    // isError: isDeleteError\r\n  } = useDeleteReflectie();\r\n\r\n  const handleDelete = (reflectieId: string) => {\r\n    deleteReflectie({ id: reflectieId, userId: userId }, {\r\n      onSuccess: () => {\r\n        // Notification can be handled globally or by parent component\r\n        // Query invalidation is handled within the useDeleteReflectie hook\r\n        console.log(`Reflectie ${reflectieId} verwijderd.`);\r\n      },\r\n      onError: (err: ErrorMessage) => {\r\n        console.error(`Fout bij verwijderen reflectie ${reflectieId}:`, err.userMessage);\r\n        // Show error notification\r\n      }\r\n    });\r\n  };\r\n  \r\n  return (\r\n    <ConditionalRender\r\n      isLoading={isLoading}\r\n      isError={isError}\r\n      error={error} // Pass the error object from useReflecties\r\n      data={reflecties}\r\n      skeletonType=\"reflecties\" // This type needs to be defined in SkeletonLoader\r\n      emptyFallback={<EmptyReflectiesState />}\r\n    >\r\n      {(data) => (\r\n        <ReflectiesList \r\n          reflecties={data} \r\n          onDelete={handleDelete} \r\n          isDeletingId={isDeleting ? 'pending' : null} // Pass a generic deleting indicator or specific ID if hook provides it\r\n        />\r\n      )}\r\n    </ConditionalRender>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\settings\\ProfileFormPresentational.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":42,"fix":{"range":[56,56],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/types` import should occur after import of `@/lib/error-handler`","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":35,"fix":{"range":[58,213],"text":"import { AlertMessage } from '@/components/common/AlertMessage';\r\nimport { ErrorMessage } from '@/lib/error-handler';\r\nimport { Profile } from '@/types';\r\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Profile' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":17},{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'Profile' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":17,"fix":{"range":[58,94],"text":""}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":30,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":30,"endColumn":50},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":45,"column":10,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":45,"endColumn":55,"fix":{"range":[1249,1282],"text":"rounded-lg bg-white p-6 shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":46,"column":11,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":46,"endColumn":49,"fix":{"range":[1307,1333],"text":"mb-6 text-xl font-semibold"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":54,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":54,"endColumn":41,"fix":{"range":[1697,1710],"text":"relative mb-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":55,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":55,"endColumn":115,"fix":{"range":[1742,1827],"text":"flex h-24 w-24 items-center justify-center overflow-hidden rounded-full bg-purple-100"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-24, w-24' could be replaced by the 'size-24' shorthand!","line":55,"column":18,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":55,"endColumn":115,"fix":{"range":[1742,1827],"text":"size-24 rounded-full bg-purple-100 flex items-center justify-center overflow-hidden"}},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":57,"column":17,"nodeType":"JSXOpeningElement","endLine":57,"endColumn":97},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-full, w-full' could be replaced by the 'size-full' shorthand!","line":57,"column":56,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":57,"endColumn":94,"fix":{"range":[1927,1953],"text":"size-full object-cover"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-12, w-12' could be replaced by the 'size-12' shorthand!","line":59,"column":22,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":59,"endColumn":59,"fix":{"range":[2012,2037],"text":"size-12 text-purple-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":66,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":66,"endColumn":176,"fix":{"range":[2402,2551],"text":"absolute bottom-0 right-0 flex h-8 w-8 cursor-pointer items-center justify-center rounded-full bg-purple-600 text-white shadow-md hover:bg-purple-700"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-8, w-8' could be replaced by the 'size-8' shorthand!","line":66,"column":15,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":66,"endColumn":176,"fix":{"range":[2402,2551],"text":"absolute bottom-0 right-0 size-8 rounded-full bg-purple-600 flex items-center justify-center cursor-pointer text-white shadow-md hover:bg-purple-700"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-4, w-4' could be replaced by the 'size-4' shorthand!","line":69,"column":20,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":69,"endColumn":39,"fix":{"range":[2646,2653],"text":"size-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":80,"column":34,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":80,"endColumn":81,"fix":{"range":[3350,3385],"text":"animate-pulse text-sm text-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":83,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":83,"endColumn":68,"fix":{"range":[3467,3509],"text":"mb-6 grid grid-cols-1 gap-4 md:grid-cols-2"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":85,"column":39,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":85,"endColumn":95,"fix":{"range":[3579,3623],"text":"mb-1 block text-sm font-medium text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":87,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":87,"endColumn":131,"fix":{"range":[3780,3884],"text":"w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-purple-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":90,"column":41,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":90,"endColumn":97,"fix":{"range":[3985,4029],"text":"mb-1 block text-sm font-medium text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":92,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":92,"endColumn":131,"fix":{"range":[4194,4298],"text":"w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-purple-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":96,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":96,"endColumn":68,"fix":{"range":[4381,4423],"text":"mb-6 grid grid-cols-1 gap-4 md:grid-cols-2"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":98,"column":39,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":98,"endColumn":95,"fix":{"range":[4493,4537],"text":"mb-1 block text-sm font-medium text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":100,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":100,"endColumn":131,"fix":{"range":[4694,4798],"text":"w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-purple-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":103,"column":39,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":103,"endColumn":95,"fix":{"range":[4888,4932],"text":"mb-1 block text-sm font-medium text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":105,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":105,"endColumn":131,"fix":{"range":[5089,5193],"text":"w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-purple-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":110,"column":42,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":110,"endColumn":98,"fix":{"range":[5327,5371],"text":"mb-1 block text-sm font-medium text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":112,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":112,"endColumn":129,"fix":{"range":[5544,5648],"text":"w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-purple-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":117,"column":46,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":117,"endColumn":102,"fix":{"range":[5799,5843],"text":"mb-1 block text-sm font-medium text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":119,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":119,"endColumn":123,"fix":{"range":[6023,6117],"text":"w-full rounded-md border border-gray-300 bg-gray-50 px-3 py-2 text-gray-500 focus:outline-none"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":125,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":125,"endColumn":117,"fix":{"range":[6338,6430],"text":"rounded-md border border-gray-300 px-4 py-2 text-gray-700 transition-colors hover:bg-gray-50"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":130,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":132,"endColumn":16,"fix":{"range":[6766,6798],"text":"cursor-not-allowed bg-purple-300"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":130,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":132,"endColumn":16,"fix":{"range":[6643,6708],"text":"`rounded-md px-4 py-2 font-medium text-white transition-colors ${"}}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":31,"fixableErrorCount":3,"fixableWarningCount":28,"source":"'use client';\r\nimport React, { FormEvent } from 'react';\r\nimport { Profile } from '@/types';\r\nimport { AlertMessage } from '@/components/common/AlertMessage';\r\nimport { ErrorMessage } from '@/lib/error-handler';\r\n\r\nexport interface ProfileFormData {\r\n  voornaam: string;\r\n  achternaam: string;\r\n  postcode: string;\r\n  gemeente: string;\r\n  geboortedatum: string;\r\n}\r\n\r\ninterface ProfileFormPresentationalProps {\r\n  formData: ProfileFormData;\r\n  avatarUrl: string | null;\r\n  uploadingAvatar: boolean;\r\n  isUpdatingProfile: boolean;\r\n  profileType: string | undefined;\r\n  updateProfileError: ErrorMessage | null;\r\n  isUpdateProfileError: boolean;\r\n  isUpdateProfileSuccess: boolean;\r\n  onFormChange: (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => void;\r\n  onAvatarUpload: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  onSubmit: (e: FormEvent) => void;\r\n  onCancel: () => void;\r\n}\r\n\r\nexport default function ProfileFormPresentational({\r\n  formData,\r\n  avatarUrl,\r\n  uploadingAvatar,\r\n  isUpdatingProfile,\r\n  profileType,\r\n  updateProfileError,\r\n  isUpdateProfileError,\r\n  isUpdateProfileSuccess,\r\n  onFormChange,\r\n  onAvatarUpload,\r\n  onSubmit,\r\n  onCancel,\r\n}: ProfileFormPresentationalProps) {\r\n  return (\r\n    <div className=\"bg-white rounded-lg shadow-md p-6\">\r\n      <h2 className=\"text-xl font-semibold mb-6\">Mijn Profiel</h2>\r\n\r\n      {isUpdateProfileError && updateProfileError && !isUpdateProfileSuccess && (\r\n        <AlertMessage type=\"error\" title=\"Opslaan Mislukt\" message={updateProfileError.userMessage} className=\"mb-4\" />\r\n      )}\r\n      \r\n      <form onSubmit={onSubmit}>\r\n        <div className=\"mb-6 flex flex-col items-center\">\r\n          <div className=\"mb-4 relative\">\r\n            <div className=\"h-24 w-24 rounded-full bg-purple-100 flex items-center justify-center overflow-hidden\">\r\n              {avatarUrl ? (\r\n                <img src={avatarUrl} alt=\"Profielfoto\" className=\"h-full w-full object-cover\" />\r\n              ) : (\r\n                <svg className=\"h-12 w-12 text-purple-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\" />\r\n                </svg>\r\n              )}\r\n            </div>\r\n            <label\r\n              htmlFor=\"avatar-upload\"\r\n              className=\"absolute bottom-0 right-0 h-8 w-8 rounded-full bg-purple-600 flex items-center justify-center cursor-pointer text-white shadow-md hover:bg-purple-700\"\r\n              aria-label=\"Upload profielfoto\"\r\n            >\r\n              <svg className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" aria-hidden=\"true\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\r\n              </svg>\r\n              <input\r\n                id=\"avatar-upload\" type=\"file\" accept=\"image/*\" className=\"hidden\"\r\n                onChange={onAvatarUpload} disabled={uploadingAvatar}\r\n                aria-labelledby=\"avatar-upload-label\" // Technically the label wraps it, but explicit can help\r\n              />\r\n            </label>\r\n            <span id=\"avatar-upload-label\" className=\"sr-only\">Upload profielfoto</span>\r\n          </div>\r\n          {uploadingAvatar && <p className=\"text-sm text-gray-500 animate-pulse\">Profielfoto uploaden...</p>}\r\n        </div>\r\n        \r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\r\n          <div>\r\n            <label htmlFor=\"voornaam\" className=\"block text-sm font-medium text-gray-700 mb-1\">Voornaam</label>\r\n            <input id=\"voornaam\" name=\"voornaam\" type=\"text\" value={formData.voornaam} onChange={onFormChange}\r\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500\" required />\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"achternaam\" className=\"block text-sm font-medium text-gray-700 mb-1\">Achternaam</label>\r\n            <input id=\"achternaam\" name=\"achternaam\" type=\"text\" value={formData.achternaam} onChange={onFormChange}\r\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500\" required />\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\r\n          <div>\r\n            <label htmlFor=\"postcode\" className=\"block text-sm font-medium text-gray-700 mb-1\">Postcode</label>\r\n            <input id=\"postcode\" name=\"postcode\" type=\"text\" value={formData.postcode} onChange={onFormChange}\r\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500\" />\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"gemeente\" className=\"block text-sm font-medium text-gray-700 mb-1\">Gemeente</label>\r\n            <input id=\"gemeente\" name=\"gemeente\" type=\"text\" value={formData.gemeente} onChange={onFormChange}\r\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500\" />\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"mb-6\">\r\n          <label htmlFor=\"geboortedatum\" className=\"block text-sm font-medium text-gray-700 mb-1\">Geboortedatum</label>\r\n          <input id=\"geboortedatum\" name=\"geboortedatum\" type=\"date\" value={formData.geboortedatum} onChange={onFormChange}\r\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500\" />\r\n        </div>\r\n        \r\n        {profileType && (\r\n            <div className=\"mb-6\">\r\n                <label htmlFor=\"accountType\" className=\"block text-sm font-medium text-gray-700 mb-1\">Account type</label>\r\n                <input id=\"accountType\" type=\"text\" value={profileType.charAt(0).toUpperCase() + profileType.slice(1)} readOnly\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-50 text-gray-500 focus:outline-none\" aria-label=\"Account type (niet wijzigbaar)\" />\r\n            </div>\r\n        )}\r\n        \r\n        <div className=\"flex justify-end space-x-3\">\r\n          <button type=\"button\" onClick={onCancel}\r\n            className=\"px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 transition-colors\"\r\n            disabled={isUpdatingProfile || uploadingAvatar}>\r\n            Annuleren\r\n          </button>\r\n          <button type=\"submit\" disabled={isUpdatingProfile || uploadingAvatar}\r\n            className={`px-4 py-2 rounded-md text-white font-medium transition-colors ${\r\n              (isUpdatingProfile || uploadingAvatar) ? 'bg-purple-300 cursor-not-allowed' : 'bg-purple-600 hover:bg-purple-700'\r\n            }`}\r\n          >\r\n            {(isUpdatingProfile || uploadingAvatar) ? 'Bezig met opslaan...' : 'Profiel Opslaan'}\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\specialisten\\AddPatientButtonPresentational.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":42,"fix":{"range":[56,56],"text":"\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":18,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":18,"endColumn":55},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":33,"column":9,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":33,"endColumn":116,"fix":{"range":[825,920],"text":"rounded-md bg-purple-600 px-4 py-2 font-medium text-white transition-colors hover:bg-purple-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":39,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":39,"endColumn":104,"fix":{"range":[1031,1109],"text":"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 p-4"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'bg-opacity-50' should be replaced by an opacity suffix (eg. '/50')","line":39,"column":14,"nodeType":"JSXAttribute","messageId":"classnameOpacityDeprecated","endLine":39,"endColumn":104},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":40,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":40,"endColumn":73,"fix":{"range":[1139,1184],"text":"w-full max-w-md rounded-lg bg-white shadow-xl"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":42,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":42,"endColumn":57,"fix":{"range":[1252,1278],"text":"mb-4 text-lg font-semibold"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":53,"column":50,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":53,"endColumn":106,"fix":{"range":[1805,1849],"text":"mb-1 block text-sm font-medium text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":61,"column":21,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":61,"endColumn":137,"fix":{"range":[2138,2242],"text":"w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-purple-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":70,"column":22,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":70,"endColumn":65,"fix":{"range":[2581,2612],"text":"mt-6 flex justify-end space-x-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":74,"column":21,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":74,"endColumn":125,"fix":{"range":[2753,2845],"text":"rounded-md border border-gray-300 px-4 py-2 text-gray-700 transition-colors hover:bg-gray-50"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":83,"column":21,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":85,"endColumn":42,"fix":{"range":[3210,3242],"text":"cursor-not-allowed bg-purple-300"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":83,"column":21,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":85,"endColumn":42,"fix":{"range":[3126,3173],"text":"`rounded-md px-4 py-2 font-medium text-white ${"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":1,"fixableWarningCount":10,"source":"'use client';\r\nimport React, { FormEvent } from 'react';\r\nimport { AlertMessage } from '@/components/common/AlertMessage';\r\nimport { ErrorMessage } from '@/lib/error-handler';\r\n\r\ninterface AddPatientButtonPresentationalProps {\r\n  showModal: boolean;\r\n  email: string;\r\n  isLoading: boolean;\r\n  error: ErrorMessage | null;\r\n  isSuccess: boolean;\r\n  onOpenModal: () => void;\r\n  onCloseModal: () => void;\r\n  onEmailChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  onSubmit: (e: FormEvent) => void;\r\n}\r\n\r\nexport default function AddPatientButtonPresentational({\r\n  showModal,\r\n  email,\r\n  isLoading,\r\n  error,\r\n  isSuccess,\r\n  onOpenModal,\r\n  onCloseModal,\r\n  onEmailChange,\r\n  onSubmit,\r\n}: AddPatientButtonPresentationalProps) {\r\n  return (\r\n    <>\r\n      <button\r\n        onClick={onOpenModal}\r\n        className=\"px-4 py-2 bg-purple-600 text-white font-medium rounded-md hover:bg-purple-700 transition-colors\"\r\n      >\r\n        Patiënt Toevoegen\r\n      </button>\r\n      \r\n      {showModal && (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4\">\r\n          <div className=\"bg-white rounded-lg shadow-xl max-w-md w-full\">\r\n            <div className=\"p-6\">\r\n              <h3 className=\"text-lg font-semibold mb-4\">Patiënt Toevoegen</h3>\r\n              \r\n              {error && (\r\n                <AlertMessage type=\"error\" message={error.userMessage || 'Kon patiënt niet toevoegen.'} />\r\n              )}\r\n              {isSuccess && !error && (\r\n                <AlertMessage type=\"success\" message=\"Patiënt succesvol toegevoegd! De lijst wordt vernieuwd.\" />\r\n              )}\r\n              \r\n              <form onSubmit={onSubmit}>\r\n                <div className=\"mb-4\">\r\n                  <label htmlFor=\"patient-email\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                    E-mailadres van patiënt\r\n                  </label>\r\n                  <input\r\n                    id=\"patient-email\"\r\n                    type=\"email\"\r\n                    value={email}\r\n                    onChange={onEmailChange}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500\"\r\n                    required\r\n                    disabled={isLoading}\r\n                  />\r\n                  <p className=\"mt-1 text-sm text-gray-500\">\r\n                    Voer het e-mailadres in waarmee de patiënt is geregistreerd.\r\n                  </p>\r\n                </div>\r\n                \r\n                <div className=\"flex justify-end space-x-3 mt-6\">\r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={onCloseModal}\r\n                    className=\"px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 transition-colors\"\r\n                    disabled={isLoading}\r\n                  >\r\n                    Annuleren\r\n                  </button>\r\n                  \r\n                  <button\r\n                    type=\"submit\"\r\n                    disabled={isLoading}\r\n                    className={`px-4 py-2 rounded-md text-white font-medium ${\r\n                      isLoading ? 'bg-purple-300 cursor-not-allowed' : 'bg-purple-600 hover:bg-purple-700'\r\n                    } transition-colors`}\r\n                  >\r\n                    {isLoading ? 'Bezig...' : 'Toevoegen'}\r\n                  </button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\specialisten\\AddSpecialistButtonPresentational.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":42,"fix":{"range":[56,56],"text":"\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":17,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":17,"endColumn":58},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":31,"column":9,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":31,"endColumn":116,"fix":{"range":[885,980],"text":"rounded-md bg-purple-600 px-4 py-2 font-medium text-white transition-colors hover:bg-purple-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":37,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":37,"endColumn":104,"fix":{"range":[1094,1172],"text":"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 p-4"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'bg-opacity-50' should be replaced by an opacity suffix (eg. '/50')","line":37,"column":14,"nodeType":"JSXAttribute","messageId":"classnameOpacityDeprecated","endLine":37,"endColumn":104},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":38,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":38,"endColumn":73,"fix":{"range":[1202,1247],"text":"w-full max-w-md rounded-lg bg-white shadow-xl"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":40,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":40,"endColumn":57,"fix":{"range":[1315,1341],"text":"mb-4 text-lg font-semibold"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":49,"column":59,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":49,"endColumn":115,"fix":{"range":[1765,1809],"text":"mb-1 block text-sm font-medium text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":57,"column":21,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":57,"endColumn":191,"fix":{"range":[2110,2202],"text":"`w-full rounded-md border px-3 py-2 focus:outline-none focus:ring-2 focus:ring-purple-500 ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":66,"column":22,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":66,"endColumn":65,"fix":{"range":[2610,2641],"text":"mt-6 flex justify-end space-x-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":70,"column":21,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":70,"endColumn":125,"fix":{"range":[2782,2874],"text":"rounded-md border border-gray-300 px-4 py-2 text-gray-700 transition-colors hover:bg-gray-50"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":79,"column":21,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":81,"endColumn":42,"fix":{"range":[3239,3271],"text":"cursor-not-allowed bg-purple-300"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":79,"column":21,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":81,"endColumn":42,"fix":{"range":[3155,3202],"text":"`rounded-md px-4 py-2 font-medium text-white ${"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":1,"fixableWarningCount":10,"source":"'use client';\r\nimport React, { FormEvent } from 'react';\r\nimport { AlertMessage } from '@/components/common/AlertMessage';\r\n\r\ninterface AddSpecialistButtonPresentationalProps {\r\n  showModal: boolean;\r\n  email: string;\r\n  isLoading: boolean;\r\n  formError: string | null; // For form-level validation errors before mutation\r\n  // Mutation success/error will be handled by global notifications via the container\r\n  onOpenModal: () => void;\r\n  onCloseModal: () => void;\r\n  onEmailChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  onSubmit: (e: FormEvent) => void;\r\n}\r\n\r\nexport default function AddSpecialistButtonPresentational({\r\n  showModal,\r\n  email,\r\n  isLoading,\r\n  formError,\r\n  onOpenModal,\r\n  onCloseModal,\r\n  onEmailChange,\r\n  onSubmit,\r\n}: AddSpecialistButtonPresentationalProps) {\r\n  return (\r\n    <>\r\n      <button\r\n        onClick={onOpenModal}\r\n        className=\"px-4 py-2 bg-purple-600 text-white font-medium rounded-md hover:bg-purple-700 transition-colors\"\r\n      >\r\n        Specialist Toevoegen\r\n      </button>\r\n      \r\n      {showModal && (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4\">\r\n          <div className=\"bg-white rounded-lg shadow-xl max-w-md w-full\">\r\n            <div className=\"p-6\">\r\n              <h3 className=\"text-lg font-semibold mb-4\">Specialist Toevoegen</h3>\r\n              \r\n              {formError && (\r\n                <AlertMessage type=\"error\" message={formError} className=\"mb-4\" />\r\n              )}\r\n              {/* Global notifications will handle mutation success/error */}\r\n              \r\n              <form onSubmit={onSubmit}>\r\n                <div className=\"mb-4\">\r\n                  <label htmlFor=\"specialist-email-input\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                    E-mailadres van specialist\r\n                  </label>\r\n                  <input\r\n                    id=\"specialist-email-input\"\r\n                    type=\"email\"\r\n                    value={email}\r\n                    onChange={onEmailChange}\r\n                    className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 ${formError && email === '' ? 'border-red-500' : 'border-gray-300'}`}\r\n                    required\r\n                    disabled={isLoading}\r\n                  />\r\n                  <p className=\"mt-1 text-sm text-gray-500\">\r\n                    Voer het e-mailadres in waarmee de specialist is geregistreerd.\r\n                  </p>\r\n                </div>\r\n                \r\n                <div className=\"flex justify-end space-x-3 mt-6\">\r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={onCloseModal}\r\n                    className=\"px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 transition-colors\"\r\n                    disabled={isLoading}\r\n                  >\r\n                    Annuleren\r\n                  </button>\r\n                  \r\n                  <button\r\n                    type=\"submit\"\r\n                    disabled={isLoading}\r\n                    className={`px-4 py-2 rounded-md text-white font-medium ${\r\n                      isLoading ? 'bg-purple-300 cursor-not-allowed' : 'bg-purple-600 hover:bg-purple-700'\r\n                    } transition-colors`}\r\n                  >\r\n                    {isLoading ? 'Bezig...' : 'Toevoegen'}\r\n                  </button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\specialisten\\CreateTaskAssignmentForm.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":56,"fix":{"range":[96,96],"text":"\n"}},{"ruleId":"no-restricted-imports","severity":2,"message":"'@/hooks/useMutations' import is restricted from being used. Mutation hooks (useMutations/*) mogen niet in presentational components.","line":4,"column":1,"nodeType":"ImportDeclaration","messageId":"pathWithCustomMessage","endLine":4,"endColumn":54},{"ruleId":"import/order","severity":2,"message":"`@/context/NotificationContext` import should occur before import of `@/hooks/useMutations`","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":65,"fix":{"range":[98,219],"text":"import { useNotification } from '@/context/NotificationContext';\r\nimport { useUpsertTask } from '@/hooks/useMutations';\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":29,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":29,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'user_id' is assigned a value but never used.","line":47,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'initialSpecialistId' is assigned a value but never used.","line":47,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":62},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'created_at' is assigned a value but never used.","line":47,"column":64,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":74},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updated_at' is assigned a value but never used.","line":47,"column":76,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":86},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":117,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":117,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4649,4779],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updatedOrCreatedTask' is defined but never used. Allowed unused args must match /^_/u.","line":120,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":120,"endColumn":39},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":140,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":140,"endColumn":89,"fix":{"range":[5662,5727],"text":"mt-6 rounded-md border border-blue-200 bg-blue-50 p-4 text-center"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":150,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":150,"endColumn":94,"fix":{"range":[6196,6266],"text":"mt-6 rounded-md border border-yellow-300 bg-yellow-100 p-4 text-center"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":158,"column":35,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":158,"endColumn":75,"fix":{"range":[6493,6521],"text":"mt-6 space-y-4 border-t pt-6"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":170,"column":11,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":170,"endColumn":130,"fix":{"range":[6989,7058],"text":"`mt-1 block w-full rounded-md border-gray-300 shadow-sm sm:text-sm ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":183,"column":11,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":183,"endColumn":88,"fix":{"range":[7553,7618],"text":"mt-1 block w-full rounded-md border-gray-300 shadow-sm sm:text-sm"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":187,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":187,"endColumn":61,"fix":{"range":[7677,7714],"text":"grid grid-cols-1 gap-4 md:grid-cols-2"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":195,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":195,"endColumn":212,"fix":{"range":[8008,8158],"text":"`mt-1 block w-full rounded-md border-gray-300 py-2 pl-3 pr-10 text-base focus:border-purple-500 focus:outline-none focus:ring-purple-500 sm:text-sm ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":209,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":209,"endColumn":223,"fix":{"range":[8805,8955],"text":"`mt-1 block w-full rounded-md border-gray-300 py-2 pl-3 pr-10 text-base focus:border-purple-500 focus:outline-none focus:ring-purple-500 sm:text-sm ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":229,"column":11,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":229,"endColumn":88,"fix":{"range":[9752,9817],"text":"mt-1 block w-full rounded-md border-gray-300 shadow-sm sm:text-sm"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":242,"column":11,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":242,"endColumn":88,"fix":{"range":[10234,10299],"text":"mt-1 block w-full rounded-md border-gray-300 shadow-sm sm:text-sm"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":254,"column":11,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":254,"endColumn":88,"fix":{"range":[10668,10733],"text":"mt-1 block w-full rounded-md border-gray-300 shadow-sm sm:text-sm"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":266,"column":11,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":266,"endColumn":294,"fix":{"range":[11187,11458],"text":"flex w-full justify-center rounded-md border border-transparent bg-purple-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 disabled:cursor-not-allowed disabled:bg-gray-400"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":279,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":279,"endColumn":244,"fix":{"range":[11953,12172],"text":"mt-2 flex w-full justify-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"}}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":2,"fixableWarningCount":13,"source":"'use client';\r\n\r\nimport { useState, FormEvent, useEffect } from 'react'; // useEffect toegevoegd\r\nimport { useUpsertTask } from '@/hooks/useMutations';\r\nimport { useNotification } from '@/context/NotificationContext';\r\nimport { Task } from '@/types'; \r\n\r\ninterface CreateTaskAssignmentFormProps {\r\n  selectedPatientId: string | null; // ID van de patiënt voor wie de taak is\r\n  specialistId: string; // ID van de ingelogde specialist\r\n  onTaskUpserted?: () => void; // Callback na aanmaken/bijwerken\r\n  initialData?: Task | null; // Voor het bewerken van een bestaande taak\r\n}\r\n\r\n// Velden die in het formulier bewerkt kunnen worden\r\ntype TaskFormData = Omit<Task, 'id' | 'user_id' | 'specialist_id' | 'created_at' | 'updated_at'>;\r\n\r\nconst defaultFormData: Partial<TaskFormData> = {\r\n  titel: '',\r\n  beschrijving: '',\r\n  type: 'taak',\r\n  herhaal_patroon: 'eenmalig',\r\n  duur: 30,\r\n  hartslag_doel: undefined,\r\n  notities: '',\r\n  labels: [],\r\n};\r\n\r\nexport default function CreateTaskAssignmentForm({ \r\n  selectedPatientId, \r\n  specialistId,\r\n  onTaskUpserted,\r\n  initialData \r\n}: CreateTaskAssignmentFormProps) {\r\n  const [formData, setFormData] = useState<Partial<TaskFormData>>(defaultFormData);\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [currentTaskId, setCurrentTaskId] = useState<string | null>(null);\r\n  // Het gedupliceerde blok hieronder is verwijderd\r\n  const [errors, setErrors] = useState<Partial<Record<keyof TaskFormData, string>>>({});\r\n  \r\n  const { addNotification } = useNotification();\r\n  const { mutate: upsertTask, isPending: isLoading } = useUpsertTask();\r\n\r\n  useEffect(() => {\r\n    if (initialData && selectedPatientId === initialData.user_id) { // Zorg dat de geselecteerde patiënt overeenkomt\r\n      // Filter alleen de velden die in TaskFormData zitten\r\n      const { id, user_id, specialist_id: initialSpecialistId, created_at, updated_at, ...editableData } = initialData;\r\n      setFormData(editableData);\r\n      setIsEditing(true);\r\n      setCurrentTaskId(id);\r\n    } else {\r\n      setFormData(defaultFormData);\r\n      setIsEditing(false);\r\n      setCurrentTaskId(null);\r\n    }\r\n  }, [initialData, selectedPatientId]);\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\r\n    const { name, value } = e.target;\r\n    setFormData(prev => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const validateForm = (): boolean => {\r\n    const newErrors: Partial<Record<keyof TaskFormData, string>> = {};\r\n    if (!formData.titel?.trim()) {\r\n      newErrors.titel = 'Titel is verplicht.';\r\n    }\r\n    if (!formData.type) {\r\n      newErrors.type = 'Taaktype is verplicht.';\r\n    }\r\n    if (!formData.herhaal_patroon) {\r\n      newErrors.herhaal_patroon = 'Herhaalpatroon is verplicht.';\r\n    }\r\n    // Voeg hier meer validaties toe indien nodig\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  const handleSubmit = async (e: FormEvent) => {\r\n    e.preventDefault();\r\n    if (!selectedPatientId) { // Dit zou niet mogen gebeuren als het formulier alleen getoond wordt met een geselecteerde patiënt\r\n      addNotification({ type: 'error', message: 'Geen patiënt geselecteerd.' });\r\n      return;\r\n    }\r\n    if (!validateForm()) {\r\n      return;\r\n    }\r\n\r\n    const taskPayload: Partial<Task> = {\r\n      ...formData,\r\n      // user_id en specialist_id worden alleen meegestuurd bij NIEUWE taken.\r\n      // Bij bewerken worden deze niet gewijzigd via dit formulier.\r\n      // De API (PUT /api/tasks/[id]) moet de user_id en specialist_id van de bestaande taak respecteren.\r\n      duur: formData.duur && String(formData.duur).trim() !== '' ? parseInt(String(formData.duur), 10) : undefined,\r\n      hartslag_doel: formData.hartslag_doel && String(formData.hartslag_doel).trim() !== '' ? parseInt(String(formData.hartslag_doel), 10) : undefined,\r\n    };\r\n    \r\n    if (isEditing && currentTaskId) {\r\n      taskPayload.id = currentTaskId;\r\n      // Belangrijk: stuur user_id en specialist_id NIET mee in de payload voor een UPDATE,\r\n      // tenzij je ze expliciet wilt kunnen wijzigen. De API zou dit moeten afdwingen.\r\n      // delete taskPayload.user_id; // Wordt al niet meegenomen door TaskFormData Omit\r\n      // delete taskPayload.specialist_id;\r\n    } else {\r\n      // Alleen voor nieuwe taken:\r\n      taskPayload.user_id = selectedPatientId;\r\n      taskPayload.specialist_id = specialistId;\r\n    }\r\n    \r\n    Object.keys(taskPayload).forEach(key => {\r\n      const typedKey = key as keyof Partial<Task>;\r\n      if (taskPayload[typedKey] === undefined) {\r\n        delete taskPayload[typedKey];\r\n      }\r\n    });\r\n\r\n    console.log(`[CreateTaskAssignmentForm] Submitting taskPayload (isEditing: ${isEditing}):`, JSON.stringify(taskPayload, null, 2));\r\n\r\n    upsertTask(taskPayload, {\r\n      onSuccess: (updatedOrCreatedTask) => {\r\n        const message = isEditing ? 'Taak succesvol bijgewerkt!' : 'Taak succesvol aangemaakt!';\r\n        addNotification({ type: 'success', message });\r\n        setFormData(defaultFormData); // Reset naar default\r\n        setIsEditing(false);\r\n        setCurrentTaskId(null);\r\n        setErrors({});\r\n        if (onTaskUpserted) onTaskUpserted();\r\n      },\r\n      onError: (error) => {\r\n        const message = isEditing ? 'Fout bij bijwerken taak.' : 'Fout bij aanmaken taak.';\r\n        addNotification({ type: 'error', message: error.userMessage || message });\r\n      }\r\n    });\r\n  };\r\n\r\n  // Toon het formulier alleen als een patiënt is geselecteerd, \r\n  // of als we aan het bewerken zijn (initialData is dan gezet).\r\n  if (!selectedPatientId && !isEditing) {\r\n    return (\r\n      <div className=\"mt-6 p-4 bg-blue-50 border border-blue-200 rounded-md text-center\">\r\n        <p className=\"text-blue-700\">Selecteer een patiënt om een taak aan te maken of te bewerken.</p>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  // Als initialData is meegegeven maar de selectedPatientId komt niet overeen, toon dan niets of een melding.\r\n  // Dit voorkomt dat je een taak van patiënt A bewerkt terwijl patiënt B geselecteerd is.\r\n  if (initialData && selectedPatientId && initialData.user_id !== selectedPatientId) {\r\n     return (\r\n      <div className=\"mt-6 p-4 bg-yellow-100 border border-yellow-300 rounded-md text-center\">\r\n        <p className=\"text-yellow-700\">De geselecteerde taak behoort niet tot de geselecteerde patiënt. Maak een nieuwe selectie.</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"space-y-4 mt-6 border-t pt-6\">\r\n      <h3 className=\"text-lg font-medium leading-6 text-gray-900\">\r\n        {isEditing ? `Taak \"${formData.titel || ''}\" Bewerken` : 'Nieuwe Taak Toewijzen'}\r\n      </h3>\r\n      <div>\r\n        <label htmlFor=\"titel\" className=\"block text-sm font-medium text-gray-700\">Titel</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"titel\"\r\n          id=\"titel\"\r\n          value={formData.titel || ''}\r\n          onChange={handleChange}\r\n          className={`mt-1 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md ${errors.titel ? 'border-red-500' : ''}`}\r\n        />\r\n        {errors.titel && <p className=\"mt-1 text-sm text-red-600\">{errors.titel}</p>}\r\n      </div>\r\n\r\n      <div>\r\n        <label htmlFor=\"beschrijving\" className=\"block text-sm font-medium text-gray-700\">Beschrijving (optioneel)</label>\r\n        <textarea\r\n          name=\"beschrijving\"\r\n          id=\"beschrijving\"\r\n          rows={3}\r\n          value={formData.beschrijving || ''}\r\n          onChange={handleChange}\r\n          className=\"mt-1 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md\"\r\n        />\r\n      </div>\r\n      \r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n        <div>\r\n          <label htmlFor=\"type\" className=\"block text-sm font-medium text-gray-700\">Type Taak</label>\r\n          <select\r\n            name=\"type\"\r\n            id=\"type\"\r\n            value={formData.type || 'taak'}\r\n            onChange={handleChange}\r\n            className={`mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-purple-500 focus:border-purple-500 sm:text-sm rounded-md ${errors.type ? 'border-red-500' : ''}`}\r\n          >\r\n            <option value=\"taak\">Taak (algemeen)</option>\r\n            <option value=\"opdracht\">Opdracht (specifiek)</option>\r\n          </select>\r\n          {errors.type && <p className=\"mt-1 text-sm text-red-600\">{errors.type}</p>}\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"herhaal_patroon\" className=\"block text-sm font-medium text-gray-700\">Herhaalpatroon</label>\r\n          <select\r\n            name=\"herhaal_patroon\"\r\n            id=\"herhaal_patroon\"\r\n            value={formData.herhaal_patroon || 'eenmalig'}\r\n            onChange={handleChange}\r\n            className={`mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-purple-500 focus:border-purple-500 sm:text-sm rounded-md ${errors.herhaal_patroon ? 'border-red-500' : ''}`}\r\n          >\r\n            <option value=\"eenmalig\">Eenmalig</option>\r\n            <option value=\"dagelijks\">Dagelijks</option>\r\n            <option value=\"wekelijks\">Wekelijks</option>\r\n            {/* Voeg meer opties toe indien nodig */}\r\n          </select>\r\n          {errors.herhaal_patroon && <p className=\"mt-1 text-sm text-red-600\">{errors.herhaal_patroon}</p>}\r\n        </div>\r\n      </div>\r\n\r\n      <div>\r\n        <label htmlFor=\"duur\" className=\"block text-sm font-medium text-gray-700\">Duur (minuten, optioneel)</label>\r\n        <input\r\n          type=\"number\"\r\n          name=\"duur\"\r\n          id=\"duur\"\r\n          value={formData.duur || ''}\r\n          onChange={handleChange}\r\n          placeholder=\"Bijv. 30\"\r\n          className=\"mt-1 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md\"\r\n        />\r\n      </div>\r\n\r\n      <div>\r\n        <label htmlFor=\"hartslag_doel\" className=\"block text-sm font-medium text-gray-700\">Hartslag Doel (bpm, optioneel)</label>\r\n        <input\r\n          type=\"number\"\r\n          name=\"hartslag_doel\"\r\n          id=\"hartslag_doel\"\r\n          value={formData.hartslag_doel || ''}\r\n          onChange={handleChange}\r\n          placeholder=\"Bijv. 120\"\r\n          className=\"mt-1 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md\"\r\n        />\r\n      </div>\r\n\r\n      <div>\r\n        <label htmlFor=\"notities\" className=\"block text-sm font-medium text-gray-700\">Extra Notities voor Patiënt (optioneel)</label>\r\n        <textarea\r\n          name=\"notities\"\r\n          id=\"notities\"\r\n          rows={2}\r\n          value={formData.notities || ''}\r\n          onChange={handleChange}\r\n          className=\"mt-1 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md\"\r\n        />\r\n      </div>\r\n      \r\n      {/* TODO: Labels (bijv. met een multi-select of tag input) */}\r\n      {/* TODO: dagen_van_week (voor wekelijks herhalen) */}\r\n      {/* TODO: metingen (welke sensoren te gebruiken) */}\r\n\r\n      <div className=\"pt-2\">\r\n        <button\r\n          type=\"submit\"\r\n          disabled={isLoading || (!selectedPatientId && !isEditing)} // Disable als geen patiënt geselecteerd (voor nieuwe taak)\r\n          className=\"w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-purple-600 hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 disabled:bg-gray-400 disabled:cursor-not-allowed\"\r\n        >\r\n          {isLoading ? 'Bezig...' : (isEditing ? 'Taak Bijwerken' : 'Taak Aanmaken en Toewijzen')}\r\n        </button>\r\n        {isEditing && (\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => {\r\n              setFormData(defaultFormData);\r\n              setIsEditing(false);\r\n              setCurrentTaskId(null);\r\n              // Optioneel: roep een prop aan om de parent te laten weten dat editing is geannuleerd\r\n            }}\r\n            className=\"mt-2 w-full flex justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\r\n          >\r\n            Annuleren (Bewerken)\r\n          </button>\r\n        )}\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\specialisten\\DynamicSpecialistComponents.tsx","messages":[{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":9,"column":25,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":9,"endColumn":85,"fix":{"range":[308,356],"text":"h-96 w-full animate-pulse rounded-lg bg-gray-100"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":16,"column":25,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":16,"endColumn":85,"fix":{"range":[536,584],"text":"h-96 w-full animate-pulse rounded-lg bg-gray-100"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"'use client';\r\n\r\nimport dynamic from 'next/dynamic';\r\n\r\n// Dynamic imports with loading fallbacks for specialist components\r\nexport const SpecialistIntelligenceDashboardComponent = dynamic(\r\n  () => import('@/containers/ai/SpecialistIntelligenceDashboardContainer'),\r\n  {\r\n    loading: () => <div className=\"w-full h-96 bg-gray-100 animate-pulse rounded-lg\"></div>\r\n  }\r\n);\r\n\r\nexport const KnowledgeManagementComponent = dynamic(\r\n  () => import('@/containers/ai/KnowledgeManagementContainer'),\r\n  {\r\n    loading: () => <div className=\"w-full h-96 bg-gray-100 animate-pulse rounded-lg\"></div>\r\n  }\r\n);\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\specialisten\\EmptySpecialistState.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":1,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":1,"endColumn":45},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":3,"column":10,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":3,"endColumn":67,"fix":{"range":[82,127],"text":"rounded-lg bg-white p-6 text-center shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":4,"column":10,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":4,"endColumn":40,"fix":{"range":[151,169],"text":"mb-4 text-gray-600"}},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":6,"column":25,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[253,357],"text":"\r\n        Gebruik de knop &quot;Specialist Toevoegen\" om een specialist toe te voegen aan uw account.\r\n      "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[253,357],"text":"\r\n        Gebruik de knop &ldquo;Specialist Toevoegen\" om een specialist toe te voegen aan uw account.\r\n      "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[253,357],"text":"\r\n        Gebruik de knop &#34;Specialist Toevoegen\" om een specialist toe te voegen aan uw account.\r\n      "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[253,357],"text":"\r\n        Gebruik de knop &rdquo;Specialist Toevoegen\" om een specialist toe te voegen aan uw account.\r\n      "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":6,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[253,357],"text":"\r\n        Gebruik de knop \"Specialist Toevoegen&quot; om een specialist toe te voegen aan uw account.\r\n      "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[253,357],"text":"\r\n        Gebruik de knop \"Specialist Toevoegen&ldquo; om een specialist toe te voegen aan uw account.\r\n      "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[253,357],"text":"\r\n        Gebruik de knop \"Specialist Toevoegen&#34; om een specialist toe te voegen aan uw account.\r\n      "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[253,357],"text":"\r\n        Gebruik de knop \"Specialist Toevoegen&rdquo; om een specialist toe te voegen aan uw account.\r\n      "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"export default function EmptySpecialistState() {\r\n  return (\r\n    <div className=\"bg-white rounded-lg shadow-md p-6 text-center\">\r\n      <p className=\"text-gray-600 mb-4\">U heeft nog geen specialisten toegevoegd.</p>\r\n      <p className=\"text-gray-500\">\r\n        Gebruik de knop \"Specialist Toevoegen\" om een specialist toe te voegen aan uw account.\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\specialisten\\PatientAllTasksList.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":54,"fix":{"range":[70,70],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":51,"fix":{"range":[151,151],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/types` import should occur after import of `@/components/ui/SkeletonLoader`","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":53,"fix":{"range":[153,523],"text":"import { getSupabaseBrowserClient } from '@/lib/supabase-client';\r\nimport TaskItemCard, { TaskWithStatusAndFeedbackForCard } from '@/components/tasks/TaskItemCard';\r\nimport TaskFilters from '@/components/tasks/TaskFilters'; // Importeer TaskFilters\r\nimport { SkeletonLoader } from '@/components/ui/SkeletonLoader';\r\nimport { TaskLog, Task as TaskType } from '@/types';\r\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TaskType' is defined but never used.","line":5,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":35},{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'TaskType' is defined but never used.","line":5,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":35,"fix":{"range":[169,187],"text":""}},{"ruleId":"import/no-duplicates","severity":1,"message":"'C:\\Users\\nick\\Desktop\\FibroGuardian\\types\\index.ts' imported multiple times.","line":5,"column":43,"nodeType":"Literal","endLine":5,"endColumn":52},{"ruleId":"import/order","severity":2,"message":"`@/lib/supabase-client` import should occur after import of `@/components/ui/SkeletonLoader`","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":66,"fix":{"range":[207,523],"text":"import TaskItemCard, { TaskWithStatusAndFeedbackForCard } from '@/components/tasks/TaskItemCard';\r\nimport TaskFilters from '@/components/tasks/TaskFilters'; // Importeer TaskFilters\r\nimport { SkeletonLoader } from '@/components/ui/SkeletonLoader';\r\nimport { getSupabaseBrowserClient } from '@/lib/supabase-client';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/components/tasks/TaskItemCard` import should occur after import of `@/components/tasks/TaskFilters`","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":98,"fix":{"range":[274,457],"text":"import TaskFilters from '@/components/tasks/TaskFilters'; // Importeer TaskFilters\r\nimport TaskItemCard, { TaskWithStatusAndFeedbackForCard } from '@/components/tasks/TaskItemCard';\r\n"}},{"ruleId":"import/no-duplicates","severity":1,"message":"'C:\\Users\\nick\\Desktop\\FibroGuardian\\types\\index.ts' imported multiple times.","line":10,"column":22,"nodeType":"Literal","endLine":10,"endColumn":31},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":24,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":24,"endColumn":44},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":138,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5370,5373],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5370,5373],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":150,"column":50,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":150,"endColumn":71,"fix":{"range":[5829,5838],"text":"mb-3 h-20"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":164,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":164,"endColumn":62,"fix":{"range":[6341,6379],"text":"mb-4 flex items-center justify-between"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":169,"column":11,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":169,"endColumn":135,"fix":{"range":[6564,6676],"text":"rounded-md bg-purple-100 px-3 py-1.5 text-xs font-medium text-purple-700 hover:bg-purple-200 disabled:opacity-50"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":178,"column":42,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":178,"endColumn":117,"fix":{"range":[7001,7064],"text":"rounded-lg border border-gray-200 bg-white p-4 shadow-sm sm:p-6"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":179,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":179,"endColumn":103,"fix":{"range":[7097,7169],"text":"mb-3 border-b border-gray-200 pb-2 text-lg font-semibold text-purple-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":181,"column":23,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":181,"endColumn":73,"fix":{"range":[7237,7275],"text":"ml-2 text-sm font-normal text-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":198,"column":20,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":198,"endColumn":60,"fix":{"range":[8130,8158],"text":"text-sm italic text-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":204,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":204,"endColumn":54,"fix":{"range":[8330,8360],"text":"py-4 text-center text-gray-500"}}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":6,"fixableWarningCount":8,"source":"'use client';\r\n\r\nimport { useState, useEffect, useMemo } from 'react';\r\nimport { useSearchParams } from 'next/navigation'; // Importeer useSearchParams\r\nimport { TaskLog, Task as TaskType } from '@/types';\r\nimport { getSupabaseBrowserClient } from '@/lib/supabase-client';\r\nimport TaskItemCard, { TaskWithStatusAndFeedbackForCard } from '@/components/tasks/TaskItemCard';\r\nimport TaskFilters from '@/components/tasks/TaskFilters'; // Importeer TaskFilters\r\nimport { SkeletonLoader } from '@/components/ui/SkeletonLoader';\r\nimport { Task } from '@/types';\r\n\r\n// Definieer GroupedTasks interface (kan later naar een gedeeld types bestand)\r\nexport interface GroupedTasksSpecialist {\r\n  pattern: Task['herhaal_patroon'];\r\n  title: string;\r\n  tasks: TaskWithStatusAndFeedbackForCard[];\r\n}\r\n\r\ninterface PatientAllTasksListProps {\r\n  patientId: string;\r\n  specialistId: string;\r\n}\r\n\r\nexport default function PatientAllTasksList({ patientId, specialistId }: PatientAllTasksListProps) {\r\n  const [tasksWithDetails, setTasksWithDetails] = useState<TaskWithStatusAndFeedbackForCard[]>([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [refreshKey, setRefreshKey] = useState(0);\r\n  const supabase = getSupabaseBrowserClient();\r\n  const searchParams = useSearchParams();\r\n  const typeFilter = searchParams.get('type');\r\n  const patternFilter = searchParams.get('pattern');\r\n\r\n  // Groepeer en filter taken\r\n  const groupedAndFilteredTasks = useMemo(() => {\r\n    if (!tasksWithDetails || tasksWithDetails.length === 0) return [];\r\n\r\n    let filteredByPattern = tasksWithDetails;\r\n    if (patternFilter) {\r\n      filteredByPattern = tasksWithDetails.filter(task => task.herhaal_patroon === patternFilter);\r\n    }\r\n\r\n    const groups: Record<Task['herhaal_patroon'], TaskWithStatusAndFeedbackForCard[]> = {\r\n      eenmalig: [],\r\n      dagelijks: [],\r\n      wekelijks: [],\r\n      maandelijks: [],\r\n      aangepast: [],\r\n    };\r\n\r\n    filteredByPattern.forEach(task => {\r\n      // Alleen toevoegen als het type overeenkomt met typeFilter (indien aanwezig)\r\n      if (!typeFilter || task.type === typeFilter) {\r\n        groups[task.herhaal_patroon].push(task);\r\n      }\r\n    });\r\n\r\n    const patternOrder: Task['herhaal_patroon'][] = ['dagelijks', 'wekelijks', 'maandelijks', 'eenmalig', 'aangepast'];\r\n    \r\n    return patternOrder\r\n      .map(pattern => ({\r\n        pattern,\r\n        title: `${pattern.charAt(0).toUpperCase() + pattern.slice(1)}e Taken`,\r\n        tasks: groups[pattern],\r\n      }))\r\n      .filter(group => group.tasks.length > 0);\r\n  }, [tasksWithDetails, typeFilter, patternFilter]);\r\n\r\n  useEffect(() => {\r\n    const fetchTaskDetails = async () => {\r\n      if (!patientId || !specialistId) {\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n      setIsLoading(true);\r\n      setError(null);\r\n\r\n      try {\r\n        const { data: tasksData, error: tasksError } = await supabase\r\n          .from('tasks')\r\n          .select('*')\r\n          .eq('user_id', patientId) // Moet altijd voor deze patiënt zijn\r\n          .or(`specialist_id.eq.${specialistId},specialist_id.is.null`) // Taak is van deze specialist OF door patiënt zelf aangemaakt\r\n          .order('created_at', { ascending: false });\r\n\r\n        if (tasksError) throw tasksError;\r\n\r\n        if (!tasksData || tasksData.length === 0) {\r\n          setTasksWithDetails([]);\r\n          return; \r\n        }\r\n\r\n        const taskIds = tasksData.map(t => t.id);\r\n        let allLogsForTasks: TaskLog[] = [];\r\n        let completedTaskIds: Set<string> = new Set();\r\n\r\n        const { data: allLogsData, error: allLogsError } = await supabase\r\n          .from('task_logs')\r\n          .select('*')\r\n          .in('task_id', taskIds)\r\n          .eq('user_id', patientId)\r\n          .order('created_at', { ascending: false });\r\n\r\n        if (allLogsError) {\r\n          console.warn(`Error fetching all_logs for PatientAllTasksList (patient: ${patientId}): ${allLogsError.message}`);\r\n        }\r\n        if (allLogsData) {\r\n          allLogsForTasks = allLogsData as TaskLog[];\r\n          completedTaskIds = new Set(\r\n            allLogsForTasks\r\n              .filter(log => log.eind_tijd !== null && log.eind_tijd !== undefined)\r\n              .map(log => log.task_id)\r\n          );\r\n        }\r\n\r\n        const processedTasks = tasksData.map(task => {\r\n          const status: 'voltooid' | 'openstaand' = completedTaskIds.has(task.id) ? 'voltooid' : 'openstaand';\r\n          const taskLog = allLogsForTasks.find(log => log.task_id === task.id);\r\n          const completionLog = allLogsForTasks.find(log => log.task_id === task.id && log.eind_tijd);\r\n          const voltooidOpDatum = status === 'voltooid' ? completionLog?.eind_tijd : null;\r\n\r\n          return {\r\n            ...task,\r\n            status,\r\n            voltooid_op: voltooidOpDatum, \r\n            feedback: taskLog ? {\r\n              pijn_score: taskLog.pijn_score,\r\n              vermoeidheid_score: taskLog.vermoeidheid_score,\r\n              energie_voor: taskLog.energie_voor,\r\n              energie_na: taskLog.energie_na,\r\n              stemming: taskLog.stemming,\r\n              notitie: taskLog.notitie,\r\n            } : undefined,\r\n          };\r\n        });\r\n        setTasksWithDetails(processedTasks as TaskWithStatusAndFeedbackForCard[]);\r\n\r\n      } catch (e: any) { // ESLint zal hier nog steeds klagen, maar functioneel ok voor nu\r\n        console.error(`Error fetching all task details for patient ${patientId}:`, e);\r\n        setError(e.message || 'Kon taakdetails niet laden.');\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    }; \r\n\r\n    fetchTaskDetails(); \r\n  }, [patientId, specialistId, supabase, refreshKey]); \r\n\r\n  if (isLoading) {\r\n    return <SkeletonLoader type=\"list\" count={5} className=\"h-20 mb-3\" />;\r\n  }\r\n\r\n  if (error) {\r\n    return <p className=\"text-red-500\">Fout bij het laden van taken: {error}</p>;\r\n  }\r\n\r\n  // De empty state wordt nu beter afgehandeld door de combinatie van groupedAndFilteredTasks en de map\r\n  // if (!groupedAndFilteredTasks || groupedAndFilteredTasks.length === 0) { \r\n  //   return <p className=\"text-gray-500\">Er zijn nog geen taken toegewezen aan deze patiënt door u, of geen die voldoen aan de filters.</p>;\r\n  // }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"mb-4 flex justify-between items-center\">\r\n        <TaskFilters /> {/* Filters toegevoegd */}\r\n        <button\r\n          onClick={() => setRefreshKey(prev => prev + 1)}\r\n          disabled={isLoading}\r\n          className=\"px-3 py-1.5 text-xs font-medium text-purple-700 bg-purple-100 rounded-md hover:bg-purple-200 disabled:opacity-50\"\r\n        >\r\n          {isLoading ? 'Laden...' : 'Ververs Taken'}\r\n        </button>\r\n      </div>\r\n      \r\n      {groupedAndFilteredTasks.length > 0 ? (\r\n        <div className=\"space-y-10\"> \r\n          {groupedAndFilteredTasks.map((group: GroupedTasksSpecialist) => ( \r\n            <section key={group.pattern} className=\"bg-white p-4 sm:p-6 rounded-lg shadow-sm border border-gray-200\">\r\n              <h3 className=\"text-lg font-semibold text-purple-700 mb-3 border-b border-gray-200 pb-2\">\r\n                {group.title}\r\n                <span className=\"text-sm font-normal text-gray-500 ml-2\">\r\n                  ({group.tasks.length} {group.tasks.length === 1 ? 'item' : 'items'})\r\n                </span>\r\n              </h3>\r\n              {/* Deze check is dubbelop, want groupedAndFilteredTasks bevat al alleen groepen met taken, \r\n                  en binnen de map-logica filteren we ook nog. Maar het is niet schadelijk. */}\r\n              {group.tasks.length > 0 ? ( \r\n                <ul className=\"space-y-4\">\r\n                  {group.tasks.map((task: TaskWithStatusAndFeedbackForCard) => ( \r\n                    <TaskItemCard \r\n                      key={task.id} \r\n                      task={task} \r\n                    />\r\n                  ))}\r\n                </ul>\r\n              ) : (\r\n                // Deze P zou idealiter niet bereikt moeten worden als de filterlogica in useMemo correct is\r\n                <p className=\"text-sm text-gray-500 italic\">Geen {group.pattern}e taken die voldoen aan de filters.</p> \r\n              )}\r\n            </section>\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <p className=\"text-gray-500 py-4 text-center\">Geen taken gevonden die voldoen aan de huidige filters.</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\specialisten\\PatientDetailsPresentational.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":27,"fix":{"range":[41,41],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":30,"fix":{"range":[72,72],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/types` import should occur after import of `@/lib/error-handler`","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":70,"fix":{"range":[74,409],"text":"import HealthMetricsChart from '@/components/dashboard/HealthMetricsChart';\r\nimport { AlertMessage } from '@/components/common/AlertMessage'; // For displaying errors passed from container\r\nimport { ErrorMessage } from '@/lib/error-handler'; // For typing errors\r\nimport { Profile, TaskLog, Reflectie, Inzicht, Task } from '@/types';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/components/dashboard/HealthMetricsChart` import should occur after import of `@/components/common/AlertMessage`","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":76,"fix":{"range":[145,335],"text":"import { AlertMessage } from '@/components/common/AlertMessage'; // For displaying errors passed from container\r\nimport HealthMetricsChart from '@/components/dashboard/HealthMetricsChart';\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":42,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":42,"endColumn":53},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":65,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":65,"endColumn":57,"fix":{"range":[2192,2225],"text":"rounded-lg bg-white p-6 shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":66,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":66,"endColumn":92,"fix":{"range":[2253,2319],"text":"flex flex-col gap-4 md:flex-row md:items-center md:justify-between"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":68,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":68,"endColumn":138,"fix":{"range":[2404,2512],"text":"flex h-16 w-16 items-center justify-center rounded-full bg-purple-100 text-2xl font-semibold text-purple-700"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-16, w-16' could be replaced by the 'size-16' shorthand!","line":68,"column":18,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":68,"endColumn":138,"fix":{"range":[2404,2512],"text":"size-16 bg-purple-100 rounded-full flex items-center justify-center text-purple-700 text-2xl font-semibold"}},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":70,"column":17,"nodeType":"JSXOpeningElement","endLine":70,"endColumn":146},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-16, w-16' could be replaced by the 'size-16' shorthand!","line":70,"column":97,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":70,"endColumn":144,"fix":{"range":[2662,2697],"text":"size-16 rounded-full object-cover"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":83,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":83,"endColumn":103,"fix":{"range":[3238,3313],"text":"flex flex-col items-stretch space-y-2 sm:flex-row sm:space-x-3 sm:space-y-0"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":84,"column":76,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":84,"endColumn":129,"fix":{"range":[3403,3444],"text":"btn-primary whitespace-nowrap text-center"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":88,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":88,"endColumn":125,"fix":{"range":[3692,3730],"text":"bg-red-500 text-white hover:bg-red-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":97,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":97,"endColumn":53,"fix":{"range":[4055,4084],"text":"rounded-lg bg-white shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":99,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":99,"endColumn":55,"fix":{"range":[4166,4193],"text":"-mb-px flex overflow-x-auto"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":104,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":106,"endColumn":74,"fix":{"range":[4512,4586],"text":"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":104,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":106,"endColumn":74,"fix":{"range":[4368,4430],"text":"`whitespace-nowrap border-b-2 px-4 py-3 text-sm font-medium ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":115,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":115,"endColumn":43,"fix":{"range":[4894,4911],"text":"min-h-[300px] p-6"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":116,"column":37,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":116,"endColumn":66,"fix":{"range":[4962,4979],"text":"py-10 text-center"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":123,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":123,"endColumn":71,"fix":{"range":[5364,5404],"text":"mb-3 text-lg font-semibold text-gray-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":124,"column":20,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":124,"endColumn":69,"fix":{"range":[5460,5497],"text":"grid grid-cols-1 gap-4 md:grid-cols-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":125,"column":22,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":125,"endColumn":71,"fix":{"range":[5533,5570],"text":"rounded-lg bg-gray-50 p-4 text-center"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":125,"column":77,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":125,"endColumn":115,"fix":{"range":[5588,5614],"text":"mb-1 text-xs text-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":126,"column":22,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":126,"endColumn":71,"fix":{"range":[5792,5829],"text":"rounded-lg bg-gray-50 p-4 text-center"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":126,"column":77,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":126,"endColumn":115,"fix":{"range":[5847,5873],"text":"mb-1 text-xs text-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":127,"column":22,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":127,"endColumn":71,"fix":{"range":[6075,6112],"text":"rounded-lg bg-gray-50 p-4 text-center"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":127,"column":77,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":127,"endColumn":115,"fix":{"range":[6130,6156],"text":"mb-1 text-xs text-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":130,"column":20,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":130,"endColumn":41,"fix":{"range":[6487,6496],"text":"mt-4 h-72"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":135,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":135,"endColumn":71,"fix":{"range":[6699,6739],"text":"mb-4 text-lg font-semibold text-gray-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":139,"column":40,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":139,"endColumn":84,"fix":{"range":[7017,7049],"text":"rounded-md border bg-gray-50 p-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":141,"column":26,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":141,"endColumn":70,"fix":{"range":[7172,7204],"text":"text-xs capitalize text-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":142,"column":48,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":142,"endColumn":86,"fix":{"range":[7306,7332],"text":"mt-1 text-sm text-gray-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":151,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":151,"endColumn":71,"fix":{"range":[7611,7651],"text":"mb-4 text-lg font-semibold text-gray-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":153,"column":22,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":153,"endColumn":68,"fix":{"range":[7832,7866],"text":"max-h-96 space-y-3 overflow-y-auto"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":155,"column":39,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":155,"endColumn":83,"fix":{"range":[7957,7989],"text":"rounded-md border bg-gray-50 p-3"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":156,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":156,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8066,8069],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8066,8069],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":158,"column":42,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":158,"endColumn":87,"fix":{"range":[8393,8426],"text":"mt-1 text-sm italic text-gray-600"}},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":158,"column":88,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[8428,8429],"text":"&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[8428,8429],"text":"&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[8428,8429],"text":"&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[8428,8429],"text":"&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":158,"column":102,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[8442,8443],"text":"&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[8442,8443],"text":"&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[8442,8443],"text":"&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[8442,8443],"text":"&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":167,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":167,"endColumn":71,"fix":{"range":[8708,8748],"text":"mb-4 text-lg font-semibold text-gray-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":169,"column":22,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":169,"endColumn":68,"fix":{"range":[8904,8938],"text":"max-h-96 space-y-3 overflow-y-auto"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":171,"column":37,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":171,"endColumn":81,"fix":{"range":[9031,9063],"text":"rounded-md border bg-gray-50 p-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":173,"column":40,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":173,"endColumn":85,"fix":{"range":[9239,9272],"text":"mt-1 text-sm italic text-gray-600"}},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":173,"column":86,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[9274,9275],"text":"&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[9274,9275],"text":"&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[9274,9275],"text":"&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[9274,9275],"text":"&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":173,"column":98,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[9286,9287],"text":"&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[9286,9287],"text":"&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[9286,9287],"text":"&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[9286,9287],"text":"&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":174,"column":45,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":174,"endColumn":85,"fix":{"range":[9349,9377],"text":"mt-1 text-xs text-purple-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":183,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":183,"endColumn":71,"fix":{"range":[9662,9702],"text":"mb-4 text-lg font-semibold text-gray-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":187,"column":37,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":187,"endColumn":101,"fix":{"range":[9966,10018],"text":"rounded-md border border-purple-200 bg-purple-50 p-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":189,"column":26,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":189,"endColumn":66,"fix":{"range":[10194,10222],"text":"mt-1 text-sm text-purple-700"}}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":41,"fixableErrorCount":4,"fixableWarningCount":39,"source":"'use client';\r\nimport React from 'react';\r\nimport Link from 'next/link';\r\nimport { Profile, TaskLog, Reflectie, Inzicht, Task } from '@/types';\r\nimport HealthMetricsChart from '@/components/dashboard/HealthMetricsChart';\r\nimport { AlertMessage } from '@/components/common/AlertMessage'; // For displaying errors passed from container\r\nimport { ErrorMessage } from '@/lib/error-handler'; // For typing errors\r\n\r\ninterface PatientDetailsPresentationalProps {\r\n  patient: Profile;\r\n  activeTab: 'overview' | 'tasks' | 'logs' | 'reflecties' | 'inzichten';\r\n  onTabChange: (tab: 'overview' | 'tasks' | 'logs' | 'reflecties' | 'inzichten') => void;\r\n  \r\n  logs: TaskLog[];\r\n  reflecties: Reflectie[];\r\n  inzichten: Inzicht[];\r\n  tasks: Task[];\r\n  \r\n  isLoadingTabData: boolean; // Generic loading for tab content\r\n  tabDataError: ErrorMessage | null; // Generic error for tab content\r\n  \r\n  patientAge: number | null;\r\n  metricAverages: { pijn: number | null; vermoeidheid: number | null; energie: number | null };\r\n  \r\n  isRemovingPatient: boolean;\r\n  onRemovePatient: () => void;\r\n  confirmRemove: boolean;\r\n  onConfirmRemoveToggle: () => void; // Toggles confirmRemove state\r\n  \r\n  formatDate: (dateString?: Date | string) => string;\r\n}\r\n\r\nconst tabOptionsConfig = (tasksCount: number, logsCount: number, reflectiesCount: number, inzichtenCount: number) => [\r\n  { id: 'overview', label: 'Overzicht' },\r\n  { id: 'tasks', label: `Taken (${tasksCount})` },\r\n  { id: 'logs', label: `Activiteiten (${logsCount})` },\r\n  { id: 'reflecties', label: `Reflecties (${reflectiesCount})` },\r\n  { id: 'inzichten', label: `Inzichten (${inzichtenCount})` },\r\n] as const;\r\n\r\n\r\nexport default function PatientDetailsPresentational({\r\n  patient,\r\n  activeTab,\r\n  onTabChange,\r\n  logs,\r\n  reflecties,\r\n  inzichten,\r\n  tasks,\r\n  isLoadingTabData,\r\n  tabDataError,\r\n  patientAge,\r\n  metricAverages,\r\n  isRemovingPatient,\r\n  onRemovePatient,\r\n  confirmRemove,\r\n  onConfirmRemoveToggle,\r\n  formatDate,\r\n}: PatientDetailsPresentationalProps) {\r\n\r\n  const tabOptions = tabOptionsConfig(tasks.length, logs.length, reflecties.length, inzichten.length);\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"bg-white rounded-lg shadow-md p-6\">\r\n        <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-4\">\r\n          <div className=\"flex items-center gap-4\">\r\n            <div className=\"h-16 w-16 bg-purple-100 rounded-full flex items-center justify-center text-purple-700 text-2xl font-semibold\">\r\n              {patient.avatar_url ? (\r\n                <img src={patient.avatar_url} alt={`${patient.voornaam} ${patient.achternaam}`} className=\"h-16 w-16 rounded-full object-cover\"/>\r\n              ) : (\r\n                <span>{patient.voornaam?.charAt(0)}{patient.achternaam?.charAt(0)}</span>\r\n              )}\r\n            </div>\r\n            <div>\r\n              <h1 className=\"text-2xl font-bold text-gray-900\">{patient.voornaam} {patient.achternaam}</h1>\r\n              <p className=\"text-sm text-gray-600\">\r\n                {patient.postcode} {patient.gemeente}\r\n                {patientAge !== null && ` • ${patientAge} jaar`}\r\n              </p>\r\n            </div>\r\n          </div>\r\n          <div className=\"flex flex-col sm:flex-row sm:space-x-3 space-y-2 sm:space-y-0 items-stretch\">\r\n            <Link href={`/specialisten/patient/${patient.id}/taken/nieuw`} className=\"btn-primary text-center whitespace-nowrap\">Taak Toewijzen</Link>\r\n            <button\r\n              onClick={confirmRemove ? onRemovePatient : onConfirmRemoveToggle}\r\n              disabled={isRemovingPatient}\r\n              className={`btn-secondary whitespace-nowrap ${confirmRemove ? 'bg-red-500 hover:bg-red-600 text-white' : ''}`}\r\n            >\r\n              {isRemovingPatient ? 'Bezig...' : confirmRemove ? 'Bevestig Verwijderen' : 'Koppel Los'}\r\n            </button>\r\n          </div>\r\n        </div>\r\n        {/* Display general errors from container if needed, e.g., patient removal error */}\r\n      </div>\r\n      \r\n      <div className=\"bg-white rounded-lg shadow-md\">\r\n        <div className=\"border-b border-gray-200\">\r\n          <nav className=\"flex -mb-px overflow-x-auto\">\r\n            {tabOptions.map(tab => (\r\n              <button\r\n                key={tab.id}\r\n                onClick={() => onTabChange(tab.id)}\r\n                className={`py-3 px-4 font-medium text-sm border-b-2 whitespace-nowrap ${\r\n                  activeTab === tab.id ? 'border-purple-500 text-purple-600' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\r\n                } focus:outline-none focus:ring-1 focus:ring-purple-400`}\r\n                aria-current={activeTab === tab.id ? 'page' : undefined}\r\n              >\r\n                {tab.label}\r\n              </button>\r\n            ))}\r\n          </nav>\r\n        </div>\r\n        \r\n        <div className=\"p-6 min-h-[300px]\">\r\n          {isLoadingTabData && <div className=\"text-center py-10\">Laden...</div>}\r\n          {!isLoadingTabData && tabDataError && (\r\n            <AlertMessage type=\"error\" title=\"Fout bij laden data\" message={tabDataError.userMessage || \"Kon data voor dit tabblad niet laden.\"} />\r\n          )}\r\n\r\n          {!isLoadingTabData && !tabDataError && activeTab === 'overview' && (\r\n            <div className=\"space-y-6\">\r\n              <h2 className=\"text-lg font-semibold text-gray-800 mb-3\">Patiënt Overzicht</h2>\r\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n                <div className=\"bg-gray-50 rounded-lg p-4 text-center\"><div className=\"text-xs text-gray-500 mb-1\">Gem. Pijn</div><div className=\"text-xl font-bold text-gray-800\">{metricAverages.pijn !== null ? `${metricAverages.pijn}/20` : '-'}</div></div>\r\n                <div className=\"bg-gray-50 rounded-lg p-4 text-center\"><div className=\"text-xs text-gray-500 mb-1\">Gem. Vermoeidheid</div><div className=\"text-xl font-bold text-gray-800\">{metricAverages.vermoeidheid !== null ? `${metricAverages.vermoeidheid}/20` : '-'}</div></div>\r\n                <div className=\"bg-gray-50 rounded-lg p-4 text-center\"><div className=\"text-xs text-gray-500 mb-1\">Gem. Energie (na)</div><div className=\"text-xl font-bold text-gray-800\">{metricAverages.energie !== null ? `${metricAverages.energie}/20` : '-'}</div></div>\r\n              </div>\r\n              {/* HealthMetricsChart expects logs. Ensure logs for overview are available or fetched by container */}\r\n              <div className=\"h-72 mt-4\"><HealthMetricsChart logs={logs} /></div>\r\n            </div>\r\n          )}\r\n          {!isLoadingTabData && !tabDataError && activeTab === 'tasks' && (\r\n            <div>\r\n              <h2 className=\"text-lg font-semibold text-gray-800 mb-4\">Toegewezen Taken</h2>\r\n              {tasks.length === 0 ? <p className=\"text-gray-500\">Nog geen taken toegewezen aan deze patiënt.</p> : (\r\n                <div className=\"space-y-3\">\r\n                  {tasks.map(task => (\r\n                    <div key={task.id} className=\"p-3 border rounded-md bg-gray-50\">\r\n                      <h3 className=\"font-medium text-gray-800\">{task.titel}</h3>\r\n                      <p className=\"text-xs text-gray-500 capitalize\">{task.type} - {task.herhaal_patroon}</p>\r\n                      {task.beschrijving && <p className=\"text-sm text-gray-600 mt-1\">{task.beschrijving}</p>}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n          {!isLoadingTabData && !tabDataError && activeTab === 'logs' && (\r\n            <div>\r\n              <h2 className=\"text-lg font-semibold text-gray-800 mb-4\">Activiteiten Logs</h2>\r\n              {logs.length === 0 ? <p className=\"text-gray-500\">Geen activiteitenlogs gevonden voor deze patiënt.</p> : (\r\n                <div className=\"space-y-3 max-h-96 overflow-y-auto\">\r\n                  {logs.map(log => (\r\n                    <div key={log.id} className=\"p-3 border rounded-md bg-gray-50\">\r\n                      <h3 className=\"font-medium text-gray-800\">{(log as any).tasks?.titel || 'Activiteit'} - {formatDate(log.start_tijd)}</h3>\r\n                      <p className=\"text-xs text-gray-500\">Pijn: {log.pijn_score ?? '-'}, Vermoeidheid: {log.vermoeidheid_score ?? '-'}, Energie: {log.energie_voor ?? '-'} → {log.energie_na ?? '-'}</p>\r\n                      {log.notitie && <p className=\"text-sm text-gray-600 mt-1 italic\">\"{log.notitie}\"</p>}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n          {!isLoadingTabData && !tabDataError && activeTab === 'reflecties' && (\r\n             <div>\r\n              <h2 className=\"text-lg font-semibold text-gray-800 mb-4\">Reflecties</h2>\r\n              {reflecties.length === 0 ? <p className=\"text-gray-500\">Geen reflecties gevonden.</p> : (\r\n                <div className=\"space-y-3 max-h-96 overflow-y-auto\">\r\n                  {reflecties.map(r => (\r\n                    <div key={r.id} className=\"p-3 border rounded-md bg-gray-50\">\r\n                      <p className=\"font-medium text-gray-800\">{formatDate(r.datum)} - Stemming: {r.stemming || '-'}</p>\r\n                      {r.notitie && <p className=\"text-sm text-gray-600 mt-1 italic\">\"{r.notitie}\"</p>}\r\n                      {r.ai_validatie && <p className=\"text-xs text-purple-600 mt-1\">AI: {r.ai_validatie}</p>}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n          {!isLoadingTabData && !tabDataError && activeTab === 'inzichten' && (\r\n            <div>\r\n              <h2 className=\"text-lg font-semibold text-gray-800 mb-4\">AI Inzichten</h2>\r\n              {inzichten.length === 0 ? <p className=\"text-gray-500\">Geen AI inzichten beschikbaar.</p> : (\r\n                 <div className=\"space-y-3\">\r\n                  {inzichten.map(i => (\r\n                    <div key={i.id} className=\"p-3 border rounded-md bg-purple-50 border-purple-200\">\r\n                      <p className=\"font-medium text-purple-800\">{i.trend_type || 'Algemeen Inzicht'} ({formatDate(i.created_at)})</p>\r\n                      <p className=\"text-sm text-purple-700 mt-1\">{i.beschrijving}</p>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\specialisten\\PatientInsightCard.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":30,"fix":{"range":[47,47],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`react` import should occur before import of `next/link`","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":45,"fix":{"range":[18,95],"text":"import { useState, useEffect } from 'react';\r\nimport Link from 'next/link';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/components/charts/FatigueTrendChart` import should occur before import of `@/components/charts/PainTrendChart`","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":71,"fix":{"range":[97,235],"text":"import FatigueTrendChart from '@/components/charts/FatigueTrendChart';\r\nimport PainTrendChart from '@/components/charts/PainTrendChart';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/components/charts/HeartRateTrendChart` import should occur before import of `@/components/charts/PainTrendChart`","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":75,"fix":{"range":[97,311],"text":"import HeartRateTrendChart from '@/components/charts/HeartRateTrendChart';\r\nimport PainTrendChart from '@/components/charts/PainTrendChart';\r\nimport FatigueTrendChart from '@/components/charts/FatigueTrendChart';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/components/charts/EnergyTrendChart` import should occur before import of `@/components/charts/PainTrendChart`","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":69,"fix":{"range":[97,381],"text":"import EnergyTrendChart from '@/components/charts/EnergyTrendChart';\r\nimport PainTrendChart from '@/components/charts/PainTrendChart';\r\nimport FatigueTrendChart from '@/components/charts/FatigueTrendChart';\r\nimport HeartRateTrendChart from '@/components/charts/HeartRateTrendChart';\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":41,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":41,"endColumn":43},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":170,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7708,7711],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7708,7711],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":191,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":191,"endColumn":57,"fix":{"range":[8555,8588],"text":"flex items-center justify-between"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":196,"column":11,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":196,"endColumn":135,"fix":{"range":[8814,8926],"text":"rounded-md bg-purple-100 px-3 py-1.5 text-xs font-medium text-purple-700 hover:bg-purple-200 disabled:opacity-50"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":219,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":219,"endColumn":77,"fix":{"range":[10278,10329],"text":"mb-4 flex justify-center space-x-2 sm:justify-start"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":224,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":228,"endColumn":18,"fix":{"range":[10521,10565],"text":"`rounded-md px-3 py-1 text-xs font-medium ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":239,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":239,"endColumn":85,"fix":{"range":[11067,11122],"text":"-mb-px flex space-x-4 overflow-x-auto pb-1 sm:space-x-6"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":244,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":248,"endColumn":22,"fix":{"range":[11600,11674],"text":"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":244,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":248,"endColumn":22,"fix":{"range":[11406,11468],"text":"`whitespace-nowrap border-b-2 px-1 py-3 text-sm font-medium ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":265,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":265,"endColumn":56,"fix":{"range":[12227,12253],"text":"py-4 text-sm text-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":274,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":274,"endColumn":56,"fix":{"range":[12566,12592],"text":"py-4 text-sm text-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":283,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":283,"endColumn":56,"fix":{"range":[12910,12936],"text":"py-4 text-sm text-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":292,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":292,"endColumn":56,"fix":{"range":[13254,13280],"text":"py-4 text-sm text-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":298,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":298,"endColumn":42,"fix":{"range":[13420,13438],"text":"mt-4 border-t pt-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":301,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":301,"endColumn":58,"fix":{"range":[13595,13626],"text":"list-inside list-disc space-y-1"}}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":5,"fixableWarningCount":13,"source":"'use client'; \r\n\r\nimport Link from 'next/link';\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport PainTrendChart from '@/components/charts/PainTrendChart';\r\nimport FatigueTrendChart from '@/components/charts/FatigueTrendChart';\r\nimport HeartRateTrendChart from '@/components/charts/HeartRateTrendChart';\r\nimport EnergyTrendChart from '@/components/charts/EnergyTrendChart';\r\nimport { SkeletonLoader } from '@/components/ui/SkeletonLoader';\r\nimport { getSupabaseBrowserClient } from '@/lib/supabase-client';\r\nimport { Reflectie, TaskLog } from '@/types'; \r\n// TaskType werd niet gebruikt, dus verwijderd uit imports\r\n\r\ninterface PatientInsightCardProps {\r\n  patientId: string;\r\n  specialistId: string; \r\n}\r\n\r\ntype RecentReflection = Pick<Reflectie, 'id' | 'datum' | 'stemming' | 'notitie'>;\r\n\r\ninterface AverageFeedback {\r\n  avgPijn?: number;\r\n  avgVermoeidheid?: number;\r\n  avgEnergieNa?: number;\r\n  avgHartslag?: number; // Toegevoegd\r\n}\r\n\r\ninterface InsightData {\r\n  openTasksCount: number; \r\n  completedTasksCount: number; \r\n  totalTasksAssignedBySpecialist: number;\r\n  recentReflections: RecentReflection[];\r\n  averageFeedback?: AverageFeedback;\r\n  allTaskLogsForPainChart: Pick<TaskLog, 'created_at' | 'pijn_score'>[]; \r\n  allTaskLogsForFatigueChart: Pick<TaskLog, 'created_at' | 'vermoeidheid_score'>[];\r\n  allTaskLogsForHeartRateChart: Pick<TaskLog, 'created_at' | 'hartslag'>[];\r\n  allTaskLogsForEnergyChart: Pick<TaskLog, 'created_at' | 'energie_na' | 'energie_voor'>[];\r\n}\r\n\r\nexport default function PatientInsightCard({ patientId, specialistId }: PatientInsightCardProps) {\r\n  const [insights, setInsights] = useState<InsightData | null>(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [activeChartTab, setActiveChartTab] = useState<'pain' | 'fatigue' | 'heartRate' | 'energy'>('pain');\r\n  const [chartPeriod, setChartPeriod] = useState<'7d' | '30d' | 'all'>('30d'); \r\n  const [refreshKey, setRefreshKey] = useState(0); // State om refresh te triggeren\r\n  const supabase = getSupabaseBrowserClient();\r\n\r\n  useEffect(() => {\r\n    const fetchInsights = async () => { // Definieer fetchInsights binnen useEffect\r\n      setIsLoading(true);\r\n      setError(null);\r\n      try {\r\n        // 1. Fetch alle taken voor tellingen\r\n        const { data: tasksData, error: tasksError } = await supabase\r\n          .from('tasks')\r\n          .select('id') \r\n          .eq('user_id', patientId) // Moet altijd voor deze patiënt zijn\r\n          .or(`specialist_id.eq.${specialistId},specialist_id.is.null`) // Taak is van deze specialist OF door patiënt zelf aangemaakt\r\n\r\n        if (tasksError) throw tasksError;\r\n\r\n        const totalTasks = tasksData?.length || 0;\r\n        let completedTaskIds: Set<string> = new Set();\r\n        let allLogsForCharts: TaskLog[] = []; // Voor alle grafieken\r\n\r\n        if (tasksData && tasksData.length > 0) {\r\n          const taskIds = tasksData.map(t => t.id);\r\n          \r\n          const { data: allLogsData, error: allLogsError } = await supabase\r\n            .from('task_logs')\r\n            .select('*') \r\n            .in('task_id', taskIds)\r\n            .eq('user_id', patientId);\r\n\r\n          if (allLogsError) {\r\n            console.warn(`Error fetching all_logs for insights (patient: ${patientId}): ${allLogsError.message}`);\r\n          }\r\n          if (allLogsData) {\r\n            allLogsForCharts = allLogsData as TaskLog[];\r\n            completedTaskIds = new Set(\r\n              allLogsForCharts\r\n                .filter(log => log.eind_tijd !== null && log.eind_tijd !== undefined)\r\n                .map(log => log.task_id)\r\n            );\r\n          }\r\n        }\r\n        \r\n        const completedTasks = completedTaskIds.size;\r\n        const openTasks = totalTasks - completedTasks;\r\n        \r\n        const { data: reflectionsData, error: reflectionsError } = await supabase\r\n          .from('reflecties')\r\n          .select('id, datum, stemming, notitie') \r\n          .eq('user_id', patientId)\r\n          .order('datum', { ascending: false })\r\n          .limit(3);\r\n\r\n        if (reflectionsError) throw reflectionsError;\r\n        \r\n        let averageFeedback: AverageFeedback | undefined = undefined;\r\n        const completedTaskLogs = allLogsForCharts.filter(log => completedTaskIds.has(log.task_id));\r\n\r\n        if (completedTaskLogs.length > 0) {\r\n          let totalPijn = 0, countPijn = 0;\r\n          let totalVermoeidheid = 0, countVermoeidheid = 0;\r\n          let totalEnergieNa = 0, countEnergieNa = 0;\r\n          let totalHartslag = 0, countHartslag = 0; // Voor hartslag\r\n\r\n          completedTaskLogs.forEach(log => {\r\n            if (log.pijn_score !== null && log.pijn_score !== undefined) { totalPijn += log.pijn_score; countPijn++; }\r\n            if (log.vermoeidheid_score !== null && log.vermoeidheid_score !== undefined) { totalVermoeidheid += log.vermoeidheid_score; countVermoeidheid++; }\r\n            if (log.energie_na !== null && log.energie_na !== undefined) { totalEnergieNa += log.energie_na; countEnergieNa++; }\r\n            if (log.hartslag !== null && log.hartslag !== undefined) { totalHartslag += log.hartslag; countHartslag++; } // Hartslag meetellen\r\n          });\r\n          averageFeedback = {\r\n            avgPijn: countPijn > 0 ? parseFloat((totalPijn / countPijn).toFixed(1)) : undefined,\r\n            avgVermoeidheid: countVermoeidheid > 0 ? parseFloat((totalVermoeidheid / countVermoeidheid).toFixed(1)) : undefined,\r\n            avgEnergieNa: countEnergieNa > 0 ? parseFloat((totalEnergieNa / countEnergieNa).toFixed(1)) : undefined,\r\n            avgHartslag: countHartslag > 0 ? parseFloat((totalHartslag / countHartslag).toFixed(0)) : undefined, // Gemiddelde hartslag (afgerond)\r\n          };\r\n        }\r\n        \r\n        setInsights({\r\n          openTasksCount: openTasks,\r\n          completedTasksCount: completedTasks,\r\n          totalTasksAssignedBySpecialist: totalTasks,\r\n          recentReflections: (reflectionsData as RecentReflection[]) || [],\r\n          averageFeedback,\r\n          allTaskLogsForPainChart: allLogsForCharts.map(log => ({ created_at: log.created_at, pijn_score: log.pijn_score })),\r\n          allTaskLogsForFatigueChart: allLogsForCharts.map(log => ({ created_at: log.created_at, vermoeidheid_score: log.vermoeidheid_score })),\r\n          allTaskLogsForHeartRateChart: allLogsForCharts.map(log => ({ created_at: log.created_at, hartslag: log.hartslag })),\r\n          allTaskLogsForEnergyChart: allLogsForCharts.map(log => ({created_at: log.created_at, energie_na: log.energie_na, energie_voor: log.energie_voor})),\r\n        });\r\n\r\n      } catch (e: unknown) { \r\n        console.error(`Error fetching insights for patient ${patientId}:`, e);\r\n        if (e instanceof Error) {\r\n          setError(e.message);\r\n        } else {\r\n          setError('Kon inzichten niet laden door een onbekende fout.');\r\n        }\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    }\r\n\r\n    if (patientId && specialistId) {\r\n      fetchInsights();\r\n    }\r\n  }, [patientId, specialistId, supabase, refreshKey]); // refreshKey toegevoegd\r\n\r\n  // De return statements moeten hier, buiten de useEffect\r\n  if (isLoading) {\r\n    return <SkeletonLoader type=\"list\" count={3} className=\"h-24\" />; \r\n  }\r\n\r\n  if (error) {\r\n    return <p className=\"text-sm text-red-600\">Fout: {error}</p>;\r\n  }\r\n\r\n  if (!insights) {\r\n    return <p className=\"text-sm text-gray-500\">Geen inzichten beschikbaar.</p>;\r\n  }\r\n\r\n  // Debug logs blijven zoals ze waren, na de !insights check\r\n\r\n  // Functie om logs te filteren op basis van de geselecteerde periode\r\n  const getFilteredLogsForChart = (logs: Pick<TaskLog, 'created_at' | any>[] | undefined) => {\r\n    if (!logs) return [];\r\n    const now = new Date();\r\n    let startDate = new Date(0); // Begin der tijden voor 'all'\r\n\r\n    if (chartPeriod === '7d') {\r\n      startDate = new Date(now.setDate(now.getDate() - 7));\r\n    } else if (chartPeriod === '30d') {\r\n      startDate = new Date(now.setDate(now.getDate() - 30));\r\n    }\r\n    \r\n    return logs.filter(log => new Date(log.created_at) >= startDate);\r\n  };\r\n\r\n  const painLogs = getFilteredLogsForChart(insights?.allTaskLogsForPainChart);\r\n  const fatigueLogs = getFilteredLogsForChart(insights?.allTaskLogsForFatigueChart);\r\n  const energyLogs = getFilteredLogsForChart(insights?.allTaskLogsForEnergyChart);\r\n  const heartRateLogs = getFilteredLogsForChart(insights?.allTaskLogsForHeartRateChart);\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <div className=\"flex justify-between items-center\">\r\n        <h4 className=\"font-medium text-gray-700\">Taken Overzicht (door u toegewezen):</h4>\r\n        <button\r\n          onClick={() => setRefreshKey(prev => prev + 1)}\r\n          disabled={isLoading}\r\n          className=\"px-3 py-1.5 text-xs font-medium text-purple-700 bg-purple-100 rounded-md hover:bg-purple-200 disabled:opacity-50\"\r\n        >\r\n          {isLoading ? 'Laden...' : 'Ververs Inzichten'}\r\n        </button>\r\n      </div>\r\n      <div> {/* Deze div was er al voor de taken overzicht info */}\r\n        <p className=\"text-sm text-gray-600\">Totaal: {insights.totalTasksAssignedBySpecialist}</p>\r\n        <p className=\"text-sm text-green-600\">Voltooid: {insights.completedTasksCount}</p>\r\n        <p className=\"text-sm text-orange-600\">Openstaand: {insights.openTasksCount}</p>\r\n        \r\n        {insights.averageFeedback && (\r\n          <div className=\"mt-1 text-xs text-gray-500\">\r\n            {insights.averageFeedback.avgPijn !== undefined && <span>Gem. Pijn: {insights.averageFeedback.avgPijn}/20 | </span>}\r\n            {insights.averageFeedback.avgVermoeidheid !== undefined && <span>Gem. Vermoeidheid: {insights.averageFeedback.avgVermoeidheid}/20 | </span>}\r\n            {insights.averageFeedback.avgEnergieNa !== undefined && <span>Gem. Energie Na: {insights.averageFeedback.avgEnergieNa}/20 | </span>}\r\n            {insights.averageFeedback.avgHartslag !== undefined && <span>Gem. Hartslag: {insights.averageFeedback.avgHartslag} bpm</span>}\r\n          </div>\r\n        )}\r\n        {/* Recente Taken Details lijst is hier verwijderd */}\r\n      </div>\r\n\r\n      <div className=\"mt-6 border-t pt-4\">\r\n        {/* Periode Selectie Knoppen */}\r\n        <div className=\"mb-4 flex justify-center sm:justify-start space-x-2\">\r\n          {(['7d', '30d', 'all'] as const).map(period => (\r\n            <button\r\n              key={period}\r\n              onClick={() => setChartPeriod(period)}\r\n              className={`px-3 py-1 text-xs font-medium rounded-md ${\r\n                chartPeriod === period \r\n                  ? 'bg-purple-600 text-white' \r\n                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\r\n              }`}\r\n            >\r\n              {period === '7d' && '7 Dagen'}\r\n              {period === '30d' && '30 Dagen'}\r\n              {period === 'all' && 'Alles'}\r\n            </button>\r\n          ))}\r\n        </div>\r\n\r\n        <div className=\"mb-3\">\r\n          <div className=\"border-b border-gray-200\">\r\n            <nav className=\"-mb-px flex space-x-4 sm:space-x-6 overflow-x-auto pb-1\" aria-label=\"Tabs\">\r\n              {['pain', 'fatigue', 'energy', 'heartRate'].map((tab) => (\r\n                <button\r\n                  key={tab}\r\n                  onClick={() => setActiveChartTab(tab as 'pain' | 'fatigue' | 'heartRate' | 'energy')}\r\n                  className={`whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm ${\r\n                    activeChartTab === tab\r\n                      ? 'border-purple-500 text-purple-600'\r\n                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\r\n                  }`}\r\n                >\r\n                  {tab === 'pain' && 'Pijn'}\r\n                  {tab === 'fatigue' && 'Vermoeidheid'}\r\n                  {tab === 'energy' && 'Energie'}\r\n                  {tab === 'heartRate' && 'Hartslag'}\r\n                </button>\r\n              ))}\r\n            </nav>\r\n          </div>\r\n        </div>\r\n\r\n        {activeChartTab === 'pain' && (\r\n          <div>\r\n            {painLogs.length > 0 ? (\r\n              <PainTrendChart taskLogs={painLogs} />\r\n            ) : (\r\n              <p className=\"text-sm text-gray-500 py-4\">Geen pijnscore data voor de geselecteerde periode.</p>\r\n            )}\r\n          </div>\r\n        )}\r\n        {activeChartTab === 'fatigue' && (\r\n          <div>\r\n            {fatigueLogs.length > 0 ? (\r\n              <FatigueTrendChart taskLogs={fatigueLogs} />\r\n            ) : (\r\n              <p className=\"text-sm text-gray-500 py-4\">Geen vermoeidheidsscore data voor de geselecteerde periode.</p>\r\n            )}\r\n          </div>\r\n        )}\r\n        {activeChartTab === 'energy' && (\r\n          <div>\r\n            {energyLogs.length > 0 ? (\r\n              <EnergyTrendChart taskLogs={energyLogs} />\r\n            ) : (\r\n              <p className=\"text-sm text-gray-500 py-4\">Geen energiedata voor de geselecteerde periode.</p>\r\n            )}\r\n          </div>\r\n        )}\r\n        {activeChartTab === 'heartRate' && (\r\n          <div>\r\n            {heartRateLogs.length > 0 ? (\r\n              <HeartRateTrendChart taskLogs={heartRateLogs} />\r\n            ) : (\r\n              <p className=\"text-sm text-gray-500 py-4\">Geen hartslagdata voor de geselecteerde periode.</p>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"border-t pt-3 mt-4\">\r\n        <h4 className=\"font-medium text-gray-700\">Recente Reflecties:</h4>\r\n        {insights.recentReflections.length > 0 ? (\r\n          <ul className=\"list-disc list-inside space-y-1\">\r\n            {insights.recentReflections.map((r: RecentReflection) => (\r\n              <li key={r.id} className=\"text-sm\">\r\n                <Link href={`/reflecties/${r.id}`} className=\"text-purple-600 hover:underline\">\r\n                  Reflectie van {new Date(r.datum).toLocaleDateString('nl-BE')}\r\n                  {r.stemming && ` (Stemming: ${r.stemming})`}\r\n                  {r.notitie && r.notitie.length > 20 && ` - ${r.notitie.substring(0,20)}...`}\r\n                  {r.notitie && r.notitie.length <= 20 && ` - ${r.notitie}`}\r\n                </Link>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        ) : (\r\n          <p className=\"text-sm text-gray-500\">Geen recente reflecties.</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\specialisten\\PatientList.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":43,"fix":{"range":[75,75],"text":"\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":21,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":21,"endColumn":36},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":47,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":47,"endColumn":69,"fix":{"range":[1609,1654],"text":"rounded-lg bg-white p-6 text-center shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":54,"column":10,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":54,"endColumn":55,"fix":{"range":[1787,1820],"text":"rounded-lg bg-white p-6 shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":55,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":55,"endColumn":89,"fix":{"range":[1846,1911],"text":"mb-6 flex flex-col sm:flex-row sm:items-center sm:justify-between"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":56,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":56,"endColumn":59,"fix":{"range":[1938,1972],"text":"mb-3 text-lg font-semibold sm:mb-0"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":58,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":58,"endColumn":103,"fix":{"range":[2044,2121],"text":"flex flex-col space-y-3 sm:flex-row sm:items-center sm:space-x-4 sm:space-y-0"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":66,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":66,"endColumn":137,"fix":{"range":[2414,2524],"text":"w-full rounded-md border border-gray-300 px-3 py-2 pl-10 focus:outline-none focus:ring-2 focus:ring-purple-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":68,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":68,"endColumn":98,"fix":{"range":[2571,2639],"text":"pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":69,"column":55,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":69,"endColumn":88,"fix":{"range":[2708,2729],"text":"size-5 text-gray-400"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":79,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":83,"endColumn":18,"fix":{"range":[3167,3199],"text":"`rounded-md px-3 py-1 text-sm ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":89,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":93,"endColumn":18,"fix":{"range":[3524,3556],"text":"`rounded-md px-3 py-1 text-sm ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":103,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":103,"endColumn":122,"fix":{"range":[3979,4074],"text":"rounded-md bg-purple-600 px-4 py-2 font-medium text-white transition-colors hover:bg-purple-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":112,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":112,"endColumn":92,"fix":{"range":[4266,4332],"text":"rounded-lg border-2 border-dashed border-gray-200 py-6 text-center"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":120,"column":33,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":120,"endColumn":123,"fix":{"range":[4687,4765],"text":"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":123,"column":33,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":123,"endColumn":123,"fix":{"range":[4859,4937],"text":"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":126,"column":33,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":126,"endColumn":123,"fix":{"range":[5034,5112],"text":"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":129,"column":33,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":129,"endColumn":123,"fix":{"range":[5210,5288],"text":"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":137,"column":20,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":137,"endColumn":65,"fix":{"range":[5560,5593],"text":"divide-y divide-gray-200 bg-white"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":154,"column":25,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":154,"endColumn":64,"fix":{"range":[6367,6394],"text":"whitespace-nowrap px-6 py-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":156,"column":30,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":156,"endColumn":125,"fix":{"range":[6497,6580],"text":"flex h-10 w-10 flex-shrink-0 items-center justify-center rounded-full bg-purple-100"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-10, w-10' could be replaced by the 'size-10' shorthand!","line":156,"column":30,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":156,"endColumn":125,"fix":{"range":[6497,6580],"text":"flex-shrink-0 size-10 bg-purple-100 rounded-full flex items-center justify-center"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'flex-shrink-0' should be updated to 'shrink-0' in Tailwind CSS v3!","line":156,"column":30,"nodeType":"JSXAttribute","messageId":"classnameChanged","endLine":156,"endColumn":125,"fix":{"range":[6497,6580],"text":"shrink-0 h-10 w-10 bg-purple-100 rounded-full flex items-center justify-center"}},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":158,"column":29,"nodeType":"JSXOpeningElement","endLine":162,"endColumn":31},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-10, w-10' could be replaced by the 'size-10' shorthand!","line":161,"column":31,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":161,"endColumn":78,"fix":{"range":[6849,6884],"text":"size-10 rounded-full object-cover"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":164,"column":35,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":164,"endColumn":74,"fix":{"range":[6997,7024],"text":"font-medium text-purple-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":177,"column":25,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":177,"endColumn":64,"fix":{"range":[7617,7644],"text":"whitespace-nowrap px-6 py-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":180,"column":25,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":180,"endColumn":64,"fix":{"range":[7816,7843],"text":"whitespace-nowrap px-6 py-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":183,"column":25,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":183,"endColumn":86,"fix":{"range":[8015,8064],"text":"whitespace-nowrap px-6 py-4 text-sm text-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":186,"column":25,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":186,"endColumn":95,"fix":{"range":[8161,8219],"text":"whitespace-nowrap px-6 py-4 text-right text-sm font-medium"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":29,"fixableErrorCount":1,"fixableWarningCount":27,"source":"'use client';\r\nimport { useState, useMemo } from 'react'; // Import useMemo\r\nimport Link from 'next/link';\r\n\r\ninterface Patient {\r\n  id: string;\r\n  voornaam?: string;\r\n  achternaam?: string;\r\n  postcode?: string;\r\n  gemeente?: string;\r\n  avatar_url?: string;\r\n  geboortedatum?: Date | string;\r\n  created_at: Date | string;\r\n}\r\n\r\ninterface PatientListProps {\r\n  patients: Patient[];\r\n  onAddPatient?: () => void;\r\n}\r\n\r\nexport default function PatientList({ patients, onAddPatient }: PatientListProps) {\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [sortBy, setSortBy] = useState<'naam' | 'datum'>('naam');\r\n  \r\n  const filteredPatients = useMemo(() => {\r\n    return patients\r\n      .filter(patient => {\r\n        const fullName = `${patient.voornaam || ''} ${patient.achternaam || ''}`.toLowerCase();\r\n        return fullName.includes(searchTerm.toLowerCase()) ||\r\n               (patient.postcode && patient.postcode.includes(searchTerm));\r\n      })\r\n      .sort((a, b) => {\r\n        if (sortBy === 'naam') {\r\n          const nameA = `${a.voornaam || ''} ${a.achternaam || ''}`.toLowerCase();\r\n          const nameB = `${b.voornaam || ''} ${b.achternaam || ''}`.toLowerCase();\r\n          return nameA.localeCompare(nameB);\r\n        } else { // Sort by date (created_at)\r\n          const dateA = new Date(a.created_at);\r\n          const dateB = new Date(b.created_at);\r\n          return dateB.getTime() - dateA.getTime(); // Most recent first\r\n        }\r\n      });\r\n  }, [patients, searchTerm, sortBy]);\r\n  \r\n  if (patients.length === 0 && !onAddPatient) {\r\n    return (\r\n      <div className=\"bg-white rounded-lg shadow-md p-6 text-center\">\r\n        <p className=\"text-gray-500\">Geen patiënten gevonden</p>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <div className=\"bg-white rounded-lg shadow-md p-6\">\r\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6\">\r\n        <h2 className=\"text-lg font-semibold mb-3 sm:mb-0\">Patiënten ({patients.length})</h2>\r\n        \r\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:space-x-4 space-y-3 sm:space-y-0\">\r\n          {/* Zoekbalk */}\r\n          <div className=\"relative\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Zoek op naam of postcode\"\r\n              value={searchTerm}\r\n              onChange={(e) => setSearchTerm(e.target.value)}\r\n              className=\"w-full px-3 py-2 pl-10 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500\"\r\n            />\r\n            <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 text-gray-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\r\n              </svg>\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Sorteer opties */}\r\n          <div className=\"flex space-x-2\">\r\n            <button\r\n              onClick={() => setSortBy('naam')}\r\n              className={`px-3 py-1 rounded-md text-sm ${\r\n                sortBy === 'naam'\r\n                  ? 'bg-purple-600 text-white'\r\n                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\r\n              }`}\r\n            >\r\n              Naam\r\n            </button>\r\n            <button\r\n              onClick={() => setSortBy('datum')}\r\n              className={`px-3 py-1 rounded-md text-sm ${\r\n                sortBy === 'datum'\r\n                  ? 'bg-purple-600 text-white'\r\n                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\r\n              }`}\r\n            >\r\n              Meest recent\r\n            </button>\r\n          </div>\r\n          \r\n          {/* Voeg patiënt toe knop */}\r\n          {onAddPatient && (\r\n            <button\r\n              onClick={onAddPatient}\r\n              className=\"px-4 py-2 bg-purple-600 text-white font-medium rounded-md hover:bg-purple-700 transition-colors\"\r\n            >\r\n              Patiënt Toevoegen\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n      \r\n      {filteredPatients.length === 0 ? (\r\n        <div className=\"text-center py-6 border-2 border-dashed border-gray-200 rounded-lg\">\r\n          <p className=\"text-gray-500\">Geen patiënten gevonden die overeenkomen met uw zoekopdracht</p>\r\n        </div>\r\n      ) : (\r\n        <div className=\"overflow-x-auto\">\r\n          <table className=\"min-w-full divide-y divide-gray-200\">\r\n            <thead className=\"bg-gray-50\">\r\n              <tr>\r\n                <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Naam\r\n                </th>\r\n                <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Locatie\r\n                </th>\r\n                <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Leeftijd\r\n                </th>\r\n                <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Sinds\r\n                </th>\r\n                <th scope=\"col\" className=\"relative px-6 py-3\">\r\n                  <span className=\"sr-only\">Acties</span>\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody className=\"bg-white divide-y divide-gray-200\">\r\n              {filteredPatients.map(patient => {\r\n                // Bereken leeftijd\r\n                const leeftijd = patient.geboortedatum \r\n                  ? Math.floor((new Date().getTime() - new Date(patient.geboortedatum).getTime()) / (365.25 * 24 * 60 * 60 * 1000))\r\n                  : null;\r\n                \r\n                // Formatteer datum\r\n                const sindsDate = new Date(patient.created_at);\r\n                const sinds = sindsDate.toLocaleDateString('nl-BE', {\r\n                  day: 'numeric',\r\n                  month: 'short',\r\n                  year: 'numeric'\r\n                });\r\n                \r\n                return (\r\n                  <tr key={patient.id} className=\"hover:bg-gray-50\">\r\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                      <div className=\"flex items-center\">\r\n                        <div className=\"flex-shrink-0 h-10 w-10 bg-purple-100 rounded-full flex items-center justify-center\">\r\n                          {patient.avatar_url ? (\r\n                            <img \r\n                              src={patient.avatar_url} \r\n                              alt={`${patient.voornaam} ${patient.achternaam}`}\r\n                              className=\"h-10 w-10 rounded-full object-cover\"\r\n                            />\r\n                          ) : (\r\n                            <span className=\"text-purple-800 font-medium\">\r\n                              {patient.voornaam?.charAt(0) || ''}\r\n                              {patient.achternaam?.charAt(0) || ''}\r\n                            </span>\r\n                          )}\r\n                        </div>\r\n                        <div className=\"ml-4\">\r\n                          <div className=\"text-sm font-medium text-gray-900\">\r\n                            {patient.voornaam} {patient.achternaam}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </td>\r\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                      <div className=\"text-sm text-gray-900\">{patient.postcode} {patient.gemeente}</div>\r\n                    </td>\r\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                      <div className=\"text-sm text-gray-900\">{leeftijd ? `${leeftijd} jaar` : '-'}</div>\r\n                    </td>\r\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\r\n                      {sinds}\r\n                    </td>\r\n                    <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\r\n                      <Link \r\n                        href={`/specialisten/patient/${patient.id}`}\r\n                        className=\"text-purple-600 hover:text-purple-900\"\r\n                      >\r\n                        Details\r\n                      </Link>\r\n                    </td>\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\specialisten\\SpecialistCard.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":27,"fix":{"range":[111,111],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/context/NotificationContext` import should occur before import of `@/types`","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":65,"fix":{"range":[113,247],"text":"import { useNotification } from '@/context/NotificationContext'; // For potential local feedback\r\nimport { Profile } from '@/types';\r\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useNotification' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":25},{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'useNotification' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":25,"fix":{"range":[149,214],"text":""}},{"ruleId":"import/no-named-as-default-member","severity":1,"message":"Caution: `React` also has a named export `useState`. Check if you meant to write `import {useState} from 'react'` instead.","line":13,"column":45,"nodeType":"MemberExpression","endLine":13,"endColumn":59},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":29,"column":10,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":29,"endColumn":144,"fix":{"range":[1006,1128],"text":"flex flex-col justify-between rounded-lg bg-white p-5 shadow-md transition-shadow duration-200 ease-in-out hover:shadow-lg"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":31,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":31,"endColumn":48,"fix":{"range":[1169,1191],"text":"mb-3 flex items-center"}},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":32,"column":11,"nodeType":"JSXOpeningElement","endLine":36,"endColumn":13},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":35,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":35,"endColumn":65,"fix":{"range":[1404,1444],"text":"mr-4 h-12 w-12 rounded-full object-cover"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-12, w-12' could be replaced by the 'size-12' shorthand!","line":35,"column":13,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":35,"endColumn":65,"fix":{"range":[1404,1444],"text":"size-12 rounded-full mr-4 object-cover"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":49,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":49,"endColumn":77,"fix":{"range":[2027,2078],"text":"mt-4 flex justify-end border-t border-gray-200 pt-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":54,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":58,"endColumn":69,"fix":{"range":[2586,2615],"text":"cursor-not-allowed opacity-50"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":54,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":58,"endColumn":69,"fix":{"range":[2227,2343],"text":"`rounded-md px-3 py-1.5 text-xs font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-offset-1 ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":62,"column":20,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":62,"endColumn":63,"fix":{"range":[2827,2858],"text":"h-4 w-4 animate-spin text-white"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-4, w-4' could be replaced by the 'size-4' shorthand!","line":62,"column":20,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":62,"endColumn":63,"fix":{"range":[2827,2858],"text":"animate-spin size-4 text-white"}},{"ruleId":"import/no-named-as-default-member","severity":1,"message":"Caution: `React` also has a named export `memo`. Check if you meant to write `import {memo} from 'react'` instead.","line":74,"column":16,"nodeType":"MemberExpression","endLine":74,"endColumn":26}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":3,"fixableWarningCount":9,"source":"'use client'; // Client component if it has interactive elements like delete button\r\nimport React from 'react';\r\nimport { Profile } from '@/types';\r\nimport { useNotification } from '@/context/NotificationContext'; // For potential local feedback\r\n\r\ninterface SpecialistCardProps {\r\n  specialist: Profile;\r\n  onDelete?: (specialistId: string) => void;\r\n  isDeleting?: boolean; // To show loading state on the delete button\r\n}\r\n\r\nfunction SpecialistCard({ specialist, onDelete, isDeleting }: SpecialistCardProps) {\r\n  const [confirmDelete, setConfirmDelete] = React.useState(false);\r\n  // const { addNotification } = useNotification(); // If local notifications are needed\r\n\r\n  const handleDeleteClick = () => {\r\n    if (!onDelete) return;\r\n\r\n    if (confirmDelete) {\r\n      onDelete(specialist.id);\r\n      setConfirmDelete(false);\r\n    } else {\r\n      setConfirmDelete(true);\r\n      setTimeout(() => setConfirmDelete(false), 3000); // Auto-reset confirmation\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-white rounded-lg shadow-md p-5 hover:shadow-lg transition-shadow duration-200 ease-in-out flex flex-col justify-between\">\r\n      <div>\r\n        <div className=\"flex items-center mb-3\">\r\n          <img \r\n            src={specialist.avatar_url || '/icons/icon-128x128.png'} // Fallback avatar\r\n            alt={`Avatar van ${specialist.voornaam} ${specialist.achternaam}`}\r\n            className=\"h-12 w-12 rounded-full mr-4 object-cover\"\r\n          />\r\n          <div>\r\n            <h3 className=\"text-lg font-semibold text-purple-700\">\r\n              {specialist.voornaam} {specialist.achternaam}\r\n            </h3>\r\n            <p className=\"text-sm text-gray-600\">Specialist</p> {/* Assuming type is always specialist here */}\r\n          </div>\r\n        </div>\r\n        {/* Add more specialist details if available and relevant */}\r\n        {/* Example: <p className=\"text-sm text-gray-500\">Contact: {specialist.email_from_profiles_table}</p> */}\r\n      </div>\r\n      \r\n      {onDelete && (\r\n        <div className=\"mt-4 pt-3 border-t border-gray-200 flex justify-end\">\r\n          <button\r\n            type=\"button\"\r\n            onClick={handleDeleteClick}\r\n            disabled={isDeleting}\r\n            className={`px-3 py-1.5 text-xs font-medium rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-offset-1 ${\r\n              confirmDelete\r\n                ? 'bg-red-500 text-white hover:bg-red-600 focus:ring-red-400'\r\n                : 'bg-gray-200 text-gray-700 hover:bg-red-100 hover:text-red-600 focus:ring-gray-400'\r\n            } ${isDeleting ? 'opacity-50 cursor-not-allowed' : ''}`}\r\n            aria-label={confirmDelete ? `Bevestig verwijderen van ${specialist.voornaam}` : `Verwijder ${specialist.voornaam}`}\r\n          >\r\n            {isDeleting ? (\r\n              <svg className=\"animate-spin h-4 w-4 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\r\n                <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\r\n                <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\r\n              </svg>\r\n            ) : confirmDelete ? 'Bevestig' : 'Verwijder Relatie'}\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default React.memo(SpecialistCard);\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\specialisten\\SpecialistLoadingSkeleton.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":1,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":1,"endColumn":50},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":3,"column":10,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":3,"endColumn":74,"fix":{"range":[87,139],"text":"grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":5,"column":22,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":5,"endColumn":81,"fix":{"range":[213,260],"text":"animate-pulse rounded-lg bg-white p-6 shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":6,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":6,"endColumn":62,"fix":{"range":[290,324],"text":"mb-2 h-6 w-3/4 rounded bg-gray-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":7,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":7,"endColumn":62,"fix":{"range":[360,394],"text":"mb-4 h-4 w-1/2 rounded bg-gray-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":8,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":8,"endColumn":62,"fix":{"range":[430,464],"text":"mb-2 h-4 w-1/4 rounded bg-gray-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":9,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":9,"endColumn":63,"fix":{"range":[500,535],"text":"mb-1 h-4 w-full rounded bg-gray-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":10,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":10,"endColumn":58,"fix":{"range":[571,601],"text":"h-4 w-full rounded bg-gray-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":11,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":11,"endColumn":49,"fix":{"range":[637,658],"text":"mt-4 flex justify-end"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":12,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":12,"endColumn":59,"fix":{"range":[690,719],"text":"h-8 w-1/4 rounded bg-gray-200"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":9,"source":"export default function SpecialistLoadingSkeleton() {\r\n  return (\r\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n      {[...Array(3)].map((_, i) => (\r\n        <div key={i} className=\"bg-white rounded-lg shadow-md p-6 animate-pulse\">\r\n          <div className=\"h-6 bg-gray-200 rounded w-3/4 mb-2\"></div>\r\n          <div className=\"h-4 bg-gray-200 rounded w-1/2 mb-4\"></div>\r\n          <div className=\"h-4 bg-gray-200 rounded w-1/4 mb-2\"></div>\r\n          <div className=\"h-4 bg-gray-200 rounded w-full mb-1\"></div>\r\n          <div className=\"h-4 bg-gray-200 rounded w-full\"></div>\r\n          <div className=\"flex justify-end mt-4\">\r\n            <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\specialisten\\SpecialistTaskCreator.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":45,"fix":{"range":[91,91],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":41,"fix":{"range":[133,133],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":30,"fix":{"range":[164,164],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`next/link` import should occur before import of `@/types`","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":30,"fix":{"range":[93,166],"text":"import Link from 'next/link';\r\nimport { Profile, Task } from '@/types';\r\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":67,"fix":{"range":[232,232],"text":"\n"}},{"ruleId":"no-restricted-imports","severity":2,"message":"'@/hooks/useSupabaseQuery' import is restricted from being used. Data fetching hooks (useSupabaseQuery/*) mogen niet in presentational components.","line":7,"column":1,"nodeType":"ImportDeclaration","messageId":"pathWithCustomMessage","endLine":7,"endColumn":72},{"ruleId":"import/order","severity":2,"message":"`@/hooks/useSupabaseQuery` import should occur before import of `@/types`","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":72,"fix":{"range":[93,333],"text":"import { useTasksForUserBySpecialist } from '@/hooks/useSupabaseQuery'; // Gebruik de nieuwe hook\r\nimport { Profile, Task } from '@/types';\r\nimport Link from 'next/link';\r\nimport CreateTaskAssignmentForm from './CreateTaskAssignmentForm';\r\n"}},{"ruleId":"no-restricted-imports","severity":2,"message":"'@/hooks/useMutations' import is restricted from being used. Mutation hooks (useMutations/*) mogen niet in presentational components.","line":8,"column":1,"nodeType":"ImportDeclaration","messageId":"pathWithCustomMessage","endLine":8,"endColumn":54},{"ruleId":"import/order","severity":2,"message":"`@/hooks/useMutations` import should occur before import of `@/types`","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":54,"fix":{"range":[93,413],"text":"import { useDeleteTask } from '@/hooks/useMutations'; // Importeer delete hook\r\nimport { Profile, Task } from '@/types';\r\nimport Link from 'next/link';\r\nimport CreateTaskAssignmentForm from './CreateTaskAssignmentForm';\r\nimport { useTasksForUserBySpecialist } from '@/hooks/useSupabaseQuery'; // Gebruik de nieuwe hook\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/context/NotificationContext` import should occur before import of `@/types`","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":65,"fix":{"range":[93,500],"text":"import { useNotification } from '@/context/NotificationContext'; // Voor notificaties\r\nimport { Profile, Task } from '@/types';\r\nimport Link from 'next/link';\r\nimport CreateTaskAssignmentForm from './CreateTaskAssignmentForm';\r\nimport { useTasksForUserBySpecialist } from '@/hooks/useSupabaseQuery'; // Gebruik de nieuwe hook\r\nimport { useDeleteTask } from '@/hooks/useMutations'; // Importeer delete hook\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/components/ui/SkeletonLoader` import should occur before import of `@/types`","line":10,"column":1,"nodeType":"ImportDeclaration","endLine":10,"endColumn":65,"fix":{"range":[93,585],"text":"import { SkeletonLoader } from '@/components/ui/SkeletonLoader'; // Voor laadstatus\r\nimport { Profile, Task } from '@/types';\r\nimport Link from 'next/link';\r\nimport CreateTaskAssignmentForm from './CreateTaskAssignmentForm';\r\nimport { useTasksForUserBySpecialist } from '@/hooks/useSupabaseQuery'; // Gebruik de nieuwe hook\r\nimport { useDeleteTask } from '@/hooks/useMutations'; // Importeer delete hook\r\nimport { useNotification } from '@/context/NotificationContext'; // Voor notificaties\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":17,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":17,"endColumn":46},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":101,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":101,"endColumn":93,"fix":{"range":[3818,3887],"text":"mt-4 rounded-md border border-yellow-200 bg-yellow-50 p-4 text-center"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":115,"column":41,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":115,"endColumn":97,"fix":{"range":[4312,4356],"text":"mb-1 block text-sm font-medium text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":123,"column":11,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":123,"endColumn":169,"fix":{"range":[4595,4741],"text":"mt-1 block w-full rounded-md border-gray-300 py-2 pl-3 pr-10 text-base focus:border-purple-500 focus:outline-none focus:ring-purple-500 sm:text-sm"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":145,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":145,"endColumn":75,"fix":{"range":[5467,5515],"text":"mb-3 text-lg font-medium leading-6 text-gray-900"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":158,"column":37,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":158,"endColumn":127,"fix":{"range":[6317,6395],"text":"px-4 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":159,"column":37,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":159,"endColumn":127,"fix":{"range":[6456,6534],"text":"px-4 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":160,"column":37,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":160,"endColumn":127,"fix":{"range":[6594,6672],"text":"px-4 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":161,"column":37,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":161,"endColumn":127,"fix":{"range":[6737,6815],"text":"px-4 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":168,"column":24,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":168,"endColumn":69,"fix":{"range":[7230,7263],"text":"divide-y divide-gray-200 bg-white"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":173,"column":29,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":173,"endColumn":102,"fix":{"range":[7556,7617],"text":"whitespace-nowrap px-4 py-3 text-sm font-medium text-gray-900"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":174,"column":29,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":174,"endColumn":90,"fix":{"range":[7677,7726],"text":"whitespace-nowrap px-4 py-3 text-sm text-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":175,"column":29,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":175,"endColumn":90,"fix":{"range":[7785,7834],"text":"whitespace-nowrap px-4 py-3 text-sm text-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":176,"column":29,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":176,"endColumn":90,"fix":{"range":[7904,7953],"text":"whitespace-nowrap px-4 py-3 text-sm text-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":180,"column":29,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":180,"endColumn":109,"fix":{"range":[8318,8386],"text":"space-x-2 whitespace-nowrap px-4 py-3 text-right text-sm font-medium"}}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":9,"fixableWarningCount":14,"source":"'use client';\r\n\r\nimport { useState, useEffect } from 'react'; // useEffect terug toegevoegd\r\nimport { Profile, Task } from '@/types';\r\nimport Link from 'next/link';\r\nimport CreateTaskAssignmentForm from './CreateTaskAssignmentForm';\r\nimport { useTasksForUserBySpecialist } from '@/hooks/useSupabaseQuery'; // Gebruik de nieuwe hook\r\nimport { useDeleteTask } from '@/hooks/useMutations'; // Importeer delete hook\r\nimport { useNotification } from '@/context/NotificationContext'; // Voor notificaties\r\nimport { SkeletonLoader } from '@/components/ui/SkeletonLoader'; // Voor laadstatus\r\n\r\ninterface SpecialistTaskCreatorProps {\r\n  patients: Profile[];\r\n  specialistId: string;\r\n}\r\n\r\nexport default function SpecialistTaskCreator({ patients, specialistId }: SpecialistTaskCreatorProps) {\r\n  const [selectedPatientId, setSelectedPatientId] = useState<string | null>(null);\r\n  const [editingTask, setEditingTask] = useState<Task | null>(null); // State voor de taak die bewerkt wordt\r\n\r\n  const { \r\n    data: assignedTasks, \r\n    isLoading: isLoadingTasks, \r\n    error: tasksError,\r\n    refetch: refetchTasks // Functie om taken opnieuw op te halen\r\n  } = useTasksForUserBySpecialist(selectedPatientId, specialistId, { \r\n    enabled: !!selectedPatientId, // Alleen fetchen als een patiënt is geselecteerd\r\n  });\r\n\r\n  const { addNotification } = useNotification();\r\n  const { mutate: deleteTask, isPending: isDeletingTask } = useDeleteTask();\r\n\r\n  const handlePatientSelect = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n    setSelectedPatientId(e.target.value || null);\r\n  };\r\n  \r\n  // Callback voor na het aanmaken of bijwerken van een taak\r\n  const handleTaskUpserted = () => {\r\n    if (selectedPatientId) {\r\n      refetchTasks(); // Haal de takenlijst opnieuw op\r\n    }\r\n    setEditingTask(null); // Verlaat edit mode\r\n  };\r\n\r\n  const handleEditTask = (task: Task) => {\r\n    // Zorg ervoor dat de geselecteerde patiënt overeenkomt met de user_id van de taak\r\n    if (task.user_id === selectedPatientId) {\r\n      setEditingTask(task);\r\n      // Scroll naar het formulier (optioneel)\r\n      // document.getElementById('task-assignment-form')?.scrollIntoView({ behavior: 'smooth' });\r\n    } else {\r\n      addNotification({ type: 'warning', message: 'Kan taak niet bewerken, selecteer eerst de juiste patiënt.'});\r\n    }\r\n  };\r\n\r\n  const handleDeleteTask = (taskId: string) => {\r\n    if (!selectedPatientId) return; \r\n\r\n    if (!window.confirm(`Weet u zeker dat u deze taak wilt verwijderen?`)) { // Duidelijkere bevestigingstekst\r\n      return;\r\n    }\r\n\r\n    deleteTask(taskId, {\r\n      onSuccess: () => {\r\n        addNotification({ type: 'success', message: 'Taak succesvol verwijderd.' });\r\n        refetchTasks(); \r\n        if (editingTask?.id === taskId) { // Als de bewerkte taak is verwijderd\r\n          setEditingTask(null);\r\n        }\r\n      },\r\n      onError: (error) => {\r\n        addNotification({ type: 'error', message: error.userMessage || 'Fout bij verwijderen taak.' });\r\n      }\r\n    });\r\n  };\r\n\r\n  // Wanneer de geselecteerde patiënt verandert, reset de editingTask state\r\n  useEffect(() => {\r\n    setEditingTask(null);\r\n  }, [selectedPatientId]);\r\n\r\n  // Verwijder het gedupliceerde blok hieronder\r\n  // if (patients.length === 0) {\r\n  //   if (!window.confirm(`Weet u zeker dat u taak ${taskId} wilt verwijderen?`)) {\r\n  //     return;\r\n  //   }\r\n\r\n  //   deleteTask(taskId, {\r\n  //     onSuccess: () => {\r\n  //       addNotification({ type: 'success', message: 'Taak succesvol verwijderd.' });\r\n  //       refetchTasks(); // Ververs de lijst\r\n  //     },\r\n  //     onError: (error) => {\r\n  //       addNotification({ type: 'error', message: error.userMessage || 'Fout bij verwijderen taak.' });\r\n  //     }\r\n  //   });\r\n  // };\r\n\r\n  if (patients.length === 0) {\r\n    return (\r\n      <div className=\"mt-4 p-4 bg-yellow-50 border border-yellow-200 rounded-md text-center\">\r\n        <p className=\"text-yellow-700\">\r\n          U heeft nog geen patiënten gekoppeld. Voeg eerst patiënten toe via{\" \"}\r\n          <Link href=\"/specialisten/patienten\" className=\"font-medium underline hover:text-yellow-800\">\r\n            Mijn Patiënten\r\n          </Link>.\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"mt-4\">\r\n        <label htmlFor=\"patient-select\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n          Selecteer Patiënt:\r\n        </label>\r\n        <select\r\n          id=\"patient-select\"\r\n          name=\"patient-select\"\r\n          value={selectedPatientId || ''}\r\n          onChange={handlePatientSelect}\r\n          className=\"mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-purple-500 focus:border-purple-500 sm:text-sm rounded-md\"\r\n        >\r\n          <option value=\"\">-- Kies een patiënt --</option>\r\n          {patients.map(p => (\r\n            <option key={p.id} value={p.id}>\r\n              {p.voornaam} {p.achternaam} ({p.email})\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n\r\n      <div id=\"task-assignment-form\"> {/* ID voor scroll target */}\r\n        <CreateTaskAssignmentForm \r\n          selectedPatientId={selectedPatientId}\r\n          specialistId={specialistId}\r\n          onTaskUpserted={handleTaskUpserted} \r\n          initialData={editingTask} // Geef de te bewerken taak mee\r\n        />\r\n      </div>\r\n      \r\n      {selectedPatientId && (\r\n        <div className=\"mt-8 border-t pt-6\">\r\n          <h3 className=\"text-lg font-medium leading-6 text-gray-900 mb-3\">\r\n            Toegewezen Taken aan Geselecteerde Patiënt\r\n          </h3>\r\n          {isLoadingTasks && <SkeletonLoader type=\"list\" count={3} />}\r\n          {tasksError && <p className=\"text-red-500\">Fout bij het laden van taken: {tasksError.userMessage}</p>}\r\n          {!isLoadingTasks && !tasksError && (!assignedTasks || assignedTasks.length === 0) && (\r\n            <p className=\"text-gray-500\">Nog geen taken toegewezen aan deze patiënt door u.</p>\r\n          )}\r\n          {!isLoadingTasks && !tasksError && assignedTasks && assignedTasks.length > 0 && (\r\n            <div className=\"overflow-x-auto\">\r\n              <table className=\"min-w-full divide-y divide-gray-200\">\r\n                <thead className=\"bg-gray-50\">\r\n                  <tr>\r\n                    <th scope=\"col\" className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Titel</th>\r\n                    <th scope=\"col\" className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Type</th>\r\n                    <th scope=\"col\" className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Herhaling</th>\r\n                    <th scope=\"col\" className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Aangemaakt op</th>\r\n                    {/* <th scope=\"col\" className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Patiënt</th> */}\r\n                    <th scope=\"col\" className=\"relative px-4 py-3\">\r\n                      <span className=\"sr-only\">Acties</span>\r\n                    </th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody className=\"bg-white divide-y divide-gray-200\">\r\n                  {assignedTasks.map((task: Task) => {\r\n                    // const patient = patients.find(p => p.id === task.user_id); // Niet nodig, lijst is al per patiënt\r\n                    return (\r\n                      <tr key={task.id}>\r\n                        <td className=\"px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-900\">{task.titel}</td>\r\n                        <td className=\"px-4 py-3 whitespace-nowrap text-sm text-gray-500\">{task.type}</td>\r\n                        <td className=\"px-4 py-3 whitespace-nowrap text-sm text-gray-500\">{task.herhaal_patroon}</td>\r\n                        <td className=\"px-4 py-3 whitespace-nowrap text-sm text-gray-500\">\r\n                          {new Date(task.created_at).toLocaleString('nl-BE', { dateStyle: 'short', timeStyle: 'short' })}\r\n                        </td>\r\n                        {/* <td className=\"px-4 py-3 whitespace-nowrap text-sm text-gray-500\">{patient ? `${patient.voornaam} ${patient.achternaam}` : 'N/B'}</td> */}\r\n                        <td className=\"px-4 py-3 whitespace-nowrap text-right text-sm font-medium space-x-2\">\r\n                          <button\r\n                            onClick={() => handleEditTask(task)}\r\n                            className=\"text-indigo-600 hover:text-indigo-800 disabled:text-gray-400\"\r\n                            disabled={isDeletingTask} // Kan ook een aparte isEditingFormLoading state gebruiken\r\n                          >\r\n                            Bewerk\r\n                          </button>\r\n                          <button \r\n                            onClick={() => handleDeleteTask(task.id)} \r\n                            className=\"text-red-600 hover:text-red-800 disabled:text-gray-400\"\r\n                            disabled={isDeletingTask}\r\n                          >\r\n                            {isDeletingTask ? 'Bezig...' : 'Verwijder'}\r\n                          </button>\r\n                        </td>\r\n                      </tr>\r\n                    );\r\n                  })}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n      {/* Debug log - kan verwijderd worden */}\r\n      {/* {selectedPatientId && <p className=\"mt-2 text-xs text-gray-500\">Debug: Geselecteerde Patiënt ID: {selectedPatientId} | Specialist ID: {specialistId}</p>} */}\r\n    </>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\specialisten\\SpecialistsList.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":8,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":8,"endColumn":40},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":10,"column":10,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":10,"endColumn":74,"fix":{"range":[347,399],"text":"grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":12,"column":34,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":12,"endColumn":91,"fix":{"range":[487,532],"text":"overflow-hidden rounded-lg bg-white shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":14,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":14,"endColumn":69,"fix":{"range":[596,636],"text":"mb-2 text-xl font-semibold text-gray-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":17,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":17,"endColumn":46,"fix":{"range":[746,764],"text":"mb-4 text-gray-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":20,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":20,"endColumn":69,"fix":{"range":[869,907],"text":"mb-2 text-sm font-medium text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":24,"column":26,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":24,"endColumn":65,"fix":{"range":[1149,1176],"text":"mr-2 h-4 w-4 text-green-500"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'w-4, h-4' could be replaced by the 'size-4' shorthand!","line":24,"column":26,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":24,"endColumn":65,"fix":{"range":[1149,1176],"text":"size-4 text-green-500 mr-2"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":32,"column":26,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":32,"endColumn":65,"fix":{"range":[1664,1691],"text":"mr-2 h-4 w-4 text-green-500"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'w-4, h-4' could be replaced by the 'size-4' shorthand!","line":32,"column":26,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":32,"endColumn":65,"fix":{"range":[1664,1691],"text":"size-4 text-green-500 mr-2"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":40,"column":26,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":40,"endColumn":65,"fix":{"range":[2181,2208],"text":"mr-2 h-4 w-4 text-green-500"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'w-4, h-4' could be replaced by the 'size-4' shorthand!","line":40,"column":26,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":40,"endColumn":65,"fix":{"range":[2181,2208],"text":"size-4 text-green-500 mr-2"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":52,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":52,"endColumn":80,"fix":{"range":[2748,2799],"text":"text-sm font-medium text-red-600 hover:text-red-800"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":12,"source":"import { Specialist } from '@/types'; // Assuming Specialist type is defined in types/index.ts or similar\r\n\r\ninterface SpecialistsListProps {\r\n  specialists: Specialist[];\r\n  onRemove: (specialistId: string) => void;\r\n}\r\n\r\nexport default function SpecialistsList({ specialists, onRemove }: SpecialistsListProps) {\r\n  return (\r\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n      {specialists.map(specialist => (\r\n        <div key={specialist.id} className=\"bg-white rounded-lg shadow-md overflow-hidden\">\r\n          <div className=\"p-6\">\r\n            <h2 className=\"text-xl font-semibold text-gray-800 mb-2\">\r\n              {specialist.voornaam} {specialist.achternaam}\r\n            </h2>\r\n            <p className=\"text-gray-600 mb-4\">{specialist.email}</p>\r\n            \r\n            <div className=\"mb-4\">\r\n              <h3 className=\"text-sm font-medium text-gray-700 mb-2\">Toegangsrechten:</h3>\r\n              <ul className=\"text-sm text-gray-600\">\r\n                {specialist.toegangsrechten.includes('view_tasks') && (\r\n                  <li className=\"flex items-center\">\r\n                    <svg className=\"w-4 h-4 text-green-500 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M5 13l4 4L19 7\"></path>\r\n                    </svg>\r\n                    Kan uw taken bekijken\r\n                  </li>\r\n                )}\r\n                {specialist.toegangsrechten.includes('view_logs') && (\r\n                  <li className=\"flex items-center\">\r\n                    <svg className=\"w-4 h-4 text-green-500 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M5 13l4 4L19 7\"></path>\r\n                    </svg>\r\n                    Kan uw logs bekijken\r\n                  </li>\r\n                )}\r\n                {specialist.toegangsrechten.includes('create_tasks') && (\r\n                  <li className=\"flex items-center\">\r\n                    <svg className=\"w-4 h-4 text-green-500 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M5 13l4 4L19 7\"></path>\r\n                    </svg>\r\n                    Kan taken voor u aanmaken\r\n                  </li>\r\n                )}\r\n              </ul>\r\n            </div>\r\n            \r\n            <div className=\"flex justify-end\">\r\n              <button\r\n                onClick={() => onRemove(specialist.id)}\r\n                className=\"text-red-600 hover:text-red-800 text-sm font-medium\"\r\n              >\r\n                Verwijderen\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\specialisten\\SpecialistsListContainer.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"`@/hooks/useSupabaseQuery` import should occur after import of `@/context/NotificationContext`","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":85,"fix":{"range":[74,455],"text":"import { useDeleteSpecialistPatientRelation } from '@/hooks/useMutations';\r\nimport { ConditionalRender } from '@/components/ui/ConditionalRender';\r\nimport SpecialistCard from './SpecialistCard';\r\nimport { useNotification } from '@/context/NotificationContext';\r\nimport { useMySpecialists, SpecialistWithRelation } from '@/hooks/useSupabaseQuery'; // Import SpecialistWithRelation\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/hooks/useMutations` import should occur after import of `@/context/NotificationContext`","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":75,"fix":{"range":[193,455],"text":"import { ConditionalRender } from '@/components/ui/ConditionalRender';\r\nimport SpecialistCard from './SpecialistCard';\r\nimport { useNotification } from '@/context/NotificationContext';\r\nimport { useDeleteSpecialistPatientRelation } from '@/hooks/useMutations';\r\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":71,"fix":{"range":[339,339],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":47,"fix":{"range":[387,387],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`./SpecialistCard` import should occur after import of `@/lib/error-handler`","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":47,"fix":{"range":[341,508],"text":"import { useNotification } from '@/context/NotificationContext';\r\nimport { ErrorMessage } from '@/lib/error-handler';\r\nimport SpecialistCard from './SpecialistCard';\r\n"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":13,"column":8,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":13,"endColumn":65,"fix":{"range":[730,775],"text":"rounded-lg bg-white p-8 text-center shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":14,"column":45,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":14,"endColumn":93,"fix":{"range":[834,870],"text":"mx-auto mb-4 h-16 w-16 text-gray-300"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-16, w-16' could be replaced by the 'size-16' shorthand!","line":14,"column":45,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":14,"endColumn":93,"fix":{"range":[834,870],"text":"size-16 mx-auto text-gray-300 mb-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":17,"column":9,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":17,"endColumn":61,"fix":{"range":[1171,1211],"text":"mb-2 text-xl font-semibold text-gray-700"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":24,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":24,"endColumn":41},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":74,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":74,"endColumn":78,"fix":{"range":[3466,3518],"text":"grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3"}}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":5,"fixableWarningCount":5,"source":"'use client';\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\nimport { useMySpecialists, SpecialistWithRelation } from '@/hooks/useSupabaseQuery'; // Import SpecialistWithRelation\r\nimport { useDeleteSpecialistPatientRelation } from '@/hooks/useMutations';\r\nimport { ConditionalRender } from '@/components/ui/ConditionalRender';\r\nimport SpecialistCard from './SpecialistCard';\r\nimport { useNotification } from '@/context/NotificationContext';\r\nimport { ErrorMessage } from '@/lib/error-handler';\r\n// Profile is part of SpecialistWithRelation, SpecialistPatient might not be needed here directly\r\n\r\n// Empty state component for when a patient has no specialists\r\nconst EmptySpecialistsState = () => (\r\n  <div className=\"bg-white rounded-lg shadow-md p-8 text-center\">\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-16 w-16 mx-auto text-gray-300 mb-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" aria-hidden=\"true\">\r\n      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1.5} d=\"M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z\" />\r\n    </svg>\r\n    <h2 className=\"text-xl font-semibold text-gray-700 mb-2\">Geen specialisten gevonden</h2>\r\n    <p className=\"text-gray-500\">U heeft nog geen specialisten toegevoegd aan uw netwerk.</p>\r\n    {/* TODO: Add a button/link to a page where patient can search/add specialists if that flow exists */}\r\n  </div>\r\n);\r\n\r\n// This container is for a PATIENT viewing THEIR specialists.\r\nexport function SpecialistsListContainer() {\r\n  const { user } = useAuth();\r\n  const patientId = user?.id;\r\n\r\n  const { \r\n    data: specialists, \r\n    isLoading, \r\n    error, \r\n    isError \r\n  } = useMySpecialists(patientId);\r\n\r\n  // Note: useDeleteSpecialistPatientRelation is in useMutations.ts, not useSupabaseQuery.ts\r\n  // This needs to be imported from the correct file. Assuming it's available.\r\n  // For now, I'll proceed as if it's correctly imported.\r\n  // const { mutate: deleteRelation, isPending: isDeleting } = useDeleteSpecialistPatientRelation();\r\n  \r\n  // Placeholder for delete mutation until import is confirmed/corrected\r\n  const deleteRelationMutation = useDeleteSpecialistPatientRelation();\r\n  const isDeleting = deleteRelationMutation.isPending;\r\n\r\n\r\n  const { addNotification } = useNotification();\r\n\r\n  const handleDeleteRelation = (relationId: string) => {\r\n    if (!patientId) {\r\n      addNotification({ type: 'error', message: 'Gebruiker niet gevonden, kan relatie niet verwijderen.' });\r\n      return;\r\n    }\r\n    \r\n    deleteRelationMutation.mutate({ relationshipId: relationId, currentUserId: patientId }, {\r\n      onSuccess: () => {\r\n        addNotification({ type: 'success', message: 'Specialist succesvol verwijderd uit uw lijst.' });\r\n        // Invalidation is handled by the hook, which should refetch useMySpecialists\r\n      },\r\n      onError: (err: ErrorMessage) => {\r\n        addNotification({ type: 'error', message: err.userMessage || 'Fout bij verwijderen specialist.' });\r\n      }\r\n    });\r\n  };\r\n  \r\n  return (\r\n    <ConditionalRender\r\n      isLoading={isLoading}\r\n      isError={isError}\r\n      error={error}\r\n      data={specialists} // specialists is now SpecialistWithRelation[]\r\n      skeletonType=\"card\" \r\n      emptyFallback={<EmptySpecialistsState />}\r\n    >\r\n      {(resolvedSpecialists: SpecialistWithRelation[]) => ( // Explicitly type resolvedSpecialists\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n          {resolvedSpecialists.map(specialistWithRelation => (\r\n            <SpecialistCard\r\n              key={specialistWithRelation.id}\r\n              specialist={specialistWithRelation} // Pass the whole object\r\n              onDelete={() => handleDeleteRelation(specialistWithRelation.relationId)} // Pass relationId\r\n              isDeleting={isDeleting} \r\n            />\r\n          ))}\r\n        </div>\r\n      )}\r\n    </ConditionalRender>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\subscription\\PricingTables.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":45,"fix":{"range":[59,59],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":62,"fix":{"range":[150,150],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":11,"column":1,"nodeType":"ImportDeclaration","endLine":11,"endColumn":54,"fix":{"range":[728,728],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/lib/stripe` import should occur before import of `@/types/subscription`","line":11,"column":1,"nodeType":"ImportDeclaration","endLine":11,"endColumn":54,"fix":{"range":[564,730],"text":"import { createCheckoutSession } from '@/lib/stripe';\r\nimport { patientPlans, specialistPlans, SubscriptionPlan, subscriptionFeatures } from '@/types/subscription';\r\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":12,"column":1,"nodeType":"ImportDeclaration","endLine":12,"endColumn":38,"fix":{"range":[784,784],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`lucide-react` import should occur before import of `next/navigation`","line":12,"column":1,"nodeType":"ImportDeclaration","endLine":12,"endColumn":38,"fix":{"range":[61,786],"text":"import { Check } from 'lucide-react'; // X is not used\r\nimport { useSearchParams, useRouter } from 'next/navigation'; // useRouter voor navigatie\r\n// import { Button } from '@/components/ds/atoms/Button'; // Placeholder\r\n// import { Card } from '@/components/ds/atoms/Card'; // Placeholder\r\n// import { Grid } from '@/components/ds/layout/Grid'; // Placeholder\r\n// import { Toggle } from '@/components/ds/atoms/Toggle'; // Placeholder\r\nimport { useAuth } from '@/components/auth/AuthProvider'; \r\nimport { useFeatureAccess } from '@/hooks/useFeatureAccess'; \r\nimport { patientPlans, specialistPlans, SubscriptionPlan, subscriptionFeatures } from '@/types/subscription';\r\nimport { createCheckoutSession } from '@/lib/stripe';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/context/NotificationContext` import should occur before import of `@/hooks/useFeatureAccess`","line":13,"column":1,"nodeType":"ImportDeclaration","endLine":13,"endColumn":65,"fix":{"range":[501,852],"text":"import { useNotification } from '@/context/NotificationContext';\r\nimport { useFeatureAccess } from '@/hooks/useFeatureAccess'; \r\nimport { patientPlans, specialistPlans, SubscriptionPlan, subscriptionFeatures } from '@/types/subscription';\r\nimport { createCheckoutSession } from '@/lib/stripe';\r\nimport { Check } from 'lucide-react'; // X is not used\r\n"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":144,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":147,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1057,1060],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1057,1060],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":19,"column":5,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":19,"endColumn":478,"fix":{"range":[1349,1368],"text":"px-3 py-1.5 text-xs"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":19,"column":5,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":19,"endColumn":478,"fix":{"range":[1119,1303],"text":"`rounded-md px-4 py-2 text-sm font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":24,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":24,"endColumn":121,"fix":{"range":[1681,1777],"text":"mr-2 inline-block h-4 w-4 animate-spin rounded-full border-2 border-current border-t-transparent"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-4, w-4' could be replaced by the 'size-4' shorthand!","line":24,"column":13,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":24,"endColumn":121,"fix":{"range":[1681,1777],"text":"inline-block size-4 border-2 border-t-transparent border-current rounded-full animate-spin mr-2"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1925,1928],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1925,1928],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":31,"column":8,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":31,"endColumn":68,"fix":{"range":[1954,1987],"text":"`rounded-lg bg-white shadow-md ${"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'flex-shrink-0' should be updated to 'shrink-0' in Tailwind CSS v3!","line":42,"column":9,"nodeType":"JSXAttribute","messageId":"classnameChanged","endLine":44,"endColumn":229,"fix":{"range":[2404,2623],"text":"} relative inline-flex h-6 w-11 shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2`"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":49,"column":9,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":51,"endColumn":135,"fix":{"range":[2819,2944],"text":"} pointer-events-none inline-block size-5 transform rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out`"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'transform' is not needed in Tailwind CSS v3!","line":49,"column":9,"nodeType":"JSXAttribute","messageId":"classnameNotNeeded","endLine":51,"endColumn":135,"fix":{"range":[2819,2944],"text":"} pointer-events-none inline-block h-5 w-5 rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out`"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":57,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":57,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":104,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4952,4955],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4952,4955],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":138,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":138,"endColumn":44,"fix":{"range":[6437,6452],"text":"p-8 text-center"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":143,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":143,"endColumn":48,"fix":{"range":[6554,6578],"text":"mb-8 flex justify-center"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":144,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":144,"endColumn":74,"fix":{"range":[6606,6654],"text":"inline-flex rounded-md bg-gray-100 p-1 shadow-sm"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":146,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":150,"endColumn":16,"fix":{"range":[6700,6762],"text":"`rounded-md px-4 py-2 text-sm font-medium transition-colors ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":157,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":161,"endColumn":16,"fix":{"range":[7137,7199],"text":"`rounded-md px-4 py-2 text-sm font-medium transition-colors ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":170,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":170,"endColumn":72,"fix":{"range":[7604,7652],"text":"mb-12 flex items-center justify-center space-x-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":179,"column":27,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":179,"endColumn":67,"fix":{"range":[8069,8097],"text":"font-semibold text-green-600"}},{"ruleId":"tailwindcss/no-custom-classname","severity":1,"message":"Classname 'md:grid-cols-' is not a Tailwind CSS class!","line":183,"column":12,"nodeType":"JSXAttribute","messageId":"customClassnameDetected","endLine":183,"endColumn":108},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":183,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":183,"endColumn":108,"fix":{"range":[8183,8216],"text":"`md:grid-cols- grid grid-cols-1${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":187,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":191,"endColumn":16,"fix":{"range":[8449,8531],"text":"relative border-2 border-purple-500 shadow-xl ring-2 ring-purple-300 ring-offset-2"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":187,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":191,"endColumn":16,"fix":{"range":[8379,8400],"text":"`flex flex-col p-6 ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":194,"column":20,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":194,"endColumn":89,"fix":{"range":[8670,8727],"text":"absolute left-1/2 top-0 -translate-x-1/2 -translate-y-1/2"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":195,"column":23,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":195,"endColumn":131,"fix":{"range":[8764,8860],"text":"inline-flex items-center rounded-full bg-purple-500 px-3 py-0.5 text-xs font-semibold text-white"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'flex-grow' should be updated to 'grow' in Tailwind CSS v3!","line":201,"column":18,"nodeType":"JSXAttribute","messageId":"classnameChanged","endLine":201,"endColumn":39,"fix":{"range":[9002,9011],"text":"grow"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":202,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":202,"endColumn":75,"fix":{"range":[9044,9088],"text":"text-center text-2xl font-bold text-gray-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":203,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":203,"endColumn":81,"fix":{"range":[9136,9187],"text":"mt-3 min-h-[40px] text-center text-sm text-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":205,"column":20,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":205,"endColumn":53,"fix":{"range":[9259,9280],"text":"mb-8 mt-6 text-center"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":212,"column":24,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":212,"endColumn":62,"fix":{"range":[9685,9711],"text":"mt-1 text-xs text-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":218,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":218,"endColumn":45,"fix":{"range":[9897,9911],"text":"mb-8 space-y-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":224,"column":28,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":224,"endColumn":88,"fix":{"range":[10365,10413],"text":"mr-2 mt-0.5 h-5 w-5 flex-shrink-0 text-green-500"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":224,"column":28,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":224,"endColumn":88,"fix":{"range":[10365,10413],"text":"size-5 text-green-500 mr-2 mt-0.5 flex-shrink-0"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'flex-shrink-0' should be updated to 'shrink-0' in Tailwind CSS v3!","line":224,"column":28,"nodeType":"JSXAttribute","messageId":"classnameChanged","endLine":224,"endColumn":88,"fix":{"range":[10365,10413],"text":"h-5 w-5 text-green-500 mr-2 mt-0.5 shrink-0"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":237,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":237,"endColumn":206,"fix":{"range":[10978,11022],"text":"cursor-not-allowed bg-gray-400 text-gray-700"}}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":32,"fixableErrorCount":7,"fixableWarningCount":30,"source":"'use client';\r\nimport { useState, useEffect } from 'react';\r\nimport { useSearchParams, useRouter } from 'next/navigation'; // useRouter voor navigatie\r\n// import { Button } from '@/components/ds/atoms/Button'; // Placeholder\r\n// import { Card } from '@/components/ds/atoms/Card'; // Placeholder\r\n// import { Grid } from '@/components/ds/layout/Grid'; // Placeholder\r\n// import { Toggle } from '@/components/ds/atoms/Toggle'; // Placeholder\r\nimport { useAuth } from '@/components/auth/AuthProvider'; \r\nimport { useFeatureAccess } from '@/hooks/useFeatureAccess'; \r\nimport { patientPlans, specialistPlans, SubscriptionPlan, subscriptionFeatures } from '@/types/subscription';\r\nimport { createCheckoutSession } from '@/lib/stripe';\r\nimport { Check } from 'lucide-react'; // X is not used\r\nimport { useNotification } from '@/context/NotificationContext';\r\n\r\n// Basis Button component als ds/atoms/Button niet bestaat\r\nconst Button = ({ onClick, children, variant = 'primary', className: btnClassName = '', loading, disabled, fullWidth, size = 'md', ...props }: any) => (\r\n  <button \r\n    onClick={onClick} \r\n    className={`px-4 py-2 text-sm font-medium rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed ${fullWidth ? 'w-full' : ''} ${size === 'sm' ? 'text-xs px-3 py-1.5' : ''} ${btnClassName} ${variant === 'primary' ? 'bg-purple-600 text-white hover:bg-purple-700' : variant === 'danger' ? 'bg-red-600 text-white hover:bg-red-700' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`}\r\n    disabled={loading || disabled}\r\n    {...props}\r\n  >\r\n    {loading ? (\r\n      <span className=\"inline-block h-4 w-4 border-2 border-t-transparent border-current rounded-full animate-spin mr-2\" />\r\n    ) : null}\r\n    {children}\r\n  </button>\r\n);\r\n// Basis Card component\r\nconst Card = ({ children, className: cardClassName = '', ...props }: any) => (\r\n  <div className={`bg-white rounded-lg shadow-md ${cardClassName}`} {...props}>\r\n    {children}\r\n  </div>\r\n);\r\n// Basis Toggle component\r\nconst Toggle = ({ checked, onChange }: { checked: boolean, onChange: () => void, size?: string }) => ( // size prop was unused\r\n    <button\r\n        type=\"button\"\r\n        role=\"switch\"\r\n        aria-checked={checked}\r\n        onClick={onChange}\r\n        className={`${\r\n        checked ? 'bg-purple-600' : 'bg-gray-200'\r\n        } relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2`}\r\n    >\r\n        <span className=\"sr-only\">Use setting</span>\r\n        <span\r\n        aria-hidden=\"true\"\r\n        className={`${\r\n            checked ? 'translate-x-5' : 'translate-x-0'\r\n        } pointer-events-none inline-block h-5 w-5 transform rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out`}\r\n        />\r\n    </button>\r\n);\r\n\r\n\r\nexport function PricingTables() {\r\n  const searchParams = useSearchParams();\r\n  const router = useRouter();\r\n  const userTypeParam = searchParams.get('userType');\r\n  // const upgradeParam = searchParams.get('upgrade'); // Unused variable\r\n  \r\n  const { user, profile, loading: loadingAuth } = useAuth();\r\n  const { subscription, isLoadingSubscription } = useFeatureAccess(); // isLoadingSubscription van hier\r\n  const { addNotification } = useNotification();\r\n  \r\n  const [activeTab, setActiveTab] = useState<'patient' | 'specialist'>('patient');\r\n  const [yearlyBilling, setYearlyBilling] = useState(true);\r\n  const [processingPlanId, setProcessingPlanId] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (!loadingAuth) { // Wacht tot auth geladen is\r\n      const initialUserType = profile?.type === 'specialist' ? 'specialist' : 'patient';\r\n      setActiveTab(userTypeParam === 'patient' || userTypeParam === 'specialist' ? userTypeParam : initialUserType);\r\n    }\r\n  }, [profile, userTypeParam, loadingAuth]);\r\n  \r\n  const plansToDisplay = activeTab === 'patient' ? patientPlans : specialistPlans;\r\n  \r\n  const handlePlanSelect = async (plan: SubscriptionPlan) => {\r\n    if (!user || !profile) {\r\n      addNotification({type: 'info', message: 'Log in of registreer om een abonnement te kiezen.'});\r\n      router.push(`/auth/login?returnTo=/pricing?userType=${activeTab}&plan=${plan.id}`);\r\n      return;\r\n    }\r\n    \r\n    if (plan.id === 'free') {\r\n        addNotification({type: 'info', message: 'U gebruikt al het gratis plan.'});\r\n        return;\r\n    }\r\n    if (plan.ctaText === 'Neem Contact Op') {\r\n        router.push('/contact?subject=Enterprise Plan'); // Voorbeeld\r\n        return;\r\n    }\r\n\r\n    try {\r\n      setProcessingPlanId(plan.id);\r\n      await createCheckoutSession(\r\n        plan,\r\n        user.id,\r\n        yearlyBilling ? 'yearly' : 'monthly',\r\n        user.email // Gebruik user.email van useAuth()\r\n      );\r\n    } catch (error: any) {\r\n      console.error('Error creating checkout session:', error);\r\n      addNotification({type: 'error', message: error.message || 'Kon checkout sessie niet starten.'});\r\n    } finally {\r\n      setProcessingPlanId(null);\r\n    }\r\n  };\r\n  \r\n  const isPlanDisabled = (plan: SubscriptionPlan) => {\r\n    if (isLoadingSubscription || !subscription || subscription.status !== 'active') return false;\r\n    return subscription.planId === plan.id && subscription.billingCycle === (yearlyBilling ? 'yearly' : 'monthly');\r\n  };\r\n  \r\n  const getPlanCTA = (plan: SubscriptionPlan) => {\r\n    if (isLoadingSubscription) return \"Laden...\";\r\n    if (!subscription || subscription.status !== 'active') {\r\n      return plan.ctaText;\r\n    }\r\n    if (subscription.planId === plan.id && subscription.billingCycle === (yearlyBilling ? 'yearly' : 'monthly')) {\r\n      return 'Huidig abonnement';\r\n    }\r\n    if (plan.price.monthly === 0 && plan.price.yearly === 0) return \"Start Gratis\";\r\n    \r\n    // Check if current plan is lower than the selected plan\r\n    const currentPlanIndex = plansToDisplay.findIndex(p => p.id === subscription.planId);\r\n    const selectedPlanIndex = plansToDisplay.findIndex(p => p.id === plan.id);\r\n\r\n    if (selectedPlanIndex > currentPlanIndex) return 'Upgraden';\r\n    if (selectedPlanIndex < currentPlanIndex) return 'Downgraden';\r\n    \r\n    return 'Wijzig Facturering'; // If same plan, different billing cycle\r\n  };\r\n  \r\n  if (loadingAuth) {\r\n    return <div className=\"text-center p-8\">Authenticatie laden...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"py-8\">\r\n      <div className=\"flex justify-center mb-8\">\r\n        <div className=\"inline-flex rounded-md shadow-sm p-1 bg-gray-100\">\r\n          <button\r\n            className={`px-4 py-2 text-sm font-medium rounded-md transition-colors ${\r\n              activeTab === 'patient'\r\n                ? 'bg-white text-purple-700 shadow'\r\n                : 'text-gray-600 hover:text-gray-800'\r\n            }`}\r\n            onClick={() => setActiveTab('patient')}\r\n            aria-pressed={activeTab === 'patient'}\r\n          >\r\n            Voor Patiënten\r\n          </button>\r\n          <button\r\n            className={`px-4 py-2 text-sm font-medium rounded-md transition-colors ${\r\n              activeTab === 'specialist'\r\n                ? 'bg-white text-purple-700 shadow'\r\n                : 'text-gray-600 hover:text-gray-800'\r\n            }`}\r\n            onClick={() => setActiveTab('specialist')}\r\n            aria-pressed={activeTab === 'specialist'}\r\n          >\r\n            Voor Specialisten\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"flex justify-center items-center space-x-3 mb-12\">\r\n        <span className={`text-sm font-medium ${!yearlyBilling ? 'text-purple-700' : 'text-gray-500'}`}>\r\n          Maandelijks\r\n        </span>\r\n        <Toggle\r\n          checked={yearlyBilling}\r\n          onChange={() => setYearlyBilling(!yearlyBilling)}\r\n        />\r\n        <span className={`text-sm font-medium ${yearlyBilling ? 'text-purple-700' : 'text-gray-500'}`}>\r\n          Jaarlijks <span className=\"text-green-600 font-semibold\">(Bespaar ~16%)</span>\r\n        </span>\r\n      </div>\r\n      \r\n      <div className={`grid grid-cols-1 md:grid-cols-${Math.min(plansToDisplay.length, 3)} gap-6 lg:gap-8`}>\r\n        {plansToDisplay.map((plan) => (\r\n          <Card\r\n            key={plan.id}\r\n            className={`p-6 flex flex-col ${\r\n              plan.popular\r\n                ? 'border-2 border-purple-500 shadow-xl relative ring-2 ring-purple-300 ring-offset-2'\r\n                : 'border border-gray-200'\r\n            }`}\r\n          >\r\n            {plan.popular && (\r\n              <div className=\"absolute top-0 -translate-y-1/2 left-1/2 -translate-x-1/2\">\r\n                <span className=\"inline-flex items-center px-3 py-0.5 rounded-full text-xs font-semibold bg-purple-500 text-white\">\r\n                  Meest Gekozen\r\n                </span>\r\n              </div>\r\n            )}\r\n            \r\n            <div className=\"flex-grow\">\r\n              <h3 className=\"text-2xl font-bold text-gray-800 text-center\">{plan.name}</h3>\r\n              <p className=\"text-gray-500 mt-3 text-sm text-center min-h-[40px]\">{plan.description}</p>\r\n              \r\n              <div className=\"mt-6 mb-8 text-center\">\r\n                <span className=\"text-4xl font-extrabold text-gray-900\">\r\n                  €{yearlyBilling ? (plan.price.yearly / 12).toFixed(2) : plan.price.monthly.toFixed(2)}\r\n                </span>\r\n                <span className=\"text-base font-medium text-gray-500\">/maand</span>\r\n                \r\n                {yearlyBilling && plan.id !== 'free' && (\r\n                  <div className=\"text-xs text-gray-500 mt-1\">\r\n                    Totaal €{plan.price.yearly.toFixed(2)} per jaar\r\n                  </div>\r\n                )}\r\n              </div>\r\n              \r\n              <ul className=\"space-y-3 mb-8\">\r\n                {subscriptionFeatures\r\n                  .filter(f => plan.features.includes(f.id) || (plan.id !== 'free' && f.tiers.includes(plan.id))) // Toon alle features van het plan\r\n                  .sort((a,b) => (a.highlight === b.highlight)? 0 : a.highlight? -1 : 1) // Highlighted bovenaan\r\n                  .map((feature) => (\r\n                  <li key={feature.id} className=\"flex items-start\">\r\n                    <Check className=\"h-5 w-5 text-green-500 mr-2 mt-0.5 flex-shrink-0\" />\r\n                    <span className=\"text-sm text-gray-700\">{feature.name}</span>\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n            \r\n            <Button\r\n              fullWidth\r\n              variant={plan.popular ? 'primary' : 'outline'}\r\n              onClick={() => handlePlanSelect(plan)}\r\n              loading={processingPlanId === plan.id}\r\n              disabled={isPlanDisabled(plan) || (processingPlanId !== null && processingPlanId !== plan.id)}\r\n              className={isPlanDisabled(plan) ? 'bg-gray-400 text-gray-700 cursor-not-allowed' : plan.popular ? 'bg-purple-600 hover:bg-purple-700' : 'border-purple-600 text-purple-600 hover:bg-purple-50'}\r\n            >\r\n              {getPlanCTA(plan)}\r\n            </Button>\r\n          </Card>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\subscription\\SubscriptionManagement.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":45,"fix":{"range":[59,59],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":30,"fix":{"range":[152,152],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`next/link` import should occur before import of `next/navigation`","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":30,"fix":{"range":[61,154],"text":"import Link from 'next/link'; // Import Link\r\nimport { useRouter } from 'next/navigation'; \r\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setError' is assigned a value but never used.","line":30,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":25},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":94,"column":3,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":94,"endColumn":16,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[3523,3536],"text":"// @ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":101,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":101,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":123,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4482,4485],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4482,4485],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":143,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":143,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5134,5137],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5134,5137],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":152,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":152,"endColumn":45,"fix":{"range":[5323,5344],"text":"mx-auto max-w-2xl p-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":153,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":153,"endColumn":73,"fix":{"range":[5372,5419],"text":"animate-pulse rounded-lg bg-white p-6 shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":154,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":154,"endColumn":62,"fix":{"range":[5449,5483],"text":"mb-4 h-8 w-1/3 rounded bg-gray-300"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":155,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":155,"endColumn":62,"fix":{"range":[5519,5553],"text":"mb-2 h-4 w-2/3 rounded bg-gray-300"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":156,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":156,"endColumn":62,"fix":{"range":[5589,5623],"text":"mb-6 h-4 w-1/2 rounded bg-gray-300"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":157,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":157,"endColumn":58,"fix":{"range":[5659,5689],"text":"h-10 w-1/4 rounded bg-gray-300"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":165,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":165,"endColumn":45,"fix":{"range":[5798,5819],"text":"mx-auto max-w-2xl p-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":166,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":166,"endColumn":89,"fix":{"range":[5847,5910],"text":"rounded-lg border-red-300 bg-red-100 p-6 text-red-700 shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":167,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":167,"endColumn":53,"fix":{"range":[5939,5965],"text":"mb-2 text-lg font-semibold"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":170,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":170,"endColumn":99,"fix":{"range":[6118,6192],"text":"mt-4 rounded border border-red-300 px-4 py-2 text-red-700 hover:bg-red-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":182,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":182,"endColumn":45,"fix":{"range":[6469,6490],"text":"mx-auto max-w-2xl p-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":183,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":183,"endColumn":59,"fix":{"range":[6518,6551],"text":"rounded-lg bg-white p-6 shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":184,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":184,"endColumn":53,"fix":{"range":[6580,6606],"text":"mb-4 text-xl font-semibold"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":185,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":185,"endColumn":44,"fix":{"range":[6661,6679],"text":"mb-6 text-gray-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":189,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":189,"endColumn":104,"fix":{"range":[6871,6950],"text":"rounded-md bg-purple-600 px-6 py-2 font-semibold text-white hover:bg-purple-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":200,"column":10,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":200,"endColumn":43,"fix":{"range":[7152,7173],"text":"mx-auto max-w-2xl p-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":201,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":201,"endColumn":57,"fix":{"range":[7199,7232],"text":"rounded-lg bg-white p-6 shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":202,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":202,"endColumn":65,"fix":{"range":[7259,7299],"text":"mb-6 text-xl font-semibold text-gray-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":204,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":204,"endColumn":60,"fix":{"range":[7355,7389],"text":"mb-6 border-b border-gray-200 pb-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":214,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":214,"endColumn":44,"fix":{"range":[7792,7810],"text":"mt-1 text-gray-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":219,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":219,"endColumn":54,"fix":{"range":[8026,8052],"text":"mt-2 text-sm text-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":225,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":225,"endColumn":68,"fix":{"range":[8294,8336],"text":"mb-6 grid grid-cols-1 gap-6 md:grid-cols-2"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":226,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":226,"endColumn":53,"fix":{"range":[8366,8391],"text":"rounded-lg bg-gray-50 p-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":227,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":227,"endColumn":59,"fix":{"range":[8422,8452],"text":"mb-3 font-medium text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":230,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":230,"endColumn":221,"fix":{"range":[8667,8706],"text":"cursor-default bg-purple-600 text-white"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":230,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":230,"endColumn":221,"fix":{"range":[8711,8774],"text":"border border-gray-300 bg-white text-gray-700 hover:bg-gray-100"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":230,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":230,"endColumn":221,"fix":{"range":[8585,8624],"text":"`w-full rounded-md px-4 py-2 text-sm ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":237,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":237,"endColumn":220,"fix":{"range":[9130,9169],"text":"cursor-default bg-purple-600 text-white"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":237,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":237,"endColumn":220,"fix":{"range":[9174,9237],"text":"border border-gray-300 bg-white text-gray-700 hover:bg-gray-100"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":237,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":237,"endColumn":220,"fix":{"range":[9049,9088],"text":"`w-full rounded-md px-4 py-2 text-sm ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":246,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":246,"endColumn":53,"fix":{"range":[9577,9602],"text":"rounded-lg bg-gray-50 p-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":247,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":247,"endColumn":59,"fix":{"range":[9633,9663],"text":"mb-3 font-medium text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":250,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":250,"endColumn":105,"fix":{"range":[9786,9862],"text":"w-full rounded-md bg-blue-500 px-4 py-2 text-sm text-white hover:bg-blue-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":257,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":257,"endColumn":174,"fix":{"range":[10065,10104],"text":"`w-full rounded-md px-4 py-2 text-sm ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":265,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":265,"endColumn":55,"fix":{"range":[10555,10580],"text":"mt-2 text-xs text-red-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":272,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":272,"endColumn":64,"fix":{"range":[10812,10850],"text":"mt-8 text-center text-sm text-gray-500"}}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":38,"fixableErrorCount":3,"fixableWarningCount":36,"source":"'use client';\r\nimport { useState, useEffect } from 'react';\r\nimport { useRouter } from 'next/navigation'; \r\nimport Link from 'next/link'; // Import Link\r\n// import { Button } from '@/components/ds/atoms/Button'; // Placeholder\r\n// import { Card } from '@/components/ds/atoms/Card'; // Placeholder\r\n// import { Container } from '@/components/ds/layout/Container'; // Placeholder\r\n// import { Grid } from '@/components/ds/layout/Grid'; // Placeholder\r\nimport { useAuth } from '@/components/auth/AuthProvider'; // Gebruik bestaande AuthProvider\r\n// import { useSubscription } from '@/hooks/useSubscription'; // Placeholder hook\r\n// import { formatCurrency } from '@/utils/format'; // Placeholder util - Removed as formatCurrency is defined locally or globally\r\nimport { useNotification } from '@/context/NotificationContext'; // Voor feedback\r\n\r\n// Placeholder voor useSubscription hook data\r\ninterface MockSubscription {\r\n  id: string;\r\n  planId: string;\r\n  planName: string;\r\n  status: 'active' | 'cancelled' | 'past_due' | 'incomplete';\r\n  billingCycle: 'monthly' | 'yearly';\r\n  amount: number;\r\n  renewalDate: string | null;\r\n  patientCount?: number; // Voor specialisten\r\n}\r\n\r\n// Placeholder voor useSubscription hook\r\nconst useSubscription = (userId: string | undefined) => {\r\n  const [subscription, setSubscription] = useState<MockSubscription | null>(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState<Error | null>(null);\r\n  const { addNotification } = useNotification();\r\n\r\n  useEffect(() => {\r\n    if (!userId) {\r\n      setIsLoading(false);\r\n      setSubscription(null);\r\n      return;\r\n    }\r\n    // Simuleer API call\r\n    setIsLoading(true);\r\n    setTimeout(() => {\r\n      // Voorbeeld: actieve gebruiker met een 'basic' plan\r\n      setSubscription({\r\n        id: 'sub_mock123',\r\n        planId: 'basic',\r\n        planName: 'Basis Plan',\r\n        status: 'active',\r\n        billingCycle: 'monthly',\r\n        amount: 4.99,\r\n        renewalDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\r\n      });\r\n      setIsLoading(false);\r\n    }, 1000);\r\n  }, [userId]);\r\n\r\n  const cancelSubscription = async () => {\r\n    // Simuleer API call\r\n    return new Promise<void>((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (subscription) {\r\n          setSubscription({ ...subscription, status: 'cancelled' });\r\n          addNotification({type: 'success', message: 'Abonnement succesvol geannuleerd.'});\r\n          resolve();\r\n        } else {\r\n          addNotification({type: 'error', message: 'Kon abonnement niet annuleren.'});\r\n          reject(new Error('Geen abonnement gevonden om te annuleren.'));\r\n        }\r\n      }, 500);\r\n    });\r\n  };\r\n\r\n  const updateSubscription = async (updates: Partial<MockSubscription>) => {\r\n     // Simuleer API call\r\n    return new Promise<void>((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (subscription) {\r\n          setSubscription({ ...subscription, ...updates });\r\n           addNotification({type: 'success', message: 'Abonnement succesvol bijgewerkt.'});\r\n          resolve();\r\n        } else {\r\n          addNotification({type: 'error', message: 'Kon abonnement niet bijwerken.'});\r\n          reject(new Error('Geen abonnement gevonden om bij te werken.'));\r\n        }\r\n      }, 500);\r\n    });\r\n  };\r\n\r\n  return { subscription, isLoading, error, cancelSubscription, updateSubscription };\r\n};\r\n\r\n\r\n// Placeholder voor formatCurrency util\r\nif (typeof formatCurrency !== 'function') {\r\n  // @ts-ignore\r\n  global.formatCurrency = (amount: number, currency = 'EUR') => {\r\n    return new Intl.NumberFormat('nl-NL', { style: 'currency', currency }).format(amount);\r\n  };\r\n}\r\n\r\n\r\nexport function SubscriptionManagement() {\r\n  const { user } = useAuth();\r\n  const { subscription, isLoading, error, cancelSubscription, updateSubscription } = useSubscription(user?.id);\r\n  const [confirmCancel, setConfirmCancel] = useState(false);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const router = useRouter();\r\n  \r\n  const handleCancelClick = () => {\r\n    if (!confirmCancel) {\r\n      setConfirmCancel(true);\r\n      return;\r\n    }\r\n    handleCancelConfirm();\r\n  };\r\n  \r\n  const handleCancelConfirm = async () => {\r\n    if (!subscription) return;\r\n    \r\n    try {\r\n      setIsProcessing(true);\r\n      await cancelSubscription();\r\n      // router.refresh(); // Kan nuttig zijn, of laat React Query invalidation het werk doen\r\n    } catch (err: any) {\r\n      console.error('Error cancelling subscription:', err);\r\n      // Notificatie wordt al afgehandeld in de mock hook\r\n    } finally {\r\n      setIsProcessing(false);\r\n      setConfirmCancel(false);\r\n    }\r\n  };\r\n  \r\n  const handleUpgrade = () => {\r\n    router.push('/pricing?upgrade=true'); // Stuur gebruiker naar prijzenpagina\r\n  };\r\n  \r\n  const handleChangeBilling = async (newCycle: 'monthly' | 'yearly') => {\r\n    if (!subscription || subscription.billingCycle === newCycle) return;\r\n    \r\n    try {\r\n      setIsProcessing(true);\r\n      await updateSubscription({ billingCycle: newCycle });\r\n      // router.refresh();\r\n    } catch (err: any) {\r\n      console.error('Error updating billing cycle:', err);\r\n    } finally {\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n  \r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"max-w-2xl mx-auto p-4\">\r\n        <div className=\"p-6 bg-white rounded-lg shadow-md animate-pulse\">\r\n          <div className=\"h-8 bg-gray-300 rounded w-1/3 mb-4\"></div>\r\n          <div className=\"h-4 bg-gray-300 rounded w-2/3 mb-2\"></div>\r\n          <div className=\"h-4 bg-gray-300 rounded w-1/2 mb-6\"></div>\r\n          <div className=\"h-10 bg-gray-300 rounded w-1/4\"></div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  if (error) {\r\n    return (\r\n      <div className=\"max-w-2xl mx-auto p-4\">\r\n        <div className=\"p-6 border-red-300 bg-red-100 text-red-700 rounded-lg shadow-md\">\r\n          <h2 className=\"text-lg font-semibold mb-2\">Er is een fout opgetreden</h2>\r\n          <p>{error.message || 'Kon abonnementsinformatie niet laden'}</p>\r\n          <button \r\n            className=\"mt-4 px-4 py-2 border border-red-300 text-red-700 rounded hover:bg-red-200\"\r\n            onClick={() => router.refresh()} // Simpele refresh\r\n          >\r\n            Probeer opnieuw\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  if (!subscription || subscription.status === 'cancelled') {\r\n    return (\r\n      <div className=\"max-w-2xl mx-auto p-4\">\r\n        <div className=\"p-6 bg-white rounded-lg shadow-md\">\r\n          <h2 className=\"text-xl font-semibold mb-4\">Geen actief abonnement</h2>\r\n          <p className=\"text-gray-600 mb-6\">\r\n            U heeft momenteel geen actief abonnement. Upgrade naar een betaald plan om toegang te krijgen tot premium functies.\r\n          </p>\r\n          <button \r\n            className=\"px-6 py-2 bg-purple-600 text-white font-semibold rounded-md hover:bg-purple-700\"\r\n            onClick={() => router.push('/pricing')}\r\n          >\r\n            Bekijk abonnementen\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <div className=\"max-w-2xl mx-auto p-4\">\r\n      <div className=\"p-6 bg-white rounded-lg shadow-md\">\r\n        <h2 className=\"text-xl font-semibold mb-6 text-gray-800\">Uw abonnement</h2>\r\n        \r\n        <div className=\"border-b border-gray-200 pb-4 mb-6\">\r\n          <div className=\"flex items-baseline\">\r\n            <span className=\"text-2xl font-bold text-purple-700\">\r\n              {subscription.planName}\r\n            </span>\r\n            <span className=\"ml-2 text-sm text-gray-500\">\r\n              ({subscription.billingCycle === 'monthly' ? 'Maandelijks' : 'Jaarlijks'})\r\n            </span>\r\n          </div>\r\n          \r\n          <p className=\"text-gray-600 mt-1\">\r\n            {formatCurrency(subscription.amount)} per {subscription.billingCycle === 'monthly' ? 'maand' : 'jaar'}\r\n          </p>\r\n          \r\n          {subscription.renewalDate && (\r\n            <p className=\"text-sm text-gray-500 mt-2\">\r\n              Volgende facturering op {new Date(subscription.renewalDate).toLocaleDateString('nl-NL', { year: 'numeric', month: 'long', day: 'numeric' })}\r\n            </p>\r\n          )}\r\n        </div>\r\n        \r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\r\n          <div className=\"p-4 bg-gray-50 rounded-lg\">\r\n            <h3 className=\"font-medium text-gray-700 mb-3\">Factureringsperiode wijzigen</h3>\r\n            <div className=\"flex space-x-2\">\r\n              <button\r\n                className={`px-4 py-2 text-sm rounded-md w-full ${subscription.billingCycle === 'monthly' ? 'bg-purple-600 text-white cursor-default' : 'bg-white border border-gray-300 text-gray-700 hover:bg-gray-100'}`}\r\n                disabled={isProcessing || subscription.billingCycle === 'monthly'}\r\n                onClick={() => handleChangeBilling('monthly')}\r\n              >\r\n                Maandelijks\r\n              </button>\r\n              <button\r\n                className={`px-4 py-2 text-sm rounded-md w-full ${subscription.billingCycle === 'yearly' ? 'bg-purple-600 text-white cursor-default' : 'bg-white border border-gray-300 text-gray-700 hover:bg-gray-100'}`}\r\n                disabled={isProcessing || subscription.billingCycle === 'yearly'}\r\n                onClick={() => handleChangeBilling('yearly')}\r\n              >\r\n                Jaarlijks <span className=\"text-xs\">(Bespaar)</span>\r\n              </button>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"p-4 bg-gray-50 rounded-lg\">\r\n            <h3 className=\"font-medium text-gray-700 mb-3\">Abonnement beheren</h3>\r\n            <div className=\"flex space-x-2\">\r\n              <button\r\n                className=\"px-4 py-2 text-sm bg-blue-500 text-white rounded-md hover:bg-blue-600 w-full\"\r\n                onClick={handleUpgrade}\r\n                disabled={isProcessing}\r\n              >\r\n                Upgraden\r\n              </button>\r\n              <button\r\n                className={`px-4 py-2 text-sm rounded-md w-full ${confirmCancel ? 'bg-red-600 text-white hover:bg-red-700' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`}\r\n                onClick={handleCancelClick}\r\n                disabled={isProcessing}\r\n              >\r\n                {isProcessing && confirmCancel ? 'Bezig...' : confirmCancel ? 'Bevestig Annulering' : 'Annuleren'}\r\n              </button>\r\n            </div>\r\n            {confirmCancel && !isProcessing && (\r\n              <p className=\"text-xs text-red-600 mt-2\">\r\n                Klik nogmaals om te bevestigen. Uw abonnement loopt door tot het einde van de huidige factureringsperiode.\r\n              </p>\r\n            )}\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"mt-8 text-sm text-gray-500 text-center\">\r\n          <p>\r\n            Vragen over uw abonnement?{' '}\r\n            <Link href=\"/contact\" className=\"text-purple-600 hover:underline\">\r\n              Neem contact op\r\n            </Link>.\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\subscription\\UpgradePrompt.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":34,"fix":{"range":[72,72],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":45,"fix":{"range":[118,118],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":92,"fix":{"range":[463,463],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`lucide-react` import should occur before import of `next/navigation`","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":46,"fix":{"range":[74,548],"text":"import { ArrowRight, X } from 'lucide-react'; // Gebruik lucide-react voor iconen\r\nimport { useRouter } from 'next/navigation';\r\n// import { Button } from '@/components/ds/atoms/Button'; // Placeholder\r\n// import { Card } from '@/components/ds/atoms/Card'; // Placeholder\r\nimport { useFeatureAccess } from '@/hooks/useFeatureAccess'; // Correct pad\r\nimport { patientPlans, specialistPlans, subscriptionFeatures } from '@/types/subscription'; // SubscriptionPlan was unused\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":20,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":20,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":123,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":126,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2595,2598],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2595,2598],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":68,"column":7,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":68,"endColumn":291,"fix":{"range":[2663,2799],"text":"`rounded-md px-4 py-2 text-sm font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 ${"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":77,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3263,3266],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3263,3266],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":78,"column":10,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":78,"endColumn":70,"fix":{"range":[3294,3327],"text":"`rounded-lg bg-white shadow-md ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":86,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":86,"endColumn":105,"fix":{"range":[3463,3544],"text":"fixed inset-0 z-[999] flex items-center justify-center bg-black bg-opacity-60 p-4"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'bg-opacity-60' should be replaced by an opacity suffix (eg. '/60')","line":86,"column":12,"nodeType":"JSXAttribute","messageId":"classnameOpacityDeprecated","endLine":86,"endColumn":105},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":87,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":87,"endColumn":70,"fix":{"range":[3596,3628],"text":"`relative w-full max-w-md p-6 ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":89,"column":45,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":89,"endColumn":113,"fix":{"range":[3733,3789],"text":"absolute right-3 top-3 text-gray-400 hover:text-gray-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":94,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":94,"endColumn":67,"fix":{"range":[3942,3982],"text":"mb-3 text-xl font-semibold text-gray-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":97,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":97,"endColumn":52,"fix":{"range":[4064,4090],"text":"mb-6 text-sm text-gray-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":101,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":101,"endColumn":104,"fix":{"range":[4197,4273],"text":"flex flex-col space-y-2 sm:flex-row sm:justify-end sm:space-x-3 sm:space-y-0"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":103,"column":63,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":103,"endColumn":114,"fix":{"range":[4387,4426],"text":"w-full border border-gray-300 sm:w-auto"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":118,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":118,"endColumn":121,"fix":{"range":[4765,4851],"text":"`rounded-lg bg-gradient-to-r from-purple-600 to-indigo-700 p-4 text-white shadow-lg ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":119,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":119,"endColumn":80,"fix":{"range":[4890,4944],"text":"flex flex-col items-center justify-between sm:flex-row"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":120,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":120,"endColumn":58,"fix":{"range":[4974,5004],"text":"mb-4 flex-grow sm:mb-0 sm:mr-4"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'flex-grow' should be updated to 'grow' in Tailwind CSS v3!","line":120,"column":16,"nodeType":"JSXAttribute","messageId":"classnameChanged","endLine":120,"endColumn":58,"fix":{"range":[4974,5004],"text":"mb-4 sm:mb-0 sm:mr-4 grow"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":121,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":121,"endColumn":50,"fix":{"range":[5035,5056],"text":"text-lg font-semibold"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":124,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":124,"endColumn":56,"fix":{"range":[5144,5172],"text":"mt-1 text-sm text-purple-100"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":128,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":128,"endColumn":56,"fix":{"range":[5289,5317],"text":"flex flex-shrink-0 space-x-3"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'flex-shrink-0' should be updated to 'shrink-0' in Tailwind CSS v3!","line":128,"column":16,"nodeType":"JSXAttribute","messageId":"classnameChanged","endLine":128,"endColumn":56,"fix":{"range":[5289,5317],"text":"shrink-0 flex space-x-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":132,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":132,"endColumn":99,"fix":{"range":[5443,5513],"text":"border border-purple-300 text-white hover:bg-white hover:bg-opacity-10"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'hover:bg-opacity-10' should be replaced by an opacity suffix (eg. '/10')","line":132,"column":17,"nodeType":"JSXAttribute","messageId":"classnameOpacityDeprecated","endLine":132,"endColumn":99},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":139,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":139,"endColumn":77,"fix":{"range":[5685,5735],"text":"bg-white text-purple-700 shadow hover:bg-purple-50"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":142,"column":36,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":142,"endColumn":67,"fix":{"range":[5843,5862],"text":"ml-2 inline h-4 w-4"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'w-4, h-4' could be replaced by the 'size-4' shorthand!","line":142,"column":36,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":142,"endColumn":67,"fix":{"range":[5843,5862],"text":"size-4 ml-2 inline"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":152,"column":11,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":152,"endColumn":79,"fix":{"range":[6019,6064],"text":"`border border-purple-200 bg-purple-50 p-4 ${"}},{"ruleId":"tailwindcss/no-custom-classname","severity":1,"message":"Classname 'text-md' is not a Tailwind CSS class!","line":153,"column":11,"nodeType":"JSXAttribute","messageId":"customClassnameDetected","endLine":153,"endColumn":58},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":153,"column":11,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":153,"endColumn":58,"fix":{"range":[6100,6135],"text":"text-md font-medium text-purple-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":156,"column":10,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":156,"endColumn":55,"fix":{"range":[6205,6238],"text":"mb-3 mt-1 text-sm text-purple-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":164,"column":78,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":164,"endColumn":111,"fix":{"range":[6536,6557],"text":"ml-1.5 inline h-4 w-4"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'w-4, h-4' could be replaced by the 'size-4' shorthand!","line":164,"column":78,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":164,"endColumn":111,"fix":{"range":[6536,6557],"text":"size-4 ml-1.5 inline"}}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":30,"fixableErrorCount":4,"fixableWarningCount":26,"source":"'use client';\r\nimport { useState } from 'react'; // useEffect was unused\r\nimport { useRouter } from 'next/navigation';\r\n// import { Button } from '@/components/ds/atoms/Button'; // Placeholder\r\n// import { Card } from '@/components/ds/atoms/Card'; // Placeholder\r\nimport { useFeatureAccess } from '@/hooks/useFeatureAccess'; // Correct pad\r\nimport { patientPlans, specialistPlans, subscriptionFeatures } from '@/types/subscription'; // SubscriptionPlan was unused\r\nimport { ArrowRight, X } from 'lucide-react'; // Gebruik lucide-react voor iconen\r\n\r\ninterface UpgradePromptProps {\r\n  featureId: string;\r\n  title?: string;\r\n  description?: string;\r\n  className?: string;\r\n  variant?: 'inline' | 'banner' | 'modal';\r\n  onClose?: () => void; // Callback als de prompt wordt gesloten (bv. bij modal)\r\n  showDismissButton?: boolean; // Of een 'Later' / 'Sluiten' knop getoond moet worden\r\n}\r\n\r\nexport function UpgradePrompt({\r\n  featureId,\r\n  title,\r\n  description,\r\n  className = '',\r\n  variant = 'inline',\r\n  onClose,\r\n  showDismissButton = true,\r\n}: UpgradePromptProps) {\r\n  const { hasAccess, userType, isLoadingSubscription } = useFeatureAccess();\r\n  const router = useRouter();\r\n  const [isVisible, setIsVisible] = useState(true); // Beheer zichtbaarheid lokaal\r\n  \r\n  // Als gebruiker al toegang heeft, of subscription nog laadt, of prompt is gesloten, toon niets\r\n  if (isLoadingSubscription || hasAccess(featureId) || !isVisible) {\r\n    return null;\r\n  }\r\n  \r\n  const feature = subscriptionFeatures.find(f => f.id === featureId);\r\n  if (!feature) {\r\n    console.warn(`UpgradePrompt: Feature met ID '${featureId}' niet gevonden.`);\r\n    return null; // Feature niet gedefinieerd, toon geen prompt\r\n  }\r\n\r\n  const plans = userType === 'specialist' ? specialistPlans : patientPlans;\r\n  // Vind het laagste betaalde plan dat deze feature bevat\r\n  const lowestPlanWithFeature = plans.find(\r\n    plan => plan.id !== 'free' && feature.tiers.includes(plan.id)\r\n  );\r\n  \r\n  const defaultTitle = `Upgrade voor ${feature.name}`;\r\n  const defaultDescription = `Deze premium functie is beschikbaar in het ${lowestPlanWithFeature?.name || 'betaalde'} abonnement en hoger. Ontgrendel meer waarde!`;\r\n\r\n  const handleUpgradeClick = () => {\r\n    router.push('/pricing'); // Stuur naar prijzenpagina\r\n  };\r\n  \r\n  const handleDismiss = () => {\r\n    setIsVisible(false);\r\n    if (onClose) {\r\n      onClose();\r\n    }\r\n  };\r\n  \r\n  // Basis Button component als ds/atoms/Button niet bestaat\r\n  const Button = ({ onClick, children, variant = 'primary', className: btnClassName = '', icon, iconPosition, ...props }: any) => (\r\n    <button \r\n      onClick={onClick} \r\n      className={`px-4 py-2 text-sm font-medium rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 ${btnClassName} ${variant === 'primary' ? 'bg-purple-600 text-white hover:bg-purple-700' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`}\r\n      {...props}\r\n    >\r\n      {iconPosition === 'left' && icon && <span className=\"mr-2\">{icon}</span>}\r\n      {children}\r\n      {iconPosition === 'right' && icon && <span className=\"ml-2\">{icon}</span>}\r\n    </button>\r\n  );\r\n  // Basis Card component\r\n  const Card = ({ children, className: cardClassName = '', ...props }: any) => (\r\n    <div className={`bg-white rounded-lg shadow-md ${cardClassName}`} {...props}>\r\n      {children}\r\n    </div>\r\n  );\r\n\r\n\r\n  if (variant === 'modal') {\r\n    return (\r\n      <div className=\"fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center p-4 z-[999]\"> {/* Hogere z-index */}\r\n        <Card className={`max-w-md w-full p-6 relative ${className}`}>\r\n          {showDismissButton && (\r\n            <button onClick={handleDismiss} className=\"absolute top-3 right-3 text-gray-400 hover:text-gray-600\">\r\n              <X size={20} />\r\n              <span className=\"sr-only\">Sluiten</span>\r\n            </button>\r\n          )}\r\n          <h3 className=\"text-xl font-semibold mb-3 text-gray-800\">\r\n            {title || defaultTitle}\r\n          </h3>\r\n          <p className=\"text-gray-600 mb-6 text-sm\">\r\n            {description || defaultDescription}\r\n          </p>\r\n          \r\n          <div className=\"flex flex-col sm:flex-row sm:justify-end space-y-2 sm:space-y-0 sm:space-x-3\">\r\n            {showDismissButton && (\r\n              <Button variant=\"ghost\" onClick={handleDismiss} className=\"w-full sm:w-auto border border-gray-300\">\r\n                Later\r\n              </Button>\r\n            )}\r\n            <Button onClick={handleUpgradeClick} className=\"w-full sm:w-auto\">\r\n              Bekijk Abonnementen\r\n            </Button>\r\n          </div>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  if (variant === 'banner') {\r\n    return (\r\n      <div className={`bg-gradient-to-r from-purple-600 to-indigo-700 text-white p-4 rounded-lg shadow-lg ${className}`}>\r\n        <div className=\"flex flex-col sm:flex-row items-center justify-between\">\r\n          <div className=\"mb-4 sm:mb-0 sm:mr-4 flex-grow\">\r\n            <h3 className=\"font-semibold text-lg\">\r\n              {title || defaultTitle}\r\n            </h3>\r\n            <p className=\"text-purple-100 text-sm mt-1\">\r\n              {description || defaultDescription}\r\n            </p>\r\n          </div>\r\n          <div className=\"flex-shrink-0 flex space-x-3\">\r\n            {showDismissButton && (\r\n              <Button \r\n                variant=\"ghost\" \r\n                className=\"text-white border border-purple-300 hover:bg-white hover:bg-opacity-10\"\r\n                onClick={handleDismiss}\r\n              >\r\n                Later\r\n              </Button>\r\n            )}\r\n            <Button \r\n              className=\"bg-white text-purple-700 hover:bg-purple-50 shadow\"\r\n              onClick={handleUpgradeClick}\r\n            >\r\n              Upgraden <ArrowRight className=\"w-4 h-4 ml-2 inline\" />\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  // Default: inline variant\r\n  return (\r\n    <Card className={`p-4 border border-purple-200 bg-purple-50 ${className}`}>\r\n      <h3 className=\"font-medium text-purple-800 text-md\">\r\n        {title || defaultTitle}\r\n      </h3>\r\n      <p className=\"text-purple-700 text-sm mt-1 mb-3\">\r\n        {description || defaultDescription}\r\n      </p>\r\n      <Button \r\n        size=\"sm\" \r\n        onClick={handleUpgradeClick}\r\n        className=\"bg-purple-600 text-white hover:bg-purple-700\"\r\n      >\r\n        Upgraden naar {lowestPlanWithFeature?.name || 'Premium'} <ArrowRight className=\"w-4 h-4 ml-1.5 inline\" />\r\n      </Button>\r\n    </Card>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\subscription\\withFeatureAccess.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":46,"fix":{"range":[82,82],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":61,"fix":{"range":[159,159],"text":"\n"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import React, { ComponentType } from 'react'; // Import React, useState was unused\r\nimport { useFeatureAccess } from '@/hooks/useFeatureAccess'; // Correct pad\r\nimport { UpgradePrompt } from './UpgradePrompt'; // Importeer de UpgradePrompt component\r\n\r\ninterface WithFeatureAccessOptions { // Hernoemd van WithFeatureAccessProps voor duidelijkheid\r\n  featureId: string;\r\n  // Opties voor de UpgradePrompt component\r\n  upgradePromptVariant?: 'inline' | 'banner' | 'modal';\r\n  upgradePromptTitle?: string;\r\n  upgradePromptDescription?: string;\r\n  // Fallback UI als de gebruiker geen toegang heeft en de prompt niet getoond wordt (bv. na dismiss)\r\n  // of als er geen prompt getoond moet worden maar de content wel verborgen moet zijn.\r\n  fallbackUI?: React.ReactNode; \r\n  // Bepaalt of de prompt getoond moet worden, of alleen de fallbackUI / niets\r\n  showPromptIfNoAccess?: boolean; \r\n}\r\n\r\n/**\r\n * Higher-Order Component dat een component wikkelt.\r\n * Als de gebruiker geen toegang heeft tot de gespecificeerde feature:\r\n * - Toont een UpgradePrompt (indien showPromptIfNoAccess true is).\r\n * - Of toont de fallbackUI.\r\n * - Of rendert niets als geen van beide is opgegeven.\r\n */\r\nexport function withFeatureAccess<P extends object>( // P extends object is een goede constraint\r\n  WrappedComponent: ComponentType<P>,\r\n  options: WithFeatureAccessOptions\r\n): ComponentType<P> { // De geretourneerde component accepteert dezelfde props P\r\n  \r\n  const { \r\n    featureId, \r\n    upgradePromptVariant = 'inline', \r\n    upgradePromptTitle, \r\n    upgradePromptDescription,\r\n    fallbackUI = null, // Default naar niets renderen als geen fallback is gespecificeerd\r\n    showPromptIfNoAccess = true, // Default naar het tonen van de prompt\r\n  } = options;\r\n\r\n  const ComponentWithFeatureAccess = (props: P) => {\r\n    const { hasAccess, isLoadingSubscription } = useFeatureAccess();\r\n    // Lokale state voor de prompt is nu binnen UpgradePrompt zelf, maar we kunnen hier controleren of we het überhaupt willen tonen.\r\n    // const [promptVisible, setPromptVisible] = useState(true); // Om de prompt te kunnen sluiten\r\n\r\n    // const handleClosePrompt = () => {\r\n    //   setPromptVisible(false);\r\n    // };\r\n\r\n    if (isLoadingSubscription) {\r\n      // Optioneel: toon een loader terwijl abonnementsstatus wordt geladen\r\n      // Dit voorkomt een flits van de UpgradePrompt of de WrappedComponent.\r\n      // Afhankelijk van de UX wensen.\r\n      // Voor nu, render niets of een minimale loader.\r\n      return <div aria-live=\"polite\" aria-busy=\"true\">Checking feature access...</div>; // Of een Skeleton\r\n    }\r\n    \r\n    const canAccessFeature = hasAccess(featureId);\r\n    \r\n    if (canAccessFeature) {\r\n      return <WrappedComponent {...props} />;\r\n    }\r\n\r\n    // Gebruiker heeft geen toegang\r\n    if (showPromptIfNoAccess) {\r\n      return (\r\n        <UpgradePrompt\r\n          featureId={featureId}\r\n          variant={upgradePromptVariant}\r\n          title={upgradePromptTitle}\r\n          description={upgradePromptDescription}\r\n          // onClose={handleClosePrompt} // onClose wordt nu intern afgehandeld door UpgradePrompt\r\n          // De UpgradePrompt heeft zijn eigen dismiss logica.\r\n          // Als de HOC de prompt moet verbergen na dismiss, dan moet de state hier beheerd worden.\r\n          // Voor nu, laat UpgradePrompt zijn eigen zichtbaarheid beheren.\r\n        />\r\n      );\r\n    }\r\n    \r\n    return fallbackUI; // Toon fallback UI of null (niets)\r\n  };\r\n  \r\n  // Kopieer displayName van de gewikkelde component voor betere debugging\r\n  ComponentWithFeatureAccess.displayName = `withFeatureAccess(${\r\n    WrappedComponent.displayName || WrappedComponent.name || 'Component'\r\n  })`;\r\n  \r\n  return ComponentWithFeatureAccess;\r\n}\r\n\r\n// Voorbeeld gebruik:\r\n// interface MyProtectedComponentProps { myProp: string; }\r\n// const MyProtectedComponent = ({ myProp }: MyProtectedComponentProps) => <div>Protected Content: {myProp}</div>;\r\n//\r\n// const SecuredComponent = withFeatureAccess(MyProtectedComponent, {\r\n//   featureId: 'advanced-analytics',\r\n//   upgradePromptVariant: 'banner',\r\n//   fallbackUI: <p>U heeft geen toegang tot deze geavanceerde analytics.</p>\r\n// });\r\n//\r\n// // In een andere component:\r\n// // <SecuredComponent myProp=\"voorbeeld\" />\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\support\\SupportWidget.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":63,"fix":{"range":[106,106],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":61,"fix":{"range":[372,372],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`lucide-react` import should occur before import of `@/components/auth/AuthProvider`","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":93,"fix":{"range":[252,469],"text":"import { MessageSquare, X, ChevronUp, ChevronDown, Search, HelpCircle } from 'lucide-react';\r\nimport { useAuth } from '@/components/auth/AuthProvider'; \r\nimport { useFeatureAccess } from '@/hooks/useFeatureAccess'; \r\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'size' is assigned a value but never used. Allowed unused args must match /^_/u.","line":50,"column":59,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":63},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":141,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":144,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2800,2803],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2800,2803],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":54,"column":5,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":54,"endColumn":369,"fix":{"range":[2879,3037],"text":"`rounded-md px-3 py-1.5 text-xs font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-1 disabled:opacity-60 ${"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":62,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":62,"endColumn":30},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":129,"column":9,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":129,"endColumn":354,"fix":{"range":[6243,6281],"text":"pointer-events-none scale-90 opacity-0"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":129,"column":9,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":129,"endColumn":354,"fix":{"range":[6286,6307],"text":"scale-100 opacity-100"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":129,"column":9,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":129,"endColumn":354,"fix":{"range":[5977,6233],"text":"`fixed bottom-5 right-5 z-40 flex h-14 w-14 items-center justify-center rounded-full bg-purple-600 text-white shadow-lg transition-all duration-200 ease-in-out hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 ${"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'w-14, h-14' could be replaced by the 'size-14' shorthand!","line":129,"column":9,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":129,"endColumn":354,"fix":{"range":[5977,6233],"text":"`fixed bottom-5 right-5 z-40 flex items-center justify-center size-14 rounded-full bg-purple-600 text-white shadow-lg hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition-all duration-200 ease-in-out ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":138,"column":9,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":140,"endColumn":12,"fix":{"range":[6747,6772],"text":"translate-y-0 opacity-100"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":138,"column":9,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":140,"endColumn":12,"fix":{"range":[6777,6821],"text":"pointer-events-none translate-y-10 opacity-0"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":138,"column":9,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":140,"endColumn":12,"fix":{"range":[6528,6725],"text":"`fixed bottom-5 right-5 z-50 flex max-h-[calc(100vh-3.75rem)] w-[calc(100%-2.5rem)] max-w-sm flex-col rounded-xl border border-gray-200 bg-white shadow-xl transition-all duration-300 ease-in-out ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":145,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":145,"endColumn":116,"fix":{"range":[6971,7058],"text":"flex items-center justify-between rounded-t-xl border-b border-gray-200 bg-gray-100 p-3"}},{"ruleId":"tailwindcss/no-custom-classname","severity":1,"message":"Classname 'text-md' is not a Tailwind CSS class!","line":146,"column":41,"nodeType":"JSXAttribute","messageId":"customClassnameDetected","endLine":146,"endColumn":88},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":146,"column":41,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":146,"endColumn":88,"fix":{"range":[7113,7148],"text":"text-md font-semibold text-gray-800"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":149,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":149,"endColumn":93,"fix":{"range":[7266,7334],"text":"rounded-full p-1 text-gray-500 hover:bg-gray-200 hover:text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":156,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":156,"endColumn":54,"fix":{"range":[7500,7528],"text":"border-b border-gray-200 p-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":158,"column":21,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":158,"endColumn":125,"fix":{"range":[7601,7693],"text":"pointer-events-none absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 transform text-gray-400"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'w-4, h-4' could be replaced by the 'size-4' shorthand!","line":158,"column":21,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":158,"endColumn":125,"fix":{"range":[7601,7693],"text":"size-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 pointer-events-none"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'transform' is not needed in Tailwind CSS v3!","line":158,"column":21,"nodeType":"JSXAttribute","messageId":"classnameNotNeeded","endLine":158,"endColumn":125,"fix":{"range":[7601,7693],"text":"w-4 h-4 absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 pointer-events-none"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":162,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":162,"endColumn":169,"fix":{"range":[7818,7960],"text":"w-full rounded-md border border-gray-300 py-2 pl-10 pr-3 text-sm focus:border-purple-500 focus:outline-none focus:ring-1 focus:ring-purple-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":169,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":169,"endColumn":65,"fix":{"range":[8146,8185],"text":"flex-grow space-y-2 overflow-y-auto p-4"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'flex-grow' should be updated to 'grow' in Tailwind CSS v3!","line":169,"column":14,"nodeType":"JSXAttribute","messageId":"classnameChanged","endLine":169,"endColumn":65,"fix":{"range":[8146,8185],"text":"grow overflow-y-auto p-4 space-y-2"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":174,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":174,"endColumn":161,"fix":{"range":[8432,8562],"text":"flex w-full items-center justify-between py-2 text-left text-sm font-medium text-gray-700 hover:text-purple-600 focus:outline-none"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'flex-shrink-0' should be updated to 'shrink-0' in Tailwind CSS v3!","line":181,"column":42,"nodeType":"JSXAttribute","messageId":"classnameChanged","endLine":181,"endColumn":81,"fix":{"range":[8901,8928],"text":"shrink-0 text-gray-500"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'flex-shrink-0' should be updated to 'shrink-0' in Tailwind CSS v3!","line":183,"column":44,"nodeType":"JSXAttribute","messageId":"classnameChanged","endLine":183,"endColumn":83,"fix":{"range":[9013,9040],"text":"shrink-0 text-gray-400"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":187,"column":51,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":187,"endColumn":110,"fix":{"range":[9201,9248],"text":"mt-1 pr-6 text-xs leading-relaxed text-gray-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":199,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":199,"endColumn":46,"fix":{"range":[9753,9769],"text":"py-6 text-center"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":200,"column":40,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":200,"endColumn":78,"fix":{"range":[9823,9849],"text":"mx-auto mb-2 text-gray-300"}},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":201,"column":73,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[9906,9928],"text":"Geen resultaten voor &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[9906,9928],"text":"Geen resultaten voor &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[9906,9928],"text":"Geen resultaten voor &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[9906,9928],"text":"Geen resultaten voor &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":201,"column":87,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[9941,9942],"text":"&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[9941,9942],"text":"&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[9941,9942],"text":"&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[9941,9942],"text":"&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":202,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":202,"endColumn":56,"fix":{"range":[9976,10002],"text":"mt-1 text-xs text-gray-400"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":207,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":207,"endColumn":81,"fix":{"range":[10125,10177],"text":"rounded-b-xl border-t border-gray-200 bg-gray-50 p-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":211,"column":50,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":211,"endColumn":108,"fix":{"range":[10367,10413],"text":"mb-0.5 block text-xs font-medium text-gray-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":212,"column":57,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":212,"endColumn":183,"fix":{"range":[10501,10615],"text":"w-full rounded-md border border-gray-300 px-3 py-1.5 text-sm focus:outline-none focus:ring-1 focus:ring-purple-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":215,"column":50,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":215,"endColumn":108,"fix":{"range":[10849,10895],"text":"mb-0.5 block text-xs font-medium text-gray-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":216,"column":57,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":216,"endColumn":183,"fix":{"range":[10981,11095],"text":"w-full rounded-md border border-gray-300 px-3 py-1.5 text-sm focus:outline-none focus:ring-1 focus:ring-purple-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":227,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":227,"endColumn":68,"fix":{"range":[11783,11821],"text":"mb-2 text-center text-xs text-gray-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":235,"column":20,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":235,"endColumn":106,"fix":{"range":[12398,12472],"text":"mt-2 rounded-md bg-purple-50 p-1.5 text-center text-[11px] text-purple-600"}}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":35,"fixableErrorCount":3,"fixableWarningCount":32,"source":"'use client';\r\nimport React, { useState, useEffect, FormEvent } from 'react'; // Import React en FormEvent\r\n// import { Button } from '@/components/ds/atoms/Button'; // Placeholder\r\n// import { Card } from '@/components/ds/atoms/Card'; // Placeholder\r\nimport { useAuth } from '@/components/auth/AuthProvider'; \r\nimport { useFeatureAccess } from '@/hooks/useFeatureAccess'; \r\nimport { MessageSquare, X, ChevronUp, ChevronDown, Search, HelpCircle } from 'lucide-react';\r\n\r\ninterface FAQItem {\r\n  question: string;\r\n  answer: string;\r\n  categories: string[];\r\n}\r\n\r\n// Voorbeeld FAQs, uitbreiden naar behoefte\r\nconst faqs: FAQItem[] = [\r\n  {\r\n    question: 'Hoe kan ik mijn symptomen bijhouden?',\r\n    answer: 'Ga naar het \"Dagboek\" of \"Taken\" tabblad en selecteer een taak om te loggen, of maak een nieuwe log aan. U kunt pijn, vermoeidheid, slaapkwaliteit en andere relevante symptomen invoeren.',\r\n    categories: ['symptomen', 'logboek', 'taken', 'beginners']\r\n  },\r\n  {\r\n    question: 'Hoe verbind ik met mijn specialist?',\r\n    answer: 'Navigeer naar \"Mijn Specialisten\" in het menu. Klik op \"Specialist Uitnodigen\" en vul het e-mailadres van uw zorgverlener in. Zij ontvangen een uitnodiging om veilig verbinding te maken met uw FibroGuardian Pro account.',\r\n    categories: ['specialisten', 'verbinding', 'delen']\r\n  },\r\n  {\r\n    question: 'Hoe kan ik mijn abonnement wijzigen of opzeggen?',\r\n    answer: 'U kunt uw abonnement beheren via \"Instellingen\" > \"Abonnement\". Daar vindt u opties om uw plan te upgraden, downgraden, de factureringscyclus aan te passen, of uw abonnement op te zeggen.',\r\n    categories: ['abonnement', 'betaling', 'account']\r\n  },\r\n  {\r\n    question: 'Werkt de FibroGuardian Pro app ook offline?',\r\n    answer: 'Ja, veel kernfunctionaliteiten zoals het loggen van symptomen en het bekijken van uw planning werken offline. Zodra u weer een internetverbinding heeft, worden uw gegevens automatisch gesynchroniseerd met de server.',\r\n    categories: ['offline', 'technisch', 'synchronisatie']\r\n  },\r\n  {\r\n    question: 'Hoe exporteer ik mijn gegevens?',\r\n    answer: 'Ga naar de \"Rapporten\" sectie. Hier kunt u aangepaste rapporten genereren en uw gegevens exporteren naar PDF of CSV formaat voor eigen gebruik of om te delen met uw zorgverleners.',\r\n    categories: ['gegevens', 'export', 'rapporten']\r\n  },\r\n  {\r\n    question: 'Waar vind ik meer gedetailleerde hulp of handleidingen?',\r\n    answer: 'Voor uitgebreide handleidingen en antwoorden op meer specifieke vragen, kunt u ons volledige Help Center bezoeken via de link onderaan deze widget.',\r\n    categories: ['help', 'documentatie']\r\n  }\r\n];\r\n\r\n// Basis Button component\r\nconst Button = ({ onClick, children, variant = 'primary', size = 'md', className: btnClassName = '', type = 'button', disabled, ...props }: any) => (\r\n  <button \r\n    type={type}\r\n    onClick={onClick} \r\n    className={`px-3 py-1.5 text-xs font-medium rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-1 disabled:opacity-60 ${btnClassName} ${variant === 'primary' ? 'bg-purple-600 text-white hover:bg-purple-700' : variant === 'ghost' ? 'text-gray-600 hover:bg-gray-100' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`}\r\n    disabled={disabled}\r\n    {...props}\r\n  >\r\n    {children}\r\n  </button>\r\n);\r\n\r\nexport function SupportWidget() {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [expandedFAQ, setExpandedFAQ] = useState<number | null>(null);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [showContactForm, setShowContactForm] = useState(false);\r\n  const [contactFormData, setContactFormData] = useState({ subject: '', message: '' });\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n  const { user, profile } = useAuth(); // Haal user en profile op\r\n  const { hasAccess } = useFeatureAccess(); // Voor priority support check\r\n  \r\n  const filteredFAQs = searchQuery\r\n    ? faqs.filter(faq => \r\n        faq.question.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        faq.answer.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        faq.categories.some(cat => cat.toLowerCase().includes(searchQuery.toLowerCase()))\r\n      )\r\n    : faqs;\r\n  \r\n  const handleToggleFAQ = (index: number) => {\r\n    setExpandedFAQ(expandedFAQ === index ? null : index);\r\n  };\r\n  \r\n  const handleContactSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    setIsSubmitting(true);\r\n    try {\r\n      const response = await fetch('/api/support/create-ticket', { // Aangepast endpoint\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          ...contactFormData,\r\n          userEmail: user?.email, // E-mail van de ingelogde gebruiker\r\n          userName: profile ? `${profile.voornaam} ${profile.achternaam}` : 'Niet ingelogd',\r\n          userType: profile?.type,\r\n          userId: user?.id,\r\n        })\r\n      });\r\n      \r\n      if (response.ok) {\r\n        setContactFormData({ subject: '', message: '' });\r\n        setShowContactForm(false);\r\n        alert('Support ticket succesvol verzonden! We nemen zo snel mogelijk contact op.');\r\n      } else {\r\n        const errorData = await response.json();\r\n        alert(`Fout bij verzenden: ${errorData.error || 'Probeer het later opnieuw.'}`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error submitting support ticket:', error);\r\n      alert('Netwerkfout bij het verzenden van je ticket. Controleer je verbinding.');\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n  \r\n  // Sluit widget bij Escape toets\r\n  useEffect(() => {\r\n    const handleEscape = (event: KeyboardEvent) => {\r\n      if (event.key === 'Escape') setIsOpen(false);\r\n    };\r\n    if (isOpen) document.addEventListener('keydown', handleEscape);\r\n    return () => document.removeEventListener('keydown', handleEscape);\r\n  }, [isOpen]);\r\n\r\n  return (\r\n    <>\r\n      <button\r\n        className={`fixed bottom-5 right-5 z-40 flex items-center justify-center w-14 h-14 rounded-full bg-purple-600 text-white shadow-lg hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition-all duration-200 ease-in-out ${isOpen ? 'opacity-0 scale-90 pointer-events-none' : 'opacity-100 scale-100'}`}\r\n        onClick={() => setIsOpen(true)}\r\n        aria-label=\"Open Hulp & Support\"\r\n        aria-expanded={isOpen}\r\n      >\r\n        <HelpCircle size={28} />\r\n      </button>\r\n      \r\n      <div \r\n        className={`fixed bottom-5 right-5 z-50 w-[calc(100%-2.5rem)] max-w-sm bg-white rounded-xl shadow-xl border border-gray-200 flex flex-col transition-all duration-300 ease-in-out max-h-[calc(100vh-3.75rem)] ${\r\n          isOpen ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10 pointer-events-none'\r\n        }`}\r\n        role=\"dialog\"\r\n        aria-modal=\"true\"\r\n        aria-labelledby=\"support-widget-title\"\r\n      >\r\n        <header className=\"flex items-center justify-between bg-gray-100 p-3 border-b border-gray-200 rounded-t-xl\">\r\n          <h3 id=\"support-widget-title\" className=\"font-semibold text-gray-800 text-md\">Hulp & Ondersteuning</h3>\r\n          <button \r\n            onClick={() => setIsOpen(false)}\r\n            className=\"p-1 text-gray-500 hover:text-gray-700 hover:bg-gray-200 rounded-full\"\r\n            aria-label=\"Sluit support widget\"\r\n          >\r\n            <X size={20} />\r\n          </button>\r\n        </header>\r\n        \r\n        <div className=\"p-4 border-b border-gray-200\">\r\n          <div className=\"relative\">\r\n            <Search className=\"w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 pointer-events-none\" />\r\n            <input\r\n              type=\"search\"\r\n              placeholder=\"Zoek in FAQs...\"\r\n              className=\"w-full pl-10 pr-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-purple-500 focus:border-purple-500\"\r\n              value={searchQuery}\r\n              onChange={(e) => setSearchQuery(e.target.value)}\r\n            />\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"flex-grow overflow-y-auto p-4 space-y-2\">\r\n          {filteredFAQs.length > 0 ? (\r\n            filteredFAQs.map((faq, index) => (\r\n              <div key={index} className=\"border-b border-gray-100 pb-2 last:border-b-0 last:pb-0\">\r\n                <button\r\n                  className=\"flex items-center justify-between w-full text-left py-2 text-sm font-medium text-gray-700 hover:text-purple-600 focus:outline-none\"\r\n                  onClick={() => handleToggleFAQ(index)}\r\n                  aria-expanded={expandedFAQ === index}\r\n                  aria-controls={`faq-answer-${index}`}\r\n                >\r\n                  <span>{faq.question}</span>\r\n                  {expandedFAQ === index ? (\r\n                    <ChevronUp size={18} className=\"flex-shrink-0 text-gray-500\" />\r\n                  ) : (\r\n                    <ChevronDown size={18} className=\"flex-shrink-0 text-gray-400\" />\r\n                  )}\r\n                </button>\r\n                {expandedFAQ === index && (\r\n                  <div id={`faq-answer-${index}`} className=\"mt-1 pr-6 text-xs text-gray-600 leading-relaxed\">\r\n                    <p>{faq.answer}</p>\r\n                    {/* <div className=\"mt-2 flex flex-wrap gap-1\">\r\n                      {faq.categories.map((cat, catIndex) => (\r\n                        <span key={catIndex} className=\"px-1.5 py-0.5 bg-purple-50 text-purple-600 text-[10px] rounded-full\">{cat}</span>\r\n                      ))}\r\n                    </div> */}\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ))\r\n          ) : (\r\n            <div className=\"text-center py-6\">\r\n              <MessageSquare size={32} className=\"mx-auto text-gray-300 mb-2\" />\r\n              <p className=\"text-sm text-gray-500\">Geen resultaten voor \"{searchQuery}\"</p>\r\n              <p className=\"text-xs text-gray-400 mt-1\">Probeer een andere zoekterm.</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n        \r\n        <footer className=\"p-4 bg-gray-50 border-t border-gray-200 rounded-b-xl\">\r\n          {showContactForm ? (\r\n            <form onSubmit={handleContactSubmit} className=\"space-y-3\">\r\n              <div>\r\n                <label htmlFor=\"support-subject\" className=\"block text-xs font-medium text-gray-600 mb-0.5\">Onderwerp</label>\r\n                <input type=\"text\" id=\"support-subject\" className=\"w-full text-sm px-3 py-1.5 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-purple-500\" value={contactFormData.subject} onChange={(e) => setContactFormData({...contactFormData, subject: e.target.value})} required />\r\n              </div>\r\n              <div>\r\n                <label htmlFor=\"support-message\" className=\"block text-xs font-medium text-gray-600 mb-0.5\">Bericht</label>\r\n                <textarea id=\"support-message\" rows={3} className=\"w-full text-sm px-3 py-1.5 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-purple-500\" value={contactFormData.message} onChange={(e) => setContactFormData({...contactFormData, message: e.target.value})} required></textarea>\r\n              </div>\r\n              <div className=\"flex justify-end space-x-2 pt-1\">\r\n                <Button type=\"button\" variant=\"ghost\" size=\"sm\" onClick={() => setShowContactForm(false)} disabled={isSubmitting}>Annuleren</Button>\r\n                <Button type=\"submit\" variant=\"primary\" size=\"sm\" disabled={isSubmitting} loading={isSubmitting}>\r\n                  {isSubmitting ? 'Verzenden...' : 'Verzenden'}\r\n                </Button>\r\n              </div>\r\n            </form>\r\n          ) : (\r\n            <>\r\n              <p className=\"text-xs text-gray-600 mb-2 text-center\">\r\n                Geen antwoord gevonden? Wij helpen u graag verder.\r\n              </p>\r\n              <div className=\"grid grid-cols-2 gap-2\">\r\n                <Button variant=\"outline\" size=\"sm\" onClick={() => window.open('https://fibroguardian.be/help-center', '_blank')} className=\"w-full border-gray-300\">Help Center</Button>\r\n                <Button variant=\"primary\" size=\"sm\" onClick={() => setShowContactForm(true)} className=\"w-full\">Contactformulier</Button>\r\n              </div>\r\n              {hasAccess('priority-support') && (\r\n                <p className=\"mt-2 text-center text-[11px] text-purple-600 bg-purple-50 p-1.5 rounded-md\">U heeft prioriteitsondersteuning!</p>\r\n              )}\r\n            </>\r\n          )}\r\n        </footer>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\tasks\\AddTaskButton.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":4,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":4,"endColumn":38}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\nimport Link from 'next/link';\r\n\r\nexport default function AddTaskButton() {\r\n  // Placeholder for AddTaskButton component\r\n  // Simple link to a page for creating a new task\r\n  return (\r\n    <Link href=\"/taken/nieuw\" className=\"btn-primary\"> {/* Assuming /taken/nieuw is the route for new task form */}\r\n      Nieuwe Taak Toevoegen\r\n    </Link>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\tasks\\TaskCard.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":48,"fix":{"range":[62,62],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":30,"fix":{"range":[93,93],"text":"\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":15,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":15,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onUpdateStatus' is defined but never used. Allowed unused args must match /^_/u.","line":15,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":66},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":19,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":19,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[711,831],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-6, w-6' could be replaced by the 'size-6' shorthand!","line":38,"column":49,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":38,"endColumn":82,"fix":{"range":[1410,1431],"text":"size-6 text-blue-500"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-6, w-6' could be replaced by the 'size-6' shorthand!","line":44,"column":49,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":44,"endColumn":83,"fix":{"range":[1850,1872],"text":"size-6 text-green-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":69,"column":10,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":69,"endColumn":114,"fix":{"range":[2704,2796],"text":"rounded-lg bg-white p-5 shadow-md transition-shadow duration-200 ease-in-out hover:shadow-lg"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":70,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":70,"endColumn":45,"fix":{"range":[2822,2843],"text":"mb-3 flex items-start"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":71,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":71,"endColumn":49,"fix":{"range":[2871,2894],"text":"mr-3 mt-1 flex-shrink-0"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'flex-shrink-0' should be updated to 'shrink-0' in Tailwind CSS v3!","line":71,"column":14,"nodeType":"JSXAttribute","messageId":"classnameChanged","endLine":71,"endColumn":49,"fix":{"range":[2871,2894],"text":"shrink-0 mt-1 mr-3"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'flex-grow' should be updated to 'grow' in Tailwind CSS v3!","line":74,"column":14,"nodeType":"JSXAttribute","messageId":"classnameChanged","endLine":74,"endColumn":35,"fix":{"range":[2965,2974],"text":"grow"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":75,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":75,"endColumn":65,"fix":{"range":[3003,3041],"text":"mb-1 text-lg font-medium text-gray-900"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":77,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":79,"endColumn":16,"fix":{"range":[3149,3189],"text":"`rounded-full px-2 py-0.5 font-medium ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":83,"column":21,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":83,"endColumn":110,"fix":{"range":[3479,3556],"text":"rounded-full bg-purple-100 px-2 py-0.5 font-medium capitalize text-purple-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":88,"column":21,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":88,"endColumn":95,"fix":{"range":[3699,3761],"text":"rounded-full bg-gray-100 px-2 py-0.5 font-medium text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":94,"column":21,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":96,"endColumn":18,"fix":{"range":[3938,3993],"text":"`ml-2 rounded-full px-2 py-0.5 text-xs font-semibold ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":105,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":105,"endColumn":63,"fix":{"range":[4304,4343],"text":"mb-4 line-clamp-2 text-sm text-gray-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":112,"column":33,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":112,"endColumn":103,"fix":{"range":[4614,4672],"text":"rounded-full bg-gray-200 px-2 py-0.5 text-xs text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":120,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":120,"endColumn":78,"fix":{"range":[4837,4891],"text":"mb-4 flex flex-wrap items-center text-xs text-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":127,"column":53,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":127,"endColumn":77,"fix":{"range":[5293,5305],"text":"mr-1 h-4 w-4"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-4, w-4' could be replaced by the 'size-4' shorthand!","line":127,"column":53,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":127,"endColumn":77,"fix":{"range":[5293,5305],"text":"size-4 mr-1"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":135,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":135,"endColumn":87,"fix":{"range":[5658,5721],"text":"flex items-center justify-between border-t border-gray-100 pt-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":139,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":139,"endColumn":78,"fix":{"range":[5939,5992],"text":"text-gray-500 transition-colors hover:text-purple-600"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":142,"column":53,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":142,"endColumn":72,"fix":{"range":[6137,6144],"text":"size-5"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":150,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":150,"endColumn":76,"fix":{"range":[6713,6764],"text":"text-gray-500 transition-colors hover:text-blue-600"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":153,"column":53,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":153,"endColumn":72,"fix":{"range":[6897,6904],"text":"size-5"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":162,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":164,"endColumn":124,"fix":{"range":[7639,7668],"text":"cursor-not-allowed opacity-50"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":170,"column":22,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":170,"endColumn":67,"fix":{"range":[8172,8205],"text":"h-5 w-5 animate-spin text-red-600"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":170,"column":22,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":170,"endColumn":67,"fix":{"range":[8172,8205],"text":"animate-spin size-5 text-red-600"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":175,"column":57,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":175,"endColumn":76,"fix":{"range":[8717,8724],"text":"size-5"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":179,"column":57,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":179,"endColumn":76,"fix":{"range":[9207,9214],"text":"size-5"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":189,"column":11,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":189,"endColumn":202,"fix":{"range":[9724,9903],"text":"rounded-md bg-purple-600 px-3 py-1.5 text-xs font-medium text-white transition-colors hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":31,"fixableErrorCount":2,"fixableWarningCount":28,"source":"'use client';\r\nimport { useState, ReactElement } from 'react';\r\nimport Link from 'next/link';\r\n// Task wordt nu EnrichedTask uit de container\r\n// import { Task } from '@/types'; \r\nimport { EnrichedTask } from '@/containers/dashboard/DailyPlannerContainer'; // Importeer EnrichedTask\r\n\r\ninterface TaskCardProps {\r\n  task: EnrichedTask; // Gebruik EnrichedTask\r\n  onDelete?: (taskId: string) => void | Promise<void>; \r\n  onUpdateStatus?: (taskId: string, newStatus: string) => void | Promise<void>; \r\n  isDeleting?: boolean; \r\n}\r\n\r\nexport default function TaskCard({ task, onDelete, onUpdateStatus, isDeleting }: TaskCardProps) {\r\n  const [confirmDelete, setConfirmDelete] = useState(false);\r\n\r\n  // DEBUG LOG\r\n  console.log(`[TaskCard] Rendering task \"${task.titel}\", specialist_id:`, task.specialist_id, \"Full task object:\", task);\r\n  \r\n  // Helper voor het formatteren van datum\r\nconst formatDate = (dateString: Date | string | undefined) => {\r\n  if (!dateString) return 'N/A';\r\n  const date = new Date(dateString);\r\n  return date.toLocaleString('nl-BE', {\r\n    day: '2-digit',\r\n    month: 'short', // Using short month name\r\n    year: 'numeric',\r\n    hour: '2-digit',\r\n    minute: '2-digit'\r\n  });\r\n};\r\n  \r\n  // Helper voor het bepalen van het taakicoon\r\n  const getTaskIcon = (): ReactElement => {\r\n    if (task.type === 'taak') {\r\n      return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6 text-blue-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" aria-hidden=\"true\">\r\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2\" />\r\n        </svg>\r\n      );\r\n    } else { // 'opdracht'\r\n      return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6 text-green-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" aria-hidden=\"true\">\r\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\r\n        </svg>\r\n      );\r\n    }\r\n  };\r\n  \r\n  // Handler voor delete bevestiging\r\n  const handleDeleteClick = async () => {\r\n    if (confirmDelete && onDelete) {\r\n      try {\r\n        await onDelete(task.id);\r\n        setConfirmDelete(false); // Reset on successful delete\r\n      } catch (error) {\r\n        console.error(\"Failed to delete task:\", error);\r\n        // Optionally show an error message to the user\r\n      }\r\n    } else {\r\n      setConfirmDelete(true);\r\n      // Set a timeout to auto-cancel confirmation after a few seconds\r\n      setTimeout(() => setConfirmDelete(false), 3000);\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div className=\"bg-white rounded-lg shadow-md p-5 hover:shadow-lg transition-shadow duration-200 ease-in-out\">\r\n      <div className=\"flex items-start mb-3\">\r\n        <div className=\"flex-shrink-0 mt-1 mr-3\">\r\n          {getTaskIcon()}\r\n        </div>\r\n        <div className=\"flex-grow\">\r\n          <h3 className=\"text-lg font-medium text-gray-900 mb-1\">{task.titel}</h3>\r\n          <div className=\"flex flex-wrap gap-2 text-xs\">\r\n            <span className={`px-2 py-0.5 rounded-full font-medium ${ // Adjusted padding\r\n              task.type === 'taak' ? 'bg-blue-100 text-blue-700' : 'bg-green-100 text-green-700'\r\n            }`}>\r\n              {task.type === 'taak' ? 'Taak' : 'Opdracht'}\r\n            </span>\r\n            {task.herhaal_patroon && (\r\n              <span className=\"px-2 py-0.5 rounded-full bg-purple-100 text-purple-700 font-medium capitalize\">\r\n                {task.herhaal_patroon}\r\n              </span>\r\n            )}\r\n            {task.duur && (\r\n              <span className=\"px-2 py-0.5 rounded-full bg-gray-100 text-gray-700 font-medium\">\r\n                {task.duur} min\r\n              </span>\r\n            )}\r\n            {/* Toon status badge */}\r\n            {task.status && (\r\n              <span className={`ml-2 px-2 py-0.5 text-xs font-semibold rounded-full ${\r\n                task.status === 'voltooid' ? 'bg-green-200 text-green-800' : 'bg-orange-200 text-orange-800'\r\n              }`}>\r\n                {task.status}\r\n              </span>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      {task.beschrijving && (\r\n        <p className=\"text-gray-600 text-sm mb-4 line-clamp-2\">{task.beschrijving}</p>\r\n      )}\r\n      \r\n      {task.labels && task.labels.length > 0 && (\r\n        <div className=\"mb-4\">\r\n          <div className=\"flex flex-wrap gap-1\">\r\n            {task.labels.map((label, index) => (\r\n              <span key={index} className=\"text-xs bg-gray-200 text-gray-700 px-2 py-0.5 rounded-full\"> {/* Changed style */}\r\n                {label}\r\n              </span>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      <div className=\"flex flex-wrap text-xs text-gray-500 mb-4 items-center\">\r\n        <span className=\"mr-3\">Aangemaakt: {formatDate(task.created_at)}</span>\r\n        {task.status === 'voltooid' && task.voltooid_op && (\r\n          <span className=\"mr-3\">Voltooid: {formatDate(task.voltooid_op)}</span>\r\n        )}\r\n        {task.specialist_id && (\r\n          <span className=\"flex items-center text-indigo-500\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 mr-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" aria-hidden=\"true\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\" />\r\n            </svg>\r\n            Specialist\r\n          </span>\r\n        )}\r\n      </div>\r\n      \r\n      <div className=\"flex justify-between items-center pt-3 border-t border-gray-100\"> {/* Adjusted padding */}\r\n        <div className=\"flex space-x-3\"> {/* Increased space */}\r\n          <Link \r\n            href={`/taken/${task.id}`} // Assuming this is the view details page\r\n            className=\"text-gray-500 hover:text-purple-600 transition-colors\"\r\n            aria-label={`Bekijk details van taak ${task.titel}`}\r\n          >\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" aria-hidden=\"true\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\" />\r\n            </svg>\r\n          </Link>\r\n          \r\n          <Link \r\n            href={`/taken/${task.id}/edit`} // Aangepast naar /edit\r\n            className=\"text-gray-500 hover:text-blue-600 transition-colors\"\r\n            aria-label={`Bewerk taak ${task.titel}`}\r\n          >\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" aria-hidden=\"true\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\" />\r\n            </svg>\r\n          </Link>\r\n          \r\n          {onDelete && ( // Only show delete if handler is provided\r\n            <button\r\n              type=\"button\"\r\n              onClick={handleDeleteClick}\r\n              className={`transition-colors ${\r\n                confirmDelete ? 'text-red-600 hover:text-red-700' : 'text-gray-500 hover:text-red-600'\r\n              } ${isDeleting && task.id === (confirmDelete ? task.id : undefined) ? 'opacity-50 cursor-not-allowed' : ''}`} // Visual cue for deleting\r\n              aria-label={confirmDelete ? `Bevestig verwijderen van taak ${task.titel}` : `Verwijder taak ${task.titel}`}\r\n              aria-live={confirmDelete ? \"assertive\" : \"off\"} // Announce confirmation\r\n              disabled={isDeleting && task.id === (confirmDelete ? task.id : undefined)} // Disable button during delete\r\n            >\r\n              {(isDeleting && task.id === (confirmDelete ? task.id : undefined)) ? (\r\n                <svg className=\"animate-spin h-5 w-5 text-red-600\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\r\n                  <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\r\n                  <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\r\n                </svg>\r\n              ) : confirmDelete ? (\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\r\n                  <path fillRule=\"evenodd\" d=\"M8.257 3.099A.75.75 0 007.5 3.75v1.5H4.5a.75.75 0 000 1.5h.09L5.37 15.09A2.25 2.25 0 007.618 17h4.764a2.25 2.25 0 002.248-1.911l.78-8.34h.09a.75.75 0 000-1.5H12.5v-1.5a.75.75 0 00-.75-.75h-1.5a.75.75 0 00-.743-.651zM9 3.75V5.25h2V3.75H9z\" clipRule=\"evenodd\" />\r\n                </svg>\r\n              ) : (\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" aria-hidden=\"true\">\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\r\n                </svg>\r\n              )}\r\n            </button>\r\n          )}\r\n        </div>\r\n        \r\n        <Link\r\n          href={`/taken/${task.id}/start`} // Assuming this route exists\r\n          className=\"px-3 py-1.5 bg-purple-600 text-white text-xs font-medium rounded-md hover:bg-purple-700 transition-colors focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2\" // Adjusted padding and added focus styles\r\n        >\r\n          Starten\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\tasks\\TaskExecutionPresentational.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":27,"fix":{"range":[41,41],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/types` import should occur after import of `@/lib/error-handler`","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":32,"fix":{"range":[43,195],"text":"import { AlertMessage } from '@/components/common/AlertMessage';\r\nimport { ErrorMessage } from '@/lib/error-handler';\r\nimport { Task } from '@/types';\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":34,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":34,"endColumn":52},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":50,"column":10,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":50,"endColumn":55,"fix":{"range":[1414,1447],"text":"rounded-lg bg-white p-6 shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":51,"column":11,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":51,"endColumn":49,"fix":{"range":[1472,1498],"text":"mb-4 text-xl font-semibold"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":58,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":58,"endColumn":84,"fix":{"range":[1733,1791],"text":"rounded-lg bg-gray-100 py-6 text-center font-mono text-4xl"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":68,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":68,"endColumn":213,"fix":{"range":[2166,2354],"text":"rounded-md bg-green-600 px-6 py-3 font-medium text-white transition-colors hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 disabled:bg-green-300"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":76,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":76,"endColumn":205,"fix":{"range":[2577,2757],"text":"rounded-md bg-red-600 px-6 py-3 font-medium text-white transition-colors hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 disabled:bg-red-300"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":84,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":84,"endColumn":56,"fix":{"range":[2906,2936],"text":"mt-6 rounded-lg bg-gray-50 p-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":85,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":85,"endColumn":43,"fix":{"range":[2965,2981],"text":"mb-2 font-medium"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":86,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":86,"endColumn":59,"fix":{"range":[3041,3074],"text":"whitespace-pre-wrap text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":91,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":91,"endColumn":104,"fix":{"range":[3190,3268],"text":"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 p-4"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'bg-opacity-50' should be replaced by an opacity suffix (eg. '/50')","line":91,"column":14,"nodeType":"JSXAttribute","messageId":"classnameOpacityDeprecated","endLine":91,"endColumn":104},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":92,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":92,"endColumn":102,"fix":{"range":[3298,3372],"text":"max-h-[90vh] w-full max-w-md overflow-y-auto rounded-lg bg-white shadow-xl"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":94,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":94,"endColumn":57,"fix":{"range":[3440,3466],"text":"mb-4 text-lg font-semibold"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":97,"column":112,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":97,"endColumn":136,"fix":{"range":[3716,3728],"text":"mb-3 text-sm"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":107,"column":49,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":107,"endColumn":105,"fix":{"range":[4274,4318],"text":"mb-1 block text-sm font-medium text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":110,"column":148,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":110,"endColumn":224,"fix":{"range":[4574,4638],"text":"h-2 w-full cursor-pointer appearance-none rounded-lg bg-gray-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":111,"column":26,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":111,"endColumn":85,"fix":{"range":[4680,4727],"text":"mt-1 flex justify-between text-xs text-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":117,"column":49,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":117,"endColumn":105,"fix":{"range":[4998,5042],"text":"mb-1 block text-sm font-medium text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":120,"column":148,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":120,"endColumn":224,"fix":{"range":[5304,5368],"text":"h-2 w-full cursor-pointer appearance-none rounded-lg bg-gray-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":121,"column":26,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":121,"endColumn":85,"fix":{"range":[5410,5457],"text":"mt-1 flex justify-between text-xs text-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":127,"column":57,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":127,"endColumn":113,"fix":{"range":[5719,5763],"text":"mb-1 block text-sm font-medium text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":130,"column":172,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":130,"endColumn":248,"fix":{"range":[6060,6124],"text":"h-2 w-full cursor-pointer appearance-none rounded-lg bg-gray-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":131,"column":26,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":131,"endColumn":85,"fix":{"range":[6166,6213],"text":"mt-1 flex justify-between text-xs text-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":138,"column":47,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":138,"endColumn":103,"fix":{"range":[6563,6607],"text":"mb-1 block text-sm font-medium text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":147,"column":23,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":147,"endColumn":139,"fix":{"range":[7005,7109],"text":"w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-purple-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":155,"column":47,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":155,"endColumn":103,"fix":{"range":[7369,7413],"text":"mb-1 block text-sm font-medium text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":156,"column":113,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":156,"endColumn":229,"fix":{"range":[7563,7667],"text":"w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-purple-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":164,"column":44,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":164,"endColumn":100,"fix":{"range":[8236,8280],"text":"mb-1 block text-sm font-medium text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":165,"column":119,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":165,"endColumn":235,"fix":{"range":[8444,8548],"text":"w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-purple-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":168,"column":20,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":168,"endColumn":63,"fix":{"range":[8693,8724],"text":"mt-6 flex justify-end space-x-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":169,"column":70,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":169,"endColumn":174,"fix":{"range":[8808,8900],"text":"rounded-md border border-gray-300 px-4 py-2 text-gray-700 transition-colors hover:bg-gray-50"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":170,"column":84,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":170,"endColumn":290,"fix":{"range":[9034,9228],"text":"`rounded-md bg-purple-600 px-4 py-2 font-medium text-white transition-colors hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 disabled:bg-purple-300`"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":32,"fixableErrorCount":2,"fixableWarningCount":30,"source":"'use client';\r\nimport React from 'react';\r\nimport { Task } from '@/types';\r\nimport { AlertMessage } from '@/components/common/AlertMessage';\r\nimport { ErrorMessage } from '@/lib/error-handler';\r\n\r\nexport interface FeedbackState {\r\n  pijn_score: number;\r\n  energie_voor: number; // Behoud voor consistentie, ook al wordt het niet altijd gevraagd in modal\r\n  energie_na: number;\r\n  vermoeidheid_score: number;\r\n  hartslag?: number; // Hartslag toegevoegd, optioneel\r\n  stemming: string;\r\n  notitie: string;\r\n}\r\n\r\ninterface TaskExecutionPresentationalProps {\r\n  task: Task;\r\n  isRunning: boolean;\r\n  elapsedTime: number;\r\n  showFeedbackModal: boolean;\r\n  feedback: FeedbackState;\r\n  isBusy: boolean; // Combined loading state for add/update log\r\n  mutationError: ErrorMessage | null;\r\n\r\n  onStartTask: () => void;\r\n  onStopTask: () => void;\r\n  onSubmitFeedback: () => void;\r\n  onFeedbackChange: (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => void;\r\n  onCloseFeedbackModal: () => void;\r\n  formatTime: (seconds: number) => string;\r\n}\r\n\r\nexport default function TaskExecutionPresentational({\r\n  task,\r\n  isRunning,\r\n  elapsedTime,\r\n  showFeedbackModal,\r\n  feedback,\r\n  isBusy,\r\n  mutationError,\r\n  onStartTask,\r\n  onStopTask,\r\n  onSubmitFeedback,\r\n  onFeedbackChange,\r\n  onCloseFeedbackModal,\r\n  formatTime,\r\n}: TaskExecutionPresentationalProps) {\r\n  return (\r\n    <div className=\"bg-white rounded-lg shadow-md p-6\">\r\n      <h2 className=\"text-xl font-semibold mb-4\">{task.titel}</h2>\r\n      \r\n      {mutationError && (\r\n        <AlertMessage type=\"error\" message={mutationError.userMessage || 'Er is een fout opgetreden.'} />\r\n      )}\r\n      \r\n      <div className=\"mb-6\">\r\n        <div className=\"text-4xl font-mono text-center py-6 bg-gray-100 rounded-lg\">\r\n          {formatTime(elapsedTime)}\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"flex justify-center space-x-4\">\r\n        {!isRunning && elapsedTime === 0 ? ( // Show start only if not running AND timer is at 0 (implies not started yet or reset)\r\n          <button\r\n            onClick={onStartTask}\r\n            disabled={isBusy}\r\n            className=\"px-6 py-3 bg-green-600 text-white font-medium rounded-md hover:bg-green-700 transition-colors focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 disabled:bg-green-300\"\r\n          >\r\n            {isBusy ? 'Bezig...' : 'Start Taak'}\r\n          </button>\r\n        ) : (\r\n          <button\r\n            onClick={onStopTask}\r\n            disabled={isBusy || !isRunning}\r\n            className=\"px-6 py-3 bg-red-600 text-white font-medium rounded-md hover:bg-red-700 transition-colors focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 disabled:bg-red-300\"\r\n          >\r\n            Stop Taak\r\n          </button>\r\n        )}\r\n      </div>\r\n      \r\n      {task.beschrijving && (\r\n        <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\r\n          <h3 className=\"font-medium mb-2\">Beschrijving / Instructies:</h3>\r\n          <p className=\"text-gray-700 whitespace-pre-wrap\">{task.beschrijving}</p>\r\n        </div>\r\n      )}\r\n      \r\n      {showFeedbackModal && (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\r\n          <div className=\"bg-white rounded-lg shadow-xl max-w-md w-full max-h-[90vh] overflow-y-auto\">\r\n            <div className=\"p-6\">\r\n              <h3 className=\"text-lg font-semibold mb-4\">Hoe voelde deze taak?</h3>\r\n              \r\n              {mutationError && ( // Show error from update attempt inside modal\r\n                <AlertMessage type=\"error\" message={mutationError.userMessage || 'Fout bij opslaan feedback.'} className=\"text-sm mb-3\" />\r\n              )}\r\n              \r\n              <div className=\"space-y-4\">\r\n                {/* Energie Voor - Alleen tonen als gespecificeerd in task.metingen */}\r\n                {/* Dit veld wordt momenteel niet expliciet gelogd bij start, maar kan hier alsnog gevraagd worden */}\r\n                {/* Voor nu laten we het weg uit de feedback modaal, tenzij het expliciet in metingen staat */}\r\n\r\n                {task.metingen?.includes('pijn') && (\r\n                  <div>\r\n                    <label htmlFor=\"pijn_score\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                      Pijnniveau (1-20): {feedback.pijn_score}\r\n                    </label>\r\n                    <input type=\"range\" id=\"pijn_score\" name=\"pijn_score\" min=\"1\" max=\"20\" value={feedback.pijn_score} onChange={onFeedbackChange} className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\" />\r\n                    <div className=\"flex justify-between text-xs text-gray-500 mt-1\"><span>Geen pijn</span><span>Extreme pijn</span></div>\r\n                  </div>\r\n                )}\r\n\r\n                {task.metingen?.includes('energie') && ( // Gaat over energie_na\r\n                  <div>\r\n                    <label htmlFor=\"energie_na\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                      Energieniveau na (1-20): {feedback.energie_na}\r\n                    </label>\r\n                    <input type=\"range\" id=\"energie_na\" name=\"energie_na\" min=\"1\" max=\"20\" value={feedback.energie_na} onChange={onFeedbackChange} className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\" />\r\n                    <div className=\"flex justify-between text-xs text-gray-500 mt-1\"><span>Geen energie</span><span>Vol energie</span></div>\r\n                  </div>\r\n                )}\r\n\r\n                {task.metingen?.includes('vermoeidheid') && (\r\n                  <div>\r\n                    <label htmlFor=\"vermoeidheid_score\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                      Vermoeidheidsniveau (1-20): {feedback.vermoeidheid_score}\r\n                    </label>\r\n                    <input type=\"range\" id=\"vermoeidheid_score\" name=\"vermoeidheid_score\" min=\"1\" max=\"20\" value={feedback.vermoeidheid_score} onChange={onFeedbackChange} className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\" />\r\n                    <div className=\"flex justify-between text-xs text-gray-500 mt-1\"><span>Niet vermoeid</span><span>Extreem vermoeid</span></div>\r\n                  </div>\r\n                )}\r\n                \r\n                {/* Hartslag - Nieuw veld, alleen tonen als gespecificeerd */}\r\n                {task.metingen?.includes('hartslag') && (\r\n                  <div>\r\n                    <label htmlFor=\"hartslag\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                      Hartslag (bpm, optioneel):\r\n                    </label>\r\n                    <input \r\n                      type=\"number\" \r\n                      id=\"hartslag\" \r\n                      name=\"hartslag\" \r\n                      value={feedback.hartslag || ''} // Gebruik feedback.hartslag\r\n                      onChange={onFeedbackChange} \r\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500\"\r\n                      placeholder=\"bv. 70\"\r\n                    />\r\n                  </div>\r\n                )}\r\n\r\n                {task.metingen?.includes('stemming') && (\r\n                  <div>\r\n                    <label htmlFor=\"stemming\" className=\"block text-sm font-medium text-gray-700 mb-1\">Algemeen gevoel</label>\r\n                    <select id=\"stemming\" name=\"stemming\" value={feedback.stemming} onChange={onFeedbackChange} className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500\">\r\n                      <option value=\"zeer goed\">Zeer goed</option><option value=\"goed\">Goed</option><option value=\"redelijk\">Redelijk</option><option value=\"neutraal\">Neutraal</option><option value=\"matig\">Matig</option><option value=\"slecht\">Slecht</option><option value=\"zeer slecht\">Zeer slecht</option>\r\n                    </select>\r\n                  </div>\r\n                )}\r\n                \r\n                {/* Notitie is altijd beschikbaar, tenzij anders gespecificeerd */}\r\n                <div>\r\n                  <label htmlFor=\"notitie\" className=\"block text-sm font-medium text-gray-700 mb-1\">Opmerkingen (optioneel)</label>\r\n                  <textarea id=\"notitie\" name=\"notitie\" value={feedback.notitie} onChange={onFeedbackChange} rows={3} className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500\" placeholder=\"Eventuele opmerkingen over deze taak...\"></textarea>\r\n                </div>\r\n              </div>\r\n              <div className=\"flex justify-end space-x-3 mt-6\">\r\n                <button type=\"button\" onClick={onCloseFeedbackModal} className=\"px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 transition-colors\" disabled={isBusy}>Annuleren</button>\r\n                <button type=\"button\" onClick={onSubmitFeedback} disabled={isBusy} className={`px-4 py-2 bg-purple-600 text-white font-medium rounded-md hover:bg-purple-700 transition-colors focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 disabled:bg-purple-300`}>\r\n                  {isBusy ? 'Bezig met opslaan...' : 'Opslaan'}\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\tasks\\TaskFilters.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":45,"fix":{"range":[59,59],"text":"\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":12,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":12,"endColumn":36},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":59,"column":10,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":59,"endColumn":60,"fix":{"range":[2032,2070],"text":"mb-6 rounded-lg bg-white p-6 shadow-md"}},{"ruleId":"tailwindcss/no-custom-classname","severity":1,"message":"Classname 'text-md' is not a Tailwind CSS class!","line":60,"column":11,"nodeType":"JSXAttribute","messageId":"customClassnameDetected","endLine":60,"endColumn":63},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":60,"column":11,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":60,"endColumn":63,"fix":{"range":[2095,2135],"text":"text-md mb-3 font-semibold text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":61,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":61,"endColumn":61,"fix":{"range":[2178,2215],"text":"grid grid-cols-1 gap-4 md:grid-cols-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":63,"column":40,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":63,"endColumn":96,"fix":{"range":[2284,2328],"text":"mb-1 block text-sm font-medium text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":66,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":66,"endColumn":129,"fix":{"range":[2427,2531],"text":"w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-purple-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":76,"column":43,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":76,"endColumn":99,"fix":{"range":[2899,2943],"text":"mb-1 block text-sm font-medium text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":79,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":79,"endColumn":129,"fix":{"range":[3050,3154],"text":"w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-purple-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":94,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":94,"endColumn":127,"fix":{"range":[3774,3876],"text":"w-full rounded-md bg-purple-600 px-4 py-2 font-medium text-white transition-colors hover:bg-purple-700"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":1,"fixableWarningCount":8,"source":"'use client';\r\nimport { useState, useEffect } from 'react';\r\nimport { useRouter, useSearchParams } from 'next/navigation';\r\n\r\n// Define a callback type for when filters change\r\ntype OnFilterChange = (filters: { type?: string; pattern?: string }) => void;\r\n\r\ninterface TaskFiltersProps {\r\n  onFilterChange?: OnFilterChange; // Make it optional if not always used for direct filtering\r\n}\r\n\r\nexport default function TaskFilters({ onFilterChange }: TaskFiltersProps) {\r\n  const router = useRouter();\r\n  const searchParams = useSearchParams();\r\n  \r\n  // Initialize state from URL parameters if available\r\n  const [typeFilter, setTypeFilter] = useState<string>(searchParams.get('type') || '');\r\n  const [patternFilter, setPatternFilter] = useState<string>(searchParams.get('pattern') || '');\r\n\r\n  // Apply filters when component mounts if URL parameters exist\r\n  useEffect(() => {\r\n    if ((searchParams.get('type') || searchParams.get('pattern')) && onFilterChange) {\r\n      onFilterChange({\r\n        type: searchParams.get('type') || undefined,\r\n        pattern: searchParams.get('pattern') || undefined,\r\n      });\r\n    }\r\n  }, [searchParams, onFilterChange]);\r\n\r\n  const handleApplyFilters = () => {\r\n    const currentPathname = window.location.pathname; // Gebruik huidige pathname\r\n    const params = new URLSearchParams(searchParams.toString()); // Start met bestaande params\r\n\r\n    if (typeFilter) {\r\n      params.set('type', typeFilter);\r\n    } else {\r\n      params.delete('type'); // Verwijder als leeg\r\n    }\r\n\r\n    if (patternFilter) {\r\n      params.set('pattern', patternFilter);\r\n    } else {\r\n      params.delete('pattern'); // Verwijder als leeg\r\n    }\r\n    \r\n    const queryString = params.toString();\r\n    router.push(`${currentPathname}${queryString ? `?${queryString}` : ''}`);\r\n    \r\n    // Call the callback if provided\r\n    if (onFilterChange) {\r\n      onFilterChange({\r\n        type: typeFilter || undefined,\r\n        pattern: patternFilter || undefined,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-white rounded-lg shadow-md p-6 mb-6\">\r\n      <h3 className=\"text-md font-semibold text-gray-700 mb-3\">Filter Taken</h3>\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n        <div>\r\n          <label htmlFor=\"type-filter\" className=\"block text-sm font-medium text-gray-700 mb-1\">Filter op Type:</label>\r\n          <select\r\n            id=\"type-filter\"\r\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500\"\r\n            value={typeFilter}\r\n            onChange={(e) => setTypeFilter(e.target.value)}\r\n          >\r\n            <option value=\"\">Alle Types</option>\r\n            <option value=\"taak\">Taak</option>\r\n            <option value=\"opdracht\">Opdracht</option>\r\n          </select>\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"pattern-filter\" className=\"block text-sm font-medium text-gray-700 mb-1\">Filter op Herhaling:</label>\r\n          <select\r\n            id=\"pattern-filter\"\r\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500\"\r\n            value={patternFilter}\r\n            onChange={(e) => setPatternFilter(e.target.value)}\r\n          >\r\n            <option value=\"\">Alle Patronen</option>\r\n            <option value=\"eenmalig\">Eenmalig</option>\r\n            <option value=\"dagelijks\">Dagelijks</option>\r\n            <option value=\"wekelijks\">Wekelijks</option>\r\n            <option value=\"maandelijks\">Maandelijks</option>\r\n            <option value=\"aangepast\">Aangepast</option>\r\n          </select>\r\n        </div>\r\n        <div className=\"md:self-end\">\r\n          <button\r\n            onClick={handleApplyFilters}\r\n            className=\"px-4 py-2 bg-purple-600 text-white font-medium rounded-md hover:bg-purple-700 transition-colors w-full\"\r\n          >\r\n            Filters Toepassen\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\tasks\\TaskFormPresentational.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":42,"fix":{"range":[56,56],"text":"\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Task' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":14},{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'Task' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":14,"fix":{"range":[124,156],"text":""}},{"ruleId":"import/order","severity":2,"message":"`@/lib/error-handler` import should occur before import of `@/types`","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":52,"fix":{"range":[124,243],"text":"import { ErrorMessage } from '@/lib/error-handler';\r\nimport { Task } from '@/types'; // Assuming Task type is defined\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":34,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":34,"endColumn":47},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":47,"column":29,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":47,"endColumn":74,"fix":{"range":[1523,1556],"text":"rounded-lg bg-white p-6 shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":48,"column":11,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":48,"endColumn":49,"fix":{"range":[1581,1607],"text":"mb-6 text-xl font-semibold"}},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":58,"column":11,"nodeType":"JSXOpeningElement","endLine":58,"endColumn":67},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":58,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":58,"endColumn":66,"fix":{"range":[1957,1993],"text":"mb-2 block font-medium text-gray-700"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":62,"column":90,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":93,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2192,2195],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2192,2195],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":63,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":67,"endColumn":18,"fix":{"range":[2242,2277],"text":"`rounded-md px-4 py-2 transition ${"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":73,"column":94,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":97,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2657,2660],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2657,2660],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":74,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":78,"endColumn":18,"fix":{"range":[2707,2742],"text":"`rounded-md px-4 py-2 transition ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":86,"column":34,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":86,"endColumn":82,"fix":{"range":[3099,3135],"text":"mb-2 block font-medium text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":90,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":90,"endColumn":129,"fix":{"range":[3303,3407],"text":"w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-purple-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":96,"column":41,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":96,"endColumn":89,"fix":{"range":[3547,3583],"text":"mb-2 block font-medium text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":100,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":100,"endColumn":129,"fix":{"range":[3793,3897],"text":"w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-purple-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":105,"column":33,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":105,"endColumn":81,"fix":{"range":[4017,4053],"text":"mb-2 block font-medium text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":109,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":109,"endColumn":129,"fix":{"range":[4247,4351],"text":"w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-purple-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":115,"column":44,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":115,"endColumn":92,"fix":{"range":[4519,4555],"text":"mb-2 block font-medium text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":119,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":119,"endColumn":131,"fix":{"range":[4790,4894],"text":"w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-purple-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":125,"column":44,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":125,"endColumn":92,"fix":{"range":[5031,5067],"text":"mb-2 block font-medium text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":129,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":129,"endColumn":129,"fix":{"range":[5263,5367],"text":"w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-purple-500"}},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":141,"column":13,"nodeType":"JSXOpeningElement","endLine":141,"endColumn":69},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":141,"column":20,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":141,"endColumn":68,"fix":{"range":[5835,5871],"text":"mb-2 block font-medium text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":150,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":154,"endColumn":22,"fix":{"range":[6377,6401],"text":"`rounded-md px-3 py-1 ${"}},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":164,"column":11,"nodeType":"JSXOpeningElement","endLine":164,"endColumn":67},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":164,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":164,"endColumn":66,"fix":{"range":[6829,6865],"text":"mb-2 block font-medium text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":176,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":176,"endColumn":100,"fix":{"range":[7582,7651],"text":"h-4 w-4 rounded border-gray-300 text-purple-600 focus:ring-purple-500"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-4, w-4' could be replaced by the 'size-4' shorthand!","line":176,"column":19,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":176,"endColumn":100,"fix":{"range":[7582,7651],"text":"size-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":187,"column":35,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":187,"endColumn":83,"fix":{"range":[7999,8035],"text":"mb-2 block font-medium text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":191,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":191,"endColumn":129,"fix":{"range":[8246,8350],"text":"w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-purple-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":197,"column":37,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":197,"endColumn":85,"fix":{"range":[8521,8557],"text":"mb-2 block font-medium text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":201,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":201,"endColumn":129,"fix":{"range":[8743,8847],"text":"w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-purple-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":205,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":205,"endColumn":57,"fix":{"range":[8916,8947],"text":"mt-6 flex justify-end space-x-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":208,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":208,"endColumn":117,"fix":{"range":[9039,9131],"text":"rounded-md border border-gray-300 px-4 py-2 text-gray-700 transition-colors hover:bg-gray-50"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":217,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":219,"endColumn":34,"fix":{"range":[9422,9454],"text":"cursor-not-allowed bg-purple-300"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":217,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":219,"endColumn":34,"fix":{"range":[9344,9391],"text":"`rounded-md px-4 py-2 font-medium text-white ${"}}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":30,"fixableErrorCount":3,"fixableWarningCount":28,"source":"'use client';\r\nimport React, { FormEvent } from 'react';\r\nimport { AlertMessage } from '@/components/common/AlertMessage';\r\nimport { Task } from '@/types'; // Assuming Task type is defined\r\nimport { ErrorMessage } from '@/lib/error-handler';\r\n\r\n// This defines the shape of the data the form inputs will manage\r\nexport interface TaskFormData {\r\n  type: 'taak' | 'opdracht';\r\n  titel: string;\r\n  beschrijving: string;\r\n  duur: string; // Kept as string for input compatibility\r\n  hartslag_doel: string; // Kept as string for input compatibility\r\n  herhaal_patroon: 'eenmalig' | 'dagelijks' | 'wekelijks' | 'maandelijks' | 'aangepast';\r\n  dagen_van_week: string[];\r\n  metingen: string[];\r\n  notities: string;\r\n  labels: string[];\r\n}\r\n\r\ninterface TaskFormPresentationalProps {\r\n  formState: TaskFormData;\r\n  isEditing: boolean;\r\n  isUpserting: boolean;\r\n  upsertError: ErrorMessage | null;\r\n  onFormChange: (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => void;\r\n  onDayToggle: (day: string) => void;\r\n  onMeasurementToggle: (measurement: string) => void;\r\n  onLabelChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  onSubmit: (e: FormEvent) => void;\r\n  onCancel: () => void;\r\n}\r\n\r\nexport default function TaskFormPresentational({\r\n  formState,\r\n  isEditing,\r\n  isUpserting,\r\n  upsertError,\r\n  onFormChange,\r\n  onDayToggle,\r\n  onMeasurementToggle,\r\n  onLabelChange,\r\n  onSubmit,\r\n  onCancel,\r\n}: TaskFormPresentationalProps) {\r\n  return (\r\n    <section id=\"task-form\" className=\"bg-white rounded-lg shadow-md p-6\">\r\n      <h2 className=\"text-xl font-semibold mb-6\">\r\n        {isEditing ? 'Bewerk' : 'Nieuwe'} {formState.type === 'opdracht' ? 'Opdracht' : 'Taak'}\r\n      </h2>\r\n\r\n      {upsertError && (\r\n        <AlertMessage type=\"error\" message={upsertError.userMessage || 'Opslaan van taak mislukt'} />\r\n      )}\r\n\r\n      <form onSubmit={onSubmit}>\r\n        <div className=\"mb-5\">\r\n          <label className=\"block text-gray-700 font-medium mb-2\">Type</label>\r\n          <div className=\"flex space-x-4\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => onFormChange({ target: { name: 'type', value: 'taak' } } as any)} // Simulate event\r\n              className={`px-4 py-2 rounded-md transition ${\r\n                formState.type === 'taak'\r\n                  ? 'bg-purple-600 text-white'\r\n                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\r\n              }`}\r\n            >\r\n              Taak\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => onFormChange({ target: { name: 'type', value: 'opdracht' } } as any)} // Simulate event\r\n              className={`px-4 py-2 rounded-md transition ${\r\n                formState.type === 'opdracht'\r\n                  ? 'bg-purple-600 text-white'\r\n                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\r\n              }`}\r\n            >\r\n              Opdracht\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"mb-4\">\r\n          <label htmlFor=\"titel\" className=\"block text-gray-700 font-medium mb-2\">Titel</label>\r\n          <input\r\n            id=\"titel\" name=\"titel\" type=\"text\" value={formState.titel}\r\n            onChange={onFormChange}\r\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500\"\r\n            required\r\n          />\r\n        </div>\r\n\r\n        <div className=\"mb-4\">\r\n          <label htmlFor=\"beschrijving\" className=\"block text-gray-700 font-medium mb-2\">Beschrijving / Instructies</label>\r\n          <textarea\r\n            id=\"beschrijving\" name=\"beschrijving\" value={formState.beschrijving}\r\n            onChange={onFormChange} rows={3}\r\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500\"\r\n          ></textarea>\r\n        </div>\r\n\r\n        <div className=\"mb-4\">\r\n          <label htmlFor=\"duur\" className=\"block text-gray-700 font-medium mb-2\">Duur (minuten)</label>\r\n          <input\r\n            id=\"duur\" name=\"duur\" type=\"number\" min=\"1\" max=\"480\" value={formState.duur}\r\n            onChange={onFormChange}\r\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500\"\r\n          />\r\n        </div>\r\n\r\n        {formState.type === 'opdracht' && (\r\n          <div className=\"mb-4\">\r\n            <label htmlFor=\"hartslag_doel\" className=\"block text-gray-700 font-medium mb-2\">Hartslag Doel (BPM)</label>\r\n            <input\r\n              id=\"hartslag_doel\" name=\"hartslag_doel\" type=\"number\" min=\"40\" max=\"200\" value={formState.hartslag_doel}\r\n              onChange={onFormChange}\r\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500\"\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"mb-4\">\r\n          <label htmlFor=\"herhaal_patroon\" className=\"block text-gray-700 font-medium mb-2\">Herhaalpatroon</label>\r\n          <select\r\n            id=\"herhaal_patroon\" name=\"herhaal_patroon\" value={formState.herhaal_patroon}\r\n            onChange={onFormChange}\r\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500\"\r\n          >\r\n            <option value=\"eenmalig\">Eenmalig</option>\r\n            <option value=\"dagelijks\">Dagelijks</option>\r\n            <option value=\"wekelijks\">Wekelijks</option>\r\n            <option value=\"maandelijks\">Maandelijks</option>\r\n            <option value=\"aangepast\">Aangepast</option>\r\n          </select>\r\n        </div>\r\n\r\n        {formState.herhaal_patroon === 'wekelijks' && (\r\n          <div className=\"mb-4\">\r\n            <label className=\"block text-gray-700 font-medium mb-2\">Dagen van de week</label>\r\n            <div className=\"flex flex-wrap gap-2\">\r\n              {[\r\n                { key: '0', label: 'Zo' }, { key: '1', label: 'Ma' }, { key: '2', label: 'Di' },\r\n                { key: '3', label: 'Wo' }, { key: '4', label: 'Do' }, { key: '5', label: 'Vr' },\r\n                { key: '6', label: 'Za' }\r\n              ].map(day => (\r\n                <button\r\n                  key={day.key} type=\"button\" onClick={() => onDayToggle(day.key)}\r\n                  className={`px-3 py-1 rounded-md ${\r\n                    (formState.dagen_van_week || []).includes(day.key)\r\n                      ? 'bg-purple-600 text-white'\r\n                      : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\r\n                  }`}\r\n                >\r\n                  {day.label}\r\n                </button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"mb-4\">\r\n          <label className=\"block text-gray-700 font-medium mb-2\">Te registreren metingen</label>\r\n          <div className=\"space-y-2\">\r\n            {[\r\n              { key: 'energie', label: 'Energie' }, { key: 'pijn', label: 'Pijn' },\r\n              { key: 'vermoeidheid', label: 'Vermoeidheid' }, { key: 'stemming', label: 'Stemming' },\r\n              { key: 'hartslag', label: 'Hartslag' }\r\n            ].map(measurement => (\r\n              <div key={measurement.key} className=\"flex items-center\">\r\n                <input\r\n                  id={`meting-${measurement.key}`} type=\"checkbox\"\r\n                  checked={(formState.metingen || []).includes(measurement.key)}\r\n                  onChange={() => onMeasurementToggle(measurement.key)}\r\n                  className=\"h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded\"\r\n                />\r\n                <label htmlFor={`meting-${measurement.key}`} className=\"ml-2 block text-sm text-gray-700\">\r\n                  {measurement.label}\r\n                </label>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"mb-4\">\r\n          <label htmlFor=\"labels\" className=\"block text-gray-700 font-medium mb-2\">Labels (komma-gescheiden)</label>\r\n          <input\r\n            id=\"labels\" name=\"labels\" type=\"text\" value={(formState.labels || []).join(', ')}\r\n            onChange={onLabelChange}\r\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500\"\r\n            placeholder=\"Bijv. belangrijk, werk, thuis\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"mb-4\">\r\n          <label htmlFor=\"notities\" className=\"block text-gray-700 font-medium mb-2\">Notities</label>\r\n          <textarea\r\n            id=\"notities\" name=\"notities\" value={formState.notities || ''}\r\n            onChange={onFormChange} rows={2}\r\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500\"\r\n          ></textarea>\r\n        </div>\r\n\r\n        <div className=\"flex justify-end space-x-3 mt-6\">\r\n          <button\r\n            type=\"button\" onClick={onCancel}\r\n            className=\"px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 transition-colors\"\r\n            disabled={isUpserting}\r\n          >\r\n            Annuleren\r\n          </button>\r\n          \r\n          <button\r\n            type=\"submit\"\r\n            disabled={isUpserting}\r\n            className={`px-4 py-2 rounded-md text-white font-medium ${\r\n              isUpserting ? 'bg-purple-300 cursor-not-allowed' : 'bg-purple-600 hover:bg-purple-700'\r\n            } transition-colors`}\r\n          >\r\n            {isUpserting ? 'Bezig met opslaan...' : 'Opslaan'}\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </section>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\tasks\\TaskItemCard.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":53,"fix":{"range":[69,69],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/types` import should occur after import of `next/link`","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":53,"fix":{"range":[17,218],"text":"import { CalendarDays, Zap, Edit3, Trash2, Eye } from 'lucide-react'; // Zap voor Opdracht, CalendarDays voor Taak\r\nimport Link from 'next/link';\r\nimport { Task as TaskType, TaskLog } from '@/types';\r\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Link' is defined but never used.","line":5,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":12},{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'Link' is defined but never used.","line":5,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":12,"fix":{"range":[187,220],"text":"\n"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":37,"column":9,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":37,"endColumn":97,"fix":{"range":[1461,1493],"text":"`rounded-lg border p-4 shadow ${"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'flex-grow' should be updated to 'grow' in Tailwind CSS v3!","line":39,"column":14,"nodeType":"JSXAttribute","messageId":"classnameChanged","endLine":39,"endColumn":35,"fix":{"range":[1623,1632],"text":"grow"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":40,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":40,"endColumn":50,"fix":{"range":[1662,1684],"text":"mb-1 flex items-center"}},{"ruleId":"tailwindcss/no-custom-classname","severity":1,"message":"Classname 'text-md' is not a Tailwind CSS class!","line":42,"column":17,"nodeType":"JSXAttribute","messageId":"customClassnameDetected","endLine":42,"endColumn":64},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":44,"column":36,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":44,"endColumn":74,"fix":{"range":[1900,1926],"text":"mb-2 text-sm text-gray-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":46,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":46,"endColumn":61,"fix":{"range":[2070,2103],"text":"mb-2 flex flex-wrap gap-2 text-xs"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":47,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":47,"endColumn":85,"fix":{"range":[2136,2190],"text":"rounded-full bg-purple-100 px-2 py-0.5 text-purple-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":48,"column":19,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":48,"endColumn":81,"fix":{"range":[2241,2291],"text":"rounded-full bg-gray-200 px-2 py-0.5 text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":49,"column":33,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":49,"endColumn":95,"fix":{"range":[2367,2417],"text":"rounded-full bg-gray-200 px-2 py-0.5 text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":53,"column":20,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":55,"endColumn":18,"fix":{"range":[2533,2583],"text":"`rounded-full px-2 py-0.5 text-xs font-semibold ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":61,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":61,"endColumn":56,"fix":{"range":[2889,2917],"text":"ml-4 flex-shrink-0 space-x-2"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'flex-shrink-0' should be updated to 'shrink-0' in Tailwind CSS v3!","line":61,"column":16,"nodeType":"JSXAttribute","messageId":"classnameChanged","endLine":61,"endColumn":56,"fix":{"range":[2889,2917],"text":"shrink-0 ml-4 space-x-2"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":66,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":66,"endColumn":103,"fix":{"range":[3097,3171],"text":"rounded-full p-1.5 text-gray-500 hover:bg-purple-100 hover:text-purple-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":75,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":75,"endColumn":99,"fix":{"range":[3428,3498],"text":"rounded-full p-1.5 text-gray-500 hover:bg-blue-100 hover:text-blue-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":84,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":84,"endColumn":97,"fix":{"range":[3767,3835],"text":"rounded-full p-1.5 text-gray-500 hover:bg-red-100 hover:text-red-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":94,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":94,"endColumn":94,"fix":{"range":[4031,4099],"text":"mt-3 space-y-0.5 border-t border-gray-200 pt-3 text-xs text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":95,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":95,"endColumn":57,"fix":{"range":[4128,4158],"text":"mb-1 font-medium text-gray-500"}},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":102,"column":68,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[4832,4842],"text":"Notitie: &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[4832,4842],"text":"Notitie: &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[4832,4842],"text":"Notitie: &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[4832,4842],"text":"Notitie: &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":102,"column":92,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[4865,4866],"text":"&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[4865,4866],"text":"&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[4865,4866],"text":"&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[4865,4866],"text":"&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":105,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":105,"endColumn":50,"fix":{"range":[4921,4947],"text":"mt-2 text-xs text-gray-400"}}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":3,"fixableWarningCount":17,"source":"'use client';\r\n\r\nimport { Task as TaskType, TaskLog } from '@/types';\r\nimport { CalendarDays, Zap, Edit3, Trash2, Eye } from 'lucide-react'; // Zap voor Opdracht, CalendarDays voor Taak\r\nimport Link from 'next/link';\r\n\r\n// Velden uit TaskLog die we per taak willen tonen\r\ntype TaskFeedback = Partial<Pick<TaskLog, 'pijn_score' | 'vermoeidheid_score' | 'energie_voor' | 'energie_na' | 'stemming' | 'notitie' | 'hartslag'>>; // hartslag toegevoegd\r\n\r\nexport interface TaskWithStatusAndFeedbackForCard extends TaskType {\r\n  status?: 'voltooid' | 'openstaand'; \r\n  feedback?: TaskFeedback;\r\n  voltooid_op?: string | Date | null; // Datum/tijd van voltooiing\r\n}\r\n\r\ninterface TaskItemCardProps {\r\n  task: TaskWithStatusAndFeedbackForCard;\r\n  showActions?: boolean; // Om actieknoppen te tonen/verbergen (bijv. niet op patiënt dashboard)\r\n  onViewLog?: (taskId: string) => void; // Actie voor bekijken log/starten\r\n  onEdit?: (task: TaskType) => void;\r\n  onDelete?: (taskId: string) => void;\r\n}\r\n\r\nconst TaskItemCard: React.FC<TaskItemCardProps> = ({ \r\n  task, \r\n  showActions = false, \r\n  onViewLog, \r\n  onEdit, \r\n  onDelete \r\n}) => {\r\n  const Icon = task.type === 'opdracht' ? Zap : CalendarDays;\r\n  const cardBgColor = task.status === 'voltooid' ? 'bg-green-50 hover:bg-green-100' : \r\n                      task.status === 'openstaand' ? 'bg-orange-50 hover:bg-orange-100' : \r\n                      'bg-gray-50 hover:bg-gray-100';\r\n\r\n  return (\r\n    <li className={`p-4 rounded-lg shadow border ${cardBgColor} transition-colors duration-150`}>\r\n      <div className=\"flex items-start justify-between\">\r\n        <div className=\"flex-grow\">\r\n          <div className=\"flex items-center mb-1\">\r\n            <Icon size={18} className=\"mr-2 text-purple-600\" />\r\n            <h3 className=\"text-md font-semibold text-gray-800\">{task.titel}</h3>\r\n          </div>\r\n          {task.beschrijving && <p className=\"text-sm text-gray-600 mb-2\">{task.beschrijving.length > 100 ? task.beschrijving.substring(0, 97) + '...' : task.beschrijving}</p>}\r\n          \r\n          <div className=\"flex flex-wrap gap-2 text-xs mb-2\">\r\n            <span className=\"px-2 py-0.5 bg-purple-100 text-purple-700 rounded-full\">{task.type}</span>\r\n            <span className=\"px-2 py-0.5 bg-gray-200 text-gray-700 rounded-full\">{task.herhaal_patroon}</span>\r\n            {task.duur && <span className=\"px-2 py-0.5 bg-gray-200 text-gray-700 rounded-full\">{task.duur} min</span>}\r\n          </div>\r\n          \r\n          {task.status && (\r\n             <span className={`px-2 py-0.5 text-xs font-semibold rounded-full ${\r\n                task.status === 'voltooid' ? 'bg-green-200 text-green-800' : 'bg-orange-200 text-orange-800'\r\n              }`}>\r\n                {task.status}\r\n              </span>\r\n          )}\r\n        </div>\r\n        {showActions && (onViewLog || onEdit || onDelete) && (\r\n          <div className=\"flex-shrink-0 ml-4 space-x-2\">\r\n            {onViewLog && (\r\n              <button \r\n                onClick={() => onViewLog(task.id)} \r\n                title=\"Bekijk/Start Taak\"\r\n                className=\"p-1.5 text-gray-500 hover:text-purple-600 rounded-full hover:bg-purple-100\"\r\n              >\r\n                <Eye size={18} />\r\n              </button>\r\n            )}\r\n            {onEdit && (\r\n              <button \r\n                onClick={() => onEdit(task)} \r\n                title=\"Bewerk Taak\"\r\n                className=\"p-1.5 text-gray-500 hover:text-blue-600 rounded-full hover:bg-blue-100\"\r\n              >\r\n                <Edit3 size={18} />\r\n              </button>\r\n            )}\r\n            {onDelete && (\r\n              <button \r\n                onClick={() => onDelete(task.id)} \r\n                title=\"Verwijder Taak\"\r\n                className=\"p-1.5 text-gray-500 hover:text-red-600 rounded-full hover:bg-red-100\"\r\n              >\r\n                <Trash2 size={18} />\r\n              </button>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {task.feedback && (\r\n        <div className=\"mt-3 pt-3 border-t border-gray-200 text-xs text-gray-700 space-y-0.5\">\r\n          <h4 className=\"font-medium text-gray-500 mb-1\">Feedback:</h4>\r\n          {task.feedback.pijn_score !== undefined && <p>Pijn: {task.feedback.pijn_score}/20</p>}\r\n          {task.feedback.vermoeidheid_score !== undefined && <p>Vermoeidheid: {task.feedback.vermoeidheid_score}/20</p>}\r\n          {task.feedback.energie_voor !== undefined && task.feedback.energie_na !== undefined && \r\n            <p>Energie: {task.feedback.energie_voor}/20 &rarr; {task.feedback.energie_na}/20</p>}\r\n          {task.feedback.hartslag !== undefined && <p>Hartslag: {task.feedback.hartslag} bpm</p>}\r\n          {task.feedback.stemming && <p>Stemming: {task.feedback.stemming}</p>}\r\n          {task.feedback.notitie && <p className=\"italic\">Notitie: \"{task.feedback.notitie}\"</p>}\r\n        </div>\r\n      )}\r\n      <div className=\"text-xs text-gray-400 mt-2\">\r\n        <p>Aangemaakt op: {new Date(task.created_at).toLocaleDateString('nl-BE')}</p>\r\n        {task.status === 'voltooid' && task.voltooid_op && (\r\n          <p>Voltooid op: {new Date(task.voltooid_op).toLocaleString('nl-BE', { dateStyle: 'short', timeStyle: 'short' })}</p>\r\n        )}\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default TaskItemCard;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\tasks\\TaskList.tsx","messages":[{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":18,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":18,"endColumn":45,"fix":{"range":[550,566],"text":"py-8 text-center"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":22,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":22,"endColumn":58,"fix":{"range":[652,681],"text":"py-8 text-center text-red-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":26,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":26,"endColumn":59,"fix":{"range":[840,870],"text":"py-8 text-center text-gray-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":30,"column":10,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":30,"endColumn":74,"fix":{"range":[945,997],"text":"grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":32,"column":28,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":32,"endColumn":143,"fix":{"range":[1075,1178],"text":"rounded-lg border border-gray-200 bg-white p-6 shadow-md transition-shadow duration-200 hover:shadow-lg"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":34,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":34,"endColumn":71,"fix":{"range":[1272,1314],"text":"mb-2 text-xl font-semibold text-purple-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":35,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":35,"endColumn":54,"fix":{"range":[1361,1387],"text":"mb-3 text-sm text-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":36,"column":38,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":36,"endColumn":89,"fix":{"range":[1511,1550],"text":"mb-3 line-clamp-2 text-sm text-gray-600"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":38,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":38,"endColumn":61,"fix":{"range":[1620,1651],"text":"space-y-1 text-sm text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":51,"column":52,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":51,"endColumn":88,"fix":{"range":[2609,2633],"text":"line-clamp-1 font-medium"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":52,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":52,"endColumn":56,"fix":{"range":[2692,2718],"text":"mt-2 text-xs text-gray-400"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":11,"source":"'use client';\r\n\r\nimport Link from 'next/link';\r\n\r\nimport { ErrorMessage } from '@/lib/error-handler'; // Import ErrorMessage type\r\nimport { Task } from '@/types'; // Import Task type\r\nimport { formatDate } from '@/utils/validation'; // Assuming formatDate is useful\r\n\r\ninterface TaskListProps {\r\n  tasks: Task[] | null;\r\n  isLoading: boolean;\r\n  isError: boolean;\r\n  error: ErrorMessage | null;\r\n}\r\n\r\nexport default function TaskList({ tasks, isLoading, isError, error }: TaskListProps): JSX.Element {\r\n  if (isLoading) {\r\n    return <div className=\"text-center py-8\">Laden van opdrachten...</div>;\r\n  }\r\n\r\n  if (isError) {\r\n    return <div className=\"text-center py-8 text-red-600\">Fout bij het laden van opdrachten: {error?.userMessage || 'Onbekende fout'}</div>;\r\n  }\r\n\r\n  if (!tasks || tasks.length === 0) {\r\n    return <div className=\"text-center py-8 text-gray-600\">Geen opdrachten gevonden.</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n      {tasks.map((task: Task) => (\r\n        <div key={task.id} className=\"bg-white rounded-lg shadow-md p-6 border border-gray-200 hover:shadow-lg transition-shadow duration-200\">\r\n          <Link href={`/taken/${task.id}`} className=\"block\">\r\n            <h2 className=\"text-xl font-semibold text-purple-700 mb-2\">{task.titel}</h2>\r\n            <p className=\"text-sm text-gray-500 mb-3\">Type: <span className=\"font-medium text-gray-700\">{task.type}</span></p>\r\n            {task.beschrijving && <p className=\"text-gray-600 text-sm mb-3 line-clamp-2\">{task.beschrijving}</p>}\r\n            \r\n            <div className=\"text-sm text-gray-700 space-y-1\">\r\n              {task.duur && <p>Duur: <span className=\"font-medium\">{task.duur} minuten</span></p>}\r\n              {task.hartslag_doel && <p>Hartslag doel: <span className=\"font-medium\">{task.hartslag_doel} bpm</span></p>}\r\n              {task.herhaal_patroon && <p>Herhaal patroon: <span className=\"font-medium\">{task.herhaal_patroon}</span></p>}\r\n              {task.dagen_van_week && task.dagen_van_week.length > 0 && (\r\n                <p>Dagen: <span className=\"font-medium\">{task.dagen_van_week.join(', ')}</span></p>\r\n              )}\r\n              {task.metingen && task.metingen.length > 0 && (\r\n                <p>Metingen: <span className=\"font-medium\">{task.metingen.join(', ')}</span></p>\r\n              )}\r\n              {task.labels && task.labels.length > 0 && (\r\n                <p>Labels: <span className=\"font-medium\">{task.labels.join(', ')}</span></p>\r\n              )}\r\n              {task.notities && <p>Notities: <span className=\"font-medium line-clamp-1\">{task.notities}</span></p>}\r\n              <p className=\"text-xs text-gray-400 mt-2\">Aangemaakt op: {formatDate(task.created_at)}</p>\r\n            </div>\r\n          </Link>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\tasks\\TaskLogsLoadingSkeleton.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":1,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":1,"endColumn":48},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":3,"column":10,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":3,"endColumn":55,"fix":{"range":[85,118],"text":"rounded-lg bg-white p-6 shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":4,"column":11,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":4,"endColumn":49,"fix":{"range":[143,169],"text":"mb-4 text-lg font-semibold"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":7,"column":24,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":7,"endColumn":63,"fix":{"range":[318,345],"text":"h-16 rounded-md bg-gray-200"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":3,"source":"export default function TaskLogsLoadingSkeleton() {\r\n  return (\r\n    <div className=\"bg-white rounded-lg shadow-md p-6\">\r\n      <h2 className=\"text-lg font-semibold mb-4\">Activiteiten Logs</h2>\r\n      <div className=\"animate-pulse space-y-3\">\r\n        {[...Array(3)].map((_, i) => (\r\n          <div key={i} className=\"bg-gray-200 h-16 rounded-md\"></div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\tasks\\TaskLogsPresentational.tsx","messages":[{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":96,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":96,"endColumn":175,"fix":{"range":[3705,3853],"text":"flex w-full items-center justify-between px-4 py-3 text-left hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-purple-500"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\r\nimport React from 'react';\r\n\r\nimport Link from 'next/link';\r\n\r\nimport { AlertMessage } from '@/components/common/AlertMessage';\r\nimport { SkeletonLoader } from '@/components/ui/SkeletonLoader';\r\nimport { ErrorMessage } from '@/lib/error-handler';\r\nimport { RecentLogWithTaskTitle } from '@/types'; // Import RecentLogWithTaskTitle from types\r\nimport { formatDate as utilFormatDate } from '@/utils/validation'; // Import formatDate from utils\r\n\r\ninterface TaskLogsPresentationalProps {\r\n  logsToDisplay: RecentLogWithTaskTitle[];\r\n  isLoading: boolean;\r\n  isError: boolean;\r\n  error: ErrorMessage | null;\r\n  expandedLogId: string | null;\r\n  onToggleExpand: (id: string) => void;\r\n  // Removed calculateDuration prop\r\n  limit: number;\r\n  taskId?: string; // For \"Bekijk alle logs\" link context\r\n  className?: string;\r\n  title?: string; // Allow custom title\r\n}\r\n\r\nexport default function TaskLogsPresentational({\r\n  logsToDisplay,\r\n  isLoading,\r\n  isError,\r\n  error,\r\n  expandedLogId,\r\n  onToggleExpand,\r\n  // Removed calculateDuration from destructuring\r\n  limit,\r\n  taskId,\r\n  className = '',\r\n  title = \"Activiteiten Logs\"\r\n}: TaskLogsPresentationalProps): JSX.Element {\r\n\r\n  // Define calculateDuration directly in this component\r\n  const calculateDuration = (startTime?: Date | string, endTime?: Date | string): string => {\r\n    if (!startTime || !endTime) return 'Onbekend';\r\n    const start = new Date(startTime);\r\n    const end = new Date(endTime);\r\n    const durationMs = end.getTime() - start.getTime();\r\n    if (durationMs < 0) return 'Ongeldig'; // Should not happen\r\n    const hours = Math.floor(durationMs / (1000 * 60 * 60));\r\n    const minutes = Math.floor((durationMs % (1000 * 60 * 60)) / (1000 * 60));\r\n    const seconds = Math.floor((durationMs % (1000 * 60)) / 1000);\r\n    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\r\n  };\r\n\r\n  if (isLoading && logsToDisplay.length === 0) {\r\n    return (\r\n      <div className={`${className} rounded-lg bg-white p-6 shadow-md`}>\r\n        <h2 className=\"mb-4 text-lg font-semibold\">{title}</h2>\r\n        <SkeletonLoader count={limit > 5 ? 5 : limit} type=\"logs\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (isError && error) {\r\n    return (\r\n      <div className={`${className} rounded-lg bg-white p-6 shadow-md`}>\r\n        <h2 className=\"mb-4 text-lg font-semibold\">{title}</h2>\r\n        <AlertMessage message={error.userMessage || 'Kon de logs niet ophalen.'} title=\"Fout bij laden logs\" type=\"error\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (logsToDisplay.length === 0) {\r\n    return (\r\n      <div className={`${className} rounded-lg bg-white p-6 shadow-md`}>\r\n        <h2 className=\"mb-4 text-lg font-semibold\">{title}</h2>\r\n        <div className=\"rounded-lg border-2 border-dashed border-gray-200 p-4 text-center\">\r\n          <p className=\"text-gray-500\">Geen activiteiten logs gevonden</p>\r\n          {!taskId && ( // Only show general link if not specific to a task\r\n            <Link className=\"mt-2 inline-block text-sm font-medium text-purple-600 hover:text-purple-800\" href=\"/taken/logs\">\r\n              Bekijk alle logs\r\n            </Link>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={`${className} rounded-lg bg-white p-6 shadow-md`}>\r\n      <h2 className=\"mb-4 text-lg font-semibold\">{title}</h2>\r\n      <div className=\"space-y-3\">\r\n        {logsToDisplay.map(log => (\r\n          <div key={log.id} className=\"overflow-hidden rounded-lg border transition-all duration-200\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => onToggleExpand(log.id)}\r\n              className=\"flex w-full items-center justify-between px-4 py-3 text-left focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-inset hover:bg-gray-50\"\r\n              aria-expanded={expandedLogId === log.id} // Pass boolean directly\r\n              aria-controls={`log-details-${log.id}`}\r\n            >\r\n              <div>\r\n                <h3 className=\"font-medium text-gray-900\">\r\n                  {log.tasks?.titel || 'Onbekende taak'} \r\n                </h3>\r\n                <p className=\"text-sm text-gray-500\">\r\n                  {utilFormatDate(log.start_tijd)} {/* Use utilFormatDate */}\r\n                  {log.eind_tijd && ` - ${utilFormatDate(log.eind_tijd)}`} {/* Use utilFormatDate */}\r\n                </p>\r\n              </div>\r\n              <div className=\"flex items-center\">\r\n                {log.eind_tijd ? (\r\n                  <span className=\"mr-2 rounded-full bg-green-100 px-2 py-0.5 text-sm text-green-800\">Voltooid</span>\r\n                ) : (\r\n                  <span className=\"mr-2 rounded-full bg-yellow-100 px-2 py-0.5 text-sm text-yellow-800\">Actief</span>\r\n                )}\r\n                <svg aria-hidden=\"true\" className={`size-5 text-gray-400 transition-transform duration-200 ${expandedLogId === log.id ? 'rotate-180' : ''}`} fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                  <path clipRule=\"evenodd\" d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\" fillRule=\"evenodd\" />\r\n                </svg>\r\n              </div>\r\n            </button>\r\n            \r\n            {expandedLogId === log.id && (\r\n              <div id={`log-details-${log.id}`} className=\"border-t border-gray-200 bg-gray-50 px-4 py-3\">\r\n                <div className=\"mb-3 grid grid-cols-1 gap-4 md:grid-cols-2\">\r\n                  <div>\r\n                    <h4 className=\"mb-1 text-xs font-medium uppercase text-gray-500\">Taak Details</h4>\r\n                    {log.tasks && (\r\n                      <div className=\"space-y-1\">\r\n                        <p className=\"text-sm\"><span className=\"font-medium\">Type:</span> {log.tasks.type === 'taak' ? 'Taak' : 'Opdracht'}</p>\r\n                        {log.eind_tijd && <p className=\"text-sm\"><span className=\"font-medium\">Voltooid op:</span> {utilFormatDate(log.eind_tijd)}</p>} {/* Added \"Voltooid op\" */}\r\n                        <p className=\"text-sm\"><span className=\"font-medium\">Werkelijke duur:</span> {log.eind_tijd ? calculateDuration(log.start_tijd, log.eind_tijd) : 'Nog bezig'}</p>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  <div>\r\n                    <h4 className=\"mb-1 text-xs font-medium uppercase text-gray-500\">Metingen</h4>\r\n                    <div className=\"space-y-1\">\r\n                      {log.energie_voor !== null && (<p className=\"text-sm\"><span className=\"font-medium\">Energie voor:</span> {log.energie_voor}/20</p>)}\r\n                      {log.energie_na !== null && (<p className=\"text-sm\"><span className=\"font-medium\">Energie na:</span> {log.energie_na}/20</p>)}\r\n                      {log.pijn_score !== null && (<p className=\"text-sm\"><span className=\"font-medium\">Pijn:</span> {log.pijn_score}/20</p>)}\r\n                      {log.vermoeidheid_score !== null && (<p className=\"text-sm\"><span className=\"font-medium\">Vermoeidheid:</span> {log.vermoeidheid_score}/20</p>)}\r\n                      {log.stemming && (<p className=\"text-sm\"><span className=\"font-medium\">Stemming:</span> {log.stemming}</p>)}\r\n                      {log.hartslag !== null && (<p className=\"text-sm\"><span className=\"font-medium\">Hartslag:</span> {log.hartslag} bpm</p>)} {/* Added hartslag */}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                {log.notitie && (<div className=\"mb-3\"><h4 className=\"mb-1 text-xs font-medium uppercase text-gray-500\">Notitie</h4><p className=\"whitespace-pre-wrap text-sm text-gray-700\">{log.notitie}</p></div>)}\r\n                {log.ai_validatie && (\r\n                  <div className=\"rounded-md border border-purple-200 bg-purple-50 p-3\">\r\n                    <div className=\"mb-1 flex items-center text-sm font-medium text-purple-700\">\r\n                      <svg aria-hidden=\"true\" className=\"mr-1.5 size-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} /></svg>\r\n                      <span>AI Inzicht</span>\r\n                    </div>\r\n                    <p className=\"text-sm text-purple-800\">{log.ai_validatie}</p>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      {logsToDisplay.length >= limit && (\r\n        <div className=\"mt-4 text-center\">\r\n          <Link className=\"text-sm font-medium text-purple-600 hover:text-purple-800\" href={taskId ? `/taken/${taskId}/logs` : \"/taken/logs\"}>\r\n            Bekijk alle logs\r\n          </Link>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\ui\\ConditionalRender.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":35,"fix":{"range":[34,34],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":51,"fix":{"range":[140,140],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`./SkeletonLoader` import should occur after import of `@/lib/error-handler`","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":51,"fix":{"range":[36,386],"text":"import { AlertMessage } from '@/components/common/AlertMessage'; // Path to existing AlertMessage\r\nimport { ErrorResponse } from '@/types/core'; // Path to core types\r\nimport { ErrorMessage } from '@/lib/error-handler'; // Import ErrorMessage\r\nimport { SkeletonLoader } from './SkeletonLoader'; // Assumes SkeletonLoader is in the same ui directory\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/types/core` import should occur after import of `@/lib/error-handler`","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":46,"fix":{"range":[241,386],"text":"import { ErrorMessage } from '@/lib/error-handler'; // Import ErrorMessage\r\nimport { ErrorResponse } from '@/types/core'; // Path to core types\r\n"}}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"import { ReactNode } from 'react';\r\nimport { SkeletonLoader } from './SkeletonLoader'; // Assumes SkeletonLoader is in the same ui directory\r\nimport { AlertMessage } from '@/components/common/AlertMessage'; // Path to existing AlertMessage\r\nimport { ErrorResponse } from '@/types/core'; // Path to core types\r\nimport { ErrorMessage } from '@/lib/error-handler'; // Import ErrorMessage\r\n\r\ninterface ConditionalRenderProps<T> {\r\n  isLoading: boolean;\r\n  isError: boolean;\r\n  error: ErrorResponse | ErrorMessage | null; // Allow ErrorMessage from hooks too\r\n  data: T | undefined | null;\r\n  loadingFallback?: ReactNode;\r\n  errorFallback?: ReactNode;\r\n  emptyFallback?: ReactNode;\r\n  skeletonType?: 'tasks' | 'profile' | 'logs' | 'reflecties' | 'card' | 'list' | 'form' | 'default'; // Match SkeletonLoader types\r\n  children: (data: NonNullable<T>) => ReactNode;\r\n}\r\n\r\nexport function ConditionalRender<T>({\r\n  isLoading,\r\n  isError,\r\n  error,\r\n  data,\r\n  loadingFallback,\r\n  errorFallback,\r\n  emptyFallback,\r\n  skeletonType = 'default',\r\n  children\r\n}: ConditionalRenderProps<T>): ReactNode {\r\n  if (isLoading) {\r\n    // If a specific loading fallback is provided, use it. Otherwise, use SkeletonLoader.\r\n    if (loadingFallback) return loadingFallback;\r\n    // Ensure skeletonType is a valid key for SkeletonLoader or handle 'default'\r\n    const validSkeletonType = skeletonType === 'default' ? 'card' : skeletonType; // Example default\r\n    return <SkeletonLoader type={validSkeletonType} />;\r\n  }\r\n  \r\n  const typedError = error as (ErrorResponse | ErrorMessage | null); // Help TS with union type\r\n\r\n  if (isError) {\r\n    if (errorFallback) return errorFallback;\r\n    // Try to get a user-friendly message, accommodating both ErrorResponse and ErrorMessage\r\n    const errorMessage = \r\n      (typedError && 'userMessage' in typedError && typedError.userMessage) || // For ErrorMessage\r\n      (typedError && 'message' in typedError && typedError.message) ||         // For ErrorResponse or generic Error\r\n      'Er is een onbekende fout opgetreden.';\r\n    return (\r\n      <AlertMessage \r\n        type=\"error\" \r\n        message={errorMessage} \r\n      />\r\n    );\r\n  }\r\n  \r\n  // Check for null or undefined data, or empty array if data is an array\r\n  const isDataEmpty = data === null || data === undefined || (Array.isArray(data) && data.length === 0);\r\n\r\n  if (isDataEmpty) {\r\n    return emptyFallback || <div className=\"p-4 text-center text-gray-500\">Geen gegevens beschikbaar.</div>;\r\n  }\r\n  \r\n  // At this point, data is non-nullable and not an empty array (if it was an array)\r\n  // The NonNullable<T> cast might still be needed if T itself could be an empty array type.\r\n  // However, if data is an empty array, isDataEmpty would be true.\r\n  // So, if we reach here and data was an array, it's a non-empty array.\r\n  return children(data as NonNullable<T>);\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\ui\\NotificationList.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":82,"fix":{"range":[149,149],"text":"\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NotificationAction' is defined but never used.","line":2,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":42},{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'NotificationAction' is defined but never used.","line":2,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":42,"fix":{"range":[60,80],"text":""}},{"ruleId":"import/order","severity":2,"message":"`react` import should occur before import of `@/context/NotificationContext`","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":56,"fix":{"range":[39,228],"text":"import { useEffect, useState, ReactNode } from 'react'; // Import ReactNode\r\nimport { Notification, NotificationAction } from '@/context/NotificationContext'; // Import NotificationAction\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":10,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":10,"endColumn":33},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":16,"column":10,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":16,"endColumn":100,"fix":{"range":[543,621],"text":"fixed bottom-4 right-4 z-[100] flex w-full max-w-xs flex-col gap-3 sm:max-w-sm"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-6, w-6' could be replaced by the 'size-6' shorthand!","line":50,"column":12,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":50,"endColumn":46,"fix":{"range":[1735,1757],"text":"size-6 text-green-500"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-6, w-6' could be replaced by the 'size-6' shorthand!","line":55,"column":12,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":55,"endColumn":44,"fix":{"range":[2104,2124],"text":"size-6 text-red-500"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-6, w-6' could be replaced by the 'size-6' shorthand!","line":60,"column":12,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":60,"endColumn":47,"fix":{"range":[2523,2546],"text":"size-6 text-yellow-500"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-6, w-6' could be replaced by the 'size-6' shorthand!","line":65,"column":12,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":65,"endColumn":45,"fix":{"range":[2936,2957],"text":"size-6 text-blue-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":75,"column":7,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":75,"endColumn":237,"fix":{"range":[3532,3583],"text":"} flex w-full items-start rounded-md p-4 shadow-lg`"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'transform' is not needed in Tailwind CSS v3!","line":75,"column":7,"nodeType":"JSXAttribute","messageId":"classnameNotNeeded","endLine":75,"endColumn":237,"fix":{"range":[3365,3418],"text":"`transition-all duration-300 ease-in-out${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":79,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":79,"endColumn":42,"fix":{"range":[3711,3729],"text":"mr-3 flex-shrink-0"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'flex-shrink-0' should be updated to 'shrink-0' in Tailwind CSS v3!","line":79,"column":12,"nodeType":"JSXAttribute","messageId":"classnameChanged","endLine":79,"endColumn":42,"fix":{"range":[3711,3729],"text":"shrink-0 mr-3"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'flex-grow' should be updated to 'grow' in Tailwind CSS v3!","line":82,"column":12,"nodeType":"JSXAttribute","messageId":"classnameChanged","endLine":82,"endColumn":33,"fix":{"range":[3793,3802],"text":"grow"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":99,"column":9,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":99,"endColumn":212,"fix":{"range":[4411,4602],"text":"-mx-1.5 -my-1.5 ml-3 inline-flex h-8 w-8 items-center justify-center rounded-lg p-1.5 text-gray-500 hover:text-gray-700 focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-offset-2"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-8, w-8' could be replaced by the 'size-8' shorthand!","line":99,"column":9,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":99,"endColumn":212,"fix":{"range":[4411,4602],"text":"ml-3 -m-1.5 rounded-lg p-1.5 inline-flex items-center justify-center size-8 text-gray-500 hover:text-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-400"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames '-mx-1.5, -my-1.5' could be replaced by the '-m-1.5' shorthand!","line":99,"column":9,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":99,"endColumn":212,"fix":{"range":[4411,4602],"text":"ml-3 -m-1.5 rounded-lg p-1.5 inline-flex items-center justify-center size-8 text-gray-500 hover:text-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-400"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-4, w-4' could be replaced by the 'size-4' shorthand!","line":104,"column":14,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":104,"endColumn":33,"fix":{"range":[4771,4778],"text":"size-4"}}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":3,"fixableWarningCount":14,"source":"// components/ui/NotificationList.tsx\r\nimport { Notification, NotificationAction } from '@/context/NotificationContext'; // Import NotificationAction\r\nimport { useEffect, useState, ReactNode } from 'react'; // Import ReactNode\r\n\r\ninterface NotificationListProps {\r\n  notifications: Notification[];\r\n  onDismiss: (id: string) => void;\r\n}\r\n\r\nexport function NotificationList({ notifications, onDismiss }: NotificationListProps) {\r\n  if (!notifications || notifications.length === 0) {\r\n    return null;\r\n  }\r\n  \r\n  return (\r\n    <div className=\"fixed bottom-4 right-4 z-[100] flex flex-col gap-3 max-w-xs sm:max-w-sm w-full\"> {/* Increased z-index, gap, w-full */}\r\n      {notifications.map(notification => (\r\n        <NotificationItem \r\n          key={notification.id}\r\n          notification={notification} \r\n          onDismiss={onDismiss} \r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\ninterface NotificationItemProps {\r\n  notification: Notification; // Notification type now includes action, isHtml, icon\r\n  onDismiss: (id: string) => void;\r\n}\r\n\r\nfunction NotificationItem({ notification, onDismiss }: NotificationItemProps) {\r\n  const [isVisible, setIsVisible] = useState(false);\r\n  \r\n  useEffect(() => {\r\n    setIsVisible(true);\r\n  }, []);\r\n  \r\n  const typeStyles = {\r\n    success: 'bg-green-100 border-green-500 text-green-800', // Adjusted colors for better contrast/look\r\n    error: 'bg-red-100 border-red-500 text-red-800',\r\n    warning: 'bg-yellow-100 border-yellow-500 text-yellow-800',\r\n    info: 'bg-blue-100 border-blue-500 text-blue-800',\r\n  };\r\n  \r\n  // Default icons, can be overridden by notification.icon\r\n  const defaultTypeIcons: Record<Notification['type'], ReactNode> = {\r\n    success: (\r\n      <svg className=\"h-6 w-6 text-green-500\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\"> {/* Increased size slightly */}\r\n        <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\r\n      </svg>\r\n    ),\r\n    error: (\r\n      <svg className=\"h-6 w-6 text-red-500\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\r\n        <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\r\n      </svg>\r\n    ),\r\n    warning: (\r\n      <svg className=\"h-6 w-6 text-yellow-500\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\r\n        <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\r\n      </svg>\r\n    ),\r\n    info: (\r\n      <svg className=\"h-6 w-6 text-blue-500\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\r\n        <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clipRule=\"evenodd\" />\r\n      </svg>\r\n    ),\r\n  };\r\n\r\n  const iconToRender = notification.icon || defaultTypeIcons[notification.type];\r\n  \r\n  return (\r\n    <div \r\n      className={`transform transition-all duration-300 ease-in-out ${isVisible ? 'translate-x-0 opacity-100' : 'translate-x-full opacity-0'} border-l-4 ${typeStyles[notification.type]} p-4 shadow-lg rounded-md flex items-start w-full`} \r\n      role=\"alert\"\r\n      aria-live={notification.type === 'error' ? 'assertive' : 'polite'} \r\n    >\r\n      <div className=\"flex-shrink-0 mr-3\">\r\n        {iconToRender}\r\n      </div>\r\n      <div className=\"flex-grow\">\r\n        {notification.isHtml ? (\r\n          <div className=\"text-sm font-medium\" dangerouslySetInnerHTML={{ __html: notification.message }} />\r\n        ) : (\r\n          <p className=\"text-sm font-medium\">{notification.message}</p>\r\n        )}\r\n        {notification.action && (\r\n          <button \r\n            onClick={notification.action.onClick}\r\n            className=\"mt-2 text-xs font-semibold underline hover:opacity-80\" // Adjusted style\r\n          >\r\n            {notification.action.label}\r\n          </button>\r\n        )}\r\n      </div>\r\n      <button\r\n        type=\"button\"\r\n        className=\"ml-3 -mx-1.5 -my-1.5 rounded-lg p-1.5 inline-flex items-center justify-center h-8 w-8 text-gray-500 hover:text-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-400\" \r\n        onClick={() => onDismiss(notification.id)}\r\n        aria-label=\"Sluiten\"\r\n      >\r\n        <span className=\"sr-only\">Sluiten</span>\r\n        <svg className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\r\n        </svg>\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\components\\ui\\SkeletonLoader.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":7,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":7,"endColumn":31},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":10,"column":20,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":10,"endColumn":94,"fix":{"range":[412,463],"text":"`animate-pulse rounded-lg bg-white p-5 shadow-md ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":11,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":11,"endColumn":58,"fix":{"range":[500,534],"text":"mb-3 h-6 w-3/4 rounded bg-gray-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":12,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":12,"endColumn":59,"fix":{"range":[566,601],"text":"mb-2 h-4 w-full rounded bg-gray-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":13,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":13,"endColumn":58,"fix":{"range":[633,667],"text":"mb-4 h-4 w-5/6 rounded bg-gray-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":14,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":14,"endColumn":87,"fix":{"range":[699,762],"text":"flex items-center justify-between border-t border-gray-100 pt-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":15,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":15,"endColumn":57,"fix":{"range":[790,821],"text":"h-6 w-20 rounded-md bg-gray-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":16,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":16,"endColumn":58,"fix":{"range":[855,887],"text":"h-8 w-8 rounded-full bg-gray-200"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-8, w-8' could be replaced by the 'size-8' shorthand!","line":16,"column":14,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":16,"endColumn":58,"fix":{"range":[855,887],"text":"size-8 bg-gray-200 rounded-full"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":22,"column":20,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":22,"endColumn":79,"fix":{"range":[1011,1058],"text":"animate-pulse rounded-lg bg-white p-5 shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":23,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":23,"endColumn":45,"fix":{"range":[1084,1105],"text":"mb-3 flex items-start"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":24,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":24,"endColumn":82,"fix":{"range":[1133,1189],"text":"mr-3 mt-1 h-6 w-6 flex-shrink-0 rounded-full bg-gray-200"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-6, w-6' could be replaced by the 'size-6' shorthand!","line":24,"column":14,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":24,"endColumn":82,"fix":{"range":[1133,1189],"text":"flex-shrink-0 mt-1 mr-3 size-6 bg-gray-200 rounded-full"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'flex-shrink-0' should be updated to 'shrink-0' in Tailwind CSS v3!","line":24,"column":14,"nodeType":"JSXAttribute","messageId":"classnameChanged","endLine":24,"endColumn":82,"fix":{"range":[1133,1189],"text":"shrink-0 mt-1 mr-3 h-6 w-6 bg-gray-200 rounded-full"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'flex-grow' should be updated to 'grow' in Tailwind CSS v3!","line":25,"column":14,"nodeType":"JSXAttribute","messageId":"classnameChanged","endLine":25,"endColumn":35,"fix":{"range":[1223,1232],"text":"grow"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":26,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":26,"endColumn":62,"fix":{"range":[1262,1296],"text":"mb-1 h-5 w-3/4 rounded bg-gray-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":28,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":28,"endColumn":63,"fix":{"range":[1384,1417],"text":"h-4 w-16 rounded-full bg-gray-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":29,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":29,"endColumn":63,"fix":{"range":[1455,1488],"text":"h-4 w-20 rounded-full bg-gray-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":33,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":33,"endColumn":59,"fix":{"range":[1568,1603],"text":"mb-4 h-4 w-full rounded bg-gray-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":34,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":34,"endColumn":87,"fix":{"range":[1635,1698],"text":"flex items-center justify-between border-t border-gray-100 pt-3"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":36,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":36,"endColumn":60,"fix":{"range":[1770,1802],"text":"h-5 w-5 rounded-full bg-gray-200"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":36,"column":16,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":36,"endColumn":60,"fix":{"range":[1770,1802],"text":"size-5 bg-gray-200 rounded-full"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":37,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":37,"endColumn":60,"fix":{"range":[1838,1870],"text":"h-5 w-5 rounded-full bg-gray-200"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":37,"column":16,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":37,"endColumn":60,"fix":{"range":[1838,1870],"text":"size-5 bg-gray-200 rounded-full"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":38,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":38,"endColumn":60,"fix":{"range":[1906,1938],"text":"h-5 w-5 rounded-full bg-gray-200"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":38,"column":16,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":38,"endColumn":60,"fix":{"range":[1906,1938],"text":"size-5 bg-gray-200 rounded-full"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":40,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":40,"endColumn":57,"fix":{"range":[1988,2019],"text":"h-6 w-20 rounded-md bg-gray-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":48,"column":20,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":48,"endColumn":94,"fix":{"range":[2283,2334],"text":"`animate-pulse rounded-lg bg-white p-4 shadow-md ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":49,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":49,"endColumn":58,"fix":{"range":[2371,2405],"text":"mb-2 h-4 w-3/4 rounded bg-gray-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":50,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":50,"endColumn":53,"fix":{"range":[2437,2466],"text":"h-3 w-1/2 rounded bg-gray-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":58,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":58,"endColumn":93,"fix":{"range":[2576,2632],"text":"`grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3 ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":65,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":65,"endColumn":88,"fix":{"range":[2824,2875],"text":"`animate-pulse rounded-lg bg-white p-6 shadow-md ${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":66,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":66,"endColumn":62,"fix":{"range":[2916,2950],"text":"mb-6 h-8 w-1/3 rounded bg-gray-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":69,"column":20,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":69,"endColumn":66,"fix":{"range":[3083,3117],"text":"mb-2 h-4 w-1/4 rounded bg-gray-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":70,"column":20,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":70,"endColumn":62,"fix":{"range":[3157,3187],"text":"h-8 w-full rounded bg-gray-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":73,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":73,"endColumn":71,"fix":{"range":[3258,3301],"text":"ml-auto mt-6 h-10 w-1/4 rounded bg-gray-200"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":94,"column":27,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":94,"endColumn":77,"fix":{"range":[3918,3956],"text":"h-16 animate-pulse rounded bg-gray-200"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":37,"fixableErrorCount":0,"fixableWarningCount":36,"source":"interface SkeletonLoaderProps {\r\n  type: 'tasks' | 'profile' | 'logs' | 'reflecties' | 'card' | 'list' | 'form';\r\n  count?: number;\r\n  className?: string;\r\n}\r\n\r\nexport function SkeletonLoader({ type, count = 3, className = '' }: SkeletonLoaderProps) {\r\n  // Basic card skeleton for demonstration, expand with other types as needed.\r\n  const renderCardSkeleton = (key: number) => (\r\n    <div key={key} className={`bg-white rounded-lg shadow-md p-5 animate-pulse ${className}`}>\r\n      <div className=\"h-6 bg-gray-200 rounded mb-3 w-3/4\"></div>\r\n      <div className=\"h-4 bg-gray-200 rounded mb-2 w-full\"></div>\r\n      <div className=\"h-4 bg-gray-200 rounded mb-4 w-5/6\"></div>\r\n      <div className=\"flex justify-between items-center pt-3 border-t border-gray-100\">\r\n        <div className=\"h-6 bg-gray-200 rounded-md w-20\"></div>\r\n        <div className=\"h-8 w-8 bg-gray-200 rounded-full\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const renderTasksSkeleton = (key: number) => (\r\n    <div key={key} className=\"bg-white rounded-lg shadow-md p-5 animate-pulse\">\r\n      <div className=\"flex items-start mb-3\">\r\n        <div className=\"flex-shrink-0 mt-1 mr-3 h-6 w-6 bg-gray-200 rounded-full\"></div>\r\n        <div className=\"flex-grow\">\r\n          <div className=\"h-5 bg-gray-200 rounded mb-1 w-3/4\"></div>\r\n          <div className=\"flex flex-wrap gap-2\">\r\n            <div className=\"h-4 bg-gray-200 rounded-full w-16\"></div>\r\n            <div className=\"h-4 bg-gray-200 rounded-full w-20\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"h-4 bg-gray-200 rounded w-full mb-4\"></div>\r\n      <div className=\"flex justify-between items-center pt-3 border-t border-gray-100\">\r\n        <div className=\"flex space-x-3\">\r\n          <div className=\"h-5 w-5 bg-gray-200 rounded-full\"></div>\r\n          <div className=\"h-5 w-5 bg-gray-200 rounded-full\"></div>\r\n          <div className=\"h-5 w-5 bg-gray-200 rounded-full\"></div>\r\n        </div>\r\n        <div className=\"h-6 bg-gray-200 rounded-md w-20\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n  \r\n  // Add other skeleton types as needed based on the design\r\n  // For now, using a generic card for other types or a simple list item\r\n  const renderListItemSkeleton = (key: number) => (\r\n    <div key={key} className={`bg-white rounded-lg shadow-md p-4 animate-pulse ${className}`}>\r\n      <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\r\n      <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\r\n    </div>\r\n  );\r\n\r\n\r\n  switch (type) {\r\n    case 'tasks':\r\n      return (\r\n        <div className={`grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 ${className}`}>\r\n          {Array(count).fill(0).map((_, i) => renderTasksSkeleton(i))}\r\n        </div>\r\n      );\r\n    case 'profile':\r\n    case 'form':\r\n      return (\r\n        <div className={`bg-white rounded-lg shadow-md p-6 animate-pulse ${className}`}>\r\n          <div className=\"h-8 bg-gray-200 rounded w-1/3 mb-6\"></div>\r\n          {Array(count).fill(0).map((_, i) => (\r\n            <div key={i} className=\"mb-4\">\r\n              <div className=\"h-4 bg-gray-200 rounded w-1/4 mb-2\"></div>\r\n              <div className=\"h-8 bg-gray-200 rounded w-full\"></div>\r\n            </div>\r\n          ))}\r\n          <div className=\"h-10 bg-gray-200 rounded w-1/4 mt-6 ml-auto\"></div>\r\n        </div>\r\n      );\r\n    case 'logs':\r\n    case 'reflecties':\r\n    case 'list':\r\n       return (\r\n        <div className={`space-y-3 ${className}`}>\r\n          {Array(count).fill(0).map((_, i) => renderListItemSkeleton(i))}\r\n        </div>\r\n      );\r\n    case 'card':\r\n      return (\r\n        <div className={`space-y-4 ${className}`}>\r\n          {Array(count).fill(0).map((_, i) => renderCardSkeleton(i))}\r\n        </div>\r\n      );\r\n    default:\r\n      return (\r\n        <div className={`space-y-3 ${className}`}>\r\n          {Array(count).fill(0).map((_, i) => (\r\n             <div key={i} className=\"h-16 bg-gray-200 rounded animate-pulse\"></div>\r\n          ))}\r\n        </div>\r\n      );\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\containers\\ai\\AIAssistantContainer.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"`@/components/ai/AIAssistant` import should occur before import of `@/components/auth/AuthProvider`","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":72,"fix":{"range":[72,204],"text":"import AIAssistant, { UserContext } from '@/components/ai/AIAssistant';\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\n"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\nimport AIAssistant, { UserContext } from '@/components/ai/AIAssistant';\r\nimport { getSupabaseBrowserClient } from '@/lib/supabase-client';\r\nimport { TaskLog, Reflectie } from '@/types';\r\n\r\ninterface AIAssistantContainerProps {\r\n  className?: string;\r\n}\r\n\r\n/**\r\n * Container component for the AI Assistant\r\n * Fetches real user data and passes it to the AI Assistant component\r\n */\r\nexport default function AIAssistantContainer({ className = '' }: AIAssistantContainerProps): JSX.Element {\r\n  const { user } = useAuth();\r\n  const [userContext, setUserContext] = useState<Partial<UserContext> | null>(null);\r\n  const [isLoading, setIsLoading] = useState<boolean>(true);\r\n\r\n  // Fetch user data for the AI Assistant\r\n  useEffect(() => {\r\n    const fetchUserData = async () => {\r\n      if (!user?.id) return;\r\n      \r\n      try {\r\n        setIsLoading(true);\r\n        const supabase = getSupabaseBrowserClient();\r\n        \r\n        // Get current date\r\n        const today = new Date();\r\n        today.setHours(0, 0, 0, 0);\r\n        const todayStr = today.toISOString();\r\n        \r\n        // Fetch completed tasks for today\r\n        const { data: completedTasks, error: completedError } = await supabase\r\n          .from('task_logs')\r\n          .select('*')\r\n          .eq('user_id', user.id)\r\n          .gte('start_tijd', todayStr)\r\n          .not('eind_tijd', 'is', null)\r\n          .order('start_tijd', { ascending: false });\r\n        \r\n        // Fetch pending tasks for today\r\n        const { data: pendingTasks, error: pendingError } = await supabase\r\n          .from('tasks')\r\n          .select(`\r\n            id,\r\n            titel,\r\n            beschrijving,\r\n            type,\r\n            duur,\r\n            herhaal_patroon,\r\n            dagen_van_week\r\n          `)\r\n          .eq('user_id', user.id)\r\n          .not('task_logs', 'cs', `{\"user_id\":\"${user.id}\",\"start_tijd\":\"${todayStr.substring(0, 10)}\"}`);\r\n        \r\n        // Fetch recent reflections\r\n        const { data: reflections, error: reflectionsError } = await supabase\r\n          .from('reflecties')\r\n          .select('*')\r\n          .eq('user_id', user.id)\r\n          .order('created_at', { ascending: false })\r\n          .limit(5);\r\n        \r\n        if (completedError || pendingError || reflectionsError) {\r\n          console.error('Error fetching user data:', { completedError, pendingError, reflectionsError });\r\n          return;\r\n        }\r\n        \r\n        // Extract energy and pain levels from most recent reflection\r\n        let energyLevel: number | undefined;\r\n        let painLevel: number | undefined;\r\n        let mood: string | undefined;\r\n        \r\n        if (reflections && reflections.length > 0) {\r\n          const latestReflection = reflections[0];\r\n          energyLevel = latestReflection.energie_niveau || undefined;\r\n          painLevel = latestReflection.pijn_score || undefined;\r\n          mood = latestReflection.stemming || undefined;\r\n        }\r\n        \r\n        // Build user context\r\n        const context: Partial<UserContext> = {\r\n          energyLevel,\r\n          painLevel,\r\n          mood,\r\n          completedTasksToday: completedTasks?.length || 0,\r\n          pendingTasksToday: pendingTasks?.length || 0,\r\n          recentTasks: completedTasks as TaskLog[],\r\n          recentReflections: reflections as Reflectie[]\r\n        };\r\n        \r\n        setUserContext(context);\r\n      } catch (error) {\r\n        console.error('Error in AIAssistantContainer:', error);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchUserData();\r\n  }, [user?.id]);\r\n\r\n  // Don't render anything if no user or still loading initial data\r\n  if (!user || (isLoading && !userContext)) {\r\n    return <></>;\r\n  }\r\n\r\n  return (\r\n    <AIAssistant\r\n      userId={user.id}\r\n      currentContext={userContext || undefined}\r\n      className={className}\r\n    />\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\containers\\ai\\AIRecommendationsContainer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\containers\\ai\\KnowledgeManagementContainer.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"`@/components/ai/KnowledgeEntryForm` import should occur before import of `@/components/auth/AuthProvider`","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":69,"fix":{"range":[72,201],"text":"import KnowledgeEntryForm from '@/components/ai/KnowledgeEntryForm';\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\n"}},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchKnowledgeEntries'. Either include it or remove the dependency array.","line":128,"column":6,"nodeType":"ArrayExpression","endLine":128,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [fetchKnowledgeEntries, user?.id]","fix":{"range":[3916,3926],"text":"[fetchKnowledgeEntries, user?.id]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\nimport KnowledgeEntryForm from '@/components/ai/KnowledgeEntryForm';\r\nimport { AlertMessage } from '@/components/common/AlertMessage';\r\nimport { getSupabaseBrowserClient } from '@/lib/supabase-client';\r\nimport { ExpertKnowledge } from '@/types/ai';\r\n\r\ninterface KnowledgeManagementContainerProps {\r\n  className?: string;\r\n}\r\n\r\n/**\r\n * Container component for the Knowledge Management System\r\n * Displays a list of knowledge entries and a form to add new entries\r\n */\r\nexport default function KnowledgeManagementContainer({ \r\n  className = '' \r\n}: KnowledgeManagementContainerProps): JSX.Element {\r\n  const { user } = useAuth();\r\n  const [knowledgeEntries, setKnowledgeEntries] = useState<ExpertKnowledge[]>([]);\r\n  const [isLoading, setIsLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [showForm, setShowForm] = useState<boolean>(false);\r\n  const [userRole, setUserRole] = useState<string | null>(null);\r\n\r\n  // Fetch knowledge entries\r\n  const fetchKnowledgeEntries = async () => {\r\n    if (!user?.id) return;\r\n    \r\n    try {\r\n      setIsLoading(true);\r\n      setError(null);\r\n      \r\n      const supabase = getSupabaseBrowserClient();\r\n      \r\n      // Get user role\r\n      const { data: profileData, error: profileError } = await supabase\r\n        .from('profiles')\r\n        .select('type')\r\n        .eq('id', user.id)\r\n        .single();\r\n      \r\n      if (profileError) {\r\n        console.error('Error fetching user profile:', profileError);\r\n        throw new Error('Kon gebruikersprofiel niet ophalen');\r\n      }\r\n      \r\n      setUserRole(profileData.type);\r\n      \r\n      // Fetch knowledge entries based on role\r\n      let query = supabase\r\n        .from('expert_knowledge')\r\n        .select('*');\r\n      \r\n      if (profileData.type === 'specialist') {\r\n        // Specialists can see their own entries and approved entries\r\n        query = query.or(`specialist_id.eq.${user.id},is_approved.eq.true`);\r\n      } else if (profileData.type === 'admin') {\r\n        // Admins can see all entries\r\n        // No additional filter needed\r\n      } else {\r\n        // Regular users can only see approved entries\r\n        query = query.eq('is_approved', true);\r\n      }\r\n      \r\n      // Order by creation date\r\n      query = query.order('created_at', { ascending: false });\r\n      \r\n      const { data, error: fetchError } = await query;\r\n      \r\n      if (fetchError) {\r\n        throw fetchError;\r\n      }\r\n      \r\n      setKnowledgeEntries(data as ExpertKnowledge[]);\r\n    } catch (err) {\r\n      console.error('Error fetching knowledge entries:', err);\r\n      setError('Kon kennisbank niet laden');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Handle form success\r\n  const handleFormSuccess = () => {\r\n    setShowForm(false);\r\n    fetchKnowledgeEntries();\r\n  };\r\n\r\n  // Handle approve/reject knowledge entry\r\n  const handleModerateEntry = async (entryId: string, approve: boolean) => {\r\n    if (!user?.id || userRole !== 'admin') return;\r\n    \r\n    try {\r\n      const supabase = getSupabaseBrowserClient();\r\n      \r\n      const { error } = await supabase\r\n        .from('expert_knowledge')\r\n        .update({ is_approved: approve })\r\n        .eq('id', entryId);\r\n      \r\n      if (error) {\r\n        throw error;\r\n      }\r\n      \r\n      // Update local state\r\n      setKnowledgeEntries(prev => \r\n        prev.map(entry => \r\n          entry.id === entryId \r\n            ? { ...entry, is_approved: approve } \r\n            : entry\r\n        )\r\n      );\r\n    } catch (err) {\r\n      console.error('Error moderating knowledge entry:', err);\r\n      setError('Kon kennisitem niet bijwerken');\r\n    }\r\n  };\r\n\r\n  // Initialize\r\n  useEffect(() => {\r\n    if (user?.id) {\r\n      fetchKnowledgeEntries();\r\n    }\r\n  }, [user?.id]);\r\n\r\n  // Format date\r\n  const formatDate = (dateString: string) => {\r\n    const date = new Date(dateString);\r\n    return date.toLocaleDateString('nl-NL', {\r\n      year: 'numeric',\r\n      month: 'long',\r\n      day: 'numeric'\r\n    });\r\n  };\r\n\r\n  // Get content type label\r\n  const getContentTypeLabel = (type: string) => {\r\n    switch (type) {\r\n      case 'article':\r\n        return 'Artikel';\r\n      case 'guideline':\r\n        return 'Richtlijn';\r\n      case 'recommendation':\r\n        return 'Aanbeveling';\r\n      default:\r\n        return type;\r\n    }\r\n  };\r\n\r\n  // Loading state\r\n  if (isLoading) {\r\n    return (\r\n      <div className={`${className} rounded-lg bg-white p-6 shadow-md`}>\r\n        <div className=\"flex items-center justify-between\">\r\n          <h2 className=\"text-xl font-semibold text-gray-800\">Kennisbank</h2>\r\n        </div>\r\n        <div className=\"mt-4 space-y-4\">\r\n          {[1, 2, 3].map(i => (\r\n            <div key={i} className=\"animate-pulse\">\r\n              <div className=\"h-6 w-3/4 rounded bg-gray-200\"></div>\r\n              <div className=\"mt-2 h-4 w-1/2 rounded bg-gray-200\"></div>\r\n              <div className=\"mt-2 h-20 rounded bg-gray-200\"></div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Error state\r\n  if (error) {\r\n    return (\r\n      <div className={`${className} rounded-lg bg-white p-6 shadow-md`}>\r\n        <AlertMessage\r\n          type=\"error\"\r\n          title=\"Fout bij laden kennisbank\"\r\n          message={error}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={`${className} rounded-lg bg-white p-6 shadow-md`}>\r\n      <div className=\"flex items-center justify-between\">\r\n        <h2 className=\"text-xl font-semibold text-gray-800\">Kennisbank</h2>\r\n        \r\n        {/* Show form button for specialists */}\r\n        {userRole === 'specialist' && (\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => setShowForm(!showForm)}\r\n            className=\"inline-flex items-center rounded-md border border-transparent bg-purple-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2\"\r\n          >\r\n            {showForm ? 'Annuleren' : 'Kennis Toevoegen'}\r\n          </button>\r\n        )}\r\n      </div>\r\n      \r\n      {/* Knowledge entry form */}\r\n      {showForm && userRole === 'specialist' && (\r\n        <div className=\"mt-6\">\r\n          <KnowledgeEntryForm onSuccess={handleFormSuccess} />\r\n        </div>\r\n      )}\r\n      \r\n      {/* Knowledge entries list */}\r\n      <div className=\"mt-6 space-y-6\">\r\n        {knowledgeEntries.length === 0 ? (\r\n          <p className=\"text-center text-gray-500\">Geen kennisitems gevonden</p>\r\n        ) : (\r\n          knowledgeEntries.map(entry => (\r\n            <div \r\n              key={entry.id} \r\n              className={`rounded-lg border p-4 ${\r\n                entry.is_approved \r\n                  ? 'border-green-200 bg-green-50' \r\n                  : 'border-amber-200 bg-amber-50'\r\n              }`}\r\n            >\r\n              <div className=\"mb-2 flex items-center justify-between\">\r\n                <h3 className=\"text-lg font-medium text-gray-900\">{entry.title}</h3>\r\n                <div className=\"flex items-center space-x-2\">\r\n                  <span className={`inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium ${\r\n                    entry.is_approved \r\n                      ? 'bg-green-100 text-green-800' \r\n                      : 'bg-amber-100 text-amber-800'\r\n                  }`}>\r\n                    {entry.is_approved ? 'Goedgekeurd' : 'In afwachting'}\r\n                  </span>\r\n                  <span className=\"inline-flex items-center rounded-full bg-purple-100 px-2.5 py-0.5 text-xs font-medium text-purple-800\">\r\n                    {getContentTypeLabel(entry.content_type)}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              \r\n              <p className=\"mb-3 whitespace-pre-wrap text-gray-700\">{entry.content}</p>\r\n              \r\n              {/* Tags */}\r\n              {entry.tags && entry.tags.length > 0 && (\r\n                <div className=\"mb-3 flex flex-wrap gap-1\">\r\n                  {entry.tags.map(tag => (\r\n                    <span \r\n                      key={tag} \r\n                      className=\"inline-flex items-center rounded-full bg-gray-100 px-2 py-0.5 text-xs font-medium text-gray-800\"\r\n                    >\r\n                      {tag}\r\n                    </span>\r\n                  ))}\r\n                </div>\r\n              )}\r\n              \r\n              <div className=\"flex items-center justify-between text-sm text-gray-500\">\r\n                <span>Toegevoegd op {formatDate(entry.created_at)}</span>\r\n                \r\n                {/* Admin moderation buttons */}\r\n                {userRole === 'admin' && !entry.is_approved && (\r\n                  <div className=\"flex space-x-2\">\r\n                    <button\r\n                      type=\"button\"\r\n                      onClick={() => handleModerateEntry(entry.id, true)}\r\n                      className=\"inline-flex items-center rounded-md border border-transparent bg-green-600 px-3 py-1 text-xs font-medium text-white shadow-sm hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2\"\r\n                    >\r\n                      Goedkeuren\r\n                    </button>\r\n                    <button\r\n                      type=\"button\"\r\n                      onClick={() => handleModerateEntry(entry.id, false)}\r\n                      className=\"inline-flex items-center rounded-md border border-gray-300 bg-white px-3 py-1 text-xs font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2\"\r\n                    >\r\n                      Afwijzen\r\n                    </button>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          ))\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\containers\\ai\\SpecialistIntelligenceDashboardContainer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\containers\\auth\\AuthFormContainer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\containers\\dashboard\\AIInsightsContainer.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":43,"fix":{"range":[123,123],"text":"\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RecentLogWithTaskTitle' is defined but never used.","line":5,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":60},{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'RecentLogWithTaskTitle' is defined but never used.","line":5,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":60,"fix":{"range":[219,243],"text":""}},{"ruleId":"import/order","severity":2,"message":"`@/components/ui/ConditionalRender` import should occur before import of `@/hooks/useSupabaseQuery`","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":71,"fix":{"range":[184,352],"text":"import { ConditionalRender } from '@/components/ui/ConditionalRender';\r\nimport { useInsights, useRecentLogs, RecentLogWithTaskTitle } from '@/hooks/useSupabaseQuery';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/context/NotificationContext` import should occur before import of `@/hooks/useSupabaseQuery`","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":65,"fix":{"range":[184,418],"text":"import { useNotification } from '@/context/NotificationContext';\r\nimport { useInsights, useRecentLogs, RecentLogWithTaskTitle } from '@/hooks/useSupabaseQuery';\r\nimport { ConditionalRender } from '@/components/ui/ConditionalRender';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/components/dashboard/AIInsightsPresentational` import should occur before import of `@/hooks/useSupabaseQuery`","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":88,"fix":{"range":[184,539],"text":"import AIInsightsPresentational from '@/components/dashboard/AIInsightsPresentational'; // New presentational component\r\nimport { useInsights, useRecentLogs, RecentLogWithTaskTitle } from '@/hooks/useSupabaseQuery';\r\nimport { ConditionalRender } from '@/components/ui/ConditionalRender';\r\nimport { useNotification } from '@/context/NotificationContext';\r\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TaskLog' is defined but never used.","line":9,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":26},{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'TaskLog' is defined but never used.","line":9,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":26,"fix":{"range":[555,564],"text":""}},{"ruleId":"import/order","severity":2,"message":"`@/lib/error-handler` import should occur before import of `@/types`","line":10,"column":1,"nodeType":"ImportDeclaration","endLine":10,"endColumn":52,"fix":{"range":[539,638],"text":"import { ErrorMessage } from '@/lib/error-handler'; \r\nimport { Inzicht, TaskLog } from '@/types';\r\n"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":14,"column":8,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":14,"endColumn":86,"fix":{"range":[765,831],"text":"rounded-lg border-2 border-dashed border-gray-200 py-8 text-center"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":15,"column":45,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":15,"endColumn":93,"fix":{"range":[890,926],"text":"mx-auto mb-4 h-12 w-12 text-gray-400"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-12, w-12' could be replaced by the 'size-12' shorthand!","line":15,"column":45,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":15,"endColumn":93,"fix":{"range":[890,926],"text":"size-12 mx-auto text-gray-400 mb-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":16,"column":8,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":16,"endColumn":38,"fix":{"range":[1309,1327],"text":"mb-2 text-gray-500"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":26,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":26,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'initialInsightsProp' is defined but never used. Allowed unused args must match /^_/u.","line":26,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":58},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'addNotification' is assigned a value but never used.","line":30,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":26},{"ruleId":"prefer-const","severity":2,"message":"'startDate' is never reassigned. Use 'const' instead.","line":68,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":68,"endColumn":18,"fix":{"range":[3539,3577],"text":"const startDate = new Date(insightDate);"}}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":8,"fixableWarningCount":4,"source":"// containers/dashboard/AIInsightsContainer.tsx\r\n'use client';\r\nimport { useState, useMemo } from 'react'; // Added useMemo\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\nimport { useInsights, useRecentLogs, RecentLogWithTaskTitle } from '@/hooks/useSupabaseQuery';\r\nimport { ConditionalRender } from '@/components/ui/ConditionalRender';\r\nimport { useNotification } from '@/context/NotificationContext';\r\nimport AIInsightsPresentational from '@/components/dashboard/AIInsightsPresentational'; // New presentational component\r\nimport { Inzicht, TaskLog } from '@/types';\r\nimport { ErrorMessage } from '@/lib/error-handler'; \r\n\r\n// Define an EmptyState component or use inline JSX for emptyFallback\r\nconst EmptyInsightsState = () => (\r\n  <div className=\"text-center py-8 border-2 border-dashed border-gray-200 rounded-lg\">\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-12 w-12 mx-auto text-gray-400 mb-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" aria-hidden=\"true\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\" /></svg>\r\n    <p className=\"text-gray-500 mb-2\">Nog geen AI-inzichten beschikbaar</p>\r\n    <p className=\"text-sm text-gray-400\">Log meer activiteiten om gepersonaliseerde inzichten te ontvangen</p>\r\n  </div>\r\n);\r\n\r\ninterface AIInsightsContainerProps {\r\n  initialInsightsProp?: Inzicht[]; // Renamed prop for clarity\r\n  limit?: number;\r\n}\r\n\r\nexport function AIInsightsContainer({ initialInsightsProp, limit = 3 }: AIInsightsContainerProps) {\r\n  const { user } = useAuth();\r\n  const userId = user?.id;\r\n  const [expandedInsightId, setExpandedInsightId] = useState<string | null>(null);\r\n  const { addNotification } = useNotification();\r\n\r\n  // Data fetching for insights\r\n  const { \r\n    data: insights, \r\n    isLoading: isLoadingInsights, \r\n    error: insightsError, \r\n    isError: isInsightsError \r\n  } = useInsights(userId, limit);\r\n  \r\n  // Data fetching for logs, enabled only when an insight is expanded\r\n  // Fetch a larger set of recent logs; filtering will happen based on insight period\r\n  const { \r\n    data: recentLogs, \r\n    isLoading: isLoadingLogs,\r\n    error: logsError, // Capture error for logs\r\n    isError: isLogsError // Capture isError for logs\r\n  } = useRecentLogs(userId, 50, { // Fetch more logs (e.g., last 50) to cover potential insight periods\r\n    enabled: !!userId && !!expandedInsightId, // Only fetch if user and an insight is expanded\r\n  });\r\n  \r\n  const handleToggleExpand = (id: string) => {\r\n    const newExpandedId = expandedInsightId === id ? null : id;\r\n    setExpandedInsightId(newExpandedId);\r\n    if (newExpandedId && (!recentLogs || recentLogs.length === 0) && !isLoadingLogs) {\r\n      // This notification might be too early if logs are about to be fetched by enabled hook\r\n      // addNotification('info', 'Inzicht details en gerelateerde logs worden geladen...');\r\n    }\r\n  };\r\n  \r\n  // Memoized calculation for logs relevant to the currently expanded insight\r\n  const logsForExpandedInsight = useMemo(() => {\r\n    if (!expandedInsightId || !insights || !recentLogs) return [];\r\n    \r\n    const currentInsight = insights.find(i => i.id === expandedInsightId);\r\n    if (!currentInsight) return [];\r\n\r\n    const insightDate = new Date(currentInsight.created_at); // Assuming insight's date is its creation date\r\n    let startDate = new Date(insightDate);\r\n\r\n    // Determine the period for the insight\r\n    // This logic should ideally match how insights are generated\r\n    switch (currentInsight.periode) {\r\n      case 'dag':\r\n        startDate.setDate(insightDate.getDate() - 1); // Logs from the day of the insight\r\n        break;\r\n      case 'week':\r\n        startDate.setDate(insightDate.getDate() - 7); // Logs from the week leading up to the insight\r\n        break;\r\n      case 'maand':\r\n        startDate.setMonth(insightDate.getMonth() - 1); // Logs from the month leading up to the insight\r\n        break;\r\n      default:\r\n        startDate.setDate(insightDate.getDate() - 7); // Default to a week\r\n    }\r\n    \r\n    return recentLogs.filter(log => {\r\n      const logDate = new Date(log.start_tijd);\r\n      return logDate >= startDate && logDate <= insightDate; // Filter logs within the period\r\n    });\r\n  }, [expandedInsightId, insights, recentLogs]);\r\n  \r\n  return (\r\n    <ConditionalRender\r\n      isLoading={isLoadingInsights && !insights} // Show loading only if no initial/cached insights\r\n      isError={isInsightsError}\r\n      error={insightsError}\r\n      data={insights}\r\n      skeletonType=\"card\" // Or a more specific 'insights' skeleton\r\n      emptyFallback={<EmptyInsightsState />}\r\n    >\r\n      {(insightsData) => (\r\n        <AIInsightsPresentational\r\n          insights={insightsData}\r\n          expandedInsightId={expandedInsightId}\r\n          onToggleExpand={handleToggleExpand}\r\n          isLoadingLogs={isLoadingLogs && !!expandedInsightId} // Logs are loading only if an insight is expanded\r\n          logsForInsight={logsForExpandedInsight}\r\n          logsError={isLogsError ? (logsError as ErrorMessage) : null} // Pass log specific error\r\n        />\r\n      )}\r\n    </ConditionalRender>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\containers\\dashboard\\DailyPlannerContainer.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":54,"fix":{"range":[138,138],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/hooks/useSupabaseQuery` import should occur after import of `@/components/dashboard/DailyPlanner`","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":53,"fix":{"range":[140,390],"text":"import { useAuth } from '@/components/auth/AuthProvider';\r\nimport { ConditionalRender } from '@/components/ui/ConditionalRender';\r\nimport DailyPlanner from '@/components/dashboard/DailyPlanner';\r\nimport { useTasks } from '@/hooks/useSupabaseQuery';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/components/ui/ConditionalRender` import should occur after import of `@/components/dashboard/DailyPlanner`","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":71,"fix":{"range":[253,390],"text":"import DailyPlanner from '@/components/dashboard/DailyPlanner';\r\nimport { ConditionalRender } from '@/components/ui/ConditionalRender';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/types` import should occur after import of `@/lib/supabase-client`","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":41,"fix":{"range":[390,534],"text":"import { getSupabaseBrowserClient } from '@/lib/supabase-client'; // Voor logs\r\nimport { Task, TaskLog } from '@/types'; // TaskLog toegevoegd\r\n"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":19,"column":8,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":19,"endColumn":65,"fix":{"range":[837,882],"text":"rounded-lg bg-white p-8 text-center shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":20,"column":45,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":20,"endColumn":93,"fix":{"range":[941,977],"text":"mx-auto mb-4 h-16 w-16 text-gray-300"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-16, w-16' could be replaced by the 'size-16' shorthand!","line":20,"column":45,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":20,"endColumn":93,"fix":{"range":[941,977],"text":"size-16 mx-auto text-gray-300 mb-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":23,"column":9,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":23,"endColumn":61,"fix":{"range":[1296,1336],"text":"mb-2 text-xl font-semibold text-gray-700"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":30,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":30,"endColumn":38},{"ruleId":"prefer-const","severity":2,"message":"'completedTaskIds' is never reassigned. Use 'const' instead.","line":56,"column":11,"nodeType":"Identifier","messageId":"useConst","endLine":56,"endColumn":40,"fix":{"range":[2590,2636],"text":"const completedTaskIds: Set<string> = new Set();"}},{"ruleId":"prefer-const","severity":2,"message":"'taskLogsMap' is never reassigned. Use 'const' instead.","line":57,"column":11,"nodeType":"Identifier","messageId":"useConst","endLine":57,"endColumn":44,"fix":{"range":[2644,2694],"text":"const taskLogsMap: Map<string, TaskLog> = new Map();"}}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":6,"fixableWarningCount":4,"source":"// containers/dashboard/DailyPlannerContainer.tsx\r\n'use client';\r\nimport { useState, useMemo, useEffect } from 'react'; // Added useEffect\r\nimport { useTasks } from '@/hooks/useSupabaseQuery';\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\nimport { ConditionalRender } from '@/components/ui/ConditionalRender';\r\nimport DailyPlanner from '@/components/dashboard/DailyPlanner';\r\nimport { Task, TaskLog } from '@/types'; // TaskLog toegevoegd\r\nimport { getSupabaseBrowserClient } from '@/lib/supabase-client'; // Voor logs\r\n\r\n// Definieer een interface voor de verrijkte taak\r\nexport interface EnrichedTask extends Task {\r\n  status: 'voltooid' | 'openstaand';\r\n  voltooid_op?: string | Date | null;\r\n}\r\n\r\n// Define an EmptyState component or use inline JSX for emptyFallback\r\nconst EmptyTasksState = () => (\r\n  <div className=\"bg-white rounded-lg shadow-md p-8 text-center\">\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-16 w-16 mx-auto text-gray-300 mb-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" aria-hidden=\"true\">\r\n      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1.5} d=\"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2\" />\r\n    </svg>\r\n    <h2 className=\"text-xl font-semibold text-gray-700 mb-2\">Geen taken voor vandaag</h2>\r\n    <p className=\"text-gray-500\">Plan uw dag of voeg nieuwe taken toe.</p>\r\n    {/* Link to add task or planning page could be added here */}\r\n  </div>\r\n);\r\n\r\n\r\nexport function DailyPlannerContainer() {\r\n  const { user } = useAuth();\r\n  const [activeFilter, setActiveFilter] = useState<string>('all'); // 'all', 'taak', 'opdracht'\r\n  \r\n  // Fetch taken voor de huidige gebruiker\r\n  // Assuming useTasks fetches all tasks; filtering for \"today\" might need to happen here or in DailyPlanner\r\n  // Or useTasks could accept a date filter. For now, fetching all and filtering client-side.\r\n  const { data: allTasks, isLoading, error, isError } = useTasks(user?.id);\r\n  \r\n  // Filter functie - verplaatst van component naar container\r\n  const handleFilterChange = (filter: string) => {\r\n    setActiveFilter(filter);\r\n  };\r\n  \r\n  // Gefilterde taken berekenen\r\n  const [enrichedTasks, setEnrichedTasks] = useState<EnrichedTask[]>([]);\r\n  const supabase = getSupabaseBrowserClient(); // Client voor logs\r\n\r\n  useEffect(() => {\r\n    const processTasks = async () => {\r\n      if (!allTasks || allTasks.length === 0) {\r\n        setEnrichedTasks([]);\r\n        return;\r\n      }\r\n\r\n      const taskIds = allTasks.map(t => t.id);\r\n      let completedTaskIds: Set<string> = new Set();\r\n      let taskLogsMap: Map<string, TaskLog> = new Map();\r\n\r\n      if (taskIds.length > 0) {\r\n        const { data: logsData, error: logsError } = await supabase\r\n          .from('task_logs')\r\n          .select('*')\r\n          .in('task_id', taskIds)\r\n          .eq('user_id', user?.id || ''); // Zorg voor user context\r\n\r\n        if (logsError) {\r\n          console.warn('Error fetching logs for DailyPlannerContainer:', logsError.message);\r\n        } else if (logsData) {\r\n          logsData.forEach(log => {\r\n            // Bewaar de meest recente log voor elke taak, omdat deze de meest recente feedback bevat.\r\n            // Als er meerdere logs zijn, willen we de log met de meest recente 'created_at' of 'eind_tijd'.\r\n            // Aangezien de logs al gesorteerd zijn op 'created_at' (als dat de default is),\r\n            // de laatste log in de array voor een bepaalde task_id is de meest recente.\r\n            // Echter, de query in useTasks haalt logs op met order('created_at', { ascending: false }),\r\n            // dus de eerste log in logsData voor een task_id is de meest recente.\r\n            // We moeten ervoor zorgen dat taskLogsMap de meest recente log opslaat.\r\n            // De huidige logica: `if (!taskLogsMap.has(log.task_id) || (log.eind_tijd && !taskLogsMap.get(log.task_id)?.eind_tijd))`\r\n            // is bedoeld om de log met een eind_tijd te prioriteren, maar niet per se de meest recente feedback.\r\n            // Laten we de meest recente log (op basis van created_at) opslaan, die ook de feedback bevat.\r\n            // De logsData is al gesorteerd op created_at DESC, dus de eerste log voor een task_id is de meest recente.\r\n            if (!taskLogsMap.has(log.task_id)) {\r\n              taskLogsMap.set(log.task_id, log as TaskLog);\r\n            }\r\n            // Als er een eind_tijd is, markeer de taak als voltooid\r\n            if (log.eind_tijd) {\r\n              completedTaskIds.add(log.task_id);\r\n            }\r\n          });\r\n        }\r\n      }\r\n      \r\n      const processed = allTasks.map(task => {\r\n        const status: 'voltooid' | 'openstaand' = completedTaskIds.has(task.id) ? 'voltooid' : 'openstaand';\r\n        const relevantLog = taskLogsMap.get(task.id);\r\n        return {\r\n          ...task,\r\n          status,\r\n          voltooid_op: status === 'voltooid' ? relevantLog?.eind_tijd : null,\r\n          // Voeg feedback toe aan de verrijkte taak\r\n          feedback: relevantLog ? {\r\n            pijn_score: relevantLog.pijn_score,\r\n            vermoeidheid_score: relevantLog.vermoeidheid_score,\r\n            energie_voor: relevantLog.energie_voor,\r\n            energie_na: relevantLog.energie_na,\r\n            stemming: relevantLog.stemming,\r\n            hartslag: relevantLog.hartslag,\r\n            notitie: relevantLog.notitie,\r\n          } : undefined,\r\n        };\r\n      });\r\n      setEnrichedTasks(processed as EnrichedTask[]);\r\n    };\r\n\r\n    processTasks();\r\n  }, [allTasks, user?.id, supabase]);\r\n  \r\n  const filteredTasks = useMemo(() => {\r\n    if (!enrichedTasks) return [];\r\n\r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0); // Begin van de dag\r\n\r\n    const tomorrow = new Date(today);\r\n    tomorrow.setDate(today.getDate() + 1); // Begin van de volgende dag\r\n\r\n    return enrichedTasks.filter(task => {\r\n      // Een taak is relevant voor vandaag als:\r\n      // 1. Het een openstaande taak is (status 'openstaand').\r\n      // 2. Het een voltooide taak is die vandaag is voltooid.\r\n      // 3. Het een herhalende taak is die vandaag actief is (op basis van dagen_van_week en herhaal_patroon).\r\n      // 4. Het een eenmalige taak is die vandaag is aangemaakt.\r\n\r\n      const currentDayOfWeek = today.getDay().toString(); // 0 = Zondag, 1 = Maandag, etc.\r\n\r\n      let isRelevant = false;\r\n\r\n      // Conditie 1: Openstaande taken\r\n      if (task.status === 'openstaand') {\r\n        isRelevant = true;\r\n      }\r\n\r\n      // Conditie 2: Voltooide taken die vandaag zijn voltooid\r\n      if (task.status === 'voltooid' && task.voltooid_op) {\r\n        const voltooidOpDate = new Date(task.voltooid_op);\r\n        if (voltooidOpDate >= today && voltooidOpDate < tomorrow) {\r\n          isRelevant = true;\r\n        }\r\n      }\r\n\r\n      // Conditie 3: Herhalende taken die vandaag actief zijn\r\n      if (task.herhaal_patroon !== 'eenmalig' && task.dagen_van_week && task.dagen_van_week.includes(currentDayOfWeek)) {\r\n        // Voor herhalende taken, als ze vandaag actief zijn, zijn ze relevant\r\n        isRelevant = true;\r\n      }\r\n\r\n      // Conditie 4: Eenmalige taken die vandaag zijn aangemaakt (als ze nog niet voltooid zijn)\r\n      if (task.herhaal_patroon === 'eenmalig' && task.status === 'openstaand') {\r\n        const createdAtDate = new Date(task.created_at);\r\n        if (createdAtDate >= today && createdAtDate < tomorrow) {\r\n          isRelevant = true;\r\n        }\r\n      }\r\n\r\n      if (!isRelevant) return false;\r\n\r\n      // Filteren op type (taak/opdracht)\r\n      if (activeFilter === 'all') return true;\r\n      return task.type === activeFilter;\r\n    });\r\n  }, [enrichedTasks, activeFilter]);\r\n  \r\n  return (\r\n    <ConditionalRender\r\n      isLoading={isLoading}\r\n      isError={isError}\r\n      error={error}\r\n      data={allTasks} // Pass allTasks to ensure ConditionalRender doesn't show empty if filteredTasks is empty but allTasks is not\r\n      skeletonType=\"tasks\" // Or a more specific \"planner\" skeleton\r\n      emptyFallback={<EmptyTasksState />} // This shows if allTasks is empty\r\n    >\r\n      {() => ( \r\n        <DailyPlanner \r\n          tasks={filteredTasks} // Pass the enriched and filtered tasks\r\n          activeFilter={activeFilter}\r\n          onFilterChange={handleFilterChange}\r\n          userId={user?.id || ''} \r\n        />\r\n      )}\r\n    </ConditionalRender>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\containers\\layout\\SidebarContainer.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":59,"fix":{"range":[73,73],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":58,"fix":{"range":[132,132],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/lib/supabase-client` import should occur after import of `@/components/ui/SkeletonLoader`","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":66,"fix":{"range":[134,521],"text":"import { useAuth } from '@/components/auth/AuthProvider';\r\nimport { useProfile } from '@/hooks/useSupabaseQuery'; // To get profile type\r\nimport SidebarPresentational, { MenuItemP } from '@/components/layout/SidebarPresentational';\r\nimport { SkeletonLoader } from '@/components/ui/SkeletonLoader'; // For loading state\r\nimport { getSupabaseBrowserClient } from '@/lib/supabase-client';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/hooks/useSupabaseQuery` import should occur after import of `@/components/ui/SkeletonLoader`","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":55,"fix":{"range":[260,521],"text":"import SidebarPresentational, { MenuItemP } from '@/components/layout/SidebarPresentational';\r\nimport { SkeletonLoader } from '@/components/ui/SkeletonLoader'; // For loading state\r\nimport { useProfile } from '@/hooks/useSupabaseQuery'; // To get profile type\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":10,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":10,"endColumn":41},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":93,"column":67,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":93,"endColumn":86,"fix":{"range":[3974,3981],"text":"size-5"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":94,"column":68,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":94,"endColumn":87,"fix":{"range":[4342,4349],"text":"size-5"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":95,"column":70,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":95,"endColumn":89,"fix":{"range":[4727,4734],"text":"size-5"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":96,"column":68,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":96,"endColumn":87,"fix":{"range":[5069,5076],"text":"size-5"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":97,"column":71,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":97,"endColumn":90,"fix":{"range":[5492,5499],"text":"size-5"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":98,"column":68,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":98,"endColumn":87,"fix":{"range":[6305,6312],"text":"size-5"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-5, w-5' could be replaced by the 'size-5' shorthand!","line":99,"column":63,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":99,"endColumn":82,"fix":{"range":[6633,6640],"text":"size-5"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":111,"column":11,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":111,"endColumn":104,"fix":{"range":[7375,7456],"text":"fixed left-4 top-4 z-50 rounded-md bg-white p-2 text-gray-600 shadow-md md:hidden"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-6, w-6' could be replaced by the 'size-6' shorthand!","line":115,"column":51,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":115,"endColumn":70,"fix":{"range":[7600,7607],"text":"size-6"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":121,"column":11,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":123,"endColumn":14,"fix":{"range":[7874,8002],"text":"`fixed inset-y-0 left-0 z-40 w-64 transform bg-white shadow-xl transition-transform duration-300 ease-in-out md:translate-x-0 ${"}},{"ruleId":"tailwindcss/migration-from-tailwind-2","severity":1,"message":"Classname 'transform' is not needed in Tailwind CSS v3!","line":121,"column":11,"nodeType":"JSXAttribute","messageId":"classnameNotNeeded","endLine":123,"endColumn":14,"fix":{"range":[7874,8002],"text":"`fixed inset-y-0 left-0 z-40 w-64 bg-white shadow-xl transition-transform duration-300 ease-in-out md:translate-x-0${"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":125,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":125,"endColumn":56,"fix":{"range":[8116,8144],"text":"border-b border-gray-200 p-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":128,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":128,"endColumn":37,"fix":{"range":[8246,8255],"text":"px-3 py-3"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'py-3, px-3' could be replaced by the 'p-3' shorthand!","line":128,"column":16,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":128,"endColumn":37,"fix":{"range":[8246,8255],"text":"p-3"}}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'isOpen'. Either include it or remove the dependency array.","line":46,"column":6,"nodeType":"ArrayExpression","endLine":46,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [isOpen, pathname]","fix":{"range":[1828,1838],"text":"[isOpen, pathname]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":4,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":4,"fixableWarningCount":14,"source":"'use client';\r\nimport { useState, useEffect, ReactElement } from 'react';\r\nimport { usePathname, useRouter } from 'next/navigation';\r\nimport { getSupabaseBrowserClient } from '@/lib/supabase-client';\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\nimport { useProfile } from '@/hooks/useSupabaseQuery'; // To get profile type\r\nimport SidebarPresentational, { MenuItemP } from '@/components/layout/SidebarPresentational';\r\nimport { SkeletonLoader } from '@/components/ui/SkeletonLoader'; // For loading state\r\n\r\nexport default function SidebarContainer() {\r\n  const pathname = usePathname();\r\n  const router = useRouter();\r\n  const { user } = useAuth();\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const { data: profile, isLoading: isLoadingProfile } = useProfile(user?.id, {\r\n    enabled: !!user, // Only fetch if user is available\r\n  });\r\n\r\n  const profileType = profile?.type as 'patient' | 'specialist' | 'admin' | null | undefined;\r\n\r\n  const toggleSidebar = () => setIsOpen(!isOpen);\r\n\r\n  // Close sidebar on route change or outside click\r\n  useEffect(() => {\r\n    const handleOutsideClick = (e: MouseEvent) => {\r\n      const sidebarElement = document.getElementById('sidebar');\r\n      const mobileMenuButton = document.getElementById('mobile-menu-button');\r\n      if (isOpen && sidebarElement && !sidebarElement.contains(e.target as Node) && mobileMenuButton && !mobileMenuButton.contains(e.target as Node)) {\r\n        setIsOpen(false);\r\n      }\r\n    };\r\n    if (isOpen) {\r\n      document.addEventListener('mousedown', handleOutsideClick);\r\n    }\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleOutsideClick);\r\n    };\r\n  }, [isOpen]);\r\n\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      setIsOpen(false);\r\n    }\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [pathname]);\r\n\r\n  const handleLogout = async () => {\r\n    setIsOpen(false);\r\n    const supabase = getSupabaseBrowserClient();\r\n    await supabase.auth.signOut();\r\n    router.push('/'); \r\n  };\r\n\r\n  const patientMenuItems: MenuItemP[] = [\r\n    { href: '/dashboard', label: 'Dashboard', iconName: 'home' },\r\n    { href: '/taken', label: 'Mijn Taken', iconName: 'tasks' },\r\n    { href: '/reflecties', label: 'Mijn Reflecties', iconName: 'journal' },\r\n    { href: '/overzicht', label: 'Dag & Week Overzicht', iconName: 'chart' },\r\n    { href: '/rapporten', label: 'Mijn Rapporten', iconName: 'chart' },\r\n    { href: '/mijn-specialisten', label: 'Mijn Specialisten', iconName: 'users' },\r\n    { href: '/instellingen', label: 'Instellingen', iconName: 'settings' },\r\n  ];\r\n  \r\n  const specialistMenuItems: MenuItemP[] = [\r\n    { href: '/dashboard', label: 'Dashboard', iconName: 'home' },\r\n    { href: '/specialisten/patienten', label: 'Mijn Patiënten', iconName: 'users' },\r\n    { href: '/specialisten/taken', label: 'Taken Toewijzen', iconName: 'tasks' },\r\n    { href: '/specialisten/inzichten', label: 'Patiënt Inzichten', iconName: 'chart' },\r\n    { href: '/instellingen', label: 'Instellingen', iconName: 'settings' },\r\n  ];\r\n  \r\n  const adminMenuItems: MenuItemP[] = [\r\n    { href: '/admin', label: 'Admin Dashboard', iconName: 'home' }, // Changed href to /admin and label\r\n    { href: '/admin/users', label: 'Gebruikersbeheer', iconName: 'users' },\r\n    { href: '/admin/subscriptions', label: 'Abonnementenbeheer', iconName: 'chart' },\r\n    { href: '/admin/statistics', label: 'Statistieken', iconName: 'chart' },\r\n    { href: '/instellingen', label: 'Instellingen', iconName: 'settings' },\r\n  ];\r\n  \r\n  // Select menu items based on user role\r\n  let menuItems: MenuItemP[];\r\n  if (profileType === 'specialist') {\r\n    menuItems = specialistMenuItems;\r\n  } else if (profileType === 'admin') {\r\n    menuItems = adminMenuItems;\r\n  } else {\r\n    menuItems = patientMenuItems;\r\n  }\r\n  \r\n  const renderIcon = (iconName: string): ReactElement => {\r\n    switch (iconName) {\r\n      case 'home': return <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6\" /></svg>;\r\n      case 'tasks': return <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01\" /></svg>;\r\n      case 'journal': return <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\" /></svg>;\r\n      case 'chart': return <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" /></svg>;\r\n      case 'settings': return <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z\" /><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" /></svg>;\r\n      case 'users': return <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z\" /></svg>;\r\n      default: return <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2\" /></svg>;\r\n    }\r\n  };\r\n\r\n  // Show a minimal loading state or null while profile type is being determined\r\n  if (!user || isLoadingProfile) {\r\n    // Render a slim, non-interactive sidebar or just the mobile toggle during initial auth/profile load\r\n    return (\r\n      <>\r\n        <button\r\n          id=\"mobile-menu-button\"\r\n          onClick={toggleSidebar} // Still allow toggle for consistency, though content is minimal\r\n          className=\"md:hidden fixed top-4 left-4 z-50 p-2 rounded-md bg-white text-gray-600 shadow-md\"\r\n          aria-controls=\"sidebar\"\r\n          aria-label=\"Open menu\"\r\n        >\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 6h16M4 12h16M4 18h16\" />\r\n          </svg>\r\n        </button>\r\n        <aside\r\n          id=\"sidebar\"\r\n          className={`fixed inset-y-0 left-0 z-40 w-64 bg-white shadow-xl transform transition-transform duration-300 ease-in-out md:translate-x-0 ${\r\n            isOpen ? 'translate-x-0' : '-translate-x-full'\r\n          }`}\r\n        >\r\n          <div className=\"p-4 border-b border-gray-200\">\r\n            <SkeletonLoader type=\"list\" count={1} />\r\n          </div>\r\n          <div className=\"py-3 px-3\">\r\n            <SkeletonLoader type=\"list\" count={5} />\r\n          </div>\r\n        </aside>\r\n      </>\r\n    );\r\n  }\r\n  \r\n  // If user is loaded but profileType is still null (e.g., error fetching profile or new user without profile type yet)\r\n  // We default to patient menu items or could show a specific state.\r\n  // For now, it defaults to patientMenuItems if profileType is not 'specialist'.\r\n\r\n  return (\r\n    <SidebarPresentational\r\n      isOpen={isOpen}\r\n      user={user}\r\n      profileType={profileType ?? null}\r\n      menuItems={menuItems}\r\n      pathname={pathname}\r\n      onToggleSidebar={toggleSidebar}\r\n      onLogout={handleLogout}\r\n      renderIcon={renderIcon}\r\n    />\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\containers\\layout\\TopbarContainer.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":65,"fix":{"range":[79,79],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":66,"fix":{"range":[261,261],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":45,"fix":{"range":[307,307],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`next/navigation` import should occur before import of `@/components/auth/AuthProvider`","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":45,"fix":{"range":[81,309],"text":"import { useRouter } from 'next/navigation';\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\nimport { useProfile } from '@/hooks/useSupabaseQuery';\r\nimport { getSupabaseBrowserClient } from '@/lib/supabase-client';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/components/layout/TopbarPresentational` import should occur before import of `@/hooks/useSupabaseQuery`","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":100,"fix":{"range":[140,410],"text":"import TopbarPresentational, { TopbarProfileData } from '@/components/layout/TopbarPresentational';\r\nimport { useProfile } from '@/hooks/useSupabaseQuery';\r\nimport { getSupabaseBrowserClient } from '@/lib/supabase-client';\r\nimport { useRouter } from 'next/navigation';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/components/ui/SkeletonLoader` import should occur before import of `@/hooks/useSupabaseQuery`","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":65,"fix":{"range":[140,497],"text":"import { SkeletonLoader } from '@/components/ui/SkeletonLoader'; // For loading state\r\nimport { useProfile } from '@/hooks/useSupabaseQuery';\r\nimport { getSupabaseBrowserClient } from '@/lib/supabase-client';\r\nimport { useRouter } from 'next/navigation';\r\nimport TopbarPresentational, { TopbarProfileData } from '@/components/layout/TopbarPresentational';\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":10,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":10,"endColumn":40},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":71,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":71,"endColumn":80,"fix":{"range":[2568,2619],"text":"sticky top-0 z-10 border-b border-gray-200 bg-white"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":72,"column":18,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":72,"endColumn":69,"fix":{"range":[2651,2690],"text":"flex items-center justify-end px-4 py-2"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-full, w-full' could be replaced by the 'size-full' shorthand!","line":74,"column":59,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":74,"endColumn":84,"fix":{"range":[2851,2864],"text":"size-full"}}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":6,"fixableWarningCount":3,"source":"'use client';\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\nimport { useProfile } from '@/hooks/useSupabaseQuery';\r\nimport { getSupabaseBrowserClient } from '@/lib/supabase-client';\r\nimport { useRouter } from 'next/navigation';\r\nimport TopbarPresentational, { TopbarProfileData } from '@/components/layout/TopbarPresentational';\r\nimport { SkeletonLoader } from '@/components/ui/SkeletonLoader'; // For loading state\r\n\r\nexport default function TopbarContainer() {\r\n  const { user } = useAuth();\r\n  const router = useRouter();\r\n  const [menuOpen, setMenuOpen] = useState(false);\r\n\r\n  const { data: fullProfile, isLoading: isLoadingProfile } = useProfile(user?.id, {\r\n    enabled: !!user,\r\n    // select option removed, will derive TopbarProfileData from fullProfile\r\n  });\r\n\r\n  // Derive TopbarProfileData from the fullProfile\r\n  const profileData: TopbarProfileData = {\r\n    voornaam: fullProfile?.voornaam,\r\n    achternaam: fullProfile?.achternaam,\r\n    avatar_url: fullProfile?.avatar_url,\r\n  };\r\n\r\n  const toggleMenu = useCallback(() => {\r\n    setMenuOpen(prev => !prev);\r\n  }, []);\r\n\r\n  const closeMenu = useCallback(() => {\r\n    setMenuOpen(false);\r\n  }, []);\r\n\r\n  const handleLogout = async () => {\r\n    closeMenu(); // Close menu first\r\n    const supabase = getSupabaseBrowserClient();\r\n    await supabase.auth.signOut();\r\n    router.push('/'); \r\n  };\r\n\r\n  // Close menu on outside click\r\n  useEffect(() => {\r\n    const handleOutsideClick = (event: MouseEvent) => {\r\n      const menuButton = document.querySelector('[aria-controls=\"user-menu\"]'); // More robust selector\r\n      const menu = document.getElementById('user-menu');\r\n\r\n      if (\r\n        menuOpen &&\r\n        menuButton && !menuButton.contains(event.target as Node) &&\r\n        menu && !menu.contains(event.target as Node)\r\n      ) {\r\n        closeMenu();\r\n      }\r\n    };\r\n\r\n    if (menuOpen) {\r\n      document.addEventListener('mousedown', handleOutsideClick);\r\n    }\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleOutsideClick);\r\n    };\r\n  }, [menuOpen, closeMenu]);\r\n  \r\n  // Don't render Topbar if user is not available or profile is still loading initially\r\n  // This prevents a flash of unstyled content or missing user data\r\n  if (!user || (isLoadingProfile && !fullProfile)) {\r\n    // Render a minimal placeholder or null during critical loading\r\n    // This matches the behavior of the original Topbar which wouldn't have profileData yet\r\n    return (\r\n        <header className=\"bg-white border-b border-gray-200 sticky top-0 z-10\">\r\n            <div className=\"flex justify-end items-center px-4 py-2\">\r\n                <div className=\"h-8 w-24\"> {/* Placeholder for profile button area */}\r\n                    <SkeletonLoader type=\"card\" count={1} className=\"h-full w-full\" />\r\n                </div>\r\n            </div>\r\n        </header>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <TopbarPresentational\r\n      profileData={profileData}\r\n      menuOpen={menuOpen}\r\n      onToggleMenu={toggleMenu}\r\n      onLogout={handleLogout}\r\n      onCloseMenu={closeMenu}\r\n    />\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\containers\\rapporten\\RapportGeneratorContainer.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":54,"fix":{"range":[68,68],"text":"\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":18,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":18,"endColumn":50},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":93,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":93,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3895,3951],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":114,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4951,4954],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4951,4954],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"import/no-named-as-default-member","severity":1,"message":"Caution: `React` also has a named export `useEffect`. Check if you meant to write `import {useEffect} from 'react'` instead.","line":123,"column":3,"nodeType":"MemberExpression","endLine":123,"endColumn":18}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has missing dependencies: 'handleTypeChange' and 'initialRapportData.type'. Either include them or remove the dependency array.","line":126,"column":6,"nodeType":"ArrayExpression","endLine":126,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [handleTypeChange, initialRapportData.type]","fix":{"range":[5417,5419],"text":"[handleTypeChange, initialRapportData.type]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":2,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":1,"fixableWarningCount":0,"source":"'use client';\r\nimport React, { useState, useCallback } from 'react';\r\nimport RapportGeneratorPresentational, {\r\n  RapportDataStateP,\r\n  RapportTypeP,\r\n} from '@/components/rapporten/RapportGeneratorPresentational';\r\nimport { useNotification } from '@/context/NotificationContext'; // For feedback\r\n\r\n// Helper to get today's date in YYYY-MM-DD format\r\nconst getTodayYYYYMMDD = () => {\r\n  const today = new Date();\r\n  const year = today.getFullYear();\r\n  const month = (today.getMonth() + 1).toString().padStart(2, '0');\r\n  const day = today.getDate().toString().padStart(2, '0');\r\n  return `${year}-${month}-${day}`;\r\n};\r\n\r\nexport default function RapportGeneratorContainer() {\r\n  const { addNotification } = useNotification();\r\n  const vandaag = getTodayYYYYMMDD();\r\n\r\n  const initialRapportData: RapportDataStateP = {\r\n    type: 'weekly',\r\n    format: 'pdf',\r\n    startDatum: '', // Will be set based on type or user input\r\n    eindDatum: vandaag,\r\n    includeTasken: true,\r\n    includeMetrieken: true,\r\n    includeReflecties: true,\r\n    includeInzichten: false,\r\n  };\r\n\r\n  const [rapportData, setRapportData] = useState<RapportDataStateP>(initialRapportData);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const handleTypeChange = useCallback((type: RapportTypeP) => {\r\n    setRapportData(prev => {\r\n      let newStartDate = prev.startDatum;\r\n      let newEndDate = prev.eindDatum;\r\n      const today = new Date(vandaag);\r\n\r\n      if (type === 'daily') {\r\n        // For daily, typically it's for \"today\" or a specific single day.\r\n        // Let's default to today. Dates will be disabled.\r\n        newStartDate = vandaag;\r\n        newEndDate = vandaag;\r\n      } else if (type === 'weekly') {\r\n        const oneWeekAgo = new Date(today);\r\n        oneWeekAgo.setDate(today.getDate() - 7);\r\n        newStartDate = `${oneWeekAgo.getFullYear()}-${(oneWeekAgo.getMonth() + 1).toString().padStart(2, '0')}-${oneWeekAgo.getDate().toString().padStart(2, '0')}`;\r\n        newEndDate = vandaag;\r\n      } else if (type === 'monthly') {\r\n        const oneMonthAgo = new Date(today);\r\n        oneMonthAgo.setMonth(today.getMonth() - 1);\r\n        newStartDate = `${oneMonthAgo.getFullYear()}-${(oneMonthAgo.getMonth() + 1).toString().padStart(2, '0')}-${oneMonthAgo.getDate().toString().padStart(2, '0')}`;\r\n        newEndDate = vandaag;\r\n      }\r\n      // For 'custom', dates remain as they are or as user sets them.\r\n      return { ...prev, type, startDatum: newStartDate, eindDatum: newEndDate };\r\n    });\r\n  }, [vandaag]);\r\n\r\n  const handleCheckboxChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, checked } = e.target;\r\n    setRapportData(prev => ({ ...prev, [name]: checked }));\r\n  }, []);\r\n\r\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\r\n    const { name, value } = e.target;\r\n    setRapportData(prev => ({ ...prev, [name]: value }));\r\n  }, []);\r\n\r\n  const handleGenerateRapport = useCallback(async () => {\r\n    setError(null);\r\n    setLoading(true);\r\n    addNotification({ type: 'info', message: 'Rapportgeneratie gestart...' });\r\n\r\n    // Basic validation\r\n    if (rapportData.type === 'custom' && (!rapportData.startDatum || !rapportData.eindDatum)) {\r\n      setError('Voor een aangepast rapport zijn start- en einddatum verplicht.');\r\n      setLoading(false);\r\n      addNotification({ type: 'error', message: 'Start- en einddatum zijn verplicht voor aangepast rapport.' });\r\n      return;\r\n    }\r\n    if (rapportData.type === 'custom' && new Date(rapportData.startDatum) > new Date(rapportData.eindDatum)) {\r\n        setError('Startdatum kan niet na einddatum liggen.');\r\n        setLoading(false);\r\n        addNotification({ type: 'error', message: 'Startdatum kan niet na einddatum liggen.' });\r\n        return;\r\n    }\r\n\r\n    console.log('Rapport genereren met data:', rapportData);\r\n    // TODO: Implement actual report generation logic (e.g., API call)\r\n    // This would involve sending rapportData to a backend endpoint.\r\n    // For now, simulate a delay and success/error.\r\n    try {\r\n      // Simulate API call\r\n      await new Promise(resolve => setTimeout(resolve, 2000));\r\n      \r\n      // Example: const response = await fetch('/api/generate-rapport', { method: 'POST', body: JSON.stringify(rapportData) });\r\n      // if (!response.ok) throw new Error('Genereren mislukt');\r\n      // const blob = await response.blob();\r\n      // const url = window.URL.createObjectURL(blob);\r\n      // const a = document.createElement('a');\r\n      // a.href = url;\r\n      // a.download = `rapport-${rapportData.type}.${rapportData.format}`;\r\n      // document.body.appendChild(a);\r\n      // a.click();\r\n      // a.remove();\r\n      // window.URL.revokeObjectURL(url);\r\n\r\n      addNotification({ type: 'success', message: 'Rapport succesvol gegenereerd (simulatie)!' });\r\n    } catch (err: any) {\r\n      setError(err.message || 'Fout bij genereren rapport.');\r\n      addNotification({ type: 'error', message: err.message || 'Fout bij genereren rapport.' });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [rapportData, addNotification]);\r\n  \r\n  // Initialize dates on mount for weekly/monthly if not custom\r\n  React.useEffect(() => {\r\n    handleTypeChange(initialRapportData.type);\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <RapportGeneratorPresentational\r\n      rapportData={rapportData}\r\n      loading={loading}\r\n      error={error}\r\n      vandaag={vandaag}\r\n      onTypeChange={handleTypeChange}\r\n      onCheckboxChange={handleCheckboxChange}\r\n      onInputChange={handleInputChange}\r\n      onGenerateRapport={handleGenerateRapport}\r\n    />\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\containers\\reflecties\\ReflectieFormContainer.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":52,"fix":{"range":[66,66],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":45,"fix":{"range":[112,112],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/lib/error-handler` import should occur before import of `@/types`","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":52,"fix":{"range":[233,428],"text":"import { ErrorMessage } from '@/lib/error-handler';\r\nimport { ReflectieFormData as ReflectieUpsertData } from '@/types'; // Renaming for clarity if ReflectieFormData is also used for form state\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/components/reflecties/ReflectieFormPresentational` import should occur before import of `@/hooks/useMutations`","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":130,"fix":{"range":[173,620],"text":"import ReflectieFormPresentational, { ReflectieFormState, StemmingP } from '@/components/reflecties/ReflectieFormPresentational';\r\nimport { useUpsertReflectie } from '@/hooks/useMutations';\r\nimport { ReflectieFormData as ReflectieUpsertData } from '@/types'; // Renaming for clarity if ReflectieFormData is also used for form state\r\nimport { ErrorMessage } from '@/lib/error-handler';\r\nimport { useFocusManagement } from '@/utils/accessibility';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/context/NotificationContext` import should occur before import of `@/hooks/useMutations`","line":10,"column":1,"nodeType":"ImportDeclaration","endLine":10,"endColumn":65,"fix":{"range":[173,686],"text":"import { useNotification } from '@/context/NotificationContext';\r\nimport { useUpsertReflectie } from '@/hooks/useMutations';\r\nimport { ReflectieFormData as ReflectieUpsertData } from '@/types'; // Renaming for clarity if ReflectieFormData is also used for form state\r\nimport { ErrorMessage } from '@/lib/error-handler';\r\nimport { useFocusManagement } from '@/utils/accessibility';\r\nimport ReflectieFormPresentational, { ReflectieFormState, StemmingP } from '@/components/reflecties/ReflectieFormPresentational';\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":18,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":18,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used. Allowed unused args must match /^_/u.","line":90,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":90,"endColumn":22}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":5,"fixableWarningCount":0,"source":"'use client';\r\nimport React, { useState, FormEvent } from 'react';\r\nimport { useRouter } from 'next/navigation';\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\nimport { useUpsertReflectie } from '@/hooks/useMutations';\r\nimport { ReflectieFormData as ReflectieUpsertData } from '@/types'; // Renaming for clarity if ReflectieFormData is also used for form state\r\nimport { ErrorMessage } from '@/lib/error-handler';\r\nimport { useFocusManagement } from '@/utils/accessibility';\r\nimport ReflectieFormPresentational, { ReflectieFormState, StemmingP } from '@/components/reflecties/ReflectieFormPresentational';\r\nimport { useNotification } from '@/context/NotificationContext';\r\n\r\ninterface ReflectieFormContainerProps {\r\n  initialDatum?: string; // YYYY-MM-DD\r\n  // If editing a specific existing reflection, an ID or full initialData could be passed\r\n  // For now, this container handles upsert based on date for the logged-in user\r\n}\r\n\r\nexport default function ReflectieFormContainer({ initialDatum }: ReflectieFormContainerProps) {\r\n  const router = useRouter();\r\n  const { user } = useAuth();\r\n  const { addNotification } = useNotification();\r\n  \r\n  const vandaag = new Date().toISOString().split('T')[0];\r\n  \r\n  const [formState, setFormState] = useState<ReflectieFormState>({\r\n    datum: initialDatum || vandaag,\r\n    stemming: 'neutraal' as StemmingP,\r\n    notitie: '',\r\n  });\r\n\r\n  const { \r\n    mutate: upsertReflectie, \r\n    isPending: isUpserting, \r\n    error: upsertHookError,\r\n    isError: isUpsertError,\r\n    isSuccess: isUpsertSuccess\r\n  } = useUpsertReflectie();\r\n  \r\n  const stemmingOpties: StemmingP[] = [\r\n    'zeer goed', 'goed', 'neutraal', 'matig', 'slecht', 'zeer slecht'\r\n  ];\r\n\r\n  const stemmingKleur = (stemming: StemmingP) => {\r\n    switch (stemming) {\r\n      case 'zeer goed': return 'bg-green-500 text-white';\r\n      case 'goed': return 'bg-green-400 text-white';\r\n      case 'neutraal': return 'bg-blue-400 text-white';\r\n      case 'matig': return 'bg-yellow-400 text-white';\r\n      case 'slecht': return 'bg-orange-500 text-white';\r\n      case 'zeer slecht': return 'bg-red-500 text-white';\r\n      default: return 'bg-gray-200 text-gray-700';\r\n    }\r\n  };\r\n  \r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n    const { name, value } = e.target;\r\n    setFormState(prev => ({ ...prev, [name]: value }));\r\n  };\r\n  \r\n  const handleStemmingSelect = (stemming: StemmingP) => {\r\n    setFormState(prev => ({ ...prev, stemming }));\r\n  };\r\n  \r\n  const handleSubmit = async (e: FormEvent) => {\r\n    e.preventDefault();\r\n    if (!user) {\r\n      addNotification({ type: 'error', message: 'U moet ingelogd zijn om een reflectie op te slaan.' });\r\n      return;\r\n    }\r\n\r\n    if (!formState.datum) {\r\n      addNotification({ type: 'error', message: 'Datum is verplicht voor de reflectie.' });\r\n      return;\r\n    }\r\n\r\n    const dataToUpsert: ReflectieUpsertData = {\r\n        datum: formState.datum, \r\n        stemming: formState.stemming,\r\n        notitie: formState.notitie,\r\n        // user_id will be added by the hook or API based on the authenticated user\r\n    };\r\n    \r\n    upsertReflectie(dataToUpsert, {\r\n      onSuccess: () => {\r\n        addNotification({ type: 'success', message: 'Reflectie succesvol opgeslagen!' });\r\n        // Delay redirect slightly to allow user to see success message if not using global notifications that persist\r\n        setTimeout(() => router.push('/reflecties'), 500); \r\n        router.refresh(); // Ensure server components on the target page are updated\r\n      },\r\n      onError: (error) => {\r\n        // Notification is handled by the hook's global error handling via NotificationContext\r\n        // but if specific local display is needed, it can be done here too.\r\n        // addNotification({ type: 'error', message: (error as ErrorMessage).userMessage || 'Opslaan van reflectie mislukt.' });\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    router.back();\r\n  };\r\n  \r\n  const submitButtonRef = useFocusManagement<HTMLButtonElement>(isUpsertError);\r\n\r\n  return (\r\n    <ReflectieFormPresentational\r\n      formState={formState}\r\n      isUpserting={isUpserting}\r\n      upsertError={upsertHookError as ErrorMessage | null}\r\n      isUpsertSuccess={isUpsertSuccess}\r\n      vandaag={vandaag}\r\n      stemmingOpties={stemmingOpties}\r\n      stemmingKleur={stemmingKleur}\r\n      onFormChange={handleChange}\r\n      onStemmingSelect={handleStemmingSelect}\r\n      onSubmit={handleSubmit}\r\n      onCancel={handleCancel}\r\n      submitButtonRef={submitButtonRef}\r\n    />\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\containers\\settings\\ProfileFormContainer.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":63,"fix":{"range":[77,77],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":45,"fix":{"range":[123,123],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/hooks/useMutations` import should occur before import of `@/hooks/useSupabaseQuery`","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":57,"fix":{"range":[184,298],"text":"import { useUpdateProfile } from '@/hooks/useMutations';\r\nimport { useProfile } from '@/hooks/useSupabaseQuery';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/components/ui/SkeletonLoader` import should occur before import of `@/hooks/useSupabaseQuery`","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":65,"fix":{"range":[184,364],"text":"import { SkeletonLoader } from '@/components/ui/SkeletonLoader';\r\nimport { useProfile } from '@/hooks/useSupabaseQuery';\r\nimport { useUpdateProfile } from '@/hooks/useMutations';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/context/NotificationContext` import should occur before import of `@/hooks/useSupabaseQuery`","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":65,"fix":{"range":[184,466],"text":"import { useNotification } from '@/context/NotificationContext';\r\nimport { useProfile } from '@/hooks/useSupabaseQuery';\r\nimport { useUpdateProfile } from '@/hooks/useMutations';\r\nimport { SkeletonLoader } from '@/components/ui/SkeletonLoader';\r\nimport { Profile } from '@/types';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/lib/supabase-client` import should occur before import of `@/types`","line":10,"column":1,"nodeType":"ImportDeclaration","endLine":10,"endColumn":66,"fix":{"range":[364,533],"text":"import { getSupabaseBrowserClient } from '@/lib/supabase-client';\r\nimport { Profile } from '@/types';\r\nimport { useNotification } from '@/context/NotificationContext';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/lib/error-handler` import should occur before import of `@/types`","line":11,"column":1,"nodeType":"ImportDeclaration","endLine":11,"endColumn":52,"fix":{"range":[364,586],"text":"import { ErrorMessage } from '@/lib/error-handler';\r\nimport { Profile } from '@/types';\r\nimport { useNotification } from '@/context/NotificationContext';\r\nimport { getSupabaseBrowserClient } from '@/lib/supabase-client';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/components/settings/ProfileFormPresentational` import should occur before import of `@/hooks/useSupabaseQuery`","line":12,"column":1,"nodeType":"ImportDeclaration","endLine":12,"endColumn":110,"fix":{"range":[184,697],"text":"import ProfileFormPresentational, { ProfileFormData } from '@/components/settings/ProfileFormPresentational';\r\nimport { useProfile } from '@/hooks/useSupabaseQuery';\r\nimport { useUpdateProfile } from '@/hooks/useMutations';\r\nimport { SkeletonLoader } from '@/components/ui/SkeletonLoader';\r\nimport { Profile } from '@/types';\r\nimport { useNotification } from '@/context/NotificationContext';\r\nimport { getSupabaseBrowserClient } from '@/lib/supabase-client';\r\nimport { ErrorMessage } from '@/lib/error-handler';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/components/common/AlertMessage` import should occur before import of `@/hooks/useSupabaseQuery`","line":13,"column":1,"nodeType":"ImportDeclaration","endLine":13,"endColumn":65,"fix":{"range":[184,763],"text":"import { AlertMessage } from '@/components/common/AlertMessage';\r\nimport { useProfile } from '@/hooks/useSupabaseQuery';\r\nimport { useUpdateProfile } from '@/hooks/useMutations';\r\nimport { SkeletonLoader } from '@/components/ui/SkeletonLoader';\r\nimport { Profile } from '@/types';\r\nimport { useNotification } from '@/context/NotificationContext';\r\nimport { getSupabaseBrowserClient } from '@/lib/supabase-client';\r\nimport { ErrorMessage } from '@/lib/error-handler';\r\nimport ProfileFormPresentational, { ProfileFormData } from '@/components/settings/ProfileFormPresentational';\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":26,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":26,"endColumn":45},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":100,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3783,3786],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3783,3786],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":134,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":134,"endColumn":57,"fix":{"range":[4816,4849],"text":"rounded-lg bg-white p-6 shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":135,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":135,"endColumn":51,"fix":{"range":[4876,4902],"text":"mb-6 text-xl font-semibold"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":144,"column":12,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":144,"endColumn":57,"fix":{"range":[5181,5214],"text":"rounded-lg bg-white p-6 shadow-md"}}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":9,"fixableWarningCount":3,"source":"'use client';\r\nimport React, { useState, useEffect, FormEvent } from 'react';\r\nimport { useRouter } from 'next/navigation';\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\nimport { useProfile } from '@/hooks/useSupabaseQuery';\r\nimport { useUpdateProfile } from '@/hooks/useMutations';\r\nimport { SkeletonLoader } from '@/components/ui/SkeletonLoader';\r\nimport { Profile } from '@/types';\r\nimport { useNotification } from '@/context/NotificationContext';\r\nimport { getSupabaseBrowserClient } from '@/lib/supabase-client';\r\nimport { ErrorMessage } from '@/lib/error-handler';\r\nimport ProfileFormPresentational, { ProfileFormData } from '@/components/settings/ProfileFormPresentational';\r\nimport { AlertMessage } from '@/components/common/AlertMessage';\r\n\r\n// Helper to initialize form state from Profile data\r\nconst profileToFormState = (profile?: Profile | null): ProfileFormData => {\r\n  return {\r\n    voornaam: profile?.voornaam || '',\r\n    achternaam: profile?.achternaam || '',\r\n    postcode: profile?.postcode || '',\r\n    gemeente: profile?.gemeente || '',\r\n    geboortedatum: profile?.geboortedatum ? (new Date(profile.geboortedatum).toISOString().split('T')[0]) : '',\r\n  };\r\n};\r\n\r\nexport default function ProfileFormContainer() {\r\n  const router = useRouter();\r\n  const { user } = useAuth();\r\n  const userId = user?.id;\r\n\r\n  const { \r\n    data: profileData, \r\n    isLoading: isLoadingProfile, \r\n    error: fetchProfileError,\r\n    isError: isFetchProfileError\r\n  } = useProfile(userId, { enabled: !!userId });\r\n\r\n  const [formData, setFormData] = useState<ProfileFormData>(profileToFormState(profileData));\r\n  const [avatarUrl, setAvatarUrl] = useState<string | null>(profileData?.avatar_url || null);\r\n  const [uploadingAvatar, setUploadingAvatar] = useState<boolean>(false);\r\n  const { addNotification } = useNotification();\r\n\r\n  useEffect(() => {\r\n    if (profileData) {\r\n      setFormData(profileToFormState(profileData));\r\n      setAvatarUrl(profileData.avatar_url || null);\r\n    }\r\n  }, [profileData]);\r\n\r\n  const { \r\n    mutate: updateProfile, \r\n    isPending: isUpdatingProfile, \r\n    error: updateProfileHookError,\r\n    isError: isUpdateProfileError,\r\n    isSuccess: isUpdateProfileSuccess\r\n  } = useUpdateProfile();\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\r\n    const { name, value } = e.target;\r\n    setFormData(prev => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const handleAvatarUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (!e.target.files || !e.target.files.length || !user) return;\r\n\r\n    const file = e.target.files[0];\r\n    const fileExt = file.name.split('.').pop();\r\n    const fileName = `${user.id}-${Date.now()}.${fileExt}`;\r\n    const filePath = `avatars/${fileName}`;\r\n\r\n    setUploadingAvatar(true);\r\n    const supabaseClient = getSupabaseBrowserClient();\r\n\r\n    try {\r\n      const { error: uploadError } = await supabaseClient.storage\r\n        .from('profiles')\r\n        .upload(filePath, file, { upsert: true });\r\n\r\n      if (uploadError) throw uploadError;\r\n\r\n      const { data: urlData } = supabaseClient.storage\r\n        .from('profiles')\r\n        .getPublicUrl(filePath);\r\n\r\n      if (!urlData?.publicUrl) {\r\n        throw new Error('Kon geen publieke URL krijgen voor de profielfoto.');\r\n      }\r\n      \r\n      setAvatarUrl(urlData.publicUrl);\r\n\r\n      updateProfile({ id: user.id, data: { avatar_url: urlData.publicUrl } }, {\r\n        onSuccess: () => {\r\n          addNotification({ type: 'success', message: 'Profielfoto succesvol bijgewerkt.' });\r\n        },\r\n        onError: (err) => {\r\n          addNotification({ type: 'error', message: (err as ErrorMessage).userMessage || 'Fout bij opslaan avatar URL.' });\r\n        }\r\n      });\r\n\r\n    } catch (error: any) {\r\n      console.error('Error uploading avatar:', error);\r\n      addNotification({ type: 'error', message: error.message || 'Fout bij uploaden van profielfoto.' });\r\n    } finally {\r\n      setUploadingAvatar(false);\r\n      e.target.value = ''; \r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e: FormEvent) => {\r\n    e.preventDefault();\r\n    if (!user?.id) return;\r\n\r\n    const profileUpdateData: Partial<Profile> = {\r\n      ...formData,\r\n      geboortedatum: formData.geboortedatum ? new Date(formData.geboortedatum) : undefined,\r\n    };\r\n    \r\n    updateProfile({ id: user.id, data: profileUpdateData }, {\r\n      onSuccess: () => {\r\n        addNotification({ type: 'success', message: 'Profiel succesvol bijgewerkt!' });\r\n      },\r\n      onError: (err) => {\r\n        addNotification({ type: 'error', message: (err as ErrorMessage).userMessage || 'Fout bij opslaan profiel.' });\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    router.back();\r\n  };\r\n\r\n  if (isLoadingProfile) {\r\n    return (\r\n      <div className=\"bg-white rounded-lg shadow-md p-6\">\r\n        <h2 className=\"text-xl font-semibold mb-6\">Mijn Profiel Laden...</h2>\r\n        <SkeletonLoader type=\"form\" count={4} />\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  const typedFetchProfileError = fetchProfileError as ErrorMessage | null;\r\n  if (isFetchProfileError && typedFetchProfileError) {\r\n    return (\r\n      <div className=\"bg-white rounded-lg shadow-md p-6\">\r\n        <AlertMessage type=\"error\" title=\"Fout bij laden profiel\" message={typedFetchProfileError.userMessage || \"Kon profiel niet laden.\"} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <ProfileFormPresentational\r\n      formData={formData}\r\n      avatarUrl={avatarUrl}\r\n      uploadingAvatar={uploadingAvatar}\r\n      isUpdatingProfile={isUpdatingProfile}\r\n      profileType={profileData?.type}\r\n      updateProfileError={updateProfileHookError as ErrorMessage | null}\r\n      isUpdateProfileError={isUpdateProfileError}\r\n      isUpdateProfileSuccess={isUpdateProfileSuccess}\r\n      onFormChange={handleChange}\r\n      onAvatarUpload={handleAvatarUpload}\r\n      onSubmit={handleSubmit}\r\n      onCancel={handleCancel}\r\n    />\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\containers\\specialisten\\AddPatientButtonContainer.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":52,"fix":{"range":[66,66],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/components/specialisten/AddPatientButtonPresentational` import should occur before import of `@/hooks/useMutations`","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":103,"fix":{"range":[128,358],"text":"import AddPatientButtonPresentational from '@/components/specialisten/AddPatientButtonPresentational';\r\nimport { useAddSpecialistPatientRelation } from '@/hooks/useMutations';\r\nimport { ErrorMessage } from '@/lib/error-handler';\r\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":65,"fix":{"range":[448,448],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/context/NotificationContext` import should occur before import of `@/hooks/useMutations`","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":65,"fix":{"range":[128,450],"text":"import { useNotification } from '@/context/NotificationContext'; // Import useNotification\r\nimport { useAddSpecialistPatientRelation } from '@/hooks/useMutations';\r\nimport { ErrorMessage } from '@/lib/error-handler';\r\nimport AddPatientButtonPresentational from '@/components/specialisten/AddPatientButtonPresentational';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@tanstack/react-query` import should occur before import of `@/components/auth/AuthProvider`","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":56,"fix":{"range":[68,532],"text":"import { useQueryClient } from '@tanstack/react-query'; // To invalidate queries\r\nimport { useAuth } from '@/components/auth/AuthProvider'; \r\nimport { useAddSpecialistPatientRelation } from '@/hooks/useMutations';\r\nimport { ErrorMessage } from '@/lib/error-handler';\r\nimport AddPatientButtonPresentational from '@/components/specialisten/AddPatientButtonPresentational';\r\nimport { useNotification } from '@/context/NotificationContext'; // Import useNotification\r\n"}},{"ruleId":"import/order","severity":2,"message":"`next/navigation` import should occur before import of `@/components/auth/AuthProvider`","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":45,"fix":{"range":[68,598],"text":"import { useRouter } from 'next/navigation'; // Import useRouter\r\nimport { useAuth } from '@/components/auth/AuthProvider'; \r\nimport { useAddSpecialistPatientRelation } from '@/hooks/useMutations';\r\nimport { ErrorMessage } from '@/lib/error-handler';\r\nimport AddPatientButtonPresentational from '@/components/specialisten/AddPatientButtonPresentational';\r\nimport { useNotification } from '@/context/NotificationContext'; // Import useNotification\r\nimport { useQueryClient } from '@tanstack/react-query'; // To invalidate queries\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":11,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":11,"endColumn":50}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":6,"fixableWarningCount":0,"source":"'use client';\r\nimport React, { useState, FormEvent } from 'react';\r\nimport { useAuth } from '@/components/auth/AuthProvider'; \r\nimport { useAddSpecialistPatientRelation } from '@/hooks/useMutations';\r\nimport { ErrorMessage } from '@/lib/error-handler';\r\nimport AddPatientButtonPresentational from '@/components/specialisten/AddPatientButtonPresentational';\r\nimport { useNotification } from '@/context/NotificationContext'; // Import useNotification\r\nimport { useQueryClient } from '@tanstack/react-query'; // To invalidate queries\r\nimport { useRouter } from 'next/navigation'; // Import useRouter\r\n\r\nexport default function AddPatientButtonContainer() {\r\n  const { user } = useAuth();\r\n  const { addNotification } = useNotification();\r\n  const queryClient = useQueryClient(); // Get query client instance\r\n  const router = useRouter(); // Get router instance\r\n\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [email, setEmail] = useState('');\r\n  \r\n  const { \r\n    mutate: addRelation, \r\n    isPending: isLoading, \r\n    error: hookError, \r\n    isError, \r\n    isSuccess,\r\n    reset, // Function to reset mutation state\r\n  } = useAddSpecialistPatientRelation();\r\n  \r\n  const handleOpenModal = () => {\r\n    setEmail(''); // Reset email\r\n    reset(); // Reset mutation state (error, success flags)\r\n    setShowModal(true);\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    setShowModal(false);\r\n    // Email and mutation state are reset when modal opens or on successful submission\r\n  };\r\n\r\n  const handleEmailChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setEmail(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = async (e: FormEvent) => {\r\n    e.preventDefault();\r\n    if (!user) {\r\n      addNotification({ type: 'error', message: 'U moet ingelogd zijn om een patiënt toe te voegen.' });\r\n      return;\r\n    }\r\n    \r\n    addRelation({ patient_email: email }, {\r\n      onSuccess: () => {\r\n        addNotification({ type: 'success', message: 'Patiënt succesvol toegevoegd!' });\r\n        \r\n        // Invalidate client-side React Query cache if used elsewhere for this data\r\n        queryClient.invalidateQueries({ queryKey: ['specialistPatients', user?.id] }); \r\n        // queryClient.invalidateQueries({ queryKey: ['profiles'] }); // Might be too broad\r\n\r\n        // Refresh Server Component data\r\n        router.refresh();\r\n\r\n        setTimeout(() => {\r\n          handleCloseModal(); \r\n        }, 1500); // Keep modal open for a bit to show success message\r\n      },\r\n      onError: (error) => {\r\n        // Notification is handled by the hook via NotificationContext if configured\r\n        // Or, can add specific notification here too\r\n        addNotification({ type: 'error', message: (error as ErrorMessage).userMessage || 'Kon patiënt niet toevoegen.' });\r\n      }\r\n    });\r\n  };\r\n  \r\n  // If user is not a specialist, this button might not be rendered at all by parent.\r\n  // Or add a check here:\r\n  // const { data: profile } = useProfile(user?.id);\r\n  // if (profile?.type !== 'specialist') return null;\r\n\r\n\r\n  return (\r\n    <AddPatientButtonPresentational\r\n      showModal={showModal}\r\n      email={email}\r\n      isLoading={isLoading}\r\n      error={hookError as ErrorMessage | null}\r\n      isSuccess={isSuccess && !isError} // Ensure success is true only if no error\r\n      onOpenModal={handleOpenModal}\r\n      onCloseModal={handleCloseModal}\r\n      onEmailChange={handleEmailChange}\r\n      onSubmit={handleSubmit}\r\n    />\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\containers\\specialisten\\AddSpecialistButtonContainer.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":52,"fix":{"range":[66,66],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/components/specialisten/AddSpecialistButtonPresentational` import should occur before import of `@/hooks/useMutations`","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":109,"fix":{"range":[128,364],"text":"import AddSpecialistButtonPresentational from '@/components/specialisten/AddSpecialistButtonPresentational';\r\nimport { useAddSpecialistPatientRelation } from '@/hooks/useMutations';\r\nimport { ErrorMessage } from '@/lib/error-handler';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/context/NotificationContext` import should occur before import of `@/hooks/useMutations`","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":65,"fix":{"range":[128,430],"text":"import { useNotification } from '@/context/NotificationContext';\r\nimport { useAddSpecialistPatientRelation } from '@/hooks/useMutations';\r\nimport { ErrorMessage } from '@/lib/error-handler';\r\nimport AddSpecialistButtonPresentational from '@/components/specialisten/AddSpecialistButtonPresentational';\r\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":66,"fix":{"range":[495,495],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@tanstack/react-query` import should occur before import of `@/components/auth/AuthProvider`","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":56,"fix":{"range":[68,554],"text":"import { useQueryClient } from '@tanstack/react-query';\r\nimport { useAuth } from '@/components/auth/AuthProvider'; \r\nimport { useAddSpecialistPatientRelation } from '@/hooks/useMutations';\r\nimport { ErrorMessage } from '@/lib/error-handler';\r\nimport AddSpecialistButtonPresentational from '@/components/specialisten/AddSpecialistButtonPresentational';\r\nimport { useNotification } from '@/context/NotificationContext';\r\nimport { getSupabaseBrowserClient } from '@/lib/supabase-client';\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":11,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":11,"endColumn":53},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":100,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3840,3843],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3840,3843],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":5,"fixableWarningCount":0,"source":"'use client';\r\nimport React, { useState, FormEvent } from 'react';\r\nimport { useAuth } from '@/components/auth/AuthProvider'; \r\nimport { useAddSpecialistPatientRelation } from '@/hooks/useMutations';\r\nimport { ErrorMessage } from '@/lib/error-handler';\r\nimport AddSpecialistButtonPresentational from '@/components/specialisten/AddSpecialistButtonPresentational';\r\nimport { useNotification } from '@/context/NotificationContext';\r\nimport { getSupabaseBrowserClient } from '@/lib/supabase-client';\r\nimport { useQueryClient } from '@tanstack/react-query';\r\n\r\nexport default function AddSpecialistButtonContainer() {\r\n  const { user } = useAuth();\r\n  const { addNotification } = useNotification();\r\n  const queryClient = useQueryClient();\r\n\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [email, setEmail] = useState('');\r\n  const [formError, setFormError] = useState<string | null>(null);\r\n  \r\n  const { \r\n    mutate: addRelation, \r\n    isPending: isAddingRelation,\r\n    // Error from mutation hook will be handled by global notification via onError in addRelation call\r\n  } = useAddSpecialistPatientRelation();\r\n  \r\n  const handleOpenModal = () => {\r\n    setEmail('');\r\n    setFormError(null);\r\n    // Reset mutation state if useAddSpecialistPatientRelation hook provides a reset function\r\n    // For now, errors/success are handled by notifications and local formError.\r\n    setShowModal(true);\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    setShowModal(false);\r\n  };\r\n\r\n  const handleEmailChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setEmail(e.target.value);\r\n    if (formError) setFormError(null); // Clear form error when user types\r\n  };\r\n\r\n  const handleSubmit = async (e: FormEvent) => {\r\n    e.preventDefault();\r\n    setFormError(null);\r\n\r\n    if (!user) {\r\n      setFormError(\"U moet ingelogd zijn om een specialist toe te voegen.\");\r\n      addNotification({ type: 'error', message: \"U moet ingelogd zijn.\" });\r\n      return;\r\n    }\r\n    if (!email.trim()) {\r\n      setFormError(\"E-mailadres van specialist is verplicht.\");\r\n      return;\r\n    }\r\n\r\n    const supabaseClient = getSupabaseBrowserClient();\r\n    try {\r\n      const { data: currentUserProfile, error: currentUserError } = await supabaseClient\r\n        .from('profiles')\r\n        .select('type')\r\n        .eq('id', user.id)\r\n        .single();\r\n\r\n      if (currentUserError) throw currentUserError;\r\n      if (currentUserProfile?.type !== 'patient') {\r\n        setFormError('Alleen patiënten kunnen specialisten toevoegen.');\r\n        return;\r\n      }\r\n\r\n      const { data: specialistData, error: specialistLookupError } = await supabaseClient\r\n        .from('profiles')\r\n        .select('id')\r\n        .eq('email', email)\r\n        .eq('type', 'specialist')\r\n        .single();\r\n\r\n      if (specialistLookupError || !specialistData) {\r\n        setFormError('Geen specialist gevonden met dit e-mailadres, of de gebruiker is geen specialist.');\r\n        return;\r\n      }\r\n      const specialistIdToAdd = specialistData.id;\r\n\r\n      addRelation({ specialist_id_to_add: specialistIdToAdd }, {\r\n        onSuccess: () => {\r\n          addNotification({ type: 'success', message: 'Specialist succesvol toegevoegd!' });\r\n          queryClient.invalidateQueries({ queryKey: ['mySpecialists', user.id] }); \r\n          // Potentially invalidate other related queries if necessary\r\n          // queryClient.invalidateQueries({ queryKey: ['profiles'] });\r\n          setTimeout(() => {\r\n            handleCloseModal();\r\n          }, 1500);\r\n        },\r\n        onError: (error: ErrorMessage) => {\r\n          addNotification({ type: 'error', message: error.userMessage || 'Fout bij toevoegen specialist.' });\r\n          // Optionally setFormError(error.userMessage) if you want to display it in the modal too\r\n        }\r\n      });\r\n\r\n    } catch (err: any) {\r\n      console.error('Error in AddSpecialistButton handleSubmit:', err);\r\n      const userMessage = err.message || 'Er is een onverwachte fout opgetreden.';\r\n      setFormError(userMessage);\r\n      addNotification({ type: 'error', message: userMessage });\r\n    }\r\n  };\r\n  \r\n  // This button might be conditionally rendered by its parent if only patients can see it.\r\n  // If not, add a check here based on user's profile type.\r\n  // const { data: profile } = useProfile(user?.id);\r\n  // if (profile?.type !== 'patient') return null;\r\n\r\n\r\n  return (\r\n    <AddSpecialistButtonPresentational\r\n      showModal={showModal}\r\n      email={email}\r\n      isLoading={isAddingRelation}\r\n      formError={formError}\r\n      onOpenModal={handleOpenModal}\r\n      onCloseModal={handleCloseModal}\r\n      onEmailChange={handleEmailChange}\r\n      onSubmit={handleSubmit}\r\n    />\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\containers\\specialisten\\PatientDetailsContainer.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":61,"fix":{"range":[75,75],"text":"\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":2,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":36},{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'useEffect' is defined but never used.","line":2,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":36,"fix":{"range":[40,51],"text":""}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":45,"fix":{"range":[121,121],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/hooks/useMutations` import should occur before import of `@/hooks/useSupabaseQuery`","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":75,"fix":{"range":[182,456],"text":"import { useDeleteSpecialistPatientRelation } from '@/hooks/useMutations'; // Changed useRemoveSpecialistPatientRelation\r\nimport { useTasks, useRecentLogs, useReflecties, useInsights, useProfile } from '@/hooks/useSupabaseQuery'; // Changed useReflections to useReflecties\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/components/specialisten/PatientDetailsPresentational` import should occur before import of `@/hooks/useSupabaseQuery`","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":99,"fix":{"range":[182,556],"text":"import PatientDetailsPresentational from '@/components/specialisten/PatientDetailsPresentational';\r\nimport { useTasks, useRecentLogs, useReflecties, useInsights, useProfile } from '@/hooks/useSupabaseQuery'; // Changed useReflections to useReflecties\r\nimport { useDeleteSpecialistPatientRelation } from '@/hooks/useMutations'; // Changed useRemoveSpecialistPatientRelation\r\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TaskLog' is defined but never used.","line":8,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":26},{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'TaskLog' is defined but never used.","line":8,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":26,"fix":{"range":[573,582],"text":""}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Reflectie' is defined but never used.","line":8,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":37},{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'Reflectie' is defined but never used.","line":8,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":37,"fix":{"range":[582,593],"text":""}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Inzicht' is defined but never used.","line":8,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":46},{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'Inzicht' is defined but never used.","line":8,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":46,"fix":{"range":[593,602],"text":""}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Task' is defined but never used.","line":8,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":52},{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'Task' is defined but never used.","line":8,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":52,"fix":{"range":[601,607],"text":""}},{"ruleId":"import/order","severity":2,"message":"`@/lib/error-handler` import should occur before import of `@/types`","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":52,"fix":{"range":[556,680],"text":"import { ErrorMessage } from '@/lib/error-handler';\r\nimport { Profile, TaskLog, Reflectie, Inzicht, Task } from '@/types';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/context/NotificationContext` import should occur before import of `@/hooks/useSupabaseQuery`","line":10,"column":1,"nodeType":"ImportDeclaration","endLine":10,"endColumn":65,"fix":{"range":[182,746],"text":"import { useNotification } from '@/context/NotificationContext';\r\nimport { useTasks, useRecentLogs, useReflecties, useInsights, useProfile } from '@/hooks/useSupabaseQuery'; // Changed useReflections to useReflecties\r\nimport { useDeleteSpecialistPatientRelation } from '@/hooks/useMutations'; // Changed useRemoveSpecialistPatientRelation\r\nimport PatientDetailsPresentational from '@/components/specialisten/PatientDetailsPresentational';\r\nimport { Profile, TaskLog, Reflectie, Inzicht, Task } from '@/types';\r\nimport { ErrorMessage } from '@/lib/error-handler';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/components/ui/SkeletonLoader` import should occur before import of `@/hooks/useSupabaseQuery`","line":11,"column":1,"nodeType":"ImportDeclaration","endLine":11,"endColumn":65,"fix":{"range":[182,812],"text":"import { SkeletonLoader } from '@/components/ui/SkeletonLoader';\r\nimport { useTasks, useRecentLogs, useReflecties, useInsights, useProfile } from '@/hooks/useSupabaseQuery'; // Changed useReflections to useReflecties\r\nimport { useDeleteSpecialistPatientRelation } from '@/hooks/useMutations'; // Changed useRemoveSpecialistPatientRelation\r\nimport PatientDetailsPresentational from '@/components/specialisten/PatientDetailsPresentational';\r\nimport { Profile, TaskLog, Reflectie, Inzicht, Task } from '@/types';\r\nimport { ErrorMessage } from '@/lib/error-handler';\r\nimport { useNotification } from '@/context/NotificationContext';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/components/common/AlertMessage` import should occur before import of `@/hooks/useSupabaseQuery`","line":12,"column":1,"nodeType":"ImportDeclaration","endLine":12,"endColumn":65,"fix":{"range":[182,878],"text":"import { AlertMessage } from '@/components/common/AlertMessage';\r\nimport { useTasks, useRecentLogs, useReflecties, useInsights, useProfile } from '@/hooks/useSupabaseQuery'; // Changed useReflections to useReflecties\r\nimport { useDeleteSpecialistPatientRelation } from '@/hooks/useMutations'; // Changed useRemoveSpecialistPatientRelation\r\nimport PatientDetailsPresentational from '@/components/specialisten/PatientDetailsPresentational';\r\nimport { Profile, TaskLog, Reflectie, Inzicht, Task } from '@/types';\r\nimport { ErrorMessage } from '@/lib/error-handler';\r\nimport { useNotification } from '@/context/NotificationContext';\r\nimport { SkeletonLoader } from '@/components/ui/SkeletonLoader';\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":23,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":23,"endColumn":48}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":13,"fixableWarningCount":0,"source":"'use client';\r\nimport React, { useState, useEffect, useMemo } from 'react';\r\nimport { useRouter } from 'next/navigation';\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\nimport { useTasks, useRecentLogs, useReflecties, useInsights, useProfile } from '@/hooks/useSupabaseQuery'; // Changed useReflections to useReflecties\r\nimport { useDeleteSpecialistPatientRelation } from '@/hooks/useMutations'; // Changed useRemoveSpecialistPatientRelation\r\nimport PatientDetailsPresentational from '@/components/specialisten/PatientDetailsPresentational';\r\nimport { Profile, TaskLog, Reflectie, Inzicht, Task } from '@/types';\r\nimport { ErrorMessage } from '@/lib/error-handler';\r\nimport { useNotification } from '@/context/NotificationContext';\r\nimport { SkeletonLoader } from '@/components/ui/SkeletonLoader';\r\nimport { AlertMessage } from '@/components/common/AlertMessage';\r\n\r\ninterface PatientDetailsContainerProps {\r\n  patientId: string;\r\n  // Initial patient profile can be passed if fetched server-side by the page\r\n  // Otherwise, the container will fetch it.\r\n  initialPatientProfile?: Profile; \r\n}\r\n\r\ntype ActiveTabData = 'overview' | 'tasks' | 'logs' | 'reflecties' | 'inzichten';\r\n\r\nexport default function PatientDetailsContainer({ patientId, initialPatientProfile }: PatientDetailsContainerProps) {\r\n  const router = useRouter();\r\n  const { user: specialistUser } = useAuth(); // This is the logged-in specialist\r\n  const { addNotification } = useNotification();\r\n\r\n  const [activeTab, setActiveTab] = useState<ActiveTabData>('overview');\r\n  const [confirmRemove, setConfirmRemove] = useState(false);\r\n\r\n  // Fetch patient profile if not provided, or to ensure it's up-to-date\r\n  const { \r\n    data: patientProfile, \r\n    isLoading: isLoadingPatientProfile, \r\n    error: patientProfileError,\r\n    isError: isPatientProfileError\r\n  } = useProfile(patientId, { \r\n    initialData: initialPatientProfile,\r\n    enabled: !!patientId, // Fetch only if patientId is available\r\n  });\r\n\r\n  // Data fetching hooks for each tab, enabled based on activeTab\r\n  const { data: tasks, isLoading: isLoadingTasks, error: tasksError, isError: isTasksError } = useTasks(patientId, {}, { enabled: activeTab === 'tasks' && !!patientId });\r\n  const { data: logs, isLoading: isLoadingLogs, error: logsError, isError: isLogsError } = useRecentLogs(patientId, 50, { enabled: (activeTab === 'logs' || activeTab === 'overview') && !!patientId }); // Overview also uses logs for chart\r\n  const { data: reflecties, isLoading: isLoadingReflections, error: reflectionsError, isError: isReflectionsError } = useReflecties(patientId, { limit: 30, order: { column: 'datum', ascending: false } }, { enabled: activeTab === 'reflecties' && !!patientId }); // Changed useReflections\r\n  const { data: inzichten, isLoading: isLoadingInsights, error: insightsError, isError: isInsightsError } = useInsights(patientId, 10, { enabled: activeTab === 'inzichten' && !!patientId });\r\n\r\n  const { mutate: removeRelation, isPending: isRemovingPatient } = useDeleteSpecialistPatientRelation(); // Changed useRemoveSpecialistPatientRelation\r\n\r\n  const isLoadingTabData = useMemo(() => {\r\n    if (activeTab === 'tasks') return isLoadingTasks;\r\n    if (activeTab === 'logs' || activeTab === 'overview') return isLoadingLogs; // Overview uses logs\r\n    if (activeTab === 'reflecties') return isLoadingReflections;\r\n    if (activeTab === 'inzichten') return isLoadingInsights;\r\n    return false;\r\n  }, [activeTab, isLoadingTasks, isLoadingLogs, isLoadingReflections, isLoadingInsights]);\r\n\r\n  const tabDataError = useMemo(() => {\r\n    if (activeTab === 'tasks' && isTasksError) return tasksError as ErrorMessage | null;\r\n    if ((activeTab === 'logs' || activeTab === 'overview') && isLogsError) return logsError as ErrorMessage | null;\r\n    if (activeTab === 'reflecties' && isReflectionsError) return reflectionsError as ErrorMessage | null;\r\n    if (activeTab === 'inzichten' && isInsightsError) return insightsError as ErrorMessage | null;\r\n    return null;\r\n  }, [activeTab, isTasksError, tasksError, isLogsError, logsError, isReflectionsError, reflectionsError, isInsightsError, insightsError]);\r\n\r\n\r\n  const formatDate = (dateString?: Date | string) => {\r\n    if (!dateString) return 'N/A';\r\n    return new Date(dateString).toLocaleDateString('nl-BE', { day: 'numeric', month: 'long', year: 'numeric' });\r\n  };\r\n  \r\n  const handleConfirmRemoveToggle = () => {\r\n    setConfirmRemove(prev => !prev);\r\n    if (confirmRemove) { // If it was true and now toggling off\r\n        // Optionally reset a timer if one was set to auto-cancel\r\n    } else {\r\n        // Set a timer to auto-cancel confirmation after a few seconds\r\n        setTimeout(() => setConfirmRemove(false), 5000);\r\n    }\r\n  };\r\n\r\n  const handleRemovePatient = () => {\r\n    if (!specialistUser || !patientProfile) return;\r\n\r\n    removeRelation({ specialist_id: specialistUser.id, patient_id: patientProfile.id }, {\r\n      onSuccess: () => {\r\n        addNotification({ type: 'success', message: `${patientProfile.voornaam} is losgekoppeld.` });\r\n        router.push('/specialisten/patienten');\r\n        router.refresh(); // Or use queryClient.invalidateQueries\r\n      },\r\n      onError: (error: ErrorMessage) => { // Explicitly type error\r\n        addNotification({ type: 'error', message: error.userMessage || 'Kon patiënt niet loskoppelen.' });\r\n        setConfirmRemove(false); // Reset confirmation on error\r\n      }\r\n    });\r\n  };\r\n  \r\n  const calculateAge = (birthdate?: string | Date) => {\r\n    if (!birthdate) return null;\r\n    const today = new Date();\r\n    const birthDate = new Date(birthdate);\r\n    let age = today.getFullYear() - birthDate.getFullYear();\r\n    const m = today.getMonth() - birthDate.getMonth();\r\n    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) age--;\r\n    return age;\r\n  };\r\n  \r\n  const patientAge = useMemo(() => calculateAge(patientProfile?.geboortedatum), [patientProfile?.geboortedatum]);\r\n  \r\n  const metricAverages = useMemo(() => {\r\n    if (!logs || logs.length === 0) return { pijn: null, vermoeidheid: null, energie: null };\r\n    const pijnScores = logs.map(log => log.pijn_score).filter(s => s != null) as number[];\r\n    const vermoeidheidScores = logs.map(log => log.vermoeidheid_score).filter(s => s != null) as number[];\r\n    const energieNaScores = logs.map(log => log.energie_na).filter(s => s != null) as number[];\r\n    const average = (arr: number[]) => arr.length ? Math.round(arr.reduce((a, b) => a + b, 0) / arr.length * 10) / 10 : null;\r\n    return { pijn: average(pijnScores), vermoeidheid: average(vermoeidheidScores), energie: average(energieNaScores) };\r\n  }, [logs]);\r\n\r\n  if (isLoadingPatientProfile && !initialPatientProfile) {\r\n    return (\r\n        <div className=\"p-6\">\r\n            <SkeletonLoader type=\"profile\" /> \r\n            <div className=\"mt-6\"><SkeletonLoader type=\"tasks\" count={3} /></div>\r\n        </div>\r\n    );\r\n  }\r\n\r\n  const typedPatientProfileError = patientProfileError as ErrorMessage | null;\r\n  if (isPatientProfileError && typedPatientProfileError) {\r\n    return (\r\n        <div className=\"p-6\">\r\n            <AlertMessage type=\"error\" title=\"Fout bij laden patiëntprofiel\" message={typedPatientProfileError.userMessage || \"Kon patiëntprofiel niet laden.\"} />\r\n        </div>\r\n    );\r\n  }\r\n\r\n  if (!patientProfile) {\r\n    return <div className=\"p-6 text-center text-gray-500\">Patiënt niet gevonden of kon niet worden geladen.</div>;\r\n  }\r\n  \r\n  return (\r\n    <PatientDetailsPresentational\r\n      patient={patientProfile}\r\n      activeTab={activeTab}\r\n      onTabChange={setActiveTab}\r\n      logs={logs || []}\r\n      reflecties={reflecties || []}\r\n      inzichten={inzichten || []}\r\n      tasks={tasks || []}\r\n      isLoadingTabData={isLoadingTabData}\r\n      tabDataError={tabDataError}\r\n      patientAge={patientAge}\r\n      metricAverages={metricAverages}\r\n      isRemovingPatient={isRemovingPatient}\r\n      onRemovePatient={handleRemovePatient}\r\n      confirmRemove={confirmRemove}\r\n      onConfirmRemoveToggle={handleConfirmRemoveToggle}\r\n      formatDate={formatDate}\r\n    />\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\containers\\tasks\\TaskExecutionContainer.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":65,"fix":{"range":[79,79],"text":"\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useState' is defined but never used.","line":2,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":25},{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'useState' is defined but never used.","line":2,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":25,"fix":{"range":[30,40],"text":""}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":2,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":36},{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'useEffect' is defined but never used.","line":2,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":36,"fix":{"range":[40,51],"text":""}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useCallback' is defined but never used.","line":2,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":49},{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'useCallback' is defined but never used.","line":2,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":49,"fix":{"range":[50,63],"text":""}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":45,"fix":{"range":[125,125],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/types` import should occur after import of `@/components/common/AlertMessage`","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":41,"fix":{"range":[127,715],"text":"import { useAuth } from '@/components/auth/AuthProvider';\r\nimport { useAddTaskLog, useUpdateTaskLog } from '@/hooks/useMutations';\r\nimport { ErrorMessage } from '@/lib/error-handler';\r\nimport TaskExecutionPresentational, { FeedbackState } from '@/components/tasks/TaskExecutionPresentational';\r\nimport { useNotification } from '@/context/NotificationContext';\r\nimport { SkeletonLoader } from '@/components/ui/SkeletonLoader';\r\nimport { useTask } from '@/hooks/useSupabaseQuery';\r\nimport { AlertMessage } from '@/components/common/AlertMessage';\r\nimport { Task, TaskLog } from '@/types';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/hooks/useMutations` import should occur after import of `@/components/common/AlertMessage`","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":72,"fix":{"range":[228,715],"text":"import { ErrorMessage } from '@/lib/error-handler';\r\nimport TaskExecutionPresentational, { FeedbackState } from '@/components/tasks/TaskExecutionPresentational';\r\nimport { useNotification } from '@/context/NotificationContext';\r\nimport { SkeletonLoader } from '@/components/ui/SkeletonLoader';\r\nimport { useTask } from '@/hooks/useSupabaseQuery';\r\nimport { AlertMessage } from '@/components/common/AlertMessage';\r\nimport { useAddTaskLog, useUpdateTaskLog } from '@/hooks/useMutations';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/lib/error-handler` import should occur after import of `@/components/common/AlertMessage`","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":52,"fix":{"range":[301,715],"text":"import TaskExecutionPresentational, { FeedbackState } from '@/components/tasks/TaskExecutionPresentational';\r\nimport { useNotification } from '@/context/NotificationContext';\r\nimport { SkeletonLoader } from '@/components/ui/SkeletonLoader';\r\nimport { useTask } from '@/hooks/useSupabaseQuery';\r\nimport { AlertMessage } from '@/components/common/AlertMessage';\r\nimport { ErrorMessage } from '@/lib/error-handler';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/components/tasks/TaskExecutionPresentational` import should occur after import of `@/components/common/AlertMessage`","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":109,"fix":{"range":[354,715],"text":"import { useNotification } from '@/context/NotificationContext';\r\nimport { SkeletonLoader } from '@/components/ui/SkeletonLoader';\r\nimport { useTask } from '@/hooks/useSupabaseQuery';\r\nimport { AlertMessage } from '@/components/common/AlertMessage';\r\nimport TaskExecutionPresentational, { FeedbackState } from '@/components/tasks/TaskExecutionPresentational';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/context/NotificationContext` import should occur after import of `@/components/common/AlertMessage`","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":65,"fix":{"range":[464,715],"text":"import { SkeletonLoader } from '@/components/ui/SkeletonLoader';\r\nimport { useTask } from '@/hooks/useSupabaseQuery';\r\nimport { AlertMessage } from '@/components/common/AlertMessage';\r\nimport { useNotification } from '@/context/NotificationContext';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/components/ui/SkeletonLoader` import should occur after import of `@/components/common/AlertMessage`","line":10,"column":1,"nodeType":"ImportDeclaration","endLine":10,"endColumn":65,"fix":{"range":[530,715],"text":"import { useTask } from '@/hooks/useSupabaseQuery';\r\nimport { AlertMessage } from '@/components/common/AlertMessage';\r\nimport { SkeletonLoader } from '@/components/ui/SkeletonLoader';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/hooks/useSupabaseQuery` import should occur after import of `@/components/common/AlertMessage`","line":11,"column":1,"nodeType":"ImportDeclaration","endLine":11,"endColumn":52,"fix":{"range":[596,715],"text":"import { AlertMessage } from '@/components/common/AlertMessage';\r\nimport { useTask } from '@/hooks/useSupabaseQuery';\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":20,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":20,"endColumn":47},{"ruleId":"import/no-named-as-default-member","severity":1,"message":"Caution: `React` also has a named export `useState`. Check if you meant to write `import {useState} from 'react'` instead.","line":37,"column":37,"nodeType":"MemberExpression","endLine":37,"endColumn":51},{"ruleId":"import/no-named-as-default-member","severity":1,"message":"Caution: `React` also has a named export `useState`. Check if you meant to write `import {useState} from 'react'` instead.","line":38,"column":37,"nodeType":"MemberExpression","endLine":38,"endColumn":51},{"ruleId":"import/no-named-as-default-member","severity":1,"message":"Caution: `React` also has a named export `useState`. Check if you meant to write `import {useState} from 'react'` instead.","line":39,"column":43,"nodeType":"MemberExpression","endLine":39,"endColumn":57},{"ruleId":"import/no-named-as-default-member","severity":1,"message":"Caution: `React` also has a named export `useState`. Check if you meant to write `import {useState} from 'react'` instead.","line":40,"column":41,"nodeType":"MemberExpression","endLine":40,"endColumn":55},{"ruleId":"import/no-named-as-default-member","severity":1,"message":"Caution: `React` also has a named export `useState`. Check if you meant to write `import {useState} from 'react'` instead.","line":41,"column":53,"nodeType":"MemberExpression","endLine":41,"endColumn":67},{"ruleId":"import/no-named-as-default-member","severity":1,"message":"Caution: `React` also has a named export `useState`. Check if you meant to write `import {useState} from 'react'` instead.","line":44,"column":35,"nodeType":"MemberExpression","endLine":44,"endColumn":49},{"ruleId":"import/no-named-as-default-member","severity":1,"message":"Caution: `React` also has a named export `useCallback`. Check if you meant to write `import {useCallback} from 'react'` instead.","line":69,"column":22,"nodeType":"MemberExpression","endLine":69,"endColumn":39},{"ruleId":"import/no-named-as-default-member","severity":1,"message":"Caution: `React` also has a named export `useCallback`. Check if you meant to write `import {useCallback} from 'react'` instead.","line":76,"column":27,"nodeType":"MemberExpression","endLine":76,"endColumn":44},{"ruleId":"import/no-named-as-default-member","severity":1,"message":"Caution: `React` also has a named export `useCallback`. Check if you meant to write `import {useCallback} from 'react'` instead.","line":107,"column":26,"nodeType":"MemberExpression","endLine":107,"endColumn":43},{"ruleId":"import/no-named-as-default-member","severity":1,"message":"Caution: `React` also has a named export `useEffect`. Check if you meant to write `import {useEffect} from 'react'` instead.","line":151,"column":3,"nodeType":"MemberExpression","endLine":151,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":164,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":164,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6586,6589],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6586,6589],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":179,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":179,"endColumn":59,"fix":{"range":[7158,7191],"text":"rounded-lg bg-white p-6 shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":188,"column":14,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":188,"endColumn":59,"fix":{"range":[7440,7473],"text":"rounded-lg bg-white p-6 shadow-md"}}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":12,"fixableWarningCount":2,"source":"'use client';\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport { useRouter } from 'next/navigation';\r\nimport { Task, TaskLog } from '@/types';\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\nimport { useAddTaskLog, useUpdateTaskLog } from '@/hooks/useMutations';\r\nimport { ErrorMessage } from '@/lib/error-handler';\r\nimport TaskExecutionPresentational, { FeedbackState } from '@/components/tasks/TaskExecutionPresentational';\r\nimport { useNotification } from '@/context/NotificationContext';\r\nimport { SkeletonLoader } from '@/components/ui/SkeletonLoader';\r\nimport { useTask } from '@/hooks/useSupabaseQuery';\r\nimport { AlertMessage } from '@/components/common/AlertMessage';\r\n\r\ninterface TaskExecutionContainerProps {\r\n  taskId: string; // Task ID is mandatory for the container to fetch the task\r\n  initialTask?: Task; // Optional: if task data is already available (e.g., from SSR)\r\n  onComplete?: () => void; // Optional callback when task log is successfully submitted\r\n}\r\n\r\nexport default function TaskExecutionContainer({ taskId, initialTask, onComplete }: TaskExecutionContainerProps) {\r\n  const router = useRouter();\r\n  const { user } = useAuth();\r\n  const { addNotification } = useNotification();\r\n\r\n  // Fetch the task details\r\n  const { \r\n    data: task, \r\n    isLoading: isLoadingTask, \r\n    error: fetchTaskError,\r\n    isError: isFetchTaskError\r\n  } = useTask(taskId, { \r\n    initialData: initialTask,\r\n    enabled: !!taskId,\r\n  });\r\n\r\n  // State management\r\n  const [isRunning, setIsRunning] = React.useState(false);\r\n  const [startTime, setStartTime] = React.useState<Date | null>(null);\r\n  const [currentLogId, setCurrentLogId] = React.useState<string | null>(null);\r\n  const [elapsedTime, setElapsedTime] = React.useState(0);\r\n  const [showFeedbackModal, setShowFeedbackModal] = React.useState(false);\r\n  \r\n  // Initialize feedback with more reasonable default values\r\n  const [feedback, setFeedback] = React.useState<FeedbackState>({\r\n    pijn_score: 5, \r\n    energie_voor: 7, \r\n    energie_na: 5, \r\n    vermoeidheid_score: 5, \r\n    hartslag: undefined, // Voeg hartslag toe (optioneel)\r\n    stemming: 'neutraal',\r\n    notitie: '',\r\n  });\r\n\r\n  const { \r\n    mutate: addTaskLog, \r\n    isPending: isAddingLog, \r\n    error: addLogError \r\n  } = useAddTaskLog();\r\n  const { \r\n    mutate: updateTaskLog, \r\n    isPending: isUpdatingLog, \r\n    error: updateLogError \r\n  } = useUpdateTaskLog();\r\n\r\n  const isBusy = isAddingLog || isUpdatingLog;\r\n  const mutationError = (addLogError || updateLogError) as ErrorMessage | null;\r\n\r\n  // Format time function\r\n  const formatTime = React.useCallback((seconds: number): string => {\r\n    const hours = Math.floor(seconds / 3600);\r\n    const minutes = Math.floor((seconds % 3600) / 60);\r\n    const secs = seconds % 60;\r\n    return [hours, minutes, secs].map(v => v.toString().padStart(2, '0')).join(':');\r\n  }, []);\r\n\r\n  const handleStartTask = React.useCallback(async () => {\r\n    if (!user || !task) {\r\n      addNotification({ type: 'error', message: 'Gebruiker niet geverifieerd of taak niet geladen.' });\r\n      return;\r\n    }\r\n    const now = new Date();\r\n    const logDataToCreateInput = {\r\n      task_id: task.id,\r\n      start_tijd: now.toISOString(), // API expects ISO string\r\n      energie_voor: feedback.energie_voor,\r\n      // user_id is added by the API route based on session\r\n    };\r\n\r\n    addTaskLog(logDataToCreateInput, {\r\n      onSuccess: (createdLog) => {\r\n        if (createdLog && createdLog.id) {\r\n          setStartTime(now);\r\n          setCurrentLogId(createdLog.id);\r\n          setIsRunning(true);\r\n          setElapsedTime(0);\r\n          addNotification({ type: 'success', message: `Taak '${task.titel}' gestart!` });\r\n        } else {\r\n            addNotification({ type: 'error', message: 'Kon taaklog niet aanmaken.'});\r\n        }\r\n      },\r\n      onError: (error) => {\r\n        addNotification({ type: 'error', message: (error as ErrorMessage).userMessage || 'Starten van taak mislukt.' });\r\n      }\r\n    });\r\n  }, [task, user, addTaskLog, feedback.energie_voor, addNotification]);\r\n\r\n  const handleStopTask = React.useCallback(() => {\r\n    if (!isRunning || !startTime) return;\r\n    setIsRunning(false);\r\n    setShowFeedbackModal(true);\r\n  }, [isRunning, startTime]);\r\n\r\n  const handleSubmitFeedback = async () => {\r\n    if (!startTime || !currentLogId || !user || !task) {\r\n        addNotification({ type: 'error', message: 'Sessie ongeldig of taakdetails ontbreken.' });\r\n        return;\r\n    }\r\n\r\n    const logDataToUpdate: Partial<Omit<TaskLog, 'id' | 'created_at' | 'user_id' | 'task_id' | 'start_tijd'>> & { eind_tijd: string } = {\r\n      eind_tijd: new Date().toISOString(),\r\n      // Alleen velden toevoegen die relevant zijn op basis van task.metingen\r\n    };\r\n\r\n    if (task.metingen?.includes('pijn')) logDataToUpdate.pijn_score = feedback.pijn_score;\r\n    if (task.metingen?.includes('energie')) logDataToUpdate.energie_na = feedback.energie_na;\r\n    // energie_voor wordt bij start gelogd, niet hier bijwerken tenzij expliciet gevraagd in feedback\r\n    if (task.metingen?.includes('vermoeidheid')) logDataToUpdate.vermoeidheid_score = feedback.vermoeidheid_score;\r\n    if (task.metingen?.includes('hartslag') && feedback.hartslag !== undefined) logDataToUpdate.hartslag = feedback.hartslag;\r\n    if (task.metingen?.includes('stemming')) logDataToUpdate.stemming = feedback.stemming;\r\n    logDataToUpdate.notitie = feedback.notitie; // Notitie altijd meesturen\r\n\r\n    updateTaskLog({ id: currentLogId, data: logDataToUpdate }, {\r\n      onSuccess: () => {\r\n        addNotification({ type: 'success', message: `Feedback voor '${task.titel}' opgeslagen.` });\r\n        setShowFeedbackModal(false);\r\n        setStartTime(null);\r\n        setCurrentLogId(null);\r\n        setElapsedTime(0);\r\n        if (onComplete) {\r\n          onComplete();\r\n        } else {\r\n          router.push('/taken');\r\n        }\r\n      },\r\n      onError: (error) => {\r\n         addNotification({ type: 'error', message: (error as ErrorMessage).userMessage || 'Opslaan van feedback mislukt.' });\r\n      }\r\n    });\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    let intervalId: NodeJS.Timeout;\r\n    if (isRunning && startTime) {\r\n      intervalId = setInterval(() => {\r\n        setElapsedTime(Math.floor((new Date().getTime() - startTime.getTime()) / 1000));\r\n      }, 1000);\r\n    }\r\n    return () => {\r\n      if (intervalId) clearInterval(intervalId);\r\n    };\r\n  }, [isRunning, startTime]);\r\n\r\n  // Fix TypeScript error by using a more generic event type\r\n  const handleFeedbackChange = (e: any) => {\r\n    const { name, value } = e.target;\r\n    const numValue = (name === 'pijn_score' || name === 'energie_voor' || name === 'energie_na' || name === 'vermoeidheid_score') \r\n                     ? parseInt(value, 10) \r\n                     : value;\r\n    setFeedback(prev => ({ ...prev, [name]: numValue }));\r\n  };\r\n\r\n  const handleCloseFeedbackModal = () => {\r\n    setShowFeedbackModal(false);\r\n    // Optionally, reset timer or navigate away if task is considered \"abandoned\"\r\n  };\r\n\r\n  if (isLoadingTask && !initialTask) {\r\n    return (\r\n        <div className=\"bg-white rounded-lg shadow-md p-6\">\r\n            <SkeletonLoader type=\"form\" count={3} />\r\n        </div>\r\n    );\r\n  }\r\n  \r\n  const typedFetchTaskError = fetchTaskError as ErrorMessage | null;\r\n  if (isFetchTaskError && typedFetchTaskError) {\r\n    return (\r\n        <div className=\"bg-white rounded-lg shadow-md p-6\">\r\n            <AlertMessage type=\"error\" title=\"Fout bij laden taak\" message={typedFetchTaskError.userMessage || \"Kon taakdetails niet laden.\"} />\r\n        </div>\r\n    );\r\n  }\r\n\r\n  if (!task) {\r\n    return <div className=\"p-6 text-center text-gray-500\">Taak niet gevonden of kon niet worden geladen.</div>;\r\n  }\r\n\r\n  return (\r\n    <TaskExecutionPresentational\r\n      task={task}\r\n      isRunning={isRunning}\r\n      elapsedTime={elapsedTime}\r\n      showFeedbackModal={showFeedbackModal}\r\n      feedback={feedback}\r\n      isBusy={isBusy}\r\n      mutationError={mutationError}\r\n      onStartTask={handleStartTask}\r\n      onStopTask={handleStopTask}\r\n      onSubmitFeedback={handleSubmitFeedback}\r\n      onFeedbackChange={handleFeedbackChange}\r\n      onCloseFeedbackModal={handleCloseFeedbackModal}\r\n      formatTime={formatTime}\r\n    />\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\containers\\tasks\\TaskFormContainer.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":63,"fix":{"range":[77,77],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":45,"fix":{"range":[123,123],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/types` import should occur after import of `@/context/NotificationContext`","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":32,"fix":{"range":[125,701],"text":"import { useUpsertTask } from '@/hooks/useMutations';\r\nimport { useTask } from '@/hooks/useSupabaseQuery';\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\nimport { SkeletonLoader } from '@/components/ui/SkeletonLoader';\r\nimport { ErrorMessage } from '@/lib/error-handler';\r\nimport TaskFormPresentational, { TaskFormData } from '@/components/tasks/TaskFormPresentational';\r\nimport { AlertMessage } from '@/components/common/AlertMessage';\r\nimport { useNotification } from '@/context/NotificationContext'; // Import useNotification\r\nimport { Task } from '@/types';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/hooks/useMutations` import should occur after import of `@/context/NotificationContext`","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":54,"fix":{"range":[158,701],"text":"import { useTask } from '@/hooks/useSupabaseQuery';\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\nimport { SkeletonLoader } from '@/components/ui/SkeletonLoader';\r\nimport { ErrorMessage } from '@/lib/error-handler';\r\nimport TaskFormPresentational, { TaskFormData } from '@/components/tasks/TaskFormPresentational';\r\nimport { AlertMessage } from '@/components/common/AlertMessage';\r\nimport { useNotification } from '@/context/NotificationContext'; // Import useNotification\r\nimport { useUpsertTask } from '@/hooks/useMutations';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/hooks/useSupabaseQuery` import should occur after import of `@/context/NotificationContext`","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":52,"fix":{"range":[213,701],"text":"import { useAuth } from '@/components/auth/AuthProvider';\r\nimport { SkeletonLoader } from '@/components/ui/SkeletonLoader';\r\nimport { ErrorMessage } from '@/lib/error-handler';\r\nimport TaskFormPresentational, { TaskFormData } from '@/components/tasks/TaskFormPresentational';\r\nimport { AlertMessage } from '@/components/common/AlertMessage';\r\nimport { useNotification } from '@/context/NotificationContext'; // Import useNotification\r\nimport { useTask } from '@/hooks/useSupabaseQuery';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/components/ui/SkeletonLoader` import should occur after import of `@/components/common/AlertMessage`","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":65,"fix":{"range":[325,609],"text":"import { ErrorMessage } from '@/lib/error-handler';\r\nimport TaskFormPresentational, { TaskFormData } from '@/components/tasks/TaskFormPresentational';\r\nimport { AlertMessage } from '@/components/common/AlertMessage';\r\nimport { SkeletonLoader } from '@/components/ui/SkeletonLoader';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/lib/error-handler` import should occur after import of `@/context/NotificationContext`","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":52,"fix":{"range":[391,701],"text":"import TaskFormPresentational, { TaskFormData } from '@/components/tasks/TaskFormPresentational';\r\nimport { AlertMessage } from '@/components/common/AlertMessage';\r\nimport { useNotification } from '@/context/NotificationContext'; // Import useNotification\r\nimport { ErrorMessage } from '@/lib/error-handler';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/components/tasks/TaskFormPresentational` import should occur after import of `@/components/common/AlertMessage`","line":10,"column":1,"nodeType":"ImportDeclaration","endLine":10,"endColumn":98,"fix":{"range":[444,609],"text":"import { AlertMessage } from '@/components/common/AlertMessage';\r\nimport TaskFormPresentational, { TaskFormData } from '@/components/tasks/TaskFormPresentational';\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":37,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":37,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isUpsertError' is assigned a value but never used.","line":73,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":73,"endColumn":27},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":151,"column":31,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":151,"endColumn":76,"fix":{"range":[5488,5521],"text":"rounded-lg bg-white p-6 shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":152,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":152,"endColumn":51,"fix":{"range":[5548,5574],"text":"mb-6 text-xl font-semibold"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":169,"column":31,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":169,"endColumn":76,"fix":{"range":[6380,6413],"text":"rounded-lg bg-white p-6 shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":180,"column":31,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":180,"endColumn":76,"fix":{"range":[6964,6997],"text":"rounded-lg bg-white p-6 shadow-md"}}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":8,"fixableWarningCount":4,"source":"'use client';\r\nimport React, { useState, useEffect, FormEvent } from 'react';\r\nimport { useRouter } from 'next/navigation';\r\nimport { Task } from '@/types';\r\nimport { useUpsertTask } from '@/hooks/useMutations';\r\nimport { useTask } from '@/hooks/useSupabaseQuery';\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\nimport { SkeletonLoader } from '@/components/ui/SkeletonLoader';\r\nimport { ErrorMessage } from '@/lib/error-handler';\r\nimport TaskFormPresentational, { TaskFormData } from '@/components/tasks/TaskFormPresentational';\r\nimport { AlertMessage } from '@/components/common/AlertMessage';\r\nimport { useNotification } from '@/context/NotificationContext'; // Import useNotification\r\n\r\ninterface TaskFormContainerProps {\r\n  taskId?: string;\r\n  initialData?: Partial<Task>; // For passing data directly, e.g. from a modal prefill\r\n  isEditing?: boolean;\r\n  initialType?: 'taak' | 'opdracht';\r\n}\r\n\r\n// Helper to convert Task fields to form-compatible strings and structure\r\nconst taskToFormData = (task: Partial<Task> | null | undefined, defaultType: 'taak' | 'opdracht'): TaskFormData => {\r\n  return {\r\n    type: task?.type || defaultType,\r\n    titel: task?.titel || '',\r\n    beschrijving: task?.beschrijving || '',\r\n    duur: task?.duur?.toString() || '15',\r\n    hartslag_doel: task?.hartslag_doel?.toString() || '',\r\n    herhaal_patroon: task?.herhaal_patroon || 'eenmalig',\r\n    dagen_van_week: task?.dagen_van_week || [],\r\n    metingen: task?.metingen || ['energie', 'pijn', 'vermoeidheid'],\r\n    notities: task?.notities || '',\r\n    labels: task?.labels || [],\r\n  };\r\n};\r\n\r\nexport default function TaskFormContainer({ \r\n  taskId, \r\n  initialData: initialDataProp, // Renamed to avoid conflict with fetchedTaskData\r\n  isEditing = !!taskId, // Infer isEditing if taskId is present\r\n  initialType = 'taak' \r\n}: TaskFormContainerProps) {\r\n  const router = useRouter();\r\n  const { user } = useAuth();\r\n  const { addNotification } = useNotification();\r\n\r\n  const [formState, setFormState] = useState<TaskFormData>(taskToFormData(initialDataProp, initialType));\r\n\r\n  const { \r\n    data: fetchedTaskData, \r\n    isLoading: isLoadingTask, \r\n    error: fetchTaskError,\r\n    isError: isFetchTaskError,\r\n  } = useTask(taskId, { \r\n    enabled: isEditing && !!taskId && !initialDataProp, \r\n  });\r\n\r\n  useEffect(() => {\r\n    if (isEditing) {\r\n      const dataToUse = initialDataProp || fetchedTaskData;\r\n      if (dataToUse) {\r\n        setFormState(taskToFormData(dataToUse, initialType));\r\n      }\r\n    } else if (initialDataProp) { // For new tasks with prefilled data\r\n        setFormState(taskToFormData(initialDataProp, initialType));\r\n    }\r\n  }, [initialDataProp, fetchedTaskData, isEditing, initialType]);\r\n\r\n  const { \r\n    mutate: upsertTask, \r\n    isPending: isUpserting, \r\n    error: upsertHookError, \r\n    isError: isUpsertError \r\n  } = useUpsertTask();\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\r\n    const { name, value } = e.target;\r\n    setFormState(prev => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const handleDayToggle = (day: string) => {\r\n    const currentDays = formState.dagen_van_week || [];\r\n    const days = [...currentDays];\r\n    const index = days.indexOf(day);\r\n    if (index > -1) {\r\n      days.splice(index, 1);\r\n    } else {\r\n      days.push(day);\r\n    }\r\n    setFormState(prev => ({ ...prev, dagen_van_week: days }));\r\n  };\r\n\r\n  const handleMeasurementToggle = (measurement: string) => {\r\n    const currentMetingen = formState.metingen || [];\r\n    const measurements = [...currentMetingen];\r\n    const index = measurements.indexOf(measurement);\r\n    if (index > -1) {\r\n      measurements.splice(index, 1);\r\n    } else {\r\n      measurements.push(measurement);\r\n    }\r\n    setFormState(prev => ({ ...prev, metingen: measurements }));\r\n  };\r\n\r\n  const handleLabelChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const labels = e.target.value.split(',').map(label => label.trim()).filter(label => label !== '');\r\n    setFormState(prev => ({ ...prev, labels }));\r\n  };\r\n\r\n  const handleSubmit = async (e: FormEvent) => {\r\n    e.preventDefault();\r\n    if (!user) {\r\n      addNotification({ type: 'error', message: 'U moet ingelogd zijn om een taak op te slaan.' });\r\n      return;\r\n    }\r\n\r\n    const taskToSubmit: Partial<Task> = {\r\n      ...formState,\r\n      user_id: user.id,\r\n      duur: formState.duur ? parseInt(formState.duur, 10) : undefined,\r\n      hartslag_doel: formState.hartslag_doel ? parseInt(formState.hartslag_doel, 10) : undefined,\r\n      dagen_van_week: formState.dagen_van_week || [],\r\n      metingen: formState.metingen || [],\r\n      labels: formState.labels || [],\r\n    };\r\n\r\n    if (isEditing && taskId) {\r\n      taskToSubmit.id = taskId;\r\n    } else {\r\n      delete taskToSubmit.id; \r\n    }\r\n    \r\n    upsertTask(taskToSubmit, {\r\n      onSuccess: (savedTask) => {\r\n        addNotification({ type: 'success', message: `Taak '${savedTask.titel}' succesvol ${isEditing ? 'bijgewerkt' : 'aangemaakt'}!` });\r\n        router.push('/taken'); \r\n        router.refresh(); // To ensure server components using this data are updated\r\n      },\r\n      onError: (error) => {\r\n        addNotification({ type: 'error', message: (error as ErrorMessage).userMessage || 'Opslaan van taak mislukt.' });\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    router.back();\r\n  };\r\n\r\n  if (isLoadingTask) {\r\n    return (\r\n      <section id=\"task-form\" className=\"bg-white rounded-lg shadow-md p-6\">\r\n        <h2 className=\"text-xl font-semibold mb-6\">Taak Laden...</h2>\r\n        <SkeletonLoader type=\"form\" count={5} />\r\n      </section>\r\n    );\r\n  }\r\n\r\n  const typedFetchTaskError = fetchTaskError as ErrorMessage | null;\r\n  if (isFetchTaskError) { \r\n    console.error(\"[TaskFormContainer] Fetch task error object:\", fetchTaskError); \r\n    // Probeer eerst userMessage, dan de standaard message van het Error object (als het een Error is), dan een fallback.\r\n    let errorMessage = \"Kon taakdetails niet laden. De taak bestaat mogelijk niet of u heeft geen toegang.\";\r\n    if (typedFetchTaskError?.userMessage) {\r\n      errorMessage = typedFetchTaskError.userMessage;\r\n    } else if (fetchTaskError instanceof Error && fetchTaskError.message) {\r\n      errorMessage = fetchTaskError.message;\r\n    }\r\n    return (\r\n      <section id=\"task-form\" className=\"bg-white rounded-lg shadow-md p-6\">\r\n        <AlertMessage type=\"error\" title=\"Fout bij laden van taak\" message={errorMessage} />\r\n      </section>\r\n    );\r\n  }\r\n  \r\n  // Extra check: als we in edit mode zijn maar geen fetchedTaskData hebben (en ook geen initialDataProp)\r\n  // nadat isLoadingTask false is, dan is er iets mis (taak niet gevonden).\r\n  if (isEditing && !isLoadingTask && !fetchedTaskData && !initialDataProp) {\r\n    console.warn(`[TaskFormContainer] In edit mode, but no task data found for taskId: ${taskId}`);\r\n    return (\r\n      <section id=\"task-form\" className=\"bg-white rounded-lg shadow-md p-6\">\r\n        <AlertMessage type=\"error\" title=\"Taak niet gevonden\" message=\"De opgevraagde taak kon niet worden gevonden of is niet toegankelijk.\" />\r\n      </section>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <TaskFormPresentational\r\n      formState={formState}\r\n      isEditing={isEditing}\r\n      isUpserting={isUpserting}\r\n      upsertError={upsertHookError as ErrorMessage | null}\r\n      onFormChange={handleChange}\r\n      onDayToggle={handleDayToggle}\r\n      onMeasurementToggle={handleMeasurementToggle}\r\n      onLabelChange={handleLabelChange}\r\n      onSubmit={handleSubmit}\r\n      onCancel={handleCancel}\r\n    />\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\containers\\tasks\\TaskLogsContainer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\containers\\tasks\\TasksPageContainer.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"`next/navigation` import should occur after import of `react`","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":51,"fix":{"range":[15,580],"text":"import Link from 'next/link';\r\nimport { Task, TaskLog } from '@/types'; // TaskLog toegevoegd\r\nimport TaskList from '@/components/tasks/TaskList'; \r\nimport TaskFilters from '@/components/tasks/TaskFilters'; \r\nimport AddTaskButton from '@/components/tasks/AddTaskButton'; \r\nimport { useTasks } from '@/hooks/useSupabaseQuery';\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\nimport { ConditionalRender } from '@/components/ui/ConditionalRender';\r\nimport { useState, useEffect, useMemo } from 'react';\r\nimport { useSearchParams } from 'next/navigation';\r\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":30,"fix":{"range":[96,96],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`next/link` import should occur after import of `react`","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":30,"fix":{"range":[67,580],"text":"import { Task, TaskLog } from '@/types'; // TaskLog toegevoegd\r\nimport TaskList from '@/components/tasks/TaskList'; \r\nimport TaskFilters from '@/components/tasks/TaskFilters'; \r\nimport AddTaskButton from '@/components/tasks/AddTaskButton'; \r\nimport { useTasks } from '@/hooks/useSupabaseQuery';\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\nimport { ConditionalRender } from '@/components/ui/ConditionalRender';\r\nimport { useState, useEffect, useMemo } from 'react';\r\nimport Link from 'next/link';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/types` import should occur after import of `@/lib/error-handler`","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":41,"fix":{"range":[98,898],"text":"import TaskList from '@/components/tasks/TaskList'; \r\nimport TaskFilters from '@/components/tasks/TaskFilters'; \r\nimport AddTaskButton from '@/components/tasks/AddTaskButton'; \r\nimport { useTasks } from '@/hooks/useSupabaseQuery';\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\nimport { ConditionalRender } from '@/components/ui/ConditionalRender';\r\nimport { useState, useEffect, useMemo } from 'react';\r\nimport { getSupabaseBrowserClient } from '@/lib/supabase-client';\r\nimport { useDeleteTask } from '@/hooks/useMutations'; // Importeer useDeleteTask\r\nimport { useNotification } from '@/context/NotificationContext'; // Importeer useNotification\r\nimport { ErrorMessage } from '@/lib/error-handler'; // Voor typing error\r\nimport { Task, TaskLog } from '@/types'; // TaskLog toegevoegd\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/components/tasks/TaskList` import should occur after import of `react`","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":52,"fix":{"range":[162,580],"text":"import TaskFilters from '@/components/tasks/TaskFilters'; \r\nimport AddTaskButton from '@/components/tasks/AddTaskButton'; \r\nimport { useTasks } from '@/hooks/useSupabaseQuery';\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\nimport { ConditionalRender } from '@/components/ui/ConditionalRender';\r\nimport { useState, useEffect, useMemo } from 'react';\r\nimport TaskList from '@/components/tasks/TaskList'; \r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/components/tasks/TaskFilters` import should occur after import of `react`","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":58,"fix":{"range":[216,580],"text":"import AddTaskButton from '@/components/tasks/AddTaskButton'; \r\nimport { useTasks } from '@/hooks/useSupabaseQuery';\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\nimport { ConditionalRender } from '@/components/ui/ConditionalRender';\r\nimport { useState, useEffect, useMemo } from 'react';\r\nimport TaskFilters from '@/components/tasks/TaskFilters'; \r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/components/tasks/AddTaskButton` import should occur after import of `react`","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":62,"fix":{"range":[276,580],"text":"import { useTasks } from '@/hooks/useSupabaseQuery';\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\nimport { ConditionalRender } from '@/components/ui/ConditionalRender';\r\nimport { useState, useEffect, useMemo } from 'react';\r\nimport AddTaskButton from '@/components/tasks/AddTaskButton'; \r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/hooks/useSupabaseQuery` import should occur after import of `@/context/NotificationContext`","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":53,"fix":{"range":[340,824],"text":"import { useAuth } from '@/components/auth/AuthProvider';\r\nimport { ConditionalRender } from '@/components/ui/ConditionalRender';\r\nimport { useState, useEffect, useMemo } from 'react';\r\nimport { getSupabaseBrowserClient } from '@/lib/supabase-client';\r\nimport { useDeleteTask } from '@/hooks/useMutations'; // Importeer useDeleteTask\r\nimport { useNotification } from '@/context/NotificationContext'; // Importeer useNotification\r\nimport { useTasks } from '@/hooks/useSupabaseQuery';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/components/auth/AuthProvider` import should occur after import of `react`","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":58,"fix":{"range":[394,580],"text":"import { ConditionalRender } from '@/components/ui/ConditionalRender';\r\nimport { useState, useEffect, useMemo } from 'react';\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":10,"column":1,"nodeType":"ImportDeclaration","endLine":10,"endColumn":71,"fix":{"range":[523,523],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/components/ui/ConditionalRender` import should occur after import of `react`","line":10,"column":1,"nodeType":"ImportDeclaration","endLine":10,"endColumn":71,"fix":{"range":[453,580],"text":"import { useState, useEffect, useMemo } from 'react';\r\nimport { ConditionalRender } from '@/components/ui/ConditionalRender';\r\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":11,"column":1,"nodeType":"ImportDeclaration","endLine":11,"endColumn":54,"fix":{"range":[578,578],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/lib/supabase-client` import should occur after import of `@/lib/error-handler`","line":12,"column":1,"nodeType":"ImportDeclaration","endLine":12,"endColumn":66,"fix":{"range":[580,898],"text":"import { useDeleteTask } from '@/hooks/useMutations'; // Importeer useDeleteTask\r\nimport { useNotification } from '@/context/NotificationContext'; // Importeer useNotification\r\nimport { ErrorMessage } from '@/lib/error-handler'; // Voor typing error\r\nimport { getSupabaseBrowserClient } from '@/lib/supabase-client';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`@/hooks/useMutations` import should occur after import of `@/context/NotificationContext`","line":13,"column":1,"nodeType":"ImportDeclaration","endLine":13,"endColumn":54,"fix":{"range":[647,824],"text":"import { useNotification } from '@/context/NotificationContext'; // Importeer useNotification\r\nimport { useDeleteTask } from '@/hooks/useMutations'; // Importeer useDeleteTask\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":33,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":33,"endColumn":35},{"ruleId":"prefer-const","severity":2,"message":"'completedTaskIds' is never reassigned. Use 'const' instead.","line":80,"column":11,"nodeType":"Identifier","messageId":"useConst","endLine":80,"endColumn":40,"fix":{"range":[2867,2913],"text":"const completedTaskIds: Set<string> = new Set();"}},{"ruleId":"prefer-const","severity":2,"message":"'taskLogsMap' is never reassigned. Use 'const' instead.","line":81,"column":11,"nodeType":"Identifier","messageId":"useConst","endLine":81,"endColumn":44,"fix":{"range":[2921,2971],"text":"const taskLogsMap: Map<string, TaskLog> = new Map();"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":158,"column":15,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":158,"endColumn":65,"fix":{"range":[5751,5789],"text":"mb-6 flex items-center justify-between"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":159,"column":13,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":159,"endColumn":71,"fix":{"range":[5816,5862],"text":"text-2xl font-bold text-purple-800 md:text-3xl"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":172,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":172,"endColumn":73,"fix":{"range":[6310,6355],"text":"rounded-lg bg-white p-8 text-center shadow-md"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":173,"column":53,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":173,"endColumn":101,"fix":{"range":[6422,6458],"text":"mx-auto mb-4 h-16 w-16 text-gray-300"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'h-16, w-16' could be replaced by the 'size-16' shorthand!","line":173,"column":53,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":173,"endColumn":101,"fix":{"range":[6422,6458],"text":"size-16 mx-auto text-gray-300 mb-4"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":176,"column":17,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":176,"endColumn":69,"fix":{"range":[6782,6822],"text":"mb-2 text-xl font-semibold text-gray-700"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":177,"column":16,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":177,"endColumn":46,"fix":{"range":[6876,6894],"text":"mb-6 text-gray-500"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":178,"column":39,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":178,"endColumn":146,"fix":{"range":[6991,7086],"text":"rounded-md bg-purple-600 px-4 py-2 font-medium text-white transition-colors hover:bg-purple-700"}}],"suppressedMessages":[],"errorCount":16,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":16,"fixableWarningCount":8,"source":"'use client';\r\nimport { useSearchParams } from 'next/navigation';\r\nimport Link from 'next/link';\r\nimport { Task, TaskLog } from '@/types'; // TaskLog toegevoegd\r\nimport TaskList from '@/components/tasks/TaskList'; \r\nimport TaskFilters from '@/components/tasks/TaskFilters'; \r\nimport AddTaskButton from '@/components/tasks/AddTaskButton'; \r\nimport { useTasks } from '@/hooks/useSupabaseQuery';\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\nimport { ConditionalRender } from '@/components/ui/ConditionalRender';\r\nimport { useState, useEffect, useMemo } from 'react';\r\nimport { getSupabaseBrowserClient } from '@/lib/supabase-client';\r\nimport { useDeleteTask } from '@/hooks/useMutations'; // Importeer useDeleteTask\r\nimport { useNotification } from '@/context/NotificationContext'; // Importeer useNotification\r\nimport { ErrorMessage } from '@/lib/error-handler'; // Voor typing error\r\n\r\n// Hergebruik EnrichedTask interface\r\nexport interface EnrichedTask extends Task {\r\n  status: 'voltooid' | 'openstaand';\r\n  voltooid_op?: string | Date | null;\r\n}\r\n\r\nexport interface GroupedTasks {\r\n  pattern: Task['herhaal_patroon']; // 'eenmalig', 'dagelijks', etc.\r\n  title: string; // Bijv. \"Eenmalige Taken\"\r\n  tasks: EnrichedTask[];\r\n}\r\n\r\ninterface TasksPageContainerProps {\r\n  initialTasks?: Task[]; \r\n}\r\n\r\nexport function TasksPageContainer({ initialTasks = [] }: TasksPageContainerProps) { \r\n  const searchParams = useSearchParams();\r\n  const typeFilter = searchParams.get('type');\r\n  const patternFilter = searchParams.get('pattern');\r\n  \r\n  const { user } = useAuth();\r\n  const userId = user?.id;\r\n  const supabase = getSupabaseBrowserClient();\r\n  const { addNotification } = useNotification(); // Hook bovenaan\r\n  const { \r\n    mutate: deleteTaskMutate, \r\n    isPending: isDeletingTask, \r\n  } = useDeleteTask(); // Hook bovenaan\r\n\r\n  const handleDeleteTask = async (taskId: string) => { // Functie bovenaan\r\n    deleteTaskMutate(taskId, {\r\n      onSuccess: () => {\r\n        addNotification({ type: 'success', message: 'Taak succesvol verwijderd.' });\r\n      },\r\n      onError: (error: ErrorMessage) => { \r\n        addNotification({ type: 'error', message: error.userMessage || 'Fout bij verwijderen taak.' });\r\n      }\r\n    });\r\n  };\r\n\r\n  // useTasks haalt de basis taken op\r\n  const { data: baseTasks, isLoading, error, isError } = useTasks(\r\n    userId, \r\n    { \r\n      type: typeFilter || undefined, \r\n      pattern: patternFilter || undefined \r\n    },\r\n    { \r\n      initialData: initialTasks.length > 0 ? initialTasks : undefined,\r\n    }\r\n  );\r\n\r\n  const [enrichedTasks, setEnrichedTasks] = useState<EnrichedTask[]>([]);\r\n\r\n  useEffect(() => {\r\n    const processTasks = async () => {\r\n      if (!baseTasks || baseTasks.length === 0) {\r\n        setEnrichedTasks([]);\r\n        return;\r\n      }\r\n\r\n      const taskIds = baseTasks.map(t => t.id);\r\n      let completedTaskIds: Set<string> = new Set();\r\n      let taskLogsMap: Map<string, TaskLog> = new Map();\r\n\r\n      if (taskIds.length > 0 && userId) { // userId check toegevoegd\r\n        const { data: logsData, error: logsError } = await supabase\r\n          .from('task_logs')\r\n          .select('*')\r\n          .in('task_id', taskIds)\r\n          .eq('user_id', userId);\r\n\r\n        if (logsError) {\r\n          console.warn('Error fetching logs for TasksPageContainer:', logsError.message);\r\n        } else if (logsData) {\r\n          logsData.forEach(log => {\r\n            if (!taskLogsMap.has(log.task_id) || (log.eind_tijd && !taskLogsMap.get(log.task_id)?.eind_tijd)) {\r\n              taskLogsMap.set(log.task_id, log as TaskLog);\r\n            }\r\n            if (log.eind_tijd) {\r\n              completedTaskIds.add(log.task_id);\r\n            }\r\n          });\r\n        }\r\n      }\r\n      \r\n      const processed = baseTasks.map(task => {\r\n        const status: 'voltooid' | 'openstaand' = completedTaskIds.has(task.id) ? 'voltooid' : 'openstaand';\r\n        const relevantLog = taskLogsMap.get(task.id);\r\n        return {\r\n          ...task,\r\n          status,\r\n          voltooid_op: status === 'voltooid' ? relevantLog?.eind_tijd : null,\r\n        };\r\n      });\r\n      setEnrichedTasks(processed as EnrichedTask[]);\r\n    };\r\n\r\n    processTasks();\r\n  }, [baseTasks, userId, supabase]); // userId en supabase toegevoegd als dependencies\r\n  \r\n  // De data prop voor ConditionalRender moet de originele data zijn die loading state bepaalt\r\n  // De data voor TaskList zijn de enrichedTasks\r\n  const groupedAndFilteredTasks = useMemo(() => {\r\n    if (!enrichedTasks) return [];\r\n\r\n    const groups: Record<Task['herhaal_patroon'], EnrichedTask[]> = {\r\n      eenmalig: [],\r\n      dagelijks: [],\r\n      wekelijks: [],\r\n      maandelijks: [],\r\n      aangepast: [],\r\n    };\r\n\r\n    enrichedTasks.forEach(task => {\r\n      groups[task.herhaal_patroon].push(task);\r\n    });\r\n\r\n    const patternOrder: Task['herhaal_patroon'][] = ['dagelijks', 'wekelijks', 'maandelijks', 'eenmalig', 'aangepast'];\r\n    \r\n    const result: GroupedTasks[] = patternOrder\r\n      .map(pattern => ({\r\n        pattern,\r\n        title: `${pattern.charAt(0).toUpperCase() + pattern.slice(1)}e Taken`, // Maak titel (bv. Dagelijkse Taken)\r\n        tasks: groups[pattern],\r\n      }))\r\n      .filter(group => group.tasks.length > 0); // Toon alleen groepen met taken\r\n\r\n      if (typeFilter) {\r\n        return result.map(group => ({\r\n          ...group,\r\n          tasks: group.tasks.filter(task => task.type === typeFilter)\r\n        })).filter(group => group.tasks.length > 0);\r\n      }\r\n      return result;\r\n\r\n  }, [enrichedTasks, typeFilter]); // typeFilter is al in de useTasks hook, maar we filteren hier de gegroepeerde lijst\r\n  \r\n  return (\r\n    <div className=\"container mx-auto px-4 py-6\">\r\n      <header className=\"flex items-center justify-between mb-6\">\r\n        <h1 className=\"text-2xl md:text-3xl font-bold text-purple-800\">Mijn Taken</h1>\r\n        <AddTaskButton />\r\n      </header>\r\n      \r\n      <TaskFilters /> {/* TaskFilters beïnvloedt 'typeFilter' en 'patternFilter' die door useTasks worden gebruikt */}\r\n      \r\n      <ConditionalRender\r\n        isLoading={isLoading}\r\n        isError={isError}\r\n        error={isError ? error as ErrorMessage : null} \r\n        data={baseTasks} \r\n        skeletonType=\"tasks\"\r\n        emptyFallback={\r\n          <div className=\"text-center p-8 bg-white rounded-lg shadow-md\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-16 w-16 mx-auto text-gray-300 mb-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1.5} d=\"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2\" />\r\n            </svg>\r\n            <h2 className=\"text-xl font-semibold text-gray-700 mb-2\">Geen taken gevonden</h2>\r\n            <p className=\"text-gray-500 mb-6\">Voeg een nieuwe taak toe om te beginnen.</p>\r\n            <Link href=\"/taken/nieuw\" className=\"px-4 py-2 bg-purple-600 text-white font-medium rounded-md hover:bg-purple-700 transition-colors\">\r\n              Taak toevoegen\r\n            </Link>\r\n          </div>\r\n        }\r\n      >\r\n        {() => <TaskList groupedTasks={groupedAndFilteredTasks} onDeleteTask={handleDeleteTask} isDeletingTask={isDeletingTask} />} \r\n      </ConditionalRender>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\context\\NotificationContext.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":72,"fix":{"range":[280,280],"text":"\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":39,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":39,"endColumn":37},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":77,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":77,"endColumn":32}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":1,"fixableWarningCount":0,"source":"\"use client\";\r\n/* Notification Context: Manages global notifications for success, error, warning, and info messages.\r\n   Provides addNotification and removeNotification functions.\r\n   Updated: 5/19/2025.\r\n*/\r\nimport { createContext, useContext, useState, ReactNode } from 'react';\r\nimport { NotificationList } from '@/components/ui/NotificationList';\r\n\r\n// Definieer typen voor notificaties\r\nexport type NotificationType = 'success' | 'error' | 'warning' | 'info';\r\n\r\nexport interface NotificationAction {\r\n  label: string;\r\n  onClick: () => void;\r\n}\r\n\r\nexport interface Notification {\r\n  id: string;\r\n  type: NotificationType;\r\n  message: string; // Kan HTML bevatten als isHtml true is\r\n  duration?: number; // in milliseconden, 0 of negatief voor persistent\r\n  action?: NotificationAction;\r\n  isHtml?: boolean;\r\n  icon?: React.ReactNode; // Custom icon kan hier worden meegegeven\r\n}\r\n\r\n// Context type\r\ninterface NotificationContextType {\r\n  notifications: Notification[];\r\n  // Update addNotification signature to accept new properties\r\n  addNotification: (notificationDetails: Omit<Notification, 'id'>) => string; // Returns the ID of the new notification\r\n  removeNotification: (id: string) => void;\r\n}\r\n\r\n// Context aanmaken\r\nconst NotificationContext = createContext<NotificationContextType | undefined>(undefined);\r\n\r\n// Provider component\r\nexport function NotificationProvider({ children }: { children: ReactNode }) {\r\n  const [notifications, setNotifications] = useState<Notification[]>([]);\r\n  \r\n  const addNotification = (notificationDetails: Omit<Notification, 'id'>): string => {\r\n    const id = Date.now().toString() + Math.random().toString(36).substring(2, 7);\r\n    const newNotification: Notification = { \r\n      id, \r\n      ...notificationDetails,\r\n      duration: notificationDetails.duration === undefined ? 5000 : notificationDetails.duration, // Default duration\r\n    };\r\n    setNotifications(prev => [...prev, newNotification]);\r\n    \r\n    if (newNotification.duration && newNotification.duration > 0) {\r\n      setTimeout(() => {\r\n        removeNotification(id);\r\n      }, newNotification.duration);\r\n    }\r\n    return id; // Return the ID so it can be programmatically removed if needed\r\n  };\r\n  \r\n  const removeNotification = (id: string) => {\r\n    setNotifications(prev => prev.filter(notification => notification.id !== id));\r\n  };\r\n  \r\n  return (\r\n    <NotificationContext.Provider value={{ notifications, addNotification, removeNotification }}>\r\n      {children}\r\n      {/* NotificationList wordt hier gerenderd om globaal beschikbaar te zijn */}\r\n      {/* De import zal werken zodra NotificationList.tsx is aangemaakt */}\r\n      <NotificationList \r\n        notifications={notifications} \r\n        onDismiss={removeNotification} \r\n      />\r\n    </NotificationContext.Provider>\r\n  );\r\n}\r\n\r\n// Hook voor gebruik in componenten\r\nexport function useNotification() {\r\n  const context = useContext(NotificationContext);\r\n  if (!context) {\r\n    throw new Error('useNotification moet binnen een NotificationProvider gebruikt worden');\r\n  }\r\n  return context;\r\n}\r\n\r\n// NotificationList is now imported at the top of the file to avoid potential circular dependencies\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\context\\OnboardingContext.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'getDefaultProgress' and 'setProgress'. Either include them or remove the dependency array.","line":177,"column":6,"nodeType":"ArrayExpression","endLine":177,"endColumn":89,"suggestions":[{"desc":"Update the dependencies array to be: [profile, isLoading, isOnboardingActive, progress.currentStepIndex, progress.steps, setProgress, getDefaultProgress]","fix":{"range":[5307,5390],"text":"[profile, isLoading, isOnboardingActive, progress.currentStepIndex, progress.steps, setProgress, getDefaultProgress]"}}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":288,"column":33,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":288,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\nimport { useLocalStorage } from '@/hooks/useLocalStorage';\r\n\r\n// Define the onboarding steps\r\nexport type OnboardingStep = {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  route: string;\r\n  completed: boolean;\r\n  required: boolean;\r\n};\r\n\r\n// Define the onboarding progress type\r\nexport type OnboardingProgress = {\r\n  steps: OnboardingStep[];\r\n  currentStepIndex: number;\r\n  isCompleted: boolean;\r\n  lastUpdated: string;\r\n};\r\n\r\n// Define the context type\r\ntype OnboardingContextType = {\r\n  isOnboardingActive: boolean;\r\n  progress: OnboardingProgress;\r\n  currentStep: OnboardingStep | null;\r\n  startOnboarding: () => void;\r\n  skipOnboarding: () => void;\r\n  completeCurrentStep: () => void;\r\n  goToNextStep: () => void;\r\n  goToPreviousStep: () => void;\r\n  goToStep: (stepId: string) => void;\r\n  resetOnboarding: () => void;\r\n};\r\n\r\n// Create the context with a default value\r\nconst OnboardingContext = createContext<OnboardingContextType | undefined>(undefined);\r\n\r\n// Default onboarding steps for patients\r\nconst defaultPatientSteps: OnboardingStep[] = [\r\n  {\r\n    id: 'welcome',\r\n    title: 'Welkom bij FibroGuardian Pro',\r\n    description: 'Leer hoe FibroGuardian Pro u kan helpen bij het beheren van uw fibromyalgie.',\r\n    route: '/onboarding/welcome',\r\n    completed: false,\r\n    required: true,\r\n  },\r\n  {\r\n    id: 'profile',\r\n    title: 'Uw profiel instellen',\r\n    description: 'Vul uw profiel in zodat we de app kunnen personaliseren.',\r\n    route: '/onboarding/profile',\r\n    completed: false,\r\n    required: true,\r\n  },\r\n  {\r\n    id: 'reflections',\r\n    title: 'Dagelijkse reflecties',\r\n    description: 'Leer hoe u dagelijkse reflecties kunt toevoegen om uw symptomen bij te houden.',\r\n    route: '/onboarding/reflections',\r\n    completed: false,\r\n    required: true,\r\n  },\r\n  {\r\n    id: 'tasks',\r\n    title: 'Taken en activiteiten',\r\n    description: 'Ontdek hoe u taken kunt beheren en uw activiteiten kunt bijhouden.',\r\n    route: '/onboarding/tasks',\r\n    completed: false,\r\n    required: true,\r\n  },\r\n  {\r\n    id: 'specialists',\r\n    title: 'Verbinden met specialisten',\r\n    description: 'Leer hoe u kunt verbinden met uw zorgverleners.',\r\n    route: '/onboarding/specialists',\r\n    completed: false,\r\n    required: false,\r\n  },\r\n  {\r\n    id: 'ai-features',\r\n    title: 'AI-ondersteuning',\r\n    description: 'Ontdek hoe AI u kan helpen bij het beheren van uw gezondheid.',\r\n    route: '/onboarding/ai-features',\r\n    completed: false,\r\n    required: false,\r\n  },\r\n];\r\n\r\n// Default onboarding steps for specialists\r\nconst defaultSpecialistSteps: OnboardingStep[] = [\r\n  {\r\n    id: 'welcome',\r\n    title: 'Welkom bij FibroGuardian Pro',\r\n    description: 'Leer hoe FibroGuardian Pro u kan helpen bij het begeleiden van uw patiënten.',\r\n    route: '/onboarding/welcome',\r\n    completed: false,\r\n    required: true,\r\n  },\r\n  {\r\n    id: 'profile',\r\n    title: 'Uw profiel instellen',\r\n    description: 'Vul uw profiel in zodat patiënten u kunnen vinden.',\r\n    route: '/onboarding/profile',\r\n    completed: false,\r\n    required: true,\r\n  },\r\n  {\r\n    id: 'patients',\r\n    title: 'Patiënten beheren',\r\n    description: 'Leer hoe u patiënten kunt toevoegen en beheren.',\r\n    route: '/onboarding/patients',\r\n    completed: false,\r\n    required: true,\r\n  },\r\n  {\r\n    id: 'insights',\r\n    title: 'Patiënt inzichten',\r\n    description: 'Ontdek hoe u inzichten kunt krijgen in de gezondheid van uw patiënten.',\r\n    route: '/onboarding/insights',\r\n    completed: false,\r\n    required: true,\r\n  },\r\n  {\r\n    id: 'knowledge-base',\r\n    title: 'Kennisbank',\r\n    description: 'Leer hoe u de kennisbank kunt gebruiken en uitbreiden.',\r\n    route: '/onboarding/knowledge-base',\r\n    completed: false,\r\n    required: false,\r\n  },\r\n  {\r\n    id: 'ai-features',\r\n    title: 'AI-ondersteuning',\r\n    description: 'Ontdek hoe AI u kan helpen bij het begeleiden van uw patiënten.',\r\n    route: '/onboarding/ai-features',\r\n    completed: false,\r\n    required: false,\r\n  },\r\n];\r\n\r\n// Create a provider component\r\nexport const OnboardingProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const { profile, loading: isLoading } = useAuth();\r\n  const [isOnboardingActive, setIsOnboardingActive] = useState(false);\r\n  \r\n  // Initialize with default progress based on user type\r\n  const getDefaultProgress = (): OnboardingProgress => {\r\n    const steps = profile?.type === 'specialist' ? defaultSpecialistSteps : defaultPatientSteps;\r\n    return {\r\n      steps,\r\n      currentStepIndex: 0,\r\n      isCompleted: false,\r\n      lastUpdated: new Date().toISOString(),\r\n    };\r\n  };\r\n  \r\n  // Use local storage to persist onboarding progress\r\n  const [progress, setProgress] = useLocalStorage<OnboardingProgress>(\r\n    'onboarding-progress',\r\n    getDefaultProgress()\r\n  );\r\n  \r\n  // Update default steps when profile type changes\r\n  useEffect(() => {\r\n    if (!isLoading && profile) {\r\n      // Only reset if the user hasn't started onboarding yet\r\n      if (!isOnboardingActive && progress.currentStepIndex === 0 && !progress.steps.some(step => step.completed)) {\r\n        setProgress(getDefaultProgress());\r\n      }\r\n    }\r\n  }, [profile, isLoading, isOnboardingActive, progress.currentStepIndex, progress.steps]);\r\n  \r\n  // Get the current step\r\n  const currentStep = progress.steps[progress.currentStepIndex] || null;\r\n  \r\n  // Start onboarding\r\n  const startOnboarding = () => {\r\n    setIsOnboardingActive(true);\r\n  };\r\n  \r\n  // Skip onboarding\r\n  const skipOnboarding = () => {\r\n    setIsOnboardingActive(false);\r\n    setProgress({\r\n      ...progress,\r\n      isCompleted: true,\r\n      lastUpdated: new Date().toISOString(),\r\n    });\r\n  };\r\n  \r\n  // Complete the current step\r\n  const completeCurrentStep = () => {\r\n    const updatedSteps = [...progress.steps];\r\n    updatedSteps[progress.currentStepIndex] = {\r\n      ...updatedSteps[progress.currentStepIndex],\r\n      completed: true,\r\n    };\r\n    \r\n    // Check if all required steps are completed\r\n    const allRequiredCompleted = updatedSteps\r\n      .filter(step => step.required)\r\n      .every(step => step.completed);\r\n    \r\n    setProgress({\r\n      ...progress,\r\n      steps: updatedSteps,\r\n      isCompleted: allRequiredCompleted,\r\n      lastUpdated: new Date().toISOString(),\r\n    });\r\n  };\r\n  \r\n  // Go to the next step\r\n  const goToNextStep = () => {\r\n    if (progress.currentStepIndex < progress.steps.length - 1) {\r\n      setProgress({\r\n        ...progress,\r\n        currentStepIndex: progress.currentStepIndex + 1,\r\n        lastUpdated: new Date().toISOString(),\r\n      });\r\n    } else {\r\n      // If we're at the last step, mark onboarding as completed\r\n      setIsOnboardingActive(false);\r\n      setProgress({\r\n        ...progress,\r\n        isCompleted: true,\r\n        lastUpdated: new Date().toISOString(),\r\n      });\r\n    }\r\n  };\r\n  \r\n  // Go to the previous step\r\n  const goToPreviousStep = () => {\r\n    if (progress.currentStepIndex > 0) {\r\n      setProgress({\r\n        ...progress,\r\n        currentStepIndex: progress.currentStepIndex - 1,\r\n        lastUpdated: new Date().toISOString(),\r\n      });\r\n    }\r\n  };\r\n  \r\n  // Go to a specific step\r\n  const goToStep = (stepId: string) => {\r\n    const stepIndex = progress.steps.findIndex(step => step.id === stepId);\r\n    if (stepIndex !== -1) {\r\n      setProgress({\r\n        ...progress,\r\n        currentStepIndex: stepIndex,\r\n        lastUpdated: new Date().toISOString(),\r\n      });\r\n    }\r\n  };\r\n  \r\n  // Reset onboarding\r\n  const resetOnboarding = () => {\r\n    setIsOnboardingActive(true);\r\n    setProgress(getDefaultProgress());\r\n  };\r\n  \r\n  // Create the context value\r\n  const contextValue: OnboardingContextType = {\r\n    isOnboardingActive,\r\n    progress,\r\n    currentStep,\r\n    startOnboarding,\r\n    skipOnboarding,\r\n    completeCurrentStep,\r\n    goToNextStep,\r\n    goToPreviousStep,\r\n    goToStep,\r\n    resetOnboarding,\r\n  };\r\n  \r\n  return (\r\n    <OnboardingContext.Provider value={contextValue}>\r\n      {children}\r\n    </OnboardingContext.Provider>\r\n  );\r\n};\r\n\r\n// Create a hook to use the onboarding context\r\nexport const useOnboarding = () => {\r\n  const context = useContext(OnboardingContext);\r\n  if (context === undefined) {\r\n    throw new Error('useOnboarding must be used within an OnboardingProvider');\r\n  }\r\n  return context;\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\coverage\\lcov-report\\block-navigation.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\coverage\\lcov-report\\prettify.js","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ae' is assigned a value but never used.","line":2,"column":11414,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":11416,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'af' is assigned a value but never used.","line":2,"column":11438,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":11440,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ag' is assigned a value but never used.","line":2,"column":11471,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":11473,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":2,"column":14233,"nodeType":"MemberExpression","messageId":"unexpected","endLine":2,"endColumn":14244,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14253,14286],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ae' is assigned a value but never used.","line":2,"column":14757,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":14759,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\coverage\\lcov-report\\sorter.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\hooks\\useFeatureAccess.ts","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":131,"fix":{"range":[299,299],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`react` import should occur before import of `@/components/auth/AuthProvider`","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":58,"fix":{"range":[0,360],"text":"import { useCallback, useState, useEffect } from 'react';\r\nimport { useAuth } from '@/components/auth/AuthProvider'; // Aangepast pad\r\n// import { useSubscription } from '@/hooks/useSubscription'; // Placeholder, zie hieronder\r\nimport { subscriptionFeatures, SubscriptionFeature, SubscriptionTier, patientPlans, specialistPlans } from '@/types/subscription';\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":69,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":69,"endColumn":33}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import { useAuth } from '@/components/auth/AuthProvider'; // Aangepast pad\r\n// import { useSubscription } from '@/hooks/useSubscription'; // Placeholder, zie hieronder\r\nimport { subscriptionFeatures, SubscriptionFeature, SubscriptionTier, patientPlans, specialistPlans } from '@/types/subscription';\r\nimport { useCallback, useState, useEffect } from 'react';\r\n// import { useNotification } from '@/context/NotificationContext'; // Voor feedback - Unused\r\n\r\n// Placeholder voor useSubscription hook data (zelfde als in SubscriptionManagement)\r\ninterface MockSubscription {\r\n  id: string;\r\n  planId: SubscriptionTier; // Gebruik SubscriptionTier\r\n  planName: string;\r\n  status: 'active' | 'cancelled' | 'past_due' | 'incomplete';\r\n  billingCycle: 'monthly' | 'yearly';\r\n  amount: number;\r\n  renewalDate: string | null;\r\n  patientCount?: number; \r\n}\r\n\r\n// Placeholder voor useSubscription hook (zelfde als in SubscriptionManagement)\r\n// In een echte app zou dit een echte hook zijn die data van de backend haalt.\r\nconst useSubscription = (userId: string | undefined) => {\r\n  const [subscription, setSubscription] = useState<MockSubscription | null>(null);\r\n  const [isLoading, setIsLoading] = useState(true); // Start als loading\r\n  // const [error, setError] = useState<Error | null>(null); // Error state was unused in this hook\r\n\r\n  useEffect(() => {\r\n    if (!userId) {\r\n      setIsLoading(false);\r\n      setSubscription(null);\r\n      return;\r\n    }\r\n    setIsLoading(true);\r\n    // Simuleer API call\r\n    setTimeout(() => {\r\n      // Voorbeeld: actieve gebruiker met een 'basic' plan\r\n      // Pas dit aan om verschillende scenario's te testen\r\n      const userType = localStorage.getItem('debugUserType') || 'patient'; // Debug flag\r\n      const currentPlanId = localStorage.getItem('debugPlanId') as SubscriptionTier || (userType === 'patient' ? 'free' : 'basic');\r\n      \r\n      const plans = userType === 'patient' ? patientPlans : specialistPlans;\r\n      const currentPlan = plans.find(p => p.id === currentPlanId);\r\n\r\n      if (currentPlan && currentPlanId !== 'free') {\r\n        setSubscription({\r\n          id: `sub_mock_${userId}`,\r\n          planId: currentPlanId,\r\n          planName: currentPlan.name,\r\n          status: 'active',\r\n          billingCycle: 'monthly',\r\n          amount: currentPlan.price.monthly,\r\n          renewalDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\r\n          patientCount: userType === 'specialist' ? 5 : undefined, // Voorbeeld\r\n        });\r\n      } else {\r\n         setSubscription(null); // Geen actief betaald plan, of free plan\r\n      }\r\n      setIsLoading(false);\r\n    }, 500);\r\n  }, [userId]);\r\n\r\n  return { subscription, isLoading }; // Error was unused\r\n};\r\n\r\n\r\n/**\r\n * Hook voor het controleren van toegang tot premium functies\r\n * gebaseerd op het abonnement van de gebruiker\r\n */\r\nexport function useFeatureAccess() {\r\n  const { user, profile } = useAuth(); // useAuth zou profile moeten bevatten\r\n  const { subscription, isLoading: isLoadingSubscription } = useSubscription(user?.id);\r\n  \r\n  const hasAccess = useCallback((featureId: string): boolean => {\r\n    if (!user || !profile) return false; // Geen gebruiker, geen toegang\r\n    \r\n    const feature = subscriptionFeatures.find(f => f.id === featureId);\r\n    if (!feature) {\r\n      console.warn(`Feature met ID '${featureId}' niet gevonden in subscriptionFeatures.`);\r\n      return false; // Feature niet gedefinieerd, dus geen toegang\r\n    }\r\n    \r\n    const currentTier = subscription?.status === 'active' ? subscription.planId : 'free';\r\n    \r\n    return feature.tiers.includes(currentTier);\r\n  }, [user, profile, subscription]);\r\n  \r\n  const accessibleFeatures = useCallback((): SubscriptionFeature[] => {\r\n    if (!user || !profile) return [];\r\n    \r\n    const currentTier = subscription?.status === 'active' ? subscription.planId : 'free';\r\n    \r\n    return subscriptionFeatures.filter(feature => {\r\n      const isFeatureInTier = feature.tiers.includes(currentTier);\r\n      // Filter ook op basis van userType als de feature specifiek is\r\n      // (Dit is al deels ingebakken in hoe features zijn gedefinieerd, maar kan explicieter)\r\n      // Voorbeeld: als een feature alleen voor 'specialist' is en user is 'patient', dan geen toegang.\r\n      // De huidige `subscriptionFeatures` structuur koppelt features niet direct aan userType,\r\n      // maar de plannen wel. De `tiers` in `SubscriptionFeature` zijn generiek.\r\n      return isFeatureInTier;\r\n    });\r\n  }, [user, profile, subscription]);\r\n  \r\n  const isAtPatientLimit = useCallback((): boolean => {\r\n    if (!profile || profile.type !== 'specialist') return false;\r\n    \r\n    const currentTier = subscription?.status === 'active' ? subscription.planId : 'free';\r\n    const patientCount = subscription?.patientCount || 0; // Haal dit uit de subscription data\r\n\r\n    // Specialisten op 'free' tier hebben geen patiëntbeheer (volgens huidige plan structuur)\r\n    if (currentTier === 'free' && profile.type === 'specialist') return true; // Of een limiet van 0\r\n\r\n    const currentPlan = specialistPlans.find(p => p.id === currentTier);\r\n    if (!currentPlan) return true; // Geen geldig plan\r\n\r\n    if (currentPlan.features.includes('limited-patients')) { // ID van feature 'Tot 10 Patiënten'\r\n      return patientCount >= 10;\r\n    }\r\n    if (currentPlan.features.includes('expanded-patients')) { // ID van feature 'Tot 50 Patiënten'\r\n      return patientCount >= 50;\r\n    }\r\n    if (currentPlan.features.includes('unlimited-patients')) {\r\n      return false; // Onbeperkt\r\n    }\r\n    \r\n    return true; // Default naar limiet bereikt als plan onbekend is of geen patiëntlimiet feature heeft\r\n  }, [profile, subscription]);\r\n  \r\n  return {\r\n    hasAccess,\r\n    accessibleFeatures,\r\n    isAtPatientLimit,\r\n    subscription,\r\n    isLoadingSubscription,\r\n    userType: profile?.type,\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\hooks\\useLocalStorage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\hooks\\useMutations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\hooks\\useProfile.ts","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":67,"fix":{"range":[83,83],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":51,"fix":{"range":[178,178],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/types` import should occur before import of `./useSupabaseQuery`","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":40,"fix":{"range":[85,261],"text":"import { ErrorMessage } from '@/types'; // Zorg dat ErrorMessage beschikbaar is\r\nimport useSupabaseQuery from './useSupabaseQuery'; // Importeer de generieke useSupabaseQuery\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":8,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":8,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":82,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":85,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[407,410],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[407,410],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":101,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":104,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[426,429],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[426,429],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[471,474],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[471,474],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":3,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { UseQueryOptions, QueryKey } from '@tanstack/react-query';\r\nimport useSupabaseQuery from './useSupabaseQuery'; // Importeer de generieke useSupabaseQuery\r\nimport { ErrorMessage } from '@/types'; // Zorg dat ErrorMessage beschikbaar is\r\n\r\n// Aangepaste hook voor het ophalen van een gebruikersprofiel\r\nexport function useProfile(userId: string | undefined, options?: UseQueryOptions<any, ErrorMessage, any, QueryKey>) {\r\n  return useSupabaseQuery<any, ErrorMessage>(\r\n    ['profile', userId],\r\n    async (supabase) => {\r\n      if (!userId) {\r\n        throw new Error('User ID is required to fetch profile.');\r\n      }\r\n      const { data, error } = await supabase\r\n        .from('profiles')\r\n        .select('*')\r\n        .eq('id', userId)\r\n        .single();\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n      return data;\r\n    },\r\n    {\r\n      enabled: !!userId, // Query alleen uitvoeren als userId aanwezig is\r\n      ...options,\r\n    }\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\hooks\\useSafeState.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":135,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":135,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":194,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":194,"endColumn":33}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useEffect, useRef, useState } from 'react';\r\n\r\n/**\r\n * A custom hook that provides a safe way to update state in components\r\n * that might be unmounted before an async operation completes.\r\n * \r\n * @param initialState The initial state value\r\n * @returns A tuple with the current state and a safe setState function\r\n * \r\n * @example\r\n * ```tsx\r\n * const [data, setData] = useSafeState<ApiResponse | null>(null);\r\n * \r\n * const fetchData = async () => {\r\n *   const response = await api.getData();\r\n *   setData(response); // Safe: won't update state if component is unmounted\r\n * };\r\n * ```\r\n */\r\nexport function useSafeState<T>(initialState: T): [T, (value: T | ((prevState: T) => T)) => void] {\r\n  const [state, setState] = useState<T>(initialState);\r\n  const isMounted = useRef<boolean>(true);\r\n\r\n  useEffect(() => {\r\n    // Set isMounted to true when the component mounts\r\n    isMounted.current = true;\r\n    \r\n    // Set isMounted to false when the component unmounts\r\n    return () => {\r\n      isMounted.current = false;\r\n    };\r\n  }, []);\r\n\r\n  const setSafeState = useCallback((value: T | ((prevState: T) => T)) => {\r\n    // Only update state if the component is still mounted\r\n    if (isMounted.current) {\r\n      setState(value);\r\n    }\r\n  }, []);\r\n\r\n  return [state, setSafeState];\r\n}\r\n\r\n/**\r\n * A custom hook that provides an AbortController that is automatically\r\n * aborted when the component unmounts.\r\n * \r\n * @returns An AbortController with a signal that can be used in fetch requests\r\n * \r\n * @example\r\n * ```tsx\r\n * const { signal } = useAbortController();\r\n * \r\n * useEffect(() => {\r\n *   fetch('/api/data', { signal })\r\n *     .then(response => response.json())\r\n *     .then(data => {\r\n *       // Process data\r\n *     })\r\n *     .catch(error => {\r\n *       if (error.name !== 'AbortError') {\r\n *         console.error(error);\r\n *       }\r\n *     });\r\n * }, [signal]);\r\n * ```\r\n */\r\nexport function useAbortController(): { signal: AbortSignal } {\r\n  const abortControllerRef = useRef<AbortController>(new AbortController());\r\n  \r\n  useEffect(() => {\r\n    // Create a new AbortController when the component mounts\r\n    abortControllerRef.current = new AbortController();\r\n    \r\n    // Abort any pending requests when the component unmounts\r\n    return () => {\r\n      abortControllerRef.current.abort();\r\n    };\r\n  }, []);\r\n  \r\n  return { signal: abortControllerRef.current.signal };\r\n}\r\n\r\n/**\r\n * A custom hook that provides a ref to track if a component is mounted.\r\n * \r\n * @returns A ref object with a current property that is true if the component is mounted\r\n * \r\n * @example\r\n * ```tsx\r\n * const isMounted = useIsMounted();\r\n * \r\n * const fetchData = async () => {\r\n *   const response = await api.getData();\r\n *   if (isMounted.current) {\r\n *     setData(response);\r\n *   }\r\n * };\r\n * ```\r\n */\r\nexport function useIsMounted(): React.RefObject<boolean> {\r\n  const isMounted = useRef<boolean>(true);\r\n  \r\n  useEffect(() => {\r\n    // Set isMounted to true when the component mounts\r\n    isMounted.current = true;\r\n    \r\n    // Set isMounted to false when the component unmounts\r\n    return () => {\r\n      isMounted.current = false;\r\n    };\r\n  }, []);\r\n  \r\n  return isMounted;\r\n}\r\n\r\n/**\r\n * A custom hook that provides a safe way to use timers in components.\r\n * The timer is automatically cleared when the component unmounts.\r\n * \r\n * @returns An object with setTimeout and setInterval functions\r\n * \r\n * @example\r\n * ```tsx\r\n * const { setTimeout, setInterval } = useTimers();\r\n * \r\n * useEffect(() => {\r\n *   // This timer will be automatically cleared when the component unmounts\r\n *   setTimeout(() => {\r\n *     console.log('This will only run if the component is still mounted');\r\n *   }, 1000);\r\n * }, [setTimeout]);\r\n * ```\r\n */\r\nexport function useTimers() {\r\n  const timersRef = useRef<(number | NodeJS.Timeout)[]>([]);\r\n  \r\n  useEffect(() => {\r\n    // Clear all timers when the component unmounts\r\n    return () => {\r\n      timersRef.current.forEach(timer => {\r\n        clearTimeout(timer as number);\r\n        clearInterval(timer as number);\r\n      });\r\n    };\r\n  }, []);\r\n  \r\n  const safeSetTimeout = useCallback((callback: () => void, delay: number) => {\r\n    const timer = setTimeout(callback, delay);\r\n    timersRef.current.push(timer);\r\n    return timer;\r\n  }, []);\r\n  \r\n  const safeSetInterval = useCallback((callback: () => void, delay: number) => {\r\n    const timer = setInterval(callback, delay);\r\n    timersRef.current.push(timer);\r\n    return timer;\r\n  }, []);\r\n  \r\n  const clearSafeTimeout = useCallback((timer: number | NodeJS.Timeout) => {\r\n    clearTimeout(timer as number);\r\n    timersRef.current = timersRef.current.filter(t => t !== timer);\r\n  }, []);\r\n  \r\n  const clearSafeInterval = useCallback((timer: number | NodeJS.Timeout) => {\r\n    clearInterval(timer as number);\r\n    timersRef.current = timersRef.current.filter(t => t !== timer);\r\n  }, []);\r\n  \r\n  return {\r\n    setTimeout: safeSetTimeout,\r\n    setInterval: safeSetInterval,\r\n    clearTimeout: clearSafeTimeout,\r\n    clearInterval: clearSafeInterval\r\n  };\r\n}\r\n\r\n/**\r\n * A custom hook that provides a safe way to add event listeners in components.\r\n * The event listeners are automatically removed when the component unmounts.\r\n * \r\n * @returns An object with addEventListener and removeEventListener functions\r\n * \r\n * @example\r\n * ```tsx\r\n * const { addEventListener } = useEventListener();\r\n * \r\n * useEffect(() => {\r\n *   // This event listener will be automatically removed when the component unmounts\r\n *   addEventListener(window, 'resize', handleResize);\r\n * }, [addEventListener, handleResize]);\r\n * ```\r\n */\r\nexport function useEventListener() {\r\n  const listenersRef = useRef<Array<{ target: EventTarget; type: string; listener: EventListenerOrEventListenerObject }>>([]);\r\n  \r\n  useEffect(() => {\r\n    // Remove all event listeners when the component unmounts\r\n    return () => {\r\n      listenersRef.current.forEach(({ target, type, listener }) => {\r\n        target.removeEventListener(type, listener);\r\n      });\r\n    };\r\n  }, []);\r\n  \r\n  const safeAddEventListener = useCallback((\r\n    target: EventTarget,\r\n    type: string,\r\n    listener: EventListenerOrEventListenerObject,\r\n    options?: boolean | AddEventListenerOptions\r\n  ) => {\r\n    target.addEventListener(type, listener, options);\r\n    listenersRef.current.push({ target, type, listener });\r\n  }, []);\r\n  \r\n  const safeRemoveEventListener = useCallback((\r\n    target: EventTarget,\r\n    type: string,\r\n    listener: EventListenerOrEventListenerObject,\r\n    options?: boolean | EventListenerOptions\r\n  ) => {\r\n    target.removeEventListener(type, listener, options);\r\n    listenersRef.current = listenersRef.current.filter(\r\n      l => !(l.target === target && l.type === type && l.listener === listener)\r\n    );\r\n  }, []);\r\n  \r\n  return {\r\n    addEventListener: safeAddEventListener,\r\n    removeEventListener: safeRemoveEventListener\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\hooks\\useSupabaseQuery.ts","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":77,"fix":{"range":[76,76],"text":"\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Database' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":18},{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'Database' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":18,"fix":{"range":[145,190],"text":""}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TError' is defined but never used.","line":5,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":48},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":15,"column":11,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":15,"endColumn":35,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[484,726],"text":"type SupabaseQueryHookOptions<TQueryFnData, TError, TData, TQueryKey extends QueryKey> = UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":28,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":33,"endColumn":2},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":53,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2241,2244],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2241,2244],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":70,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":70,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":82,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":85,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2788,2791],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2788,2791],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":71,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2837,2840],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2837,2840],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import { useQuery, UseQueryOptions, QueryKey } from '@tanstack/react-query';\r\nimport { getSupabaseBrowserClient } from '@/lib/supabase-client';\r\nimport { Database } from '@/types/database'; // Zorg dat dit pad correct is\r\n\r\ntype SupabaseQueryFunction<TQueryFnData, TError> = (\r\n  supabase: ReturnType<typeof getSupabaseBrowserClient>\r\n) => Promise<TQueryFnData>;\r\n\r\nexport interface ErrorMessage { // Voeg 'export' toe\r\n  message: string;\r\n  details?: string;\r\n  code?: string;\r\n}\r\n\r\ninterface SupabaseQueryHookOptions<TQueryFnData, TError, TData, TQueryKey extends QueryKey> extends UseQueryOptions<TQueryFnData, TError, TData, TQueryKey> {\r\n  // Geen extra properties nodig, UseQueryOptions definieert queryKey al correct\r\n}\r\n\r\n/**\r\n * Custom hook for fetching data from Supabase with React Query.\r\n * Automatically handles Supabase client initialization and error formatting.\r\n *\r\n * @param queryKey - The React Query key for this query.\r\n * @param queryFn - An async function that receives the Supabase client and returns the data.\r\n * @param options - React Query options.\r\n * @returns The result of the useQuery hook.\r\n */\r\nfunction useSupabaseQuery<\r\n  TQueryFnData = unknown,\r\n  TError = ErrorMessage,\r\n  TData = TQueryFnData,\r\n  TQueryKey extends QueryKey = QueryKey\r\n>(\r\n  queryKey: TQueryKey,\r\n  queryFn: SupabaseQueryFunction<TQueryFnData, TError>,\r\n  options?: SupabaseQueryHookOptions<TQueryFnData, TError, TData, TQueryKey>\r\n) {\r\n  return useQuery<TQueryFnData, TError, TData, TQueryKey>({\r\n    queryKey,\r\n    queryFn: async () => {\r\n      // Initialiseer Supabase client alleen aan de client-side\r\n      if (typeof window === 'undefined') {\r\n        // Dit zou niet moeten gebeuren als de 'enabled' optie correct wordt gebruikt,\r\n        // maar als een fallback, retourneer een lege belofte of gooi een fout.\r\n        // Voor nu, gooi een fout om het probleem te benadrukken.\r\n        throw new Error(\"Supabase client cannot be initialized on the server side within useSupabaseQuery.\");\r\n      }\r\n      const supabase = getSupabaseBrowserClient();\r\n      try {\r\n        // Roep de doorgegeven queryFn aan met de Supabase client\r\n        const result = await queryFn(supabase);\r\n        return result;\r\n      } catch (error: any) {\r\n        // Formatteer Supabase errors of andere errors\r\n        const errorMessage: ErrorMessage = {\r\n          message: error.message || 'An unknown error occurred',\r\n          details: error.details || error.hint || undefined,\r\n          code: error.code || undefined,\r\n        };\r\n        throw errorMessage;\r\n      }\r\n    },\r\n    ...options,\r\n  });\r\n}\r\n\r\nexport default useSupabaseQuery;\r\n\r\n// Aangepaste hook voor het ophalen van een gebruikersprofiel\r\nexport function useProfile(userId: string | undefined, options?: UseQueryOptions<any, ErrorMessage>) {\r\n  return useSupabaseQuery<any, ErrorMessage>(\r\n    ['profile', userId],\r\n    async (supabase) => {\r\n      if (!userId) {\r\n        throw new Error('User ID is required to fetch profile.');\r\n      }\r\n      const { data, error } = await supabase\r\n        .from('profiles')\r\n        .select('*')\r\n        .eq('id', userId)\r\n        .single();\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n      return data;\r\n    },\r\n    {\r\n      enabled: !!userId, // Query alleen uitvoeren als userId aanwezig is\r\n      ...options,\r\n    }\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\hooks\\useTypedSupabase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\jest.config.js","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":1,"column":1,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":1,"endColumn":18},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":2,"column":18,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":2,"endColumn":38}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"require('dotenv').config({ path: '.env.local' });\r\nconst nextJest = require('next/jest');\r\n\r\nconst createJestConfig = nextJest({\r\n  // Provide the path to your Next.js app to load next.config.js and .env files in your test environment\r\n  dir: './',\r\n});\r\n\r\n// Add any custom config to be passed to Jest\r\nconst customJestConfig = {\r\n  setupFilesAfterEnv: ['<rootDir>/jest.setup.js'], // if you have a setup file\r\n  moduleDirectories: ['node_modules', '<rootDir>/'],\r\n  testEnvironment: 'jest-environment-jsdom',\r\n  moduleNameMapper: {\r\n    // Handle module aliases (this will be automatically configured for you soon)\r\n    '^@/components/(.*)$': '<rootDir>/components/$1',\r\n    '^@/containers/(.*)$': '<rootDir>/containers/$1',\r\n    '^@/hooks/(.*)$': '<rootDir>/hooks/$1',\r\n    '^@/lib/(.*)$': '<rootDir>/lib/$1',\r\n    '^@/utils/(.*)$': '<rootDir>/utils/$1',\r\n    '^@/types/(.*)$': '<rootDir>/types/$1',\r\n    '^@/context/(.*)$': '<rootDir>/context/$1',\r\n    '^@/app/(.*)$': '<rootDir>/app/$1', // If you need to test things in app dir\r\n  },\r\n  collectCoverageFrom: [\r\n    'components/**/*.{ts,tsx}',\r\n    'containers/**/*.{ts,tsx}',\r\n    'hooks/**/*.{ts,tsx}',\r\n    'utils/**/*.{ts,tsx}',\r\n    'lib/**/*.{ts,tsx}',\r\n    'context/**/*.{ts,tsx}', // Added context\r\n    'app/**/*.{ts,tsx}', // Added app directory, refine as needed\r\n    '!**/*.d.ts',\r\n    '!**/node_modules/**',\r\n    '!**/.next/**',\r\n    '!<rootDir>/*.config.js', // Exclude config files\r\n    '!<rootDir>/coverage/**',\r\n    '!<rootDir>/reports/**',\r\n    '!<rootDir>/scripts/**',\r\n    '!<rootDir>/public/**',\r\n    '!<rootDir>/app/api/**', // Exclude API routes from client-side test coverage\r\n  ],\r\n  coverageThreshold: {},\r\n  testPathIgnorePatterns: ['<rootDir>/node_modules/', '<rootDir>/.next/'],\r\n  transform: {\r\n    // Use babel-jest to transpile tests with the next/babel preset\r\n    // https://jestjs.io/docs/configuration#transform-objectstring-pathtotransformer--pathtotransformer-object\r\n    '^.+\\\\.(js|jsx|ts|tsx)$': ['babel-jest', { presets: ['next/babel'] }],\r\n  },\r\n  transformIgnorePatterns: [\r\n    '/node_modules/',\r\n    '^.+\\\\.module\\\\.(css|sass|scss)$',\r\n  ],\r\n};\r\n\r\n// createJestConfig is exported this way to ensure that next/jest can load the Next.js config which is async\r\nmodule.exports = createJestConfig(customJestConfig);\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\jest.env.js","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":1,"column":16,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":1,"endColumn":33}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const dotenv = require('dotenv');\r\ndotenv.config({ path: '.env.local' });\r\n\r\n// Ensure environment variables are defined for testing\r\nif (!process.env.NEXT_PUBLIC_SUPABASE_URL) {\r\n  process.env.NEXT_PUBLIC_SUPABASE_URL = 'https://vqxhwbdhguhcigdouqpc.supabase.co';\r\n}\r\nif (!process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {\r\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZxeGh3YmRoZ3VoY2lnZG91cXBjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDcyMjM4NjIsImV4cCI6MjA2Mjc5OTg2Mn0.ggqmXhFJuYWGXlJYjoVxa7xZyWddUdGsM6t1eXlSmO0';\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\jest.setup.js","messages":[{"ruleId":"import/no-named-as-default-member","severity":1,"message":"Caution: `dotenv` also has a named export `config`. Check if you meant to write `import {config} from 'dotenv'` instead.","line":2,"column":1,"nodeType":"MemberExpression","endLine":2,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import dotenv from 'dotenv';\r\ndotenv.config({ path: '.env.local' });\r\n\r\n// Ensure environment variables are defined for testing\r\n// Use mock values for testing to avoid exposing real credentials\r\nif (!process.env.NEXT_PUBLIC_SUPABASE_URL) {\r\n  process.env.NEXT_PUBLIC_SUPABASE_URL = 'https://example.supabase.co';\r\n}\r\nif (!process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {\r\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImV4YW1wbGUiLCJyb2xlIjoiYW5vbiIsImlhdCI6MTYwMDAwMDAwMCwiZXhwIjoxNjAwMDAwMDAwfQ.mock-token-for-testing';\r\n}\r\n\r\nimport '@testing-library/jest-dom';\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\lib\\QueryClientConfig.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\lib\\analytics\\eventTracking.ts","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":42,"fix":{"range":[41,41],"text":"\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":13},{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":13,"fix":{"range":[6,13],"text":""}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":83,"fix":{"range":[125,125],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":87,"fix":{"range":[213,213],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/lib/supabase-client` import should occur before import of `./types`","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":66,"fix":{"range":[127,309],"text":"import { getSupabaseBrowserClient } from '@/lib/supabase-client'; // Voor user ID uit sessie\r\nimport { AnalyticsEvent, EventCallback, EventProperties, EventSchema } from './types';\r\n"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":62,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2863,2866],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2863,2866],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":84,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":84,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3877,3949],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":117,"column":25,"nodeType":"MemberExpression","messageId":"unexpected","endLine":117,"endColumn":36},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":120,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5186,5189],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5186,5189],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":123,"column":25,"nodeType":"MemberExpression","messageId":"unexpected","endLine":123,"endColumn":36},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":127,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":127,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5535,5538],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5535,5538],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":129,"column":25,"nodeType":"MemberExpression","messageId":"unexpected","endLine":129,"endColumn":36},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":187,"column":25,"nodeType":"MemberExpression","messageId":"unexpected","endLine":187,"endColumn":36},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":198,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":198,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8399,8477],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":211,"column":27,"nodeType":"MemberExpression","messageId":"unexpected","endLine":211,"endColumn":38},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":222,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":222,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":227,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":227,"endColumn":29}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":5,"fixableWarningCount":0,"source":"import React, { useEffect } from 'react';\r\nimport { User, AuthError, Session, AuthChangeEvent } from '@supabase/supabase-js';\r\nimport { AnalyticsEvent, EventCallback, EventProperties, EventSchema } from './types';\r\nimport { getSupabaseBrowserClient } from '@/lib/supabase-client'; // Voor user ID uit sessie\r\n\r\n// Validatie schema's voor verschillende events\r\nconst eventSchemas: Record<string, EventSchema> = {\r\n  page_view: {\r\n    required: ['path'],\r\n    optional: ['referrer', 'title', 'utm_source', 'utm_medium', 'utm_campaign']\r\n  },\r\n  feature_view: { // Wanneer een specifieke feature UI wordt getoond\r\n    required: ['featureId', 'featureName'],\r\n    optional: ['source', 'context'] // Waarvandaan kwam de gebruiker\r\n  },\r\n  feature_interaction: { // Actieve interactie met een feature\r\n    required: ['featureId', 'action'], // bv. featureId: 'task_creation', action: 'submit_form'\r\n    optional: ['result', 'value', 'duration_ms', 'context'] // bv. result: 'success', value: '123'\r\n  },\r\n  upgrade_prompt_shown: {\r\n    required: ['featureId', 'promptType', 'planOffered'], // bv. promptType: 'modal', planOffered: 'premium'\r\n    optional: ['context', 'triggerEvent'] // Welke actie triggerde de prompt\r\n  },\r\n  upgrade_prompt_action: { // Hernoemd van _click voor algemeenheid\r\n    required: ['featureId', 'promptType', 'actionTaken'], // bv. actionTaken: 'upgrade_clicked', 'dismissed'\r\n    optional: ['context']\r\n  },\r\n  subscription_flow_step: { // Algemener dan _started\r\n    required: ['stepName', 'planId', 'billingCycle'], // bv. stepName: 'checkout_initiated', 'payment_success'\r\n    optional: ['source', 'trialDays', 'errorMessage']\r\n  },\r\n  // Applicatie-specifieke events\r\n  task_created: {\r\n    required: ['taskId', 'taskType'], // bv. taskType: 'eenmalig', 'herhalend'\r\n    optional: ['specialistCreated', 'patientId', 'labels_count']\r\n  },\r\n  task_completed: { // Loggen van een taak\r\n    required: ['taskId', 'taskType'],\r\n    optional: ['duration_minutes', 'pijn_score', 'vermoeidheid_score', 'symptom_count']\r\n  },\r\n  symptom_logged: { // Als symptomen los van taken gelogd kunnen worden\r\n    required: ['symptomName', 'severity'],\r\n    optional: ['context'] // bv. 'daily_checkin', 'task_log'\r\n  },\r\n  specialist_patient_connection: {\r\n    required: ['connectionAction'], // 'invite_sent', 'invite_accepted', 'connection_removed'\r\n    optional: ['initiatorType'] // 'patient' or 'specialist'\r\n  },\r\n  user_profile_updated: {\r\n    required: ['updatedFields'], // Array van veldnamen, bv. ['voornaam', 'postcode']\r\n    optional: []\r\n  },\r\n  app_error_client: { // Client-side errors\r\n    required: ['errorMessage', 'componentStack'],\r\n    optional: ['errorCode', 'errorType', 'path']\r\n  }\r\n};\r\n\r\nclass AnalyticsService {\r\n  private initialized = false;\r\n  private userId: string | null = null;\r\n  private userProperties: Record<string, any> = {};\r\n  private eventCallbacks: EventCallback[] = [];\r\n  private debugMode = false;\r\n  private sessionId: string | null = null;\r\n  private supabase = getSupabaseBrowserClient(); // Gebruik voor user ID\r\n\r\n  constructor() {\r\n    if (typeof window !== 'undefined') {\r\n      this.sessionId = this.getOrCreateSessionId();\r\n      // Probeer user ID te halen als die al bestaat (bv. na page refresh)\r\n      this.supabase.auth.getUser().then(({ data: { user } , error }: { data: { user: User | null }, error: AuthError | null }) => {\r\n        if (error) {\r\n          console.error('[Analytics] Error fetching user for session:', error.message);\r\n          this.userId = null;\r\n        } else {\r\n          this.userId = user?.id || null;\r\n        }\r\n      });\r\n       // Luister naar auth changes om userId bij te werken\r\n      this.supabase.auth.onAuthStateChange((_event: AuthChangeEvent, session: Session | null) => { \r\n        this.userId = session?.user?.id || null;\r\n        if (this.debugMode) {\r\n            console.log('[Analytics] Auth state changed, new userId:', this.userId);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  private getOrCreateSessionId(): string {\r\n    let sid = sessionStorage.getItem('fibro_analytics_sid');\r\n    if (!sid) {\r\n      sid = crypto.randomUUID();\r\n      sessionStorage.setItem('fibro_analytics_sid', sid);\r\n    }\r\n    return sid;\r\n  }\r\n  \r\n  public init(options: { \r\n    debug?: boolean;\r\n  } = {}) {\r\n    if (this.initialized && typeof window !== 'undefined') { // Kan meerdere keren worden aangeroepen, maar init maar 1x\r\n      return;\r\n    }\r\n    \r\n    this.debugMode = options.debug || process.env.NODE_ENV === 'development';\r\n    \r\n    if (typeof window !== 'undefined') {\r\n      this.trackPageView(); // Track initiële page view\r\n      // Next.js App Router gebruikt geen history.pushState op dezelfde manier.\r\n      // Page views moeten worden getracked in `layout.tsx` of via `useEffect` in page componenten\r\n      // met `usePathname` en `useSearchParams`.\r\n      // Voor nu, de automatische page view tracking bij route changes is hier verwijderd.\r\n    }\r\n    \r\n    this.initialized = true;\r\n    if (this.debugMode) console.log('[Analytics] Initialized.', { userId: this.userId, sessionId: this.sessionId });\r\n  }\r\n  \r\n  public identify(userId: string, properties: Record<string, any> = {}) {\r\n    this.userId = userId;\r\n    this.userProperties = { ...this.userProperties, ...properties }; // Merge properties\r\n    if (this.debugMode) console.log('[Analytics] Identify:', { userId, properties });\r\n    // Stuur eventueel een 'identify' call naar je analytics backend\r\n  }\r\n\r\n  public setUserProperties(properties: Record<string, any>) {\r\n    this.userProperties = { ...this.userProperties, ...properties };\r\n    if (this.debugMode) console.log('[Analytics] Set User Properties:', { properties });\r\n  }\r\n\r\n  public trackPageView(pathOverride?: string, titleOverride?: string) {\r\n    if (typeof window === 'undefined') return;\r\n    const properties: EventProperties = {\r\n      path: pathOverride || window.location.pathname + window.location.search, // Inclusief query params\r\n      referrer: document.referrer || undefined,\r\n      title: titleOverride || document.title,\r\n    };\r\n    // Voeg UTM parameters toe indien aanwezig\r\n    const searchParams = new URLSearchParams(window.location.search);\r\n    ['utm_source', 'utm_medium', 'utm_campaign', 'utm_term', 'utm_content'].forEach(param => {\r\n        if (searchParams.has(param)) properties[param] = searchParams.get(param);\r\n    });\r\n    this.trackEvent('page_view', properties);\r\n  }\r\n  \r\n  public trackEvent(eventName: string, properties: EventProperties = {}) {\r\n    if (!this.initialized && typeof window !== 'undefined') {\r\n      this.init(); // Zorg dat het geïnitialiseerd is\r\n    }\r\n    \r\n    const schema = eventSchemas[eventName];\r\n    if (schema) {\r\n      for (const required of schema.required) {\r\n        if (properties[required] === undefined || properties[required] === null) {\r\n          if (this.debugMode) console.warn(`[Analytics] Missing required property '${required}' for event '${eventName}'`);\r\n          return; // Stuur event niet als verplichte velden missen\r\n        }\r\n      }\r\n      const validProperties: EventProperties = {};\r\n      const validKeys = [...schema.required, ...(schema.optional || [])];\r\n      for (const key of validKeys) {\r\n        if (properties[key] !== undefined) validProperties[key] = properties[key];\r\n      }\r\n      properties = validProperties; // Gebruik alleen gevalideerde properties\r\n    } else if (this.debugMode) {\r\n        console.warn(`[Analytics] No schema found for event '${eventName}'. Sending all properties.`);\r\n    }\r\n    \r\n    const event: AnalyticsEvent = {\r\n      name: eventName,\r\n      properties,\r\n      userId: this.userId, // userId wordt nu intern beheerd\r\n      userProperties: this.userProperties,\r\n      timestamp: new Date().toISOString(),\r\n      sessionId: this.sessionId,\r\n    };\r\n    \r\n    this.eventCallbacks.forEach(callback => {\r\n      try {\r\n        callback(event);\r\n      } catch (error) {\r\n        console.error('[Analytics] Error in event callback:', error);\r\n      }\r\n    });\r\n    \r\n    if (this.debugMode) console.log('[Analytics] Event:', event);\r\n    this.sendToBackend(event);\r\n  }\r\n  \r\n  public addEventCallback(callback: EventCallback) {\r\n    this.eventCallbacks.push(callback);\r\n  }\r\n  \r\n  private async sendToBackend(event: AnalyticsEvent) {\r\n    // TODO: Implement actual backend sending in production\r\n    if (this.debugMode) {\r\n      console.log('[Analytics] Debug mode: Event would be sent to backend:', event);\r\n    }\r\n  }\r\n  \r\n  public flushQueue() {\r\n    if (typeof window === 'undefined' || !localStorage) return;\r\n    const queueStr = localStorage.getItem('fibro_analytics_queue');\r\n    if (!queueStr) return;\r\n    \r\n    try {\r\n      const queue: AnalyticsEvent[] = JSON.parse(queueStr);\r\n      localStorage.removeItem('fibro_analytics_queue'); // Verwijder direct om dubbel sturen te voorkomen\r\n      \r\n      if (this.debugMode) console.log(`[Analytics] Flushing ${queue.length} events from queue.`);\r\n      queue.forEach(event => this.sendToBackend(event));\r\n    } catch (e) {\r\n      if (this.debugMode) console.error('[Analytics] Error flushing queue:', e);\r\n    }\r\n  }\r\n}\r\n\r\nexport const analytics = new AnalyticsService();\r\n\r\n// Convenience function for components\r\nexport function trackEvent(eventName: string, properties: EventProperties = {}) {\r\n  analytics.trackEvent(eventName, properties);\r\n}\r\n\r\n// Hook voor gebruik in functionele componenten\r\nexport function useAnalytics() {\r\n  // Zorg dat analytics geïnitialiseerd is bij gebruik van de hook\r\n  useEffect(() => {\r\n    if (typeof window !== 'undefined' && !analytics['initialized']) { // Check private field via accessor\r\n        analytics.init();\r\n    }\r\n  }, []);\r\n\r\n  return {\r\n    trackEvent,\r\n    trackPageView: analytics.trackPageView.bind(analytics),\r\n    identify: analytics.identify.bind(analytics),\r\n    setUserProperties: analytics.setUserProperties.bind(analytics),\r\n  };\r\n}\r\n\r\n// Flush queue on window focus (likely reconnecting)\r\nif (typeof window !== 'undefined') {\r\n  window.addEventListener('online', () => analytics.flushQueue()); // Specifiek voor online event\r\n  // Init on load if not already done by a component using the hook\r\n  // analytics.init(); // Kan hier, of in een root component van de app\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\lib\\analytics\\types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":4,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[82,85],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[82,85],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[343,346],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[343,346],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// lib/analytics/types.ts\r\n\r\nexport interface EventProperties {\r\n  [key: string]: any; // Flexibele properties\r\n}\r\n\r\nexport interface AnalyticsEvent {\r\n  name: string; // Naam van het event, bv. 'page_view', 'feature_interaction'\r\n  properties: EventProperties;\r\n  userId: string | null; // Optionele user ID\r\n  userProperties: Record<string, any>; // Eigenschappen van de gebruiker\r\n  timestamp: string; // ISO 8601 timestamp\r\n  sessionId: string | null; // Kan null zijn als niet beschikbaar\r\n}\r\n\r\nexport type EventCallback = (event: AnalyticsEvent) => void;\r\n\r\nexport interface EventSchema {\r\n  required: string[]; // Lijst van verplichte property namen\r\n  optional?: string[]; // Lijst van optionele property namen\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\lib\\analytics\\userJourney.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":29,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":29,"endColumn":36},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":95,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":98,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1532,1535],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1532,1535],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":77,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":77,"endColumn":45},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":77,"column":113,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":116,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3360,3363],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3360,3363],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":87,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":87,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":90,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3674,3677],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3674,3677],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// import React, { useEffect, useState, ComponentType, FC } from 'react'; // Import React en types - All unused\r\nimport { trackEvent } from './eventTracking'; // Gebruik de bestaande analytics instance, analytics was unused\r\n\r\n// Types voor verschillende journey stappen\r\nexport type OnboardingStepName = // Hernoemd voor duidelijkheid\r\n  | 'signup_started'\r\n  | 'account_created' // Na succesvolle Supabase user creatie\r\n  | 'profile_details_submitted' // Na invullen basis profielinfo\r\n  | 'first_task_created'\r\n  | 'first_symptom_logged'\r\n  | 'specialist_invited' // Door patiënt\r\n  | 'patient_invite_accepted' // Door specialist\r\n  | 'onboarding_completed'; // Expliciete stap of na X dagen/acties\r\n\r\nexport type SubscriptionJourneyStepName = // Hernoemd voor duidelijkheid\r\n  | 'pricing_page_viewed'\r\n  | 'plan_selected_for_checkout' // Klik op \"Kies dit plan\"\r\n  | 'checkout_session_initiated' // Na succesvolle API call naar /api/create-checkout-session\r\n  | 'checkout_payment_successful' // Via Stripe webhook\r\n  | 'checkout_payment_failed' // Via Stripe webhook of error bij redirect\r\n  | 'first_premium_feature_used' // Na succesvolle upgrade, eerste gebruik van een betaalde feature\r\n  | 'subscription_renewal_success' // Via Stripe webhook\r\n  | 'subscription_cancellation_requested' // Gebruiker klikt op annuleren\r\n  | 'subscription_cancelled_at_period_end'; // Via Stripe webhook\r\n\r\n/**\r\n * Track onboarding voortgang\r\n */\r\nexport function trackOnboardingStep(step: OnboardingStepName, extraProperties: Record<string, any> = {}) {\r\n  trackEvent('onboarding_step', {\r\n    step_name: step, // Gebruik step_name voor consistentie met andere analytics events\r\n    ...extraProperties\r\n  });\r\n  \r\n  if (typeof window !== 'undefined' && localStorage) {\r\n    try {\r\n      const onboardingProgress = JSON.parse(localStorage.getItem('fibro_onboarding_progress') || '{}');\r\n      onboardingProgress[step] = new Date().toISOString();\r\n      localStorage.setItem('fibro_onboarding_progress', JSON.stringify(onboardingProgress));\r\n    } catch (e) {\r\n      console.error(\"Error updating onboarding progress in localStorage\", e);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Krijg de huidige onboarding stap van de gebruiker (meest recent voltooide)\r\n */\r\nexport function getLatestCompletedOnboardingStep(): OnboardingStepName | null {\r\n  if (typeof window === 'undefined' || !localStorage) return null;\r\n  \r\n  try {\r\n    const onboardingProgress = JSON.parse(localStorage.getItem('fibro_onboarding_progress') || '{}');\r\n    const completedSteps = Object.keys(onboardingProgress) as OnboardingStepName[];\r\n    \r\n    // Bepaal de \"hoogste\" voltooide stap gebaseerd op een logische volgorde\r\n    const order: OnboardingStepName[] = [\r\n        'signup_started', 'account_created', 'profile_details_submitted', \r\n        'first_task_created', 'first_symptom_logged', 'specialist_invited', \r\n        'patient_invite_accepted', 'onboarding_completed'\r\n    ];\r\n    \r\n    for (let i = order.length - 1; i >= 0; i--) {\r\n        if (completedSteps.includes(order[i])) {\r\n            return order[i];\r\n        }\r\n    }\r\n  } catch (e) {\r\n    console.error(\"Error reading onboarding progress from localStorage\", e);\r\n  }\r\n  return null;\r\n}\r\n\r\n/**\r\n * Track abonnement journey\r\n */\r\nexport function trackSubscriptionJourneyStep(step: SubscriptionJourneyStepName, extraProperties: Record<string, any> = {}) {\r\n  trackEvent('subscription_journey_step', {\r\n    step_name: step,\r\n    ...extraProperties\r\n  });\r\n}\r\n\r\n/**\r\n * Track feature gebruik\r\n */\r\nexport function trackFeatureUsage(\r\n  featureId: string, \r\n  action: 'view' | 'interaction' | 'completion', // Duidelijkere acties\r\n  properties: Record<string, any> = {}\r\n) {\r\n  trackEvent('feature_usage', {\r\n    feature_id: featureId, // Gebruik snake_case\r\n    action,\r\n    ...properties\r\n  });\r\n  \r\n  if (typeof window !== 'undefined' && localStorage) {\r\n    try {\r\n      const featureUsageKey = `fibro_feature_usage_${featureId}`;\r\n      const usageDataStr = localStorage.getItem(featureUsageKey);\r\n      const usageData = usageDataStr ? JSON.parse(usageDataStr) : { firstUsed: null, useCount: 0, lastUsed: null };\r\n      \r\n      if (!usageData.firstUsed) {\r\n        usageData.firstUsed = new Date().toISOString();\r\n        trackEvent('feature_first_use', { feature_id: featureId });\r\n      }\r\n      usageData.useCount = (usageData.useCount || 0) + 1;\r\n      usageData.lastUsed = new Date().toISOString();\r\n      \r\n      localStorage.setItem(featureUsageKey, JSON.stringify(usageData));\r\n    } catch (e) {\r\n      console.error(`Error updating feature usage for ${featureId} in localStorage`, e);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * HOC voor het tracken van component/feature views.\r\n * TIJDELIJK UITGECOMMENTARIEERD WEGENS PERSISTENTE TYPE ERRORS - TEAM MOET DIT DEBUGGEN\r\n */\r\n// export function withFeatureViewTracking<P extends object>(\r\n//   WrappedComponent: ComponentType<P>,\r\n//   featureId: string,\r\n//   featureName: string\r\n// ): ComponentType<P> {\r\n//   const TrackingComponent = (props: P): JSX.Element => {\r\n//     useEffect(() => {\r\n//       trackEvent('feature_view', { featureId, featureName });\r\n//     }, [featureId, featureName]);\r\n    \r\n//     return <WrappedComponent {...props} />;\r\n//   };\r\n  \r\n//   TrackingComponent.displayName = `withFeatureViewTracking(${WrappedComponent.displayName || WrappedComponent.name || 'Component'})`;\r\n  \r\n//   return TrackingComponent;\r\n// }\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\lib\\cache\\api-cache.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[779,782],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[779,782],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":53,"column":60,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":53,"endColumn":62},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":156,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":156,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4498,4501],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4498,4501],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextApiRequest, NextApiResponse } from 'next';\r\n\r\ninterface ApiCacheOptions {\r\n  /**\r\n   * Maximum age of the cache in seconds\r\n   * @default 60 (1 minute)\r\n   */\r\n  maxAge?: number;\r\n  \r\n  /**\r\n   * Time in seconds to serve stale content while revalidating in the background\r\n   * @default 0 (no stale-while-revalidate)\r\n   */\r\n  staleWhileRevalidate?: number;\r\n  \r\n  /**\r\n   * Custom cache key generator function\r\n   * @default Uses request method and URL as cache key\r\n   */\r\n  cacheKeyFn?: (req: NextApiRequest) => string;\r\n  \r\n  /**\r\n   * Function to determine if a request should be cached\r\n   * @default Only caches GET requests\r\n   */\r\n  shouldCache?: (req: NextApiRequest) => boolean;\r\n}\r\n\r\n// In-memory cache store\r\nconst apiCache = new Map<string, {\r\n  data: any;\r\n  timestamp: number;\r\n}>();\r\n\r\n/**\r\n * Higher-order function that adds caching to a Next.js API route\r\n * \r\n * @param handler The API route handler function\r\n * @param options Caching options\r\n * @returns A new handler function with caching\r\n */\r\nexport function withApiCache(\r\n  handler: (req: NextApiRequest, res: NextApiResponse) => Promise<void>,\r\n  options: ApiCacheOptions = {}\r\n) {\r\n  const {\r\n    maxAge = 60, // Default: 1 minute\r\n    staleWhileRevalidate = 0,\r\n    cacheKeyFn = defaultCacheKeyFn,\r\n    shouldCache = defaultShouldCache\r\n  } = options;\r\n\r\n  return async (req: NextApiRequest, res: NextApiResponse) => {\r\n    // Only cache if the request meets the criteria\r\n    if (!shouldCache(req)) {\r\n      return handler(req, res);\r\n    }\r\n\r\n    const cacheKey = cacheKeyFn(req);\r\n    const now = Date.now();\r\n    const cached = apiCache.get(cacheKey);\r\n\r\n    // If we have a valid cache entry, use it\r\n    if (cached) {\r\n      const age = (now - cached.timestamp) / 1000; // Convert to seconds\r\n      \r\n      // If the cache is still fresh, return it\r\n      if (age < maxAge) {\r\n        setCacheHeaders(res, maxAge - age, staleWhileRevalidate);\r\n        return res.status(200).json(cached.data);\r\n      }\r\n      \r\n      // If we're in the stale-while-revalidate window, return stale data and revalidate\r\n      if (age < maxAge + staleWhileRevalidate) {\r\n        // Set up background revalidation\r\n        revalidateCache(handler, req, cacheKey).catch(console.error);\r\n        \r\n        // Return stale data with appropriate headers\r\n        setCacheHeaders(res, 0, 0, true);\r\n        return res.status(200).json(cached.data);\r\n      }\r\n    }\r\n\r\n    // No valid cache entry, execute handler and cache the result\r\n    const originalJson = res.json;\r\n    res.json = function(data) {\r\n      // Cache the response data\r\n      apiCache.set(cacheKey, {\r\n        data,\r\n        timestamp: now\r\n      });\r\n      \r\n      // Set cache headers\r\n      setCacheHeaders(res, maxAge, staleWhileRevalidate);\r\n      \r\n      // Call the original json method\r\n      return originalJson.call(this, data);\r\n    };\r\n\r\n    return handler(req, res);\r\n  };\r\n}\r\n\r\n/**\r\n * Default function to determine if a request should be cached\r\n * Only caches GET requests\r\n */\r\nfunction defaultShouldCache(req: NextApiRequest): boolean {\r\n  return req.method === 'GET';\r\n}\r\n\r\n/**\r\n * Default function to generate a cache key from a request\r\n * Uses request method and URL as cache key\r\n */\r\nfunction defaultCacheKeyFn(req: NextApiRequest): string {\r\n  return `${req.method}:${req.url}:${JSON.stringify(req.query)}`;\r\n}\r\n\r\n/**\r\n * Set appropriate cache control headers on the response\r\n */\r\nfunction setCacheHeaders(\r\n  res: NextApiResponse,\r\n  maxAge: number,\r\n  staleWhileRevalidate: number,\r\n  isStale: boolean = false\r\n): void {\r\n  if (isStale) {\r\n    res.setHeader('Cache-Control', 'no-cache');\r\n    res.setHeader('X-Cache-Status', 'stale');\r\n  } else if (maxAge > 0) {\r\n    const directive = staleWhileRevalidate > 0\r\n      ? `max-age=${Math.floor(maxAge)}, stale-while-revalidate=${Math.floor(staleWhileRevalidate)}`\r\n      : `max-age=${Math.floor(maxAge)}`;\r\n    \r\n    res.setHeader('Cache-Control', directive);\r\n    res.setHeader('X-Cache-Status', 'fresh');\r\n  } else {\r\n    res.setHeader('Cache-Control', 'no-store');\r\n    res.setHeader('X-Cache-Status', 'uncached');\r\n  }\r\n}\r\n\r\n/**\r\n * Revalidate the cache in the background\r\n */\r\nasync function revalidateCache(\r\n  handler: (req: NextApiRequest, res: NextApiResponse) => Promise<void>,\r\n  req: NextApiRequest,\r\n  cacheKey: string\r\n): Promise<void> {\r\n  // Create a mock response object to capture the new data\r\n  const mockRes = {\r\n    status: () => mockRes,\r\n    json: (data: any) => {\r\n      apiCache.set(cacheKey, {\r\n        data,\r\n        timestamp: Date.now()\r\n      });\r\n      return mockRes;\r\n    },\r\n    setHeader: () => mockRes,\r\n    end: () => {}\r\n  } as unknown as NextApiResponse;\r\n\r\n  // Execute the handler with the mock response\r\n  await handler(req, mockRes);\r\n}\r\n\r\n/**\r\n * Clear the entire API cache or specific entries\r\n */\r\nexport function clearApiCache(cacheKey?: string): void {\r\n  if (cacheKey) {\r\n    apiCache.delete(cacheKey);\r\n  } else {\r\n    apiCache.clear();\r\n  }\r\n}\r\n\r\n/**\r\n * Get the current size of the API cache\r\n */\r\nexport function getApiCacheSize(): number {\r\n  return apiCache.size;\r\n}\r\n\r\n/**\r\n * Get all cache keys currently in the API cache\r\n */\r\nexport function getApiCacheKeys(): string[] {\r\n  return Array.from(apiCache.keys());\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\lib\\error-handler.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":140,"column":69,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":140,"endColumn":71}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { PostgrestError } from '@supabase/supabase-js';\r\n\r\n// Interface voor gestructureerde foutberichten\r\nexport interface ErrorMessage { // Added export\r\n  userMessage: string;\r\n  technicalMessage?: string;\r\n  errorCode?: string;\r\n  action?: string;\r\n}\r\n\r\n/**\r\n * Categoriseert en verwerkt Supabase database fouten\r\n * @param error De error van Supabase\r\n * @param context De context waar de fout optrad (bv. 'taak-opslaan', 'profiel-bijwerken')\r\n * @returns Gestructureerd foutbericht\r\n */\r\nexport const handleSupabaseError = (\r\n  error: PostgrestError | Error | unknown, \r\n  context: string = 'algemeen'\r\n): ErrorMessage => {\r\n  console.error(`Fout in context ${context}:`, error);\r\n  \r\n  // Standaard foutbericht\r\n  let errorMessage: ErrorMessage = {\r\n    userMessage: 'Er is een fout opgetreden. Probeer het later opnieuw.',\r\n    action: 'Vernieuw de pagina of probeer het later opnieuw.'\r\n  };\r\n  \r\n  // Controleer of het een PostgrestError is\r\n  if (typeof error === 'object' && error !== null && 'code' in error && 'message' in error) { // More robust check for PostgrestError like objects\r\n    const pgError = error as PostgrestError; // Cast after check\r\n    \r\n    if (pgError.code) {\r\n      errorMessage.errorCode = pgError.code;\r\n      \r\n      // Categoriseer veelvoorkomende fouten\r\n      switch (pgError.code) {\r\n        case 'PGRST116':\r\n          // Autorisatie/RLS fout\r\n          errorMessage = {\r\n            userMessage: 'U heeft geen toegang tot deze gegevens.',\r\n            technicalMessage: 'Row Level Security fout: toegang geweigerd.',\r\n            errorCode: pgError.code,\r\n            action: 'Log opnieuw in of neem contact op met support als dit probleem aanhoudt.'\r\n          };\r\n          break;\r\n          \r\n        case '23505':\r\n          // Unique constraint violation\r\n          errorMessage = {\r\n            userMessage: 'Deze gegevens bestaan al.',\r\n            technicalMessage: 'Unieke constraint schending.',\r\n            errorCode: pgError.code,\r\n            action: 'Probeer een andere waarde of wijzig de bestaande.'\r\n          };\r\n          break;\r\n          \r\n        case '23503':\r\n          // Foreign key constraint\r\n          errorMessage = {\r\n            userMessage: 'Deze actie is niet mogelijk vanwege afhankelijkheid met andere gegevens.',\r\n            technicalMessage: 'Foreign key constraint schending.',\r\n            errorCode: pgError.code,\r\n            action: 'Controleer gerelateerde gegevens voordat u deze actie uitvoert.'\r\n          };\r\n          break;\r\n          \r\n        case '23514':\r\n          // Check constraint\r\n          errorMessage = {\r\n            userMessage: 'De ingevoerde gegevens voldoen niet aan de vereisten.',\r\n            technicalMessage: 'Check constraint schending.',\r\n            errorCode: pgError.code,\r\n            action: 'Controleer of uw invoer voldoet aan de criteria.'\r\n          };\r\n          break;\r\n          \r\n        case '22P02':\r\n          // Invalid text representation\r\n          errorMessage = {\r\n            userMessage: 'De ingevoerde gegevens hebben een ongeldig formaat.',\r\n            technicalMessage: 'Ongeldig gegevensformaat.',\r\n            errorCode: pgError.code,\r\n            action: 'Controleer het formaat van uw invoer.'\r\n          };\r\n          break;\r\n      }\r\n    }\r\n    \r\n    // Voeg Supabase-specifieke foutberichten toe indien beschikbaar\r\n    if (pgError.message) { // Check if message exists\r\n      errorMessage.technicalMessage = pgError.message;\r\n    }\r\n    \r\n    // Voeg hint toe indien beschikbaar\r\n    if ('hint' in pgError && pgError.hint) { // Check if hint exists\r\n      errorMessage.action = pgError.hint as string;\r\n    }\r\n  } else if (error instanceof Error) {\r\n    // Voor standaard JavaScript fouten\r\n    errorMessage = {\r\n      userMessage: 'Er is een onverwachte fout opgetreden.',\r\n      technicalMessage: error.message,\r\n      action: 'Vernieuw de pagina of probeer het later opnieuw.'\r\n    };\r\n  }\r\n  \r\n  // Context-specifieke foutberichten\r\n  switch (context) {\r\n    case 'authenticatie':\r\n      errorMessage.userMessage = 'Er is een probleem met het inloggen. ' + errorMessage.userMessage;\r\n      break;\r\n      \r\n    case 'taak-opslaan':\r\n      errorMessage.userMessage = 'De taak kon niet worden opgeslagen. ' + errorMessage.userMessage;\r\n      break;\r\n      \r\n    case 'profiel-bijwerken':\r\n      errorMessage.userMessage = 'Uw profiel kon niet worden bijgewerkt. ' + errorMessage.userMessage;\r\n      break;\r\n      \r\n    case 'reflectie-opslaan':\r\n      errorMessage.userMessage = 'Uw reflectie kon niet worden opgeslagen. ' + errorMessage.userMessage;\r\n      break;\r\n      \r\n    case 'specialist-patienten':\r\n      errorMessage.userMessage = 'Er is een fout opgetreden bij het beheren van patiënten. ' + errorMessage.userMessage;\r\n      break;\r\n  }\r\n  \r\n  return errorMessage;\r\n};\r\n\r\n/**\r\n * Helper voor het formatteren van API foutberichten\r\n * @param statusCode HTTP status code\r\n * @param message Foutbericht\r\n * @returns Geformatteerd foutbericht object\r\n */\r\nexport const formatApiError = (statusCode: number, message: string) => {\r\n  return {\r\n    status: statusCode,\r\n    error: {\r\n      message,\r\n      timestamp: new Date().toISOString()\r\n    }\r\n  };\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\lib\\feedback\\feedbackCollector.ts","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":60,"fix":{"range":[123,123],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/lib/analytics/eventTracking` import should occur after import of `@/components/auth/AuthProvider`","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":60,"fix":{"range":[64,432],"text":"// import { useLocalStorage } from '@/hooks/useLocalStorage'; // Placeholder hook - Unused as local placeholder is used\r\nimport { useEffect, useState, useCallback } from 'react'; // Import useCallback\r\nimport { useRouter } from 'next/navigation';\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\nimport { trackEvent } from '@/lib/analytics/eventTracking';\r\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":58,"fix":{"range":[325,325],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":45,"fix":{"range":[371,371],"text":"\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":64,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":64,"endColumn":37},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'feedbackConfig' object makes the dependencies of useCallback Hook (at line 130) change on every render. To fix this, wrap the initialization of 'feedbackConfig' in its own useMemo() Hook.","line":68,"column":9,"nodeType":"VariableDeclarator","endLine":68,"endColumn":57},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'feedbackConfig' object makes the dependencies of useEffect Hook (at line 176) change on every render. To fix this, wrap the initialization of 'feedbackConfig' in its own useMemo() Hook.","line":68,"column":9,"nodeType":"VariableDeclarator","endLine":68,"endColumn":57},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'completedFeedbackTypes' is assigned a value but never used.","line":111,"column":77,"nodeType":null,"messageId":"unusedVar","endLine":111,"endColumn":99}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":4,"fixableWarningCount":0,"source":"'use client'; // Deze hook is bedoeld voor client-side gebruik\r\nimport { trackEvent } from '@/lib/analytics/eventTracking';\r\n// import { useLocalStorage } from '@/hooks/useLocalStorage'; // Placeholder hook - Unused as local placeholder is used\r\nimport { useEffect, useState, useCallback } from 'react'; // Import useCallback\r\nimport { useRouter } from 'next/navigation';\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\n\r\ninterface FeedbackConfig {\r\n  sessionThreshold: number;\r\n  daysThreshold: number;\r\n  daysInterval: number;\r\n  maxPrompts: number;\r\n  initialDelayMs: number; // Duidelijkere naam\r\n}\r\n\r\nconst defaultConfig: FeedbackConfig = {\r\n  sessionThreshold: 3,\r\n  daysThreshold: 7,\r\n  daysInterval: 30,\r\n  maxPrompts: 3,\r\n  initialDelayMs: 60 * 1000, // 1 minuut\r\n};\r\n\r\nexport type FeedbackType = 'nps' | 'general_satisfaction' | 'feature_request' | 'cancellation_reason';\r\n\r\ninterface FeedbackState {\r\n  lastPromptDateISO: string | null; // Gebruik ISO string voor consistentie\r\n  promptCount: number;\r\n  sessionsCount: number;\r\n  firstUseDateISO: string | null; // Gebruik ISO string\r\n  completedFeedbackTypes: FeedbackType[]; // Hernoemd voor duidelijkheid\r\n}\r\n\r\n// Placeholder voor useLocalStorage hook\r\nfunction useLocalStoragePlaceholder<T>(key: string, initialValue: T): [T, (value: T | ((val: T) => T)) => void] {\r\n  const [storedValue, setStoredValue] = useState<T>(() => {\r\n    if (typeof window === 'undefined') return initialValue;\r\n    try {\r\n      const item = window.localStorage.getItem(key);\r\n      return item ? JSON.parse(item) : initialValue;\r\n    } catch (error) {\r\n      console.warn(`Error reading localStorage key “${key}”:`, error);\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  const setValue = (value: T | ((val: T) => T)) => {\r\n    if (typeof window === 'undefined') {\r\n        console.warn(`localStorage not available for key \"${key}\" (server-side?)`);\r\n        return;\r\n    }\r\n    try {\r\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\r\n      setStoredValue(valueToStore);\r\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n    } catch (error) {\r\n      console.warn(`Error setting localStorage key “${key}”:`, error);\r\n    }\r\n  };\r\n  return [storedValue, setValue];\r\n}\r\n\r\n\r\nexport function useFeedbackCollector(config?: Partial<FeedbackConfig>) {\r\n  const { user } = useAuth();\r\n  const router = useRouter();\r\n  \r\n  const feedbackConfig = { ...defaultConfig, ...config };\r\n  \r\n  const [feedbackState, setFeedbackState] = useLocalStoragePlaceholder<FeedbackState>(\r\n    `fibro_feedback_state_${user?.id || 'guest'}`, // User-specifieke key\r\n    {\r\n      lastPromptDateISO: null,\r\n      promptCount: 0,\r\n      sessionsCount: 0,\r\n      firstUseDateISO: null,\r\n      completedFeedbackTypes: [],\r\n    }\r\n  );\r\n\r\n  // Sessie tracking: Increment session count on mount if user is present\r\n  useEffect(() => {\r\n    if (user && typeof window !== 'undefined') {\r\n        // Check if this is a new session (e.g. by comparing with a session start timestamp)\r\n        // For simplicity, we increment on every \"mount\" of this hook for a logged-in user,\r\n        // assuming it's instantiated once per user session at a high level.\r\n        // A more robust session tracking might use sessionStorage or a timestamp.\r\n        \r\n        setFeedbackState(prev => {\r\n            const nowISO = new Date().toISOString();\r\n            const newSessionsCount = (sessionStorage.getItem('fibro_session_tracked_this_instance') !== 'true') \r\n                                     ? prev.sessionsCount + 1 \r\n                                     : prev.sessionsCount;\r\n            if (newSessionsCount > prev.sessionsCount) {\r\n                 sessionStorage.setItem('fibro_session_tracked_this_instance', 'true');\r\n            }\r\n\r\n            return {\r\n                ...prev,\r\n                sessionsCount: newSessionsCount,\r\n                firstUseDateISO: prev.firstUseDateISO || nowISO,\r\n            };\r\n        });\r\n    }\r\n  }, [user, setFeedbackState]);\r\n\r\n\r\n  const shouldPromptFeedback = useCallback((): boolean => {\r\n    if (!user || !feedbackState) return false;\r\n\r\n    const { sessionsCount, firstUseDateISO, lastPromptDateISO, promptCount, completedFeedbackTypes } = feedbackState;\r\n    const { sessionThreshold, daysThreshold, daysInterval, maxPrompts } = feedbackConfig;\r\n\r\n    if (promptCount >= maxPrompts) return false;\r\n    if (sessionsCount < sessionThreshold) return false;\r\n\r\n    if (firstUseDateISO) {\r\n      const daysSinceFirstUse = (Date.now() - new Date(firstUseDateISO).getTime()) / (1000 * 60 * 60 * 24);\r\n      if (daysSinceFirstUse < daysThreshold) return false;\r\n    } else {\r\n      return false; // No first use date, shouldn't happen if session tracking is working\r\n    }\r\n\r\n    if (lastPromptDateISO) {\r\n      const daysSinceLastPrompt = (Date.now() - new Date(lastPromptDateISO).getTime()) / (1000 * 60 * 60 * 24);\r\n      if (daysSinceLastPrompt < daysInterval) return false;\r\n    }\r\n    \r\n    return true;\r\n  }, [user, feedbackState, feedbackConfig]);\r\n\r\n  const promptFeedback = useCallback((type: FeedbackType, forcePrompt = false): boolean => {\r\n    if (!user) return false;\r\n    if (!forcePrompt && (!shouldPromptFeedback() || feedbackState.completedFeedbackTypes.includes(type))) {\r\n      return false;\r\n    }\r\n\r\n    setFeedbackState(prev => ({\r\n      ...prev,\r\n      lastPromptDateISO: new Date().toISOString(),\r\n      promptCount: prev.completedFeedbackTypes.includes(type) ? prev.promptCount : prev.promptCount + 1,\r\n    }));\r\n    \r\n    trackEvent('feedback_prompt_shown', { feedback_type: type });\r\n    router.push(`/feedback?type=${type}`); // Generieke feedback pagina\r\n    return true;\r\n  }, [user, shouldPromptFeedback, feedbackState, setFeedbackState, router]);\r\n  \r\n  const markFeedbackCompleted = useCallback((type: FeedbackType) => {\r\n    if (!feedbackState.completedFeedbackTypes.includes(type)) {\r\n      setFeedbackState(prev => ({\r\n        ...prev,\r\n        completedFeedbackTypes: [...prev.completedFeedbackTypes, type],\r\n      }));\r\n      trackEvent('feedback_submission_success', { feedback_type: type });\r\n    }\r\n  }, [feedbackState, setFeedbackState]);\r\n  \r\n  // Effect om periodiek te checken of feedback gevraagd moet worden\r\n  useEffect(() => {\r\n    if (!user || typeof window === 'undefined') return;\r\n\r\n    const timer = setTimeout(() => {\r\n      if (shouldPromptFeedback()) {\r\n        // Bepaal welk type feedback te vragen. Voorbeeld: NPS als eerste.\r\n        if (!feedbackState.completedFeedbackTypes.includes('nps')) {\r\n          promptFeedback('nps');\r\n        } else if (!feedbackState.completedFeedbackTypes.includes('general_satisfaction')) {\r\n          promptFeedback('general_satisfaction');\r\n        }\r\n        // Voeg meer logica toe voor andere types\r\n      }\r\n    }, feedbackConfig.initialDelayMs);\r\n\r\n    return () => clearTimeout(timer);\r\n  }, [user, feedbackConfig, feedbackState, shouldPromptFeedback, promptFeedback]);\r\n  \r\n  return {\r\n    promptFeedback,\r\n    markFeedbackCompleted,\r\n    shouldPromptFeedback, // Exposeer voor conditionele UI elementen\r\n    feedbackState, // Voor debug of geavanceerde UI\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\lib\\monitoring\\logger.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[163,166],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[163,166],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":14,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":15},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":23,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":23,"endColumn":9},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":25,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":25,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[765,811],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":29,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":29,"endColumn":9},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":35,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":35,"endColumn":10},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1154,1157],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1154,1157],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":43,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":43,"endColumn":10}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Basic placeholder logger\r\n// In a real app, this would integrate with a proper logging service (Sentry, Logtail, etc.)\r\n\r\ninterface LogData {\r\n  [key: string]: any;\r\n}\r\n\r\nconst formatLog = (level: string, message: string, data?: LogData) => {\r\n  const timestamp = new Date().toISOString();\r\n  let logString = `${timestamp} [${level.toUpperCase()}] ${message}`;\r\n  if (data && Object.keys(data).length > 0) {\r\n    try {\r\n      logString += ` | Data: ${JSON.stringify(data)}`;\r\n    } catch (e) {\r\n      // Fallback if data cannot be stringified\r\n      logString += ` | Data: (Unserializable)`;\r\n    }\r\n  }\r\n  return logString;\r\n};\r\n\r\nexport const logger = {\r\n  info: (message: string, data?: LogData) => {\r\n    if (process.env.NODE_ENV === 'development') {\r\n      console.log(formatLog('info', message, data));\r\n    }\r\n    // TODO: Send to remote logging service in production\r\n  },\r\n  warn: (message: string, data?: LogData) => {\r\n    if (process.env.NODE_ENV === 'development') {\r\n      console.warn(formatLog('warn', message, data));\r\n    }\r\n    // TODO: Send to remote logging service in production\r\n  },\r\n  error: (message: string, error?: Error | any, data?: LogData) => {\r\n    const errorInfo = error instanceof Error ? { name: error.name, message: error.message, stack: error.stack } : { error_details: error };\r\n    const combinedData = { ...data, ...errorInfo };\r\n    if (process.env.NODE_ENV === 'development') {\r\n      console.error(formatLog('error', message, combinedData));\r\n    }\r\n    // TODO: Send to remote logging service in production\r\n  },\r\n  debug: (message: string, data?: LogData) => {\r\n    if (process.env.NODE_ENV === 'development') { // Only log debug in development\r\n      console.debug(formatLog('debug', message, data));\r\n    }\r\n  }\r\n};\r\n\r\n// Example usage:\r\n// logger.info('User logged in', { userId: '123' });\r\n// logger.error('Failed to fetch data', new Error('Network timeout'), { endpoint: '/api/data' });\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\lib\\monitoring\\performance-metrics.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":109,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":109,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2710,2771],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":232,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":232,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5934,5937],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5934,5937],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { getCLS, getFID, getLCP, getFCP, getTTFB } from 'web-vitals';\r\n\r\ninterface MetricReport {\r\n  name: string;\r\n  value: number;\r\n  id: string;\r\n  delta: number;\r\n  navigationType?: string;\r\n}\r\n\r\ntype ReportCallback = (metric: MetricReport) => void;\r\n\r\n/**\r\n * Available metric types for monitoring\r\n */\r\nexport enum MetricType {\r\n  CLS = 'CLS', // Cumulative Layout Shift\r\n  FID = 'FID', // First Input Delay\r\n  LCP = 'LCP', // Largest Contentful Paint\r\n  FCP = 'FCP', // First Contentful Paint\r\n  TTFB = 'TTFB' // Time to First Byte\r\n}\r\n\r\n/**\r\n * Configuration options for performance monitoring\r\n */\r\nexport interface PerformanceMonitoringOptions {\r\n  /** Which metrics to monitor */\r\n  metrics?: MetricType[];\r\n  /** Custom reporting function */\r\n  reportHandler?: ReportCallback;\r\n  /** Whether to log metrics to console */\r\n  logToConsole?: boolean;\r\n  /** Whether to send metrics to analytics */\r\n  sendToAnalytics?: boolean;\r\n  /** Custom analytics event name */\r\n  analyticsEventName?: string;\r\n}\r\n\r\n/**\r\n * Default options for performance monitoring\r\n */\r\nconst defaultOptions: PerformanceMonitoringOptions = {\r\n  metrics: [\r\n    MetricType.CLS,\r\n    MetricType.FID,\r\n    MetricType.LCP,\r\n    MetricType.FCP,\r\n    MetricType.TTFB\r\n  ],\r\n  logToConsole: process.env.NODE_ENV === 'development',\r\n  sendToAnalytics: process.env.NODE_ENV === 'production',\r\n  analyticsEventName: 'web_vitals'\r\n};\r\n\r\n/**\r\n * Initialize performance monitoring\r\n * \r\n * @param options Configuration options\r\n */\r\nexport function initPerformanceMonitoring(\r\n  options: PerformanceMonitoringOptions = {}\r\n): void {\r\n  const config = { ...defaultOptions, ...options };\r\n  \r\n  // Create the metric handler\r\n  const reportMetric = createMetricHandler(config);\r\n  \r\n  // Initialize the metrics to monitor\r\n  if (config.metrics?.includes(MetricType.CLS)) {\r\n    getCLS(reportMetric);\r\n  }\r\n  \r\n  if (config.metrics?.includes(MetricType.FID)) {\r\n    getFID(reportMetric);\r\n  }\r\n  \r\n  if (config.metrics?.includes(MetricType.LCP)) {\r\n    getLCP(reportMetric);\r\n  }\r\n  \r\n  if (config.metrics?.includes(MetricType.FCP)) {\r\n    getFCP(reportMetric);\r\n  }\r\n  \r\n  if (config.metrics?.includes(MetricType.TTFB)) {\r\n    getTTFB(reportMetric);\r\n  }\r\n}\r\n\r\n/**\r\n * Create a metric handler based on configuration\r\n * \r\n * @param config Configuration options\r\n * @returns Metric handler function\r\n */\r\nfunction createMetricHandler(\r\n  config: PerformanceMonitoringOptions\r\n): ReportCallback {\r\n  return (metric: MetricReport) => {\r\n    // Use custom handler if provided\r\n    if (config.reportHandler) {\r\n      config.reportHandler(metric);\r\n      return;\r\n    }\r\n    \r\n    // Log to console if enabled\r\n    if (config.logToConsole) {\r\n      console.log(`[Performance] ${metric.name}: ${metric.value}`);\r\n    }\r\n    \r\n    // Send to analytics if enabled\r\n    if (config.sendToAnalytics) {\r\n      sendToAnalytics(metric, config.analyticsEventName || 'web_vitals');\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Send metric to analytics\r\n * \r\n * @param metric The metric to send\r\n * @param eventName The analytics event name\r\n */\r\nfunction sendToAnalytics(metric: MetricReport, eventName: string): void {\r\n  try {\r\n    // Check if window and analytics are available\r\n    if (typeof window === 'undefined' || !window.gtag) {\r\n      return;\r\n    }\r\n    \r\n    // Send to Google Analytics if available\r\n    window.gtag('event', eventName, {\r\n      event_category: 'Web Vitals',\r\n      event_label: metric.id,\r\n      value: Math.round(metric.name === 'CLS' ? metric.value * 1000 : metric.value),\r\n      non_interaction: true,\r\n      metric_name: metric.name,\r\n      metric_value: metric.value,\r\n      metric_delta: metric.delta\r\n    });\r\n  } catch (error) {\r\n    console.error('[Performance] Failed to send metrics to analytics:', error);\r\n  }\r\n}\r\n\r\n/**\r\n * Get performance marks and measures\r\n * \r\n * @returns Object containing performance marks and measures\r\n */\r\nexport function getPerformanceMarks(): {\r\n  marks: PerformanceMark[];\r\n  measures: PerformanceMeasure[];\r\n} {\r\n  if (typeof window === 'undefined' || !window.performance) {\r\n    return { marks: [], measures: [] };\r\n  }\r\n  \r\n  return {\r\n    marks: window.performance.getEntriesByType('mark') as PerformanceMark[],\r\n    measures: window.performance.getEntriesByType('measure') as PerformanceMeasure[]\r\n  };\r\n}\r\n\r\n/**\r\n * Create a performance mark\r\n * \r\n * @param name Mark name\r\n */\r\nexport function markPerformance(name: string): void {\r\n  if (typeof window === 'undefined' || !window.performance) {\r\n    return;\r\n  }\r\n  \r\n  try {\r\n    window.performance.mark(name);\r\n  } catch (error) {\r\n    console.error(`[Performance] Failed to create mark \"${name}\":`, error);\r\n  }\r\n}\r\n\r\n/**\r\n * Measure time between two marks\r\n * \r\n * @param name Measure name\r\n * @param startMark Start mark name\r\n * @param endMark End mark name (optional, defaults to now)\r\n * @returns Duration in milliseconds\r\n */\r\nexport function measurePerformance(\r\n  name: string,\r\n  startMark: string,\r\n  endMark?: string\r\n): number {\r\n  if (typeof window === 'undefined' || !window.performance) {\r\n    return 0;\r\n  }\r\n  \r\n  try {\r\n    window.performance.measure(name, startMark, endMark);\r\n    const measure = window.performance.getEntriesByName(name, 'measure')[0];\r\n    return measure.duration;\r\n  } catch (error) {\r\n    console.error(`[Performance] Failed to measure \"${name}\":`, error);\r\n    return 0;\r\n  }\r\n}\r\n\r\n/**\r\n * Clear all performance marks and measures\r\n */\r\nexport function clearPerformanceMarks(): void {\r\n  if (typeof window === 'undefined' || !window.performance) {\r\n    return;\r\n  }\r\n  \r\n  try {\r\n    window.performance.clearMarks();\r\n    window.performance.clearMeasures();\r\n  } catch (error) {\r\n    console.error('[Performance] Failed to clear marks and measures:', error);\r\n  }\r\n}\r\n\r\n// Add gtag to window type\r\ndeclare global {\r\n  interface Window {\r\n    gtag: (\r\n      command: string,\r\n      action: string,\r\n      params: Record<string, any>\r\n    ) => void;\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\lib\\onboarding\\onboardingEngine.ts","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":92,"fix":{"range":[286,286],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":40,"fix":{"range":[537,537],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/types` type import should occur before type import of `@supabase/supabase-js`","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":40,"fix":{"range":[400,539],"text":"import type { Profile } from '@/types'; // Project Profile type\r\nimport type { User } from '@supabase/supabase-js'; // Supabase User type\r\n"}},{"ruleId":"no-restricted-imports","severity":2,"message":"'@/lib/supabase' import is restricted from being used. Directe Supabase client calls mogen niet in presentational components.","line":7,"column":1,"nodeType":"ImportDeclaration","messageId":"pathWithCustomMessage","endLine":7,"endColumn":59},{"ruleId":"import/order","severity":2,"message":"`@/lib/supabase` import should occur before import of `@/utils/email-templates`","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":59,"fix":{"range":[195,625],"text":"import { getSupabaseBrowserClient } from '@/lib/supabase'; // Om profiel op te halen\r\nimport { EmailTemplate, getEmailContent, WelcomeEmailData } from '@/utils/email-templates';\r\n// import { sendEmail } from '@/lib/email/sendEmail'; // Placeholder - team implementeert e-mail verzendlogica\r\nimport type { User } from '@supabase/supabase-js'; // Supabase User type\r\nimport type { Profile } from '@/types'; // Project Profile type\r\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getSupabaseBrowserClient' is defined but never used.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":34},{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'getSupabaseBrowserClient' is defined but never used.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":34,"fix":{"range":[539,598],"text":""}},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@/lib/supabase'.","line":7,"column":42,"nodeType":"Literal","endLine":7,"endColumn":58},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":15,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":15,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[932,1028],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":56,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":56,"endColumn":31},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":115,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":115,"endColumn":38},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'data' should be typed with a non-any type.","line":115,"column":77,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":115,"endColumn":87},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":115,"column":84,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":115,"endColumn":87,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5360,5363],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5360,5363],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":5,"fixableWarningCount":0,"source":"import { analytics } from '@/lib/analytics/eventTracking';\r\nimport { trackOnboardingStep, OnboardingStepName } from '@/lib/analytics/userJourney'; // getLatestCompletedOnboardingStep was unused\r\nimport { EmailTemplate, getEmailContent, WelcomeEmailData } from '@/utils/email-templates';\r\n// import { sendEmail } from '@/lib/email/sendEmail'; // Placeholder - team implementeert e-mail verzendlogica\r\nimport type { User } from '@supabase/supabase-js'; // Supabase User type\r\nimport type { Profile } from '@/types'; // Project Profile type\r\nimport { getSupabaseBrowserClient } from '@/lib/supabase'; // Om profiel op te halen\r\n\r\n// Placeholder voor sendEmail functie\r\nasync function sendEmail(options: { to: string | undefined; subject: string; html: string; text: string; }): Promise<void> {\r\n  if (!options.to) {\r\n    console.warn(\"[OnboardingEngine] sendEmail: Ontvanger (to) is niet gedefinieerd.\", options);\r\n    return;\r\n  }\r\n  console.log(`[OnboardingEngine] Mock sendEmail to: ${options.to}, subject: ${options.subject}`);\r\n  // In een echte implementatie, roep hier je e-mail service aan (bv. Supabase Edge Function, Resend, SendGrid)\r\n  return Promise.resolve();\r\n}\r\n\r\n\r\nexport interface OnboardingEngineConfig {\r\n  daysBetweenEmails?: number;\r\n  maxOnboardingEmails?: number;\r\n  emailsEnabled?: boolean;\r\n  notificationsEnabled?: boolean; // Voor in-app notificaties\r\n  // URLs voor e-mail templates\r\n  dashboardUrl?: string;\r\n  supportEmail?: string;\r\n  logoUrl?: string;\r\n  companyName?: string;\r\n  preferencesUrl?: string;\r\n  privacyUrl?: string;\r\n}\r\n\r\nexport class OnboardingEngine {\r\n  private config: Required<OnboardingEngineConfig>; // Alle properties zijn nu required\r\n  // private supabase = getSupabaseBrowserClient(); // Unused\r\n\r\n  constructor(config?: Partial<OnboardingEngineConfig>) {\r\n    // Default configuratie\r\n    this.config = {\r\n      daysBetweenEmails: 3,\r\n      maxOnboardingEmails: 5,\r\n      emailsEnabled: process.env.NODE_ENV === 'production', // Alleen in productie standaard\r\n      notificationsEnabled: true,\r\n      dashboardUrl: process.env.NEXT_PUBLIC_APP_URL ? `${process.env.NEXT_PUBLIC_APP_URL}/dashboard` : 'http://localhost:3000/dashboard',\r\n      supportEmail: 'support@fibroguardian.be',\r\n      logoUrl: process.env.NEXT_PUBLIC_APP_URL ? `${process.env.NEXT_PUBLIC_APP_URL}/logo.png` : 'http://localhost:3000/logo.png',\r\n      companyName: 'FibroGuardian Pro',\r\n      preferencesUrl: process.env.NEXT_PUBLIC_APP_URL ? `${process.env.NEXT_PUBLIC_APP_URL}/instellingen/voorkeuren` : 'http://localhost:3000/instellingen/voorkeuren',\r\n      privacyUrl: process.env.NEXT_PUBLIC_APP_URL ? `${process.env.NEXT_PUBLIC_APP_URL}/privacy` : 'http://localhost:3000/privacy',\r\n      ...config, // Overschrijf defaults met meegegeven config\r\n    };\r\n  }\r\n  \r\n  public async startOnboarding(user: User, profile: Profile) {\r\n    if (!user || !user.email) {\r\n        console.error(\"[OnboardingEngine] Kan onboarding niet starten: user of user.email is niet beschikbaar.\");\r\n        return;\r\n    }\r\n    if (!profile) {\r\n        console.error(\"[OnboardingEngine] Kan onboarding niet starten: profile is niet beschikbaar.\");\r\n        return;\r\n    }\r\n\r\n    trackOnboardingStep('signup_started', { userId: user.id, userType: profile.type });\r\n    trackOnboardingStep('account_created', { userId: user.id, userType: profile.type });\r\n    \r\n    if (this.config.emailsEnabled) {\r\n      await this.sendWelcomeEmail(user, profile);\r\n    }\r\n    // await this.scheduleNextOnboardingAction(user, profile); // Hernoemd voor duidelijkheid\r\n  }\r\n  \r\n  private async sendWelcomeEmail(user: User, profile: Profile) {\r\n    const emailData: WelcomeEmailData = {\r\n      firstName: profile.voornaam || 'Gebruiker',\r\n      userType: profile.type,\r\n      dashboardUrl: this.config.dashboardUrl,\r\n      supportEmail: this.config.supportEmail,\r\n      logoUrl: this.config.logoUrl,\r\n      companyName: this.config.companyName,\r\n      year: new Date().getFullYear(),\r\n      preferencesUrl: this.config.preferencesUrl,\r\n      privacyUrl: this.config.privacyUrl,\r\n    };\r\n    \r\n    const { html, text } = getEmailContent(EmailTemplate.WELCOME, emailData);\r\n    \r\n    await sendEmail({\r\n      to: user.email, // user.email zou hier gedefinieerd moeten zijn\r\n      subject: `Welkom bij ${this.config.companyName}!`,\r\n      html,\r\n      text\r\n    });\r\n    \r\n    analytics.trackEvent('email_sent', {\r\n      email_template: EmailTemplate.WELCOME,\r\n      user_type: profile.type,\r\n    });\r\n  }\r\n  \r\n  // De scheduling logica (scheduleNextOnboardingAction, etc.) is complex en vereist een\r\n  // backend job scheduler (bv. cron jobs, Supabase scheduled functions, of een queue systeem).\r\n  // Dit valt buiten de scope van een client-side library.\r\n  // De functies hieronder zijn placeholders om het concept te illustreren.\r\n  // In een echte implementatie zouden deze API calls doen naar een backend service.\r\n\r\n  // private async scheduleNextOnboardingAction(user: User, profile: Profile) {\r\n  //   const latestStep = getLatestCompletedOnboardingStep(); // Haal de laatst voltooide stap op\r\n  //   console.log(`[OnboardingEngine] User ${user.id}, latest completed step: ${latestStep}`);\r\n  //   // TODO: Implementeer logica om volgende actie te bepalen en in te plannen\r\n  // }\r\n\r\n  public async completeOnboardingStep(user: User, step: OnboardingStepName, data?: any) {\r\n    if (!user) return;\r\n    trackOnboardingStep(step, { userId: user.id, ...data });\r\n    \r\n    // const profile = await this.getUserProfile(user.id); // Haal up-to-date profiel\r\n    // if (profile) {\r\n    //   await this.scheduleNextOnboardingAction(user, profile);\r\n    // }\r\n  }\r\n  \r\n  // private async getUserProfile(userId: string): Promise<Profile | null> {\r\n  //   const { data, error } = await this.supabase\r\n  //     .from('profiles')\r\n  //     .select('*')\r\n  //     .eq('id', userId)\r\n  //     .single();\r\n  //   if (error) {\r\n  //     console.error(`[OnboardingEngine] Error fetching profile for ${userId}:`, error);\r\n  //     return null;\r\n  //   }\r\n  //   return data as Profile | null;\r\n  // }\r\n}\r\n\r\n// Singleton instance (optioneel, kan ook per context/gebruik aangemaakt worden)\r\n// export const onboardingEngine = new OnboardingEngine();\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\lib\\performance\\codeSplitting.js","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":36,"fix":{"range":[242,242],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`react` import should occur before import of `next/dynamic`","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":47,"fix":{"range":[207,316],"text":"import React, { lazy, Suspense } from 'react'; // Import React for JSX\r\nimport dynamic from 'next/dynamic';\r\n"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":13,"column":8,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":13,"endColumn":57,"fix":{"range":[429,466],"text":"flex h-64 items-center justify-center"}},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":14,"column":10,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":14,"endColumn":105,"fix":{"range":[490,573],"text":"h-12 w-12 animate-spin rounded-full border-4 border-purple-600 border-t-transparent"}},{"ruleId":"tailwindcss/enforces-shorthand","severity":1,"message":"Classnames 'w-12, h-12' could be replaced by the 'size-12' shorthand!","line":14,"column":10,"nodeType":"JSXAttribute","messageId":"shorthandCandidateDetected","endLine":14,"endColumn":105,"fix":{"range":[490,573],"text":"size-12 border-4 border-purple-600 border-t-transparent rounded-full animate-spin"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'componentImportFn' should be typed.","line":21,"column":31,"nodeType":"Identifier","messageId":"missingArgType","endLine":21,"endColumn":48},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":21,"column":64,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":21,"endColumn":66},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@/components/rapporten/PDFViewer'.","line":44,"column":16,"nodeType":"Literal","endLine":44,"endColumn":50},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'factory' should be typed.","line":59,"column":33,"nodeType":"Identifier","messageId":"missingArgType","endLine":59,"endColumn":40},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'props' should be typed.","line":62,"column":11,"nodeType":"Identifier","messageId":"missingArgType","endLine":62,"endColumn":16},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":62,"column":18,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":62,"endColumn":20}],"suppressedMessages":[{"ruleId":"react/display-name","severity":2,"message":"Component definition is missing display name","line":62,"column":10,"nodeType":"ArrowFunctionExpression","messageId":"noDisplayName","endLine":66,"endColumn":4,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":3,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":2,"fixableWarningCount":3,"source":"/**\r\n * Code Splitting Helpers\r\n * \r\n * Dit bestand bevat nuttige helpers voor dynamische imports en code splitting.\r\n * Deze zorgen voor kleinere initiële JavaScript bundles en snellere laadtijden.\r\n */\r\n\r\nimport dynamic from 'next/dynamic';\r\nimport React, { lazy, Suspense } from 'react'; // Import React for JSX\r\n\r\n// Standaard laadcomponent (kan uitgebreid worden)\r\nconst DefaultLoadingComponent = () => (\r\n  <div className=\"flex items-center justify-center h-64\">\r\n    <div className=\"w-12 h-12 border-4 border-purple-600 border-t-transparent rounded-full animate-spin\"></div>\r\n  </div>\r\n);\r\n\r\n// Laad componenten dynamisch met Next.js dynamic import\r\n// De componentPath moet relatief zijn aan de root van het project of een alias gebruiken.\r\n// Voorbeeld: '@/components/MyComponent' of '../components/MyComponent'\r\nexport const dynamicImport = (componentImportFn, options = {}) => {\r\n  return dynamic(componentImportFn, {\r\n    loading: () => options.loadingComponent || <DefaultLoadingComponent />,\r\n    ssr: false, // Standaard SSR uitschakelen voor client-only componenten, kan per component overschreven worden\r\n    ...options,\r\n  });\r\n};\r\n\r\n// --- Voorbeelden van dynamisch geladen componenten/pagina's ---\r\n// (Pas de paden aan naar de daadwerkelijke locatie van je componenten)\r\n\r\n// Dynamisch laden van grotere pagina's (als ze niet al via Next.js routing code-split zijn)\r\n// export const DashboardPage = dynamicImport(() => import('@/app/dashboard/page'));\r\n// export const RapportenPage = dynamicImport(() => import('@/app/rapporten/page'));\r\n// export const ReflectiesPage = dynamicImport(() => import('@/app/reflecties/page'));\r\n\r\n// Dynamisch laden van zware UI componenten\r\nexport const HealthMetricsChart = dynamicImport(\r\n  () => import('@/components/dashboard/HealthMetricsChart'), \r\n  { ssr: true } // Charts kunnen vaak op de server gerenderd worden\r\n);\r\n\r\nexport const PDFViewer = dynamicImport(\r\n  () => import('@/components/rapporten/PDFViewer'), // Stel dat dit component bestaat\r\n  { ssr: false } // PDF viewer is typisch client-side\r\n);\r\n\r\nexport const AIInsightVisualization = dynamicImport(\r\n  () => import('@/components/ai/AIInsightVisualization'), \r\n  { ssr: false } // AI visualisaties vaak client-side\r\n);\r\n\r\n/**\r\n * Lazy load routes voor de applicatie met React.lazy en Suspense.\r\n * Dit is meer voor componenten binnen een pagina, Next.js's `dynamic` is beter voor pagina-level splitting.\r\n * @param factory Een functie die een Promise retourneert naar de module import, bv. () => import('./MyComponent')\r\n * @param fallback Optional fallback component while loading.\r\n */\r\nexport const lazyRouteImport = (factory, fallback = <DefaultLoadingComponent />) => {\r\n  const Component = lazy(factory);\r\n  // eslint-disable-next-line react/display-name\r\n  return (props) => (\r\n    <Suspense fallback={fallback}>\r\n      <Component {...props} />\r\n    </Suspense>\r\n  );\r\n};\r\n\r\n// Voorbeeldgebruik voor een component binnen een pagina:\r\n// const HeavyUserProfileSection = lazyRouteImport(() => import('@/components/profile/HeavyUserProfileSection'));\r\n// In je component: <HeavyUserProfileSection userId={user.id} />\r\n\r\n// Opmerking: Voor pagina-gebaseerde code splitting, is Next.js's file-system routing\r\n// (pagina's in de `app` of `pages` directory) meestal voldoende en de aanbevolen methode.\r\n// `next/dynamic` is nuttig voor componenten die niet direct een route zijn maar wel groot.\r\n// `React.lazy` is meer voor componenten binnen een al geladen pagina/route.","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\lib\\performance\\imageLazyOptimizer.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":87,"fix":{"range":[124,124],"text":"\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ImgHTMLAttributes' is defined but never used.","line":2,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":56},{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'ImgHTMLAttributes' is defined but never used.","line":2,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":56,"fix":{"range":[52,71],"text":""}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":24,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":24,"endColumn":34},{"ruleId":"tailwindcss/classnames-order","severity":1,"message":"Invalid Tailwind CSS classnames order","line":120,"column":11,"nodeType":"JSXAttribute","messageId":"invalidOrder","endLine":120,"endColumn":48,"fix":{"range":[4449,4474],"text":"animate-pulse bg-gray-200"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":2,"fixableWarningCount":1,"source":"'use client';\r\nimport { useState, useEffect, useRef, ImgHTMLAttributes, CSSProperties } from 'react'; // Added CSSProperties\r\nimport Image, { ImageProps } from 'next/image'; // Import ImageProps\r\n\r\n// Combine NextImageProps with standard Img attributes, but Omit src, alt, width, height as they are explicitly defined\r\ninterface LazyImageProps extends Omit<ImageProps, 'src' | 'alt' | 'width' | 'height' | 'style' | 'placeholder'> {\r\n  src: string; // src is required\r\n  alt: string; // alt is required\r\n  width?: number | `${number}` | undefined; // Use Next.js Image's width type\r\n  height?: number | `${number}` | undefined; // Use Next.js Image's height type\r\n  blurEffect?: boolean; // Renamed from blur to avoid conflict with NextImage's blurDataURL\r\n  priority?: boolean;\r\n  placeholder?: \"blur\" | \"empty\" | undefined; // Use Next.js Image's placeholder type\r\n  objectFit?: CSSProperties['objectFit']; // Use CSSProperties for objectFit\r\n  className?: string; // Allow passing a className for the wrapper\r\n  imageClassName?: string; // Allow passing a className for the Next/Image component itself\r\n  wrapperStyle?: CSSProperties; // Allow custom styles for the wrapper\r\n}\r\n\r\n/**\r\n * Geoptimaliseerde afbeeldingscomponent met lazy loading en optioneel blur-up effect.\r\n * Gebruikt Next/Image voor optimalisaties.\r\n */\r\nexport default function LazyImage({\r\n  src,\r\n  alt,\r\n  width,\r\n  height,\r\n  blurEffect = true, // Default to true for the blur-up effect\r\n  priority = false,\r\n  placeholder = 'empty', // Default Next/Image placeholder\r\n  objectFit = 'cover',\r\n  className = '',\r\n  imageClassName = '',\r\n  wrapperStyle = {},\r\n  ...rest // Spread remaining Next/Image props\r\n}: LazyImageProps) {\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [isInView, setIsInView] = useState(false);\r\n  const imageRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (priority) {\r\n      setIsInView(true);\r\n      setIsLoaded(true); // Assume priority images are loaded quickly or are critical\r\n      return;\r\n    }\r\n\r\n    const observer = new IntersectionObserver(\r\n      (entries) => {\r\n        entries.forEach((entry) => {\r\n          if (entry.isIntersecting) {\r\n            setIsInView(true);\r\n            observer.unobserve(entry.target); // Disconnect after first intersection\r\n          }\r\n        });\r\n      },\r\n      { rootMargin: '200px 0px', threshold: 0.01 } // Load 200px before they enter viewport\r\n    );\r\n\r\n    const currentRef = imageRef.current;\r\n    if (currentRef) {\r\n      observer.observe(currentRef);\r\n    }\r\n\r\n    return () => {\r\n      if (currentRef) {\r\n        observer.unobserve(currentRef);\r\n      }\r\n    };\r\n  }, [priority]);\r\n\r\n  // For blur-up effect, Next/Image's `placeholder=\"blur\"` and `blurDataURL` are preferred.\r\n  // This custom blur is a fallback or alternative.\r\n  const imageStyle: CSSProperties = {\r\n    transition: 'filter 0.4s ease-in-out, opacity 0.4s ease-in-out',\r\n    width: '100%', // Ensure image fills container\r\n    height: '100%',\r\n    objectFit: objectFit,\r\n  };\r\n\r\n  if (blurEffect && !isLoaded && isInView) {\r\n    imageStyle.filter = 'blur(8px)'; // Adjust blur amount as needed\r\n    imageStyle.opacity = 0.8;\r\n  } else if (isLoaded) {\r\n    imageStyle.filter = 'none';\r\n    imageStyle.opacity = 1;\r\n  }\r\n\r\n\r\n  // Determine dimensions for Next/Image. If not provided, use fill.\r\n  const layoutProps = width && height ? { width, height } : { fill: true };\r\n\r\n  return (\r\n    <div \r\n      ref={imageRef} \r\n      className={`relative overflow-hidden ${className}`}\r\n      style={{ \r\n        width: width ? `${width}px` : (layoutProps.fill ? '100%' : 'auto'), \r\n        height: height ? `${height}px` : (layoutProps.fill ? '100%' : 'auto'),\r\n        minHeight: '1px', // Prevent collapse before loading\r\n        ...wrapperStyle \r\n      }}\r\n    >\r\n      {(isInView || priority) ? (\r\n        <Image\r\n          src={src}\r\n          alt={alt}\r\n          {...layoutProps} // Use fill or width/height\r\n          onLoad={() => setIsLoaded(true)}\r\n          style={imageStyle} // Apply custom blur or other styles\r\n          className={imageClassName}\r\n          priority={priority}\r\n          // If using Next/Image's blur, provide blurDataURL\r\n          placeholder={blurEffect && src.startsWith('data:') ? undefined : placeholder} // Don't use Next/Image blur if custom is active and not a data URL\r\n          {...rest}\r\n        />\r\n      ) : (\r\n        <div \r\n          className=\"bg-gray-200 animate-pulse\" \r\n          style={{ \r\n            width: width ? `${width}px` : '100%', \r\n            height: height ? `${height}px` : '100%',\r\n            minHeight: height ? `${height}px` : '100px' // Placeholder min height\r\n          }}\r\n          aria-hidden=\"true\"\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\lib\\performance\\useInfiniteLoading.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":16,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":16,"endColumn":38}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","line":86,"column":6,"nodeType":"Identifier","endLine":86,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'reset'. Either include it or remove the dependency array.","line":86,"column":6,"nodeType":"Identifier","endLine":86,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: [reset]","fix":{"range":[3121,3133],"text":"[reset]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback, useRef, useEffect, DependencyList } from 'react';\r\n\r\ninterface UseInfiniteLoadingOptions<T> {\r\n  initialData?: T[];\r\n  fetchFn: (page: number, limit: number) => Promise<T[]>; // Function to fetch a page of data\r\n  limit?: number; // Number of items per page\r\n  hasMoreInitial?: boolean; // Initial state for hasMore\r\n  threshold?: number; // IntersectionObserver threshold\r\n  rootMargin?: string; // IntersectionObserver rootMargin\r\n  dependencies?: DependencyList; // Additional dependencies for re-fetching/resetting\r\n}\r\n\r\n/**\r\n * Custom hook voor oneindige scroll/lazy loading van gegevens.\r\n */\r\nexport function useInfiniteLoading<T>({\r\n  initialData = [],\r\n  fetchFn,\r\n  limit = 10,\r\n  hasMoreInitial = true,\r\n  threshold = 0.1,\r\n  rootMargin = '200px',\r\n  dependencies = []\r\n}: UseInfiniteLoadingOptions<T>) {\r\n  const [data, setData] = useState<T[]>(initialData);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [error, setError] = useState<Error | null>(null);\r\n  const [hasMore, setHasMore] = useState<boolean>(hasMoreInitial);\r\n  const [page, setPage] = useState<number>(1); // Current page number to fetch\r\n  \r\n  const observer = useRef<IntersectionObserver | null>(null);\r\n\r\n  // Function to load more data\r\n  const loadMore = useCallback(async () => {\r\n    if (loading || !hasMore) return;\r\n    \r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const newItems = await fetchFn(page, limit);\r\n      \r\n      if (newItems.length === 0 || newItems.length < limit) {\r\n        setHasMore(false);\r\n      }\r\n      \r\n      setData(prev => [...prev, ...newItems]);\r\n      setPage(prev => prev + 1);\r\n    } catch (err) {\r\n      console.error('Error loading more items in useInfiniteLoading:', err);\r\n      setError(err instanceof Error ? err : new Error('Fout bij het laden van meer gegevens.'));\r\n      // Optionally set hasMore to false on error to prevent further attempts\r\n      // setHasMore(false); \r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [fetchFn, page, limit, loading, hasMore]); // Added dependencies\r\n\r\n  // IntersectionObserver setup for the last element\r\n  const lastElementRef = useCallback((node: Element | null) => {\r\n    if (loading) return;\r\n    if (observer.current) observer.current.disconnect(); // Disconnect previous observer\r\n    \r\n    observer.current = new IntersectionObserver(entries => {\r\n      if (entries[0].isIntersecting && hasMore) {\r\n        loadMore();\r\n      }\r\n    }, { threshold, rootMargin });\r\n    \r\n    if (node) observer.current.observe(node);\r\n  }, [loading, hasMore, loadMore, threshold, rootMargin]); // Added dependencies\r\n  \r\n  // Reset all state, e.g., when filters change\r\n  const reset = useCallback(() => {\r\n    setData(initialData); // Or just [] if initialData shouldn't persist on reset\r\n    setPage(1);\r\n    setLoading(false);\r\n    setError(null);\r\n    setHasMore(hasMoreInitial);\r\n  }, [initialData, hasMoreInitial]);\r\n\r\n  // Effect to reset when external dependencies change\r\n  useEffect(() => {\r\n    reset();\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, dependencies);\r\n  \r\n  // Cleanup observer on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (observer.current) {\r\n        observer.current.disconnect();\r\n      }\r\n    };\r\n  }, []);\r\n  \r\n  return {\r\n    data,\r\n    loading,\r\n    error,\r\n    hasMore,\r\n    loadMore, // Expose loadMore if manual trigger is needed\r\n    lastElementRef,\r\n    reset,\r\n    page // Expose current page if needed\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\lib\\react-query-provider.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":69,"fix":{"range":[145,145],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":35,"fix":{"range":[181,181],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`react` import should occur before import of `@tanstack/react-query`","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":35,"fix":{"range":[15,183],"text":"import { ReactNode } from 'react';\r\nimport { QueryClientProvider } from '@tanstack/react-query';\r\nimport { ReactQueryDevtools } from '@tanstack/react-query-devtools';\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":8,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":8,"endColumn":35}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":3,"fixableWarningCount":0,"source":"'use client';\r\nimport { QueryClientProvider } from '@tanstack/react-query';\r\nimport { ReactQueryDevtools } from '@tanstack/react-query-devtools';\r\nimport { ReactNode } from 'react';\r\n// Import the centrally configured queryClient instance\r\nimport { queryClient } from './QueryClientConfig'; \r\n\r\nexport function ReactQueryProvider({ children }: { children: ReactNode }) {\r\n  // Use the imported singleton queryClient\r\n  // The useState approach is not needed if queryClient is a stable singleton.\r\n  // The comment about preventing data leakage for SSR is important if the client\r\n  // was created at the module scope on the server. Here, QueryClientConfig.ts\r\n  // creates it at module scope, which is fine for client-side usage.\r\n  // For SSR with App Router, data fetching in Server Components doesn't use this client directly.\r\n  return (\r\n    <QueryClientProvider client={queryClient}>\r\n      {children}\r\n      <ReactQueryDevtools initialIsOpen={false} />\r\n    </QueryClientProvider>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\lib\\security-headers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\lib\\security\\inputValidation.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":157,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":157,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7047,7050],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7047,7050],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":159,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":159,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7122,7125],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7122,7125],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Centrale tool voor invoervalidatie en sanitatie\r\n * Beschermt tegen XSS, injectieaanvallen, en andere beveiligingsproblemen\r\n */\r\n\r\n// RegEx patronen voor validatie\r\nconst patterns = {\r\n  email: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\r\n  postcode: /^\\d{4}$/,                      // Belgische postcodes zijn 4 cijfers\r\n  telefoon: /^(\\+32|0)(\\d{1})(\\d{8})$/,     // Belgisch telefoonnummer\r\n  datum: /^\\d{4}-\\d{2}-\\d{2}$/,             // YYYY-MM-DD\r\n  tijd: /^\\d{2}:\\d{2}(:\\d{2})?$/,           // HH:MM of HH:MM:SS\r\n  getal: /^\\d+(\\.\\d+)?$/,                   // Geheel of decimaal getal\r\n  url: /^(https?:\\/\\/)?([\\da-z.-]+)\\.([a-z.]{2,6})([/\\w .-]*)*\\/?$/,\r\n  alfanumeriek: /^[a-zA-Z0-9]+$/,\r\n  // Adjusted for ES5 compatibility (less precise for Unicode, but broadly allows common text chars)\r\n  tekst: /^[a-zA-Z0-9\\s!\"#$%&'()*+,-./:;<=>?@[\\\\\\]^_`{|}~]+$/,\r\n};\r\n\r\nexport interface ValidationResult { // Exporting for use in other modules if needed\r\n  isValid: boolean;\r\n  message?: string;\r\n}\r\n\r\n// Validatiefuncties voor verschillende soorten invoer\r\nexport const validate = {\r\n  email: (value: string): ValidationResult => {\r\n    if (!value) return { isValid: false, message: 'E-mailadres is verplicht.' }; // Consistent message\r\n    if (!patterns.email.test(value)) {\r\n      return { isValid: false, message: 'Ongeldig e-mailadres formaat.' };\r\n    }\r\n    return { isValid: true };\r\n  },\r\n\r\n  postcode: (value: string): ValidationResult => {\r\n    if (!value) return { isValid: true }; // Assuming postcode is optional\r\n    if (!patterns.postcode.test(value)) {\r\n      return { isValid: false, message: 'Ongeldige postcode (vereist 4 cijfers).' };\r\n    }\r\n    return { isValid: true };\r\n  },\r\n\r\n  password: (value: string): ValidationResult => {\r\n    if (!value) return { isValid: false, message: 'Wachtwoord is verplicht.' };\r\n    if (value.length < 8) {\r\n      return { isValid: false, message: 'Wachtwoord moet minimaal 8 tekens lang zijn.' };\r\n    }\r\n    \r\n    let score = 0;\r\n    if (/[a-z]/.test(value)) score++; \r\n    if (/[A-Z]/.test(value)) score++; \r\n    if (/\\d/.test(value)) score++;    \r\n    if (/[^a-zA-Z0-9\\s]/.test(value)) score++; // Check for non-alphanumeric, non-whitespace\r\n    \r\n    if (score < 3) { // Requiring at least 3 out of 4 categories (e.g. lowercase, uppercase, number OR lowercase, number, special)\r\n      return { isValid: false, message: 'Wachtwoord is te zwak. Gebruik een combinatie van hoofdletters, kleine letters, cijfers en speciale tekens.' };\r\n    }\r\n    \r\n    return { isValid: true };\r\n  },\r\n\r\n  date: (value: string): ValidationResult => {\r\n    if (!value) return { isValid: true }; // Assuming date is optional\r\n    if (!patterns.datum.test(value)) {\r\n      return { isValid: false, message: 'Ongeldige datumnotatie (gebruik JJJJ-MM-DD).' };\r\n    }\r\n    const date = new Date(value);\r\n    // Check if the date string itself was valid by comparing constructed date back to input parts\r\n    const [year, month, day] = value.split('-').map(Number);\r\n    if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day || isNaN(date.getTime())) {\r\n      return { isValid: false, message: 'Ongeldige datum.' };\r\n    }\r\n    return { isValid: true };\r\n  },\r\n\r\n  number: (value: string | number | undefined | null, min?: number, max?: number): ValidationResult => {\r\n    if (value === undefined || value === null || value === '') return { isValid: true }; // Optional\r\n    const num = Number(value);\r\n    \r\n    if (isNaN(num)) {\r\n      return { isValid: false, message: 'Voer een geldig getal in.' };\r\n    }\r\n    if (min !== undefined && num < min) {\r\n      return { isValid: false, message: `Getal moet minimaal ${min} zijn.` };\r\n    }\r\n    if (max !== undefined && num > max) {\r\n      return { isValid: false, message: `Getal mag maximaal ${max} zijn.` };\r\n    }\r\n    return { isValid: true };\r\n  },\r\n\r\n  text: (value: string | undefined | null, options?: { minLength?: number; maxLength?: number; required?: boolean, pattern?: RegExp, patternMessage?: string }): ValidationResult => {\r\n    const { minLength, maxLength, required = false, pattern, patternMessage } = options || {};\r\n\r\n    if (required && (value === undefined || value === null || value.trim() === '')) {\r\n        return { isValid: false, message: 'Dit veld is verplicht.' };\r\n    }\r\n    if (!value && !required) return { isValid: true }; // Optional and empty is fine\r\n    if (!value) return { isValid: false, message: 'Ongeldige invoer.'}; // Should not happen if required is handled\r\n\r\n    if (minLength !== undefined && value.length < minLength) {\r\n      return { isValid: false, message: `Tekst moet minimaal ${minLength} tekens bevatten.` };\r\n    }\r\n    if (maxLength !== undefined && value.length > maxLength) {\r\n      return { isValid: false, message: `Tekst mag maximaal ${maxLength} tekens bevatten.` };\r\n    }\r\n    if (pattern && !pattern.test(value)) {\r\n        return { isValid: false, message: patternMessage || 'Ongeldig formaat.' };\r\n    }\r\n    // Basic check against potentially harmful characters if no specific pattern is given\r\n    // This is a very broad check and might be too restrictive.\r\n    // if (!patterns.tekst.test(value)) {\r\n    //   return { isValid: false, message: 'Ongeldige tekens gebruikt.' };\r\n    // }\r\n    return { isValid: true };\r\n  }\r\n};\r\n\r\nexport const sanitize = {\r\n  html: (value: string | undefined | null): string => {\r\n    if (!value) return '';\r\n    // Order matters: & first\r\n    return value\r\n      .replace(/&/g, '&')\r\n      .replace(/</g, '<')\r\n      .replace(/>/g, '>')\r\n      .replace(/\"/g, '\"')\r\n      .replace(/'/g, '&#x27;') \r\n      .replace(/\\//g, '&#x2F;');\r\n  },\r\n\r\n  // General input sanitization: trim and remove control characters (except common whitespace like space, tab, newline)\r\n  input: (value: string | undefined | null): string => {\r\n    if (!value) return '';\r\n    // Remove control characters except for tab, newline, carriage return\r\n    // \\p{C} matches all control characters. [^\\S\\r\\n\\t] matches non-whitespace excluding \\r, \\n, \\t.\r\n    // This regex aims to remove invisible or problematic control chars.\r\n    return value.trim().replace(/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F-\\x9F]/g, '');\r\n  },\r\n\r\n  queryParam: (value: string | undefined | null): string => {\r\n    if (!value) return '';\r\n    return value.replace(/[^a-zA-Z0-9\\-_.~]/g, ''); // Allow more common URL characters\r\n  },\r\n\r\n  // Basic SQL sanitization (parameterized queries are always preferred!)\r\n  sql: (value: string | number | undefined | null): string => {\r\n    if (value === undefined || value === null) return '';\r\n    if (typeof value === 'number') return String(value); // Numbers are generally safe\r\n    // For strings, escape single quotes by doubling them up. This is a very basic measure.\r\n    // WARNING: This is NOT a substitute for parameterized queries/prepared statements.\r\n    return value.replace(/'/g, \"''\");\r\n  }\r\n};\r\n\r\n// Validates a complete form and returns all errors\r\nexport function validateForm<T extends Record<string, any>>(\r\n  formData: T,\r\n  validationRules: Partial<Record<keyof T, (value: any, formData?: T) => ValidationResult>> // formData optional for cross-field validation\r\n): Record<string, string | undefined> { // Simpler return type\r\n  const errors: Record<string, string | undefined> = {};\r\n  \r\n  for (const field in validationRules) {\r\n    if (Object.prototype.hasOwnProperty.call(validationRules, field)) {\r\n      const rule = validationRules[field as keyof T];\r\n      if (rule) {\r\n        const result = rule(formData[field as keyof T], formData);\r\n        if (!result.isValid) {\r\n          errors[field] = result.message;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return errors;\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\lib\\security\\rateLimit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\lib\\stripe.ts","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":56,"fix":{"range":[55,55],"text":"\n"}},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@stripe/stripe-js'.","line":1,"column":36,"nodeType":"Literal","endLine":1,"endColumn":55}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { loadStripe, Stripe } from '@stripe/stripe-js';\r\nimport { SubscriptionPlan } from '@/types/subscription'; // Correct pad\r\n\r\nlet stripePromise: Promise<Stripe | null>;\r\n\r\n// Laad de Stripe client een keer\r\nexport const getStripe = (): Promise<Stripe | null> => {\r\n  if (!process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY) {\r\n    console.error('Stripe publishable key is not set in environment variables.');\r\n    return Promise.resolve(null); // Of gooi een error\r\n  }\r\n  if (!stripePromise) {\r\n    stripePromise = loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY);\r\n  }\r\n  return stripePromise;\r\n};\r\n\r\n/**\r\n * Maakt een Stripe Checkout sessie voor een gegeven abonnement\r\n * @param plan Het abonnementsplan\r\n * @param userId De gebruikers-ID\r\n * @param billingCycle 'monthly' of 'yearly'\r\n * @param userEmail Optioneel, voor prefill in Stripe checkout\r\n */\r\nexport async function createCheckoutSession(\r\n  plan: SubscriptionPlan,\r\n  userId: string,\r\n  billingCycle: 'monthly' | 'yearly',\r\n  userEmail?: string\r\n): Promise<void> { // Return void, as it redirects\r\n  const stripe = await getStripe();\r\n  \r\n  if (!stripe) {\r\n    throw new Error('Stripe kon niet worden geladen. Controleer de publishable key.');\r\n  }\r\n  \r\n  // Vraag aan de server om een Checkout Sessie te maken\r\n  const response = await fetch('/api/create-checkout-session', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({\r\n      planId: plan.id, // Dit is de tier ID (free, basic, premium, professional)\r\n      userType: plan.userType, // Stuur userType mee voor prijsbepaling\r\n      userId,\r\n      billingCycle,\r\n      userEmail, // Stuur email mee voor Stripe customer creatie\r\n    }),\r\n  });\r\n  \r\n  if (!response.ok) {\r\n    const errorData = await response.json();\r\n    throw new Error(errorData.error || 'Kon geen checkout sessie aanmaken.');\r\n  }\r\n  \r\n  const { sessionId } = await response.json();\r\n  \r\n  if (!sessionId) {\r\n    throw new Error('Checkout Sessie ID niet ontvangen van server.');\r\n  }\r\n  \r\n  // Redirect naar Stripe Checkout\r\n  const { error } = await stripe.redirectToCheckout({ sessionId });\r\n  \r\n  if (error) {\r\n    // Deze error wordt meestal getoond aan de gebruiker door Stripe zelf,\r\n    // maar loggen kan nuttig zijn.\r\n    console.error('Stripe redirectToCheckout error:', error);\r\n    throw new Error(error.message || 'Fout bij redirect naar Stripe Checkout.');\r\n  }\r\n  // Geen return value nodig, de redirect gebeurt of er wordt een error gegooid.\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\lib\\supabase-client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\lib\\supabase-server.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'supabaseServiceRoleKey' is assigned a value but never used.","line":12,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// lib/supabase-server.ts\r\nimport { type CookieOptions, createServerClient as createSSRServerClient } from '@supabase/ssr'; // createGenericClient removed as it's unused\r\nimport { SupabaseClient } from '@supabase/supabase-js';\r\nimport { cookies } from 'next/headers';\r\n\r\nimport { logger } from '@/lib/monitoring/logger';\r\nimport { Database } from '@/types/database';\r\n\r\n// Environment variables\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\r\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\r\nconst supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\r\n\r\n// Check required environment variables\r\nif (!supabaseUrl || !supabaseAnonKey) {\r\n  throw new Error(\"Missing required Supabase environment variables in lib/supabase-server.ts\");\r\n}\r\n\r\n// Cache for server component clients to improve performance\r\nconst serverClientCache = new Map<string, SupabaseClient<Database>>();\r\n\r\n/**\r\n * Get a Supabase client for use in Server Components\r\n * \r\n * @returns A Supabase client configured for server components\r\n */\r\nexport const getSupabaseServerComponentClient = (): SupabaseClient<Database> => {\r\n  try {\r\n    const cookieStore = cookies();\r\n    const cookieString = cookieStore.getAll()\r\n      .map(cookie => `${cookie.name}=${cookie.value}`)\r\n      .join('; ');\r\n    \r\n    // Use cookie string as cache key to reuse clients with the same auth context\r\n    const cacheKey = `server-component-${cookieString}`;\r\n    \r\n    if (serverClientCache.has(cacheKey)) {\r\n      return serverClientCache.get(cacheKey)!;\r\n    }\r\n    \r\n    const client = createSSRServerClient<Database>(\r\n      supabaseUrl,\r\n      supabaseAnonKey,\r\n      {\r\n        cookies: {\r\n          get(name: string) {\r\n            return cookieStore.get(name)?.value;\r\n          },\r\n          set(_name: string, _value: string, _options: CookieOptions) {\r\n            // Server Components cannot set cookies\r\n          },\r\n          remove(_name: string, _options: CookieOptions) {\r\n            // Server Components cannot remove cookies\r\n          },\r\n        },\r\n        auth: {\r\n          autoRefreshToken: false, // Server components don't need to refresh tokens\r\n          persistSession: false,   // Server components don't persist sessions\r\n        },\r\n        global: {\r\n          // Add request timeout for better reliability\r\n          fetch: (url, options) => {\r\n            return fetch(url, {\r\n              ...options,\r\n              signal: AbortSignal.timeout(10000), // 10 second timeout\r\n            });\r\n          }\r\n        }\r\n      }\r\n    );\r\n    \r\n    // Cache the client for future requests with the same cookies\r\n    serverClientCache.set(cacheKey, client);\r\n    return client;\r\n  } catch (error) {\r\n    logger.error('Failed to initialize Supabase server component client', { error });\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Get a Supabase client for use in Route Handlers and Middleware\r\n * This client can set and remove cookies\r\n * \r\n * @returns A Supabase client configured for route handlers\r\n */\r\nexport const getSupabaseRouteHandlerClient = (): SupabaseClient<Database> => {\r\n  try {\r\n    const cookieStore = cookies();\r\n    \r\n    return createSSRServerClient<Database>(\r\n      supabaseUrl,\r\n      supabaseAnonKey,\r\n      {\r\n        cookies: {\r\n          get(name: string) {\r\n            return cookieStore.get(name)?.value;\r\n          },\r\n          set(name: string, value: string, options: CookieOptions) {\r\n            cookieStore.set({ name, value, ...options });\r\n          },\r\n          remove(name: string, options: CookieOptions) {\r\n            cookieStore.set({ name, value: '', ...options });\r\n          },\r\n        },\r\n        global: {\r\n          // Add request timeout for better reliability\r\n          fetch: (url, options) => {\r\n            return fetch(url, {\r\n              ...options,\r\n              signal: AbortSignal.timeout(10000), // 10 second timeout\r\n            });\r\n          }\r\n        }\r\n      }\r\n    );\r\n  } catch (error) {\r\n    logger.error('Failed to initialize Supabase route handler client', { error });\r\n    throw error;\r\n  }\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\middleware.ts","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":72,"fix":{"range":[152,152],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@supabase/ssr` import should occur before import of `next/server`","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":72,"fix":{"range":[18,154],"text":"import { createServerClient, type CookieOptions } from '@supabase/ssr';\r\nimport { NextResponse, type NextRequest } from 'next/server';\r\n"}},{"ruleId":"import/order","severity":2,"message":"`./lib/monitoring/logger` import should occur before import of `./lib/security-headers`","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":50,"fix":{"range":[154,264],"text":"import { logger } from './lib/monitoring/logger';\r\nimport { securityHeaders } from './lib/security-headers';\r\n"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":7,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":7,"endColumn":33},{"ruleId":"prefer-const","severity":2,"message":"'res' is never reassigned. Use 'const' instead.","line":8,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":8,"endColumn":10,"fix":{"range":[322,424],"text":"const res = NextResponse.next({\r\n    request: {\r\n      headers: new Headers(req.headers),\r\n    },\r\n  });"}}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":4,"fixableWarningCount":0,"source":"// middleware.ts\r\nimport { NextResponse, type NextRequest } from 'next/server';\r\nimport { createServerClient, type CookieOptions } from '@supabase/ssr';\r\nimport { securityHeaders } from './lib/security-headers';\r\nimport { logger } from './lib/monitoring/logger';\r\n\r\nexport async function middleware(req: NextRequest) {\r\n  let res = NextResponse.next({\r\n    request: {\r\n      headers: new Headers(req.headers),\r\n    },\r\n  });\r\n\r\n  // Initialize Supabase client for middleware\r\n  const supabase = createServerClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\r\n    {\r\n      cookies: {\r\n        get(name: string) {\r\n          return req.cookies.get(name)?.value;\r\n        },\r\n        set(name: string, value: string, options: CookieOptions) {\r\n          res.cookies.set({\r\n            name,\r\n            value,\r\n            ...options,\r\n          });\r\n        },\r\n        remove(name: string, options: CookieOptions) {\r\n          res.cookies.set({\r\n            name,\r\n            value: '',\r\n            ...options,\r\n          });\r\n        },\r\n      },\r\n      global: {\r\n        fetch: (url, options) => {\r\n          return fetch(url, {\r\n            ...options,\r\n            signal: AbortSignal.timeout(5000), // 5 second timeout for middleware\r\n          });\r\n        }\r\n      }\r\n    }\r\n  );\r\n\r\n  // Refresh the session token if available\r\n  try {\r\n    const { data: refreshData, error: refreshError } = await supabase.auth.refreshSession();\r\n    \r\n    if (refreshError) {\r\n      logger.debug(\"[Middleware] Session refresh failed, will try to use existing session\");\r\n    } else if (refreshData.session) {\r\n      // The session was refreshed successfully\r\n      await supabase.auth.getUser();\r\n    }\r\n  } catch (error) {\r\n    logger.error(\"[Middleware] Unexpected error during session refresh\", { error });\r\n  }\r\n\r\n  // Check user authentication\r\n  const { data: { user }, error: getUserError } = await supabase.auth.getUser();\r\n\r\n  // Handle authentication and authorization\r\n  if (getUserError || !user) {\r\n    // User is not authenticated\r\n    const url = req.nextUrl.clone();\r\n    const publicPaths = [\r\n      '/', \r\n      '/auth/login', \r\n      '/auth/register', \r\n      '/auth/forgot-password', \r\n      '/api/auth/callback', \r\n      '/offline',\r\n      '/pricing'\r\n    ];\r\n    \r\n    // Allow API routes to handle their own auth to prevent redirect loops\r\n    const isApiRoute = req.nextUrl.pathname.startsWith('/api/');\r\n\r\n    if (!isApiRoute && !publicPaths.some(path => req.nextUrl.pathname.startsWith(path))) {\r\n      // Redirect unauthenticated users to login\r\n      url.pathname = '/auth/login';\r\n      url.searchParams.set('from', req.nextUrl.pathname);\r\n      return NextResponse.redirect(url);\r\n    }\r\n  } else if (user) {\r\n    // User is authenticated - check role-based access\r\n    if (req.nextUrl.pathname.startsWith('/admin')) {\r\n      try {\r\n        const { data: profile, error: profileError } = await supabase\r\n          .from('profiles')\r\n          .select('type')\r\n          .eq('id', user.id)\r\n          .single();\r\n        \r\n        if (profileError) {\r\n          logger.error(\"[Middleware] Error fetching profile for admin check\", { \r\n            userId: user.id, \r\n            error: profileError \r\n          });\r\n        }\r\n        \r\n        if (!profile || profile.type !== 'admin') {\r\n          // Unauthorized admin access attempt\r\n          const url = req.nextUrl.clone();\r\n          url.pathname = '/dashboard'; \r\n          url.searchParams.set('error', 'unauthorized_admin_access');\r\n          return NextResponse.redirect(url);\r\n        }\r\n      } catch (error) {\r\n        logger.error(\"[Middleware] Unexpected error during admin authorization\", { error });\r\n        // On error, redirect to dashboard as a safety measure\r\n        const url = req.nextUrl.clone();\r\n        url.pathname = '/dashboard';\r\n        return NextResponse.redirect(url);\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Apply security headers from the centralized configuration\r\n  securityHeaders.forEach(header => {\r\n    res.headers.set(header.key, header.value);\r\n  });\r\n\r\n  return res;\r\n}\r\n\r\nexport const config = {\r\n  matcher: [\r\n    '/((?!_next/static|_next/image|favicon.ico|manifest.json|robots.txt|sitemap.xml|icons/|screenshots/).*)',\r\n  ],\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\next-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\public\\service-worker.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":26,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":26,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[605,666],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":34,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":34,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[856,909],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":45,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":45,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1182,1243],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":56,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":56,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1588,1651],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'event' is defined but never used. Allowed unused args must match /^_/u.","line":289,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":289,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'event' is defined but never used. Allowed unused args must match /^_/u.","line":313,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":313,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'event' is defined but never used. Allowed unused args must match /^_/u.","line":330,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":330,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'event' is defined but never used. Allowed unused args must match /^_/u.","line":334,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":334,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// FibroGuardian Pro Service Worker\r\nconst CACHE_NAME = 'fibroguardian-cache-v1';\r\n\r\n// Resources to cache immediately on install\r\nconst PRECACHE_RESOURCES = [\r\n  '/',\r\n  '/offline.html',\r\n  '/logo.png',\r\n  '/logo-white.png',\r\n  '/manifest.json',\r\n  '/favicon-16x16.png',\r\n  '/icons/icon-192x192.png',\r\n  '/icons/icon-512x512.png',\r\n  '/fonts/inter-var.woff2'\r\n];\r\n\r\n// Critical API routes to cache on first use\r\nconst CRITICAL_API_ROUTES = [\r\n  '/api/profiles/me',\r\n  '/api/tasks',\r\n  '/api/reflecties'\r\n];\r\n\r\n// Install event - cache critical resources\r\nself.addEventListener('install', (event) => {\r\n  console.log('[Service Worker] Installing Service Worker...');\r\n  \r\n  // Skip waiting to ensure the new service worker activates immediately\r\n  self.skipWaiting();\r\n  \r\n  event.waitUntil(\r\n    caches.open(CACHE_NAME)\r\n      .then((cache) => {\r\n        console.log('[Service Worker] Precaching resources');\r\n        return cache.addAll(PRECACHE_RESOURCES);\r\n      })\r\n      .catch((error) => {\r\n        console.error('[Service Worker] Precaching failed:', error);\r\n      })\r\n  );\r\n});\r\n\r\n// Activate event - clean up old caches\r\nself.addEventListener('activate', (event) => {\r\n  console.log('[Service Worker] Activating Service Worker...');\r\n  \r\n  // Claim clients to ensure the service worker controls all clients immediately\r\n  event.waitUntil(self.clients.claim());\r\n  \r\n  // Clean up old caches\r\n  event.waitUntil(\r\n    caches.keys().then((cacheNames) => {\r\n      return Promise.all(\r\n        cacheNames.map((cacheName) => {\r\n          if (cacheName !== CACHE_NAME) {\r\n            console.log('[Service Worker] Removing old cache:', cacheName);\r\n            return caches.delete(cacheName);\r\n          }\r\n        })\r\n      );\r\n    })\r\n  );\r\n});\r\n\r\n// Helper function to determine if a request is an API request\r\nconst isApiRequest = (url) => {\r\n  return url.pathname.startsWith('/api/');\r\n};\r\n\r\n// Helper function to determine if a request is a critical API request\r\nconst isCriticalApiRequest = (url) => {\r\n  return CRITICAL_API_ROUTES.some(route => url.pathname.startsWith(route));\r\n};\r\n\r\n// Helper function to determine if a request is a navigation request\r\nconst isNavigationRequest = (request) => {\r\n  return request.mode === 'navigate';\r\n};\r\n\r\n// Helper function to determine if a request is for a static asset\r\nconst isStaticAsset = (url) => {\r\n  const staticExtensions = ['.js', '.css', '.png', '.jpg', '.jpeg', '.gif', '.svg', '.woff', '.woff2', '.ttf', '.eot'];\r\n  return staticExtensions.some(ext => url.pathname.endsWith(ext));\r\n};\r\n\r\n// Fetch event - handle network requests\r\nself.addEventListener('fetch', (event) => {\r\n  const url = new URL(event.request.url);\r\n  \r\n  // Skip cross-origin requests\r\n  if (url.origin !== self.location.origin) {\r\n    return;\r\n  }\r\n  \r\n  // Strategy for API requests\r\n  if (isApiRequest(url)) {\r\n    if (isCriticalApiRequest(url)) {\r\n      // For critical API routes: network first, then cache, fall back to offline JSON\r\n      event.respondWith(\r\n        fetch(event.request)\r\n          .then((response) => {\r\n            // Cache the successful response\r\n            const clonedResponse = response.clone();\r\n            caches.open(CACHE_NAME).then((cache) => {\r\n              cache.put(event.request, clonedResponse);\r\n            });\r\n            return response;\r\n          })\r\n          .catch(() => {\r\n            // Try to get from cache\r\n            return caches.match(event.request)\r\n              .then((cachedResponse) => {\r\n                if (cachedResponse) {\r\n                  return cachedResponse;\r\n                }\r\n                \r\n                // If not in cache, return a basic JSON response\r\n                return new Response(\r\n                  JSON.stringify({\r\n                    error: 'offline',\r\n                    message: 'You are currently offline. This data will be updated when you reconnect.'\r\n                  }),\r\n                  {\r\n                    headers: { 'Content-Type': 'application/json' }\r\n                  }\r\n                );\r\n              });\r\n          })\r\n      );\r\n    } else {\r\n      // For non-critical API routes: network only\r\n      return;\r\n    }\r\n  }\r\n  // Strategy for navigation requests\r\n  else if (isNavigationRequest(event.request)) {\r\n    // For navigation: network first, then cache, fall back to offline page\r\n    event.respondWith(\r\n      fetch(event.request)\r\n        .then((response) => {\r\n          // Cache the successful response\r\n          const clonedResponse = response.clone();\r\n          caches.open(CACHE_NAME).then((cache) => {\r\n            cache.put(event.request, clonedResponse);\r\n          });\r\n          return response;\r\n        })\r\n        .catch(() => {\r\n          // Try to get from cache\r\n          return caches.match(event.request)\r\n            .then((cachedResponse) => {\r\n              if (cachedResponse) {\r\n                return cachedResponse;\r\n              }\r\n              \r\n              // If not in cache, return the offline page\r\n              return caches.match('/offline.html');\r\n            });\r\n        })\r\n    );\r\n  }\r\n  // Strategy for static assets\r\n  else if (isStaticAsset(url)) {\r\n    // For static assets: cache first, then network\r\n    event.respondWith(\r\n      caches.match(event.request)\r\n        .then((cachedResponse) => {\r\n          if (cachedResponse) {\r\n            // Return cached response\r\n            return cachedResponse;\r\n          }\r\n          \r\n          // If not in cache, fetch from network and cache\r\n          return fetch(event.request)\r\n            .then((response) => {\r\n              // Cache the successful response\r\n              const clonedResponse = response.clone();\r\n              caches.open(CACHE_NAME).then((cache) => {\r\n                cache.put(event.request, clonedResponse);\r\n              });\r\n              return response;\r\n            });\r\n        })\r\n    );\r\n  }\r\n  // Default strategy for all other requests\r\n  else {\r\n    // Network first, then cache\r\n    event.respondWith(\r\n      fetch(event.request)\r\n        .then((response) => {\r\n          // Cache the successful response\r\n          const clonedResponse = response.clone();\r\n          caches.open(CACHE_NAME).then((cache) => {\r\n            cache.put(event.request, clonedResponse);\r\n          });\r\n          return response;\r\n        })\r\n        .catch(() => {\r\n          // Try to get from cache\r\n          return caches.match(event.request);\r\n        })\r\n    );\r\n  }\r\n});\r\n\r\n// Background sync for offline form submissions\r\nself.addEventListener('sync', (event) => {\r\n  if (event.tag === 'sync-reflecties') {\r\n    event.waitUntil(syncReflecties());\r\n  } else if (event.tag === 'sync-task-logs') {\r\n    event.waitUntil(syncTaskLogs());\r\n  }\r\n});\r\n\r\n// Function to sync reflecties when back online\r\nasync function syncReflecties() {\r\n  try {\r\n    // Open IndexedDB\r\n    const db = await openIndexedDB('fibroguardian-offline-db', 'reflecties');\r\n    \r\n    // Get all stored reflecties\r\n    const offlineReflecties = await getAllItems(db, 'reflecties');\r\n    \r\n    // Process each reflectie\r\n    for (const reflectie of offlineReflecties) {\r\n      try {\r\n        // Try to send to server\r\n        const response = await fetch('/api/reflecties', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify(reflectie.data)\r\n        });\r\n        \r\n        if (response.ok) {\r\n          // If successful, remove from IndexedDB\r\n          await deleteItem(db, 'reflecties', reflectie.id);\r\n        }\r\n      } catch (error) {\r\n        console.error('[Service Worker] Error syncing reflectie:', error);\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('[Service Worker] Error in syncReflecties:', error);\r\n  }\r\n}\r\n\r\n// Function to sync task logs when back online\r\nasync function syncTaskLogs() {\r\n  try {\r\n    // Open IndexedDB\r\n    const db = await openIndexedDB('fibroguardian-offline-db', 'taskLogs');\r\n    \r\n    // Get all stored task logs\r\n    const offlineTaskLogs = await getAllItems(db, 'taskLogs');\r\n    \r\n    // Process each task log\r\n    for (const taskLog of offlineTaskLogs) {\r\n      try {\r\n        // Try to send to server\r\n        const response = await fetch('/api/task-logs', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify(taskLog.data)\r\n        });\r\n        \r\n        if (response.ok) {\r\n          // If successful, remove from IndexedDB\r\n          await deleteItem(db, 'taskLogs', taskLog.id);\r\n        }\r\n      } catch (error) {\r\n        console.error('[Service Worker] Error syncing task log:', error);\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('[Service Worker] Error in syncTaskLogs:', error);\r\n  }\r\n}\r\n\r\n// Helper function to open IndexedDB\r\nfunction openIndexedDB(dbName, storeName) {\r\n  return new Promise((resolve, reject) => {\r\n    const request = indexedDB.open(dbName, 1);\r\n    \r\n    request.onerror = (event) => {\r\n      reject('Error opening IndexedDB');\r\n    };\r\n    \r\n    request.onsuccess = (event) => {\r\n      resolve(event.target.result);\r\n    };\r\n    \r\n    request.onupgradeneeded = (event) => {\r\n      const db = event.target.result;\r\n      if (!db.objectStoreNames.contains(storeName)) {\r\n        db.createObjectStore(storeName, { keyPath: 'id' });\r\n      }\r\n    };\r\n  });\r\n}\r\n\r\n// Helper function to get all items from IndexedDB\r\nfunction getAllItems(db, storeName) {\r\n  return new Promise((resolve, reject) => {\r\n    const transaction = db.transaction(storeName, 'readonly');\r\n    const store = transaction.objectStore(storeName);\r\n    const request = store.getAll();\r\n    \r\n    request.onerror = (event) => {\r\n      reject('Error getting items from IndexedDB');\r\n    };\r\n    \r\n    request.onsuccess = (event) => {\r\n      resolve(event.target.result);\r\n    };\r\n  });\r\n}\r\n\r\n// Helper function to delete an item from IndexedDB\r\nfunction deleteItem(db, storeName, id) {\r\n  return new Promise((resolve, reject) => {\r\n    const transaction = db.transaction(storeName, 'readwrite');\r\n    const store = transaction.objectStore(storeName);\r\n    const request = store.delete(id);\r\n    \r\n    request.onerror = (event) => {\r\n      reject('Error deleting item from IndexedDB');\r\n    };\r\n    \r\n    request.onsuccess = (event) => {\r\n      resolve();\r\n    };\r\n  });\r\n}\r\n\r\n// Push notification event\r\nself.addEventListener('push', (event) => {\r\n  if (!event.data) {\r\n    return;\r\n  }\r\n  \r\n  try {\r\n    const data = event.data.json();\r\n    \r\n    const options = {\r\n      body: data.body || 'Nieuwe melding van FibroGuardian Pro',\r\n      icon: '/icons/icon-192x192.png',\r\n      badge: '/favicon-16x16.png',\r\n      data: {\r\n        url: data.url || '/'\r\n      }\r\n    };\r\n    \r\n    event.waitUntil(\r\n      self.registration.showNotification(data.title || 'FibroGuardian Pro', options)\r\n    );\r\n  } catch (error) {\r\n    console.error('[Service Worker] Error showing notification:', error);\r\n    \r\n    // Fallback for non-JSON data\r\n    const message = event.data.text();\r\n    \r\n    event.waitUntil(\r\n      self.registration.showNotification('FibroGuardian Pro', {\r\n        body: message,\r\n        icon: '/icons/icon-192x192.png',\r\n        badge: '/favicon-16x16.png'\r\n      })\r\n    );\r\n  }\r\n});\r\n\r\n// Notification click event\r\nself.addEventListener('notificationclick', (event) => {\r\n  event.notification.close();\r\n  \r\n  const url = event.notification.data && event.notification.data.url ? event.notification.data.url : '/';\r\n  \r\n  event.waitUntil(\r\n    clients.matchAll({ type: 'window' })\r\n      .then((clientList) => {\r\n        // Check if there's already a window open\r\n        for (const client of clientList) {\r\n          if (client.url === url && 'focus' in client) {\r\n            return client.focus();\r\n          }\r\n        }\r\n        \r\n        // If no window is open, open a new one\r\n        if (clients.openWindow) {\r\n          return clients.openWindow(url);\r\n        }\r\n      })\r\n  );\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\public\\sw.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":7,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":7,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[390,426],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":87,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":87,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":105,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":105,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3968,4034],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":147,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":147,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5727,5765],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Import Workbox (assuming it's available globally via next-pwa or a CDN import)\n// If not, you might need to import directly: import * as workboxWindow from 'workbox-window';\n// For a custom service worker, you'd typically use:\n// importScripts('https://storage.googleapis.com/workbox-cdn/releases/6.4.1/workbox-sw.js'); // Or your chosen version\n\nif (typeof workbox !== 'undefined') {\n  console.log(`Workbox is loaded 🎉`);\n\n  const { registerRoute } = workbox.routing;\n  const { CacheFirst, NetworkFirst, StaleWhileRevalidate, NetworkOnly } = workbox.strategies;\n  const { CacheableResponsePlugin } = workbox.cacheableResponse;\n  const { ExpirationPlugin } = workbox.expiration;\n  const { precacheAndRoute, cleanupOutdatedCaches } = workbox.precaching;\n  const { BackgroundSyncPlugin } = workbox.backgroundSync;\n  // offlineFallback is not a direct Workbox v6 module, but a recipe.\n  // For custom SW, you'd implement similar logic or use a simpler fallback.\n\n  cleanupOutdatedCaches();\n\n  // Precache all assets defined in self.__WB_MANIFEST (generated by next-pwa or Workbox build process)\n  // Ensure this manifest is correctly generated and available.\n  // If self.__WB_MANIFEST is not populated, precaching will not work as expected.\n  precacheAndRoute(self.__WB_MANIFEST || []);\n\n  // Cache images with CacheFirst strategy\n  registerRoute(\n    ({ request }) => request.destination === 'image',\n    new CacheFirst({\n      cacheName: 'fibroguardian-images',\n      plugins: [\n        new CacheableResponsePlugin({\n          statuses: [0, 200], // Cache opaque responses and successful responses\n        }),\n        new ExpirationPlugin({\n          maxEntries: 100, // Increased max entries\n          maxAgeSeconds: 60 * 24 * 60 * 60, // 60 days\n        }),\n      ],\n    })\n  );\n\n  // Cache CSS, JS, and fonts with StaleWhileRevalidate strategy\n  registerRoute(\n    ({ request }) =>\n      request.destination === 'style' ||\n      request.destination === 'script' ||\n      request.destination === 'worker' || // For web workers\n      request.destination === 'font',\n    new StaleWhileRevalidate({\n      cacheName: 'fibroguardian-static-resources',\n      plugins: [\n        new CacheableResponsePlugin({\n          statuses: [0, 200],\n        }),\n        new ExpirationPlugin({\n          maxEntries: 50, // Max 50 static resources\n          maxAgeSeconds: 30 * 24 * 60 * 60, // 30 days\n        }),\n      ],\n    })\n  );\n\n  // API data with NetworkFirst strategy for most GET requests\n  registerRoute(\n    ({ url, request }) => url.pathname.startsWith('/api/') && request.method === 'GET',\n    new NetworkFirst({\n      cacheName: 'fibroguardian-api-responses',\n      networkTimeoutSeconds: 5, // Timeout for network request before falling back to cache\n      plugins: [\n        new CacheableResponsePlugin({\n          statuses: [0, 200],\n        }),\n        new ExpirationPlugin({\n          maxEntries: 50,\n          maxAgeSeconds: 1 * 60 * 60, // 1 hour for API GET responses\n        }),\n      ],\n    })\n  );\n\n  // Offline fallback for navigation (HTML pages)\n  // This requires an /offline.html page at the root of your public folder\n  const networkOnlyNavigation = new NetworkOnly();\n  const navigationHandler = async (params) => {\n    try {\n      return await networkOnlyNavigation.handle(params);\n    } catch (error) {\n      // Fallback to the offline page if network fails\n      return caches.match('/offline.html');\n    }\n  };\n  registerRoute(\n    ({ request }) => request.mode === 'navigate',\n    navigationHandler\n  );\n  \n  // Background Sync for mutations\n  const backgroundSyncPlugin = new BackgroundSyncPlugin('fibroguardian-offline-mutations', {\n    maxRetentionTime: 48 * 60, // Retry for 48 hours (in minutes)\n    onSync: async ({ queue }) => {\n      let entry;\n      while ((entry = await queue.popRequest())) { // Use popRequest to get and remove\n        try {\n          await fetch(entry.request.clone()); // Clone request before fetching\n          console.log('Background sync successful for:', entry.request.url);\n        } catch (error) {\n          console.error('Background sync failed for:', entry.request.url, error);\n          // Re-queue the request if it failed and should be retried\n          // (BackgroundSyncPlugin handles retries automatically based on its config)\n          // If you want to stop retrying after a certain number of attempts,\n          // you'd need custom logic here or rely on maxRetentionTime.\n          // For now, let Workbox handle retries.\n          // await queue.pushRequest(entry); // This would re-queue indefinitely if not careful\n          throw error; // Throw to let Workbox know it failed and should retry later\n        }\n      }\n    },\n  });\n\n  // Register routes that use background sync for POST, PUT, PATCH, DELETE\n  const mutationMethods = ['POST', 'PUT', 'PATCH', 'DELETE'];\n  registerRoute(\n    ({ url, request }) => \n      (url.pathname.startsWith('/api/tasks') ||\n       url.pathname.startsWith('/api/reflecties') ||\n       url.pathname.startsWith('/api/task-logs') ||\n       url.pathname.startsWith('/api/specialist-patienten') ||\n       url.pathname.startsWith('/api/profiles')) && // Add other mutable API endpoints\n      mutationMethods.includes(request.method.toUpperCase()),\n    new NetworkOnly({ // Try network first, if fails, queue for background sync\n      plugins: [backgroundSyncPlugin],\n    })\n  );\n\n  // Skip waiting and claim clients for new service worker to take control immediately\n  self.addEventListener('message', (event) => {\n    if (event.data && event.data.type === 'SKIP_WAITING') {\n      self.skipWaiting();\n    }\n  });\n\n  self.addEventListener('activate', (event) => {\n    event.waitUntil(clients.claim());\n  });\n\n} else {\n  console.log(`Workbox didn't load 😬`);\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\public\\workbox-4754cb34.js","messages":[{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":50,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":81},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'t' is defined but never used.","line":1,"column":88,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":89},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":212,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":252},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":258,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":292},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'t' is defined but never used.","line":1,"column":299,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":300},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":382,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":426},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":645,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":674},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":817,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":836},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":996,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":1024},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":1101,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":1177},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":1750,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":1775},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":2276,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":2350},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":3073,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":3110},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'t' is defined but never used.","line":1,"column":3117,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":3118},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":3616,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":3644},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":3746,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":3866},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":7073,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":7195},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":7255,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":7312},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'i' is defined but never used.","line":1,"column":7975,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":7976},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":7983,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":8077},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":8087,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":8112},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":8391,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":8433},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":9464,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":9565},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":9574,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":9581},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":9590,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":9649},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":9651,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":9743},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":9990,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":10057},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":10066,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":10084},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":10093,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":10107},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":10109,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":10170},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":10193,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":10227},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":10996,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":11033},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'t' is defined but never used.","line":1,"column":11040,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":11041},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":11155,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":11175},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":11227,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":11328},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":11334,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":11499},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":11415,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":11490},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":11660,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":11693},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":11978,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":12068},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":12097,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":12134},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":12506,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":12621},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":12733,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":12842},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":13061,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":13114},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":13321,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":13362},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":13368,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":13409},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'t' is defined but never used.","line":1,"column":13416,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":13417},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'t' is defined but never used.","line":1,"column":14472,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":14473},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":14604,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":14641},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'t' is defined but never used.","line":1,"column":14648,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":14649},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":15146,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":15517},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":15240,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":15264},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":15453,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":15507},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":15563,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":15741},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":16074,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":16099},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'t' is defined but never used.","line":1,"column":16106,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":16107},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":16214,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":16341},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":16640,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":16781},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":17007,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":17125},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":17125,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":17225},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":17227,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":17433},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":17507,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":17726},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":17768,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":17904},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":17952,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":18019},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":19141,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":19189},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":20094,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":20117},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":20183,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":20232},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":20316,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":20342},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":20373,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":20405},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":20571,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":23654},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":20692,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":20717},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":20825,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":21319},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'t' is defined but never used.","line":1,"column":21045,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":21046},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":21137,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":21191},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":21716,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":21761},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":21827,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":21941},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":22049,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":22062},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used. Allowed unused args must match /^_/u.","line":1,"column":22288,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":22289},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'s' is defined but never used. Allowed unused args must match /^_/u.","line":1,"column":22450,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":22451},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":22515,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":22540},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":22813,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":22892},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":23031,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":23056},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'t' is defined but never used. Allowed unused args must match /^_/u.","line":1,"column":23424,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":23425},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":1,"column":23558,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":1,"endColumn":23635}],"suppressedMessages":[],"errorCount":70,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"define([\"exports\"],(function(t){\"use strict\";try{self[\"workbox:core:6.5.4\"]&&_()}catch(t){}const e=(t,...e)=>{let s=t;return e.length>0&&(s+=` :: ${JSON.stringify(e)}`),s};class s extends Error{constructor(t,s){super(e(t,s)),this.name=t,this.details=s}}try{self[\"workbox:routing:6.5.4\"]&&_()}catch(t){}const n=t=>t&&\"object\"==typeof t?t:{handle:t};class r{constructor(t,e,s=\"GET\"){this.handler=n(e),this.match=t,this.method=s}setCatchHandler(t){this.catchHandler=n(t)}}class i extends r{constructor(t,e,s){super((({url:e})=>{const s=t.exec(e.href);if(s&&(e.origin===location.origin||0===s.index))return s.slice(1)}),e,s)}}class a{constructor(){this.t=new Map,this.i=new Map}get routes(){return this.t}addFetchListener(){self.addEventListener(\"fetch\",(t=>{const{request:e}=t,s=this.handleRequest({request:e,event:t});s&&t.respondWith(s)}))}addCacheListener(){self.addEventListener(\"message\",(t=>{if(t.data&&\"CACHE_URLS\"===t.data.type){const{payload:e}=t.data,s=Promise.all(e.urlsToCache.map((e=>{\"string\"==typeof e&&(e=[e]);const s=new Request(...e);return this.handleRequest({request:s,event:t})})));t.waitUntil(s),t.ports&&t.ports[0]&&s.then((()=>t.ports[0].postMessage(!0)))}}))}handleRequest({request:t,event:e}){const s=new URL(t.url,location.href);if(!s.protocol.startsWith(\"http\"))return;const n=s.origin===location.origin,{params:r,route:i}=this.findMatchingRoute({event:e,request:t,sameOrigin:n,url:s});let a=i&&i.handler;const o=t.method;if(!a&&this.i.has(o)&&(a=this.i.get(o)),!a)return;let c;try{c=a.handle({url:s,request:t,event:e,params:r})}catch(t){c=Promise.reject(t)}const h=i&&i.catchHandler;return c instanceof Promise&&(this.o||h)&&(c=c.catch((async n=>{if(h)try{return await h.handle({url:s,request:t,event:e,params:r})}catch(t){t instanceof Error&&(n=t)}if(this.o)return this.o.handle({url:s,request:t,event:e});throw n}))),c}findMatchingRoute({url:t,sameOrigin:e,request:s,event:n}){const r=this.t.get(s.method)||[];for(const i of r){let r;const a=i.match({url:t,sameOrigin:e,request:s,event:n});if(a)return r=a,(Array.isArray(r)&&0===r.length||a.constructor===Object&&0===Object.keys(a).length||\"boolean\"==typeof a)&&(r=void 0),{route:i,params:r}}return{}}setDefaultHandler(t,e=\"GET\"){this.i.set(e,n(t))}setCatchHandler(t){this.o=n(t)}registerRoute(t){this.t.has(t.method)||this.t.set(t.method,[]),this.t.get(t.method).push(t)}unregisterRoute(t){if(!this.t.has(t.method))throw new s(\"unregister-route-but-not-found-with-method\",{method:t.method});const e=this.t.get(t.method).indexOf(t);if(!(e>-1))throw new s(\"unregister-route-route-not-registered\");this.t.get(t.method).splice(e,1)}}let o;const c=()=>(o||(o=new a,o.addFetchListener(),o.addCacheListener()),o);function h(t,e,n){let a;if(\"string\"==typeof t){const s=new URL(t,location.href);a=new r((({url:t})=>t.href===s.href),e,n)}else if(t instanceof RegExp)a=new i(t,e,n);else if(\"function\"==typeof t)a=new r(t,e,n);else{if(!(t instanceof r))throw new s(\"unsupported-route-type\",{moduleName:\"workbox-routing\",funcName:\"registerRoute\",paramName:\"capture\"});a=t}return c().registerRoute(a),a}try{self[\"workbox:strategies:6.5.4\"]&&_()}catch(t){}const u={cacheWillUpdate:async({response:t})=>200===t.status||0===t.status?t:null},l={googleAnalytics:\"googleAnalytics\",precache:\"precache-v2\",prefix:\"workbox\",runtime:\"runtime\",suffix:\"undefined\"!=typeof registration?registration.scope:\"\"},f=t=>[l.prefix,t,l.suffix].filter((t=>t&&t.length>0)).join(\"-\"),w=t=>t||f(l.precache),d=t=>t||f(l.runtime);function p(t,e){const s=new URL(t);for(const t of e)s.searchParams.delete(t);return s.href}class y{constructor(){this.promise=new Promise(((t,e)=>{this.resolve=t,this.reject=e}))}}const g=new Set;function m(t){return\"string\"==typeof t?new Request(t):t}class v{constructor(t,e){this.h={},Object.assign(this,e),this.event=e.event,this.u=t,this.l=new y,this.p=[],this.m=[...t.plugins],this.v=new Map;for(const t of this.m)this.v.set(t,{});this.event.waitUntil(this.l.promise)}async fetch(t){const{event:e}=this;let n=m(t);if(\"navigate\"===n.mode&&e instanceof FetchEvent&&e.preloadResponse){const t=await e.preloadResponse;if(t)return t}const r=this.hasCallback(\"fetchDidFail\")?n.clone():null;try{for(const t of this.iterateCallbacks(\"requestWillFetch\"))n=await t({request:n.clone(),event:e})}catch(t){if(t instanceof Error)throw new s(\"plugin-error-request-will-fetch\",{thrownErrorMessage:t.message})}const i=n.clone();try{let t;t=await fetch(n,\"navigate\"===n.mode?void 0:this.u.fetchOptions);for(const s of this.iterateCallbacks(\"fetchDidSucceed\"))t=await s({event:e,request:i,response:t});return t}catch(t){throw r&&await this.runCallbacks(\"fetchDidFail\",{error:t,event:e,originalRequest:r.clone(),request:i.clone()}),t}}async fetchAndCachePut(t){const e=await this.fetch(t),s=e.clone();return this.waitUntil(this.cachePut(t,s)),e}async cacheMatch(t){const e=m(t);let s;const{cacheName:n,matchOptions:r}=this.u,i=await this.getCacheKey(e,\"read\"),a=Object.assign(Object.assign({},r),{cacheName:n});s=await caches.match(i,a);for(const t of this.iterateCallbacks(\"cachedResponseWillBeUsed\"))s=await t({cacheName:n,matchOptions:r,cachedResponse:s,request:i,event:this.event})||void 0;return s}async cachePut(t,e){const n=m(t);var r;await(r=0,new Promise((t=>setTimeout(t,r))));const i=await this.getCacheKey(n,\"write\");if(!e)throw new s(\"cache-put-with-no-response\",{url:(a=i.url,new URL(String(a),location.href).href.replace(new RegExp(`^${location.origin}`),\"\"))});var a;const o=await this.R(e);if(!o)return!1;const{cacheName:c,matchOptions:h}=this.u,u=await self.caches.open(c),l=this.hasCallback(\"cacheDidUpdate\"),f=l?await async function(t,e,s,n){const r=p(e.url,s);if(e.url===r)return t.match(e,n);const i=Object.assign(Object.assign({},n),{ignoreSearch:!0}),a=await t.keys(e,i);for(const e of a)if(r===p(e.url,s))return t.match(e,n)}(u,i.clone(),[\"__WB_REVISION__\"],h):null;try{await u.put(i,l?o.clone():o)}catch(t){if(t instanceof Error)throw\"QuotaExceededError\"===t.name&&await async function(){for(const t of g)await t()}(),t}for(const t of this.iterateCallbacks(\"cacheDidUpdate\"))await t({cacheName:c,oldResponse:f,newResponse:o.clone(),request:i,event:this.event});return!0}async getCacheKey(t,e){const s=`${t.url} | ${e}`;if(!this.h[s]){let n=t;for(const t of this.iterateCallbacks(\"cacheKeyWillBeUsed\"))n=m(await t({mode:e,request:n,event:this.event,params:this.params}));this.h[s]=n}return this.h[s]}hasCallback(t){for(const e of this.u.plugins)if(t in e)return!0;return!1}async runCallbacks(t,e){for(const s of this.iterateCallbacks(t))await s(e)}*iterateCallbacks(t){for(const e of this.u.plugins)if(\"function\"==typeof e[t]){const s=this.v.get(e),n=n=>{const r=Object.assign(Object.assign({},n),{state:s});return e[t](r)};yield n}}waitUntil(t){return this.p.push(t),t}async doneWaiting(){let t;for(;t=this.p.shift();)await t}destroy(){this.l.resolve(null)}async R(t){let e=t,s=!1;for(const t of this.iterateCallbacks(\"cacheWillUpdate\"))if(e=await t({request:this.request,response:e,event:this.event})||void 0,s=!0,!e)break;return s||e&&200!==e.status&&(e=void 0),e}}class R{constructor(t={}){this.cacheName=d(t.cacheName),this.plugins=t.plugins||[],this.fetchOptions=t.fetchOptions,this.matchOptions=t.matchOptions}handle(t){const[e]=this.handleAll(t);return e}handleAll(t){t instanceof FetchEvent&&(t={event:t,request:t.request});const e=t.event,s=\"string\"==typeof t.request?new Request(t.request):t.request,n=\"params\"in t?t.params:void 0,r=new v(this,{event:e,request:s,params:n}),i=this.q(r,s,e);return[i,this.D(i,r,s,e)]}async q(t,e,n){let r;await t.runCallbacks(\"handlerWillStart\",{event:n,request:e});try{if(r=await this.U(e,t),!r||\"error\"===r.type)throw new s(\"no-response\",{url:e.url})}catch(s){if(s instanceof Error)for(const i of t.iterateCallbacks(\"handlerDidError\"))if(r=await i({error:s,event:n,request:e}),r)break;if(!r)throw s}for(const s of t.iterateCallbacks(\"handlerWillRespond\"))r=await s({event:n,request:e,response:r});return r}async D(t,e,s,n){let r,i;try{r=await t}catch(i){}try{await e.runCallbacks(\"handlerDidRespond\",{event:n,request:s,response:r}),await e.doneWaiting()}catch(t){t instanceof Error&&(i=t)}if(await e.runCallbacks(\"handlerDidComplete\",{event:n,request:s,response:r,error:i}),e.destroy(),i)throw i}}function b(t){t.then((()=>{}))}function q(){return q=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var s=arguments[e];for(var n in s)({}).hasOwnProperty.call(s,n)&&(t[n]=s[n])}return t},q.apply(null,arguments)}let D,U;const x=new WeakMap,L=new WeakMap,I=new WeakMap,C=new WeakMap,E=new WeakMap;let N={get(t,e,s){if(t instanceof IDBTransaction){if(\"done\"===e)return L.get(t);if(\"objectStoreNames\"===e)return t.objectStoreNames||I.get(t);if(\"store\"===e)return s.objectStoreNames[1]?void 0:s.objectStore(s.objectStoreNames[0])}return k(t[e])},set:(t,e,s)=>(t[e]=s,!0),has:(t,e)=>t instanceof IDBTransaction&&(\"done\"===e||\"store\"===e)||e in t};function O(t){return t!==IDBDatabase.prototype.transaction||\"objectStoreNames\"in IDBTransaction.prototype?(U||(U=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(B(this),e),k(x.get(this))}:function(...e){return k(t.apply(B(this),e))}:function(e,...s){const n=t.call(B(this),e,...s);return I.set(n,e.sort?e.sort():[e]),k(n)}}function T(t){return\"function\"==typeof t?O(t):(t instanceof IDBTransaction&&function(t){if(L.has(t))return;const e=new Promise(((e,s)=>{const n=()=>{t.removeEventListener(\"complete\",r),t.removeEventListener(\"error\",i),t.removeEventListener(\"abort\",i)},r=()=>{e(),n()},i=()=>{s(t.error||new DOMException(\"AbortError\",\"AbortError\")),n()};t.addEventListener(\"complete\",r),t.addEventListener(\"error\",i),t.addEventListener(\"abort\",i)}));L.set(t,e)}(t),e=t,(D||(D=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction])).some((t=>e instanceof t))?new Proxy(t,N):t);var e}function k(t){if(t instanceof IDBRequest)return function(t){const e=new Promise(((e,s)=>{const n=()=>{t.removeEventListener(\"success\",r),t.removeEventListener(\"error\",i)},r=()=>{e(k(t.result)),n()},i=()=>{s(t.error),n()};t.addEventListener(\"success\",r),t.addEventListener(\"error\",i)}));return e.then((e=>{e instanceof IDBCursor&&x.set(e,t)})).catch((()=>{})),E.set(e,t),e}(t);if(C.has(t))return C.get(t);const e=T(t);return e!==t&&(C.set(t,e),E.set(e,t)),e}const B=t=>E.get(t);const P=[\"get\",\"getKey\",\"getAll\",\"getAllKeys\",\"count\"],M=[\"put\",\"add\",\"delete\",\"clear\"],W=new Map;function j(t,e){if(!(t instanceof IDBDatabase)||e in t||\"string\"!=typeof e)return;if(W.get(e))return W.get(e);const s=e.replace(/FromIndex$/,\"\"),n=e!==s,r=M.includes(s);if(!(s in(n?IDBIndex:IDBObjectStore).prototype)||!r&&!P.includes(s))return;const i=async function(t,...e){const i=this.transaction(t,r?\"readwrite\":\"readonly\");let a=i.store;return n&&(a=a.index(e.shift())),(await Promise.all([a[s](...e),r&&i.done]))[0]};return W.set(e,i),i}N=(t=>q({},t,{get:(e,s,n)=>j(e,s)||t.get(e,s,n),has:(e,s)=>!!j(e,s)||t.has(e,s)}))(N);try{self[\"workbox:expiration:6.5.4\"]&&_()}catch(t){}const S=\"cache-entries\",K=t=>{const e=new URL(t,location.href);return e.hash=\"\",e.href};class A{constructor(t){this._=null,this.L=t}I(t){const e=t.createObjectStore(S,{keyPath:\"id\"});e.createIndex(\"cacheName\",\"cacheName\",{unique:!1}),e.createIndex(\"timestamp\",\"timestamp\",{unique:!1})}C(t){this.I(t),this.L&&function(t,{blocked:e}={}){const s=indexedDB.deleteDatabase(t);e&&s.addEventListener(\"blocked\",(t=>e(t.oldVersion,t))),k(s).then((()=>{}))}(this.L)}async setTimestamp(t,e){const s={url:t=K(t),timestamp:e,cacheName:this.L,id:this.N(t)},n=(await this.getDb()).transaction(S,\"readwrite\",{durability:\"relaxed\"});await n.store.put(s),await n.done}async getTimestamp(t){const e=await this.getDb(),s=await e.get(S,this.N(t));return null==s?void 0:s.timestamp}async expireEntries(t,e){const s=await this.getDb();let n=await s.transaction(S).store.index(\"timestamp\").openCursor(null,\"prev\");const r=[];let i=0;for(;n;){const s=n.value;s.cacheName===this.L&&(t&&s.timestamp<t||e&&i>=e?r.push(n.value):i++),n=await n.continue()}const a=[];for(const t of r)await s.delete(S,t.id),a.push(t.url);return a}N(t){return this.L+\"|\"+K(t)}async getDb(){return this._||(this._=await function(t,e,{blocked:s,upgrade:n,blocking:r,terminated:i}={}){const a=indexedDB.open(t,e),o=k(a);return n&&a.addEventListener(\"upgradeneeded\",(t=>{n(k(a.result),t.oldVersion,t.newVersion,k(a.transaction),t)})),s&&a.addEventListener(\"blocked\",(t=>s(t.oldVersion,t.newVersion,t))),o.then((t=>{i&&t.addEventListener(\"close\",(()=>i())),r&&t.addEventListener(\"versionchange\",(t=>r(t.oldVersion,t.newVersion,t)))})).catch((()=>{})),o}(\"workbox-expiration\",1,{upgrade:this.C.bind(this)})),this._}}class F{constructor(t,e={}){this.O=!1,this.T=!1,this.k=e.maxEntries,this.B=e.maxAgeSeconds,this.P=e.matchOptions,this.L=t,this.M=new A(t)}async expireEntries(){if(this.O)return void(this.T=!0);this.O=!0;const t=this.B?Date.now()-1e3*this.B:0,e=await this.M.expireEntries(t,this.k),s=await self.caches.open(this.L);for(const t of e)await s.delete(t,this.P);this.O=!1,this.T&&(this.T=!1,b(this.expireEntries()))}async updateTimestamp(t){await this.M.setTimestamp(t,Date.now())}async isURLExpired(t){if(this.B){const e=await this.M.getTimestamp(t),s=Date.now()-1e3*this.B;return void 0===e||e<s}return!1}async delete(){this.T=!1,await this.M.expireEntries(1/0)}}try{self[\"workbox:range-requests:6.5.4\"]&&_()}catch(t){}async function H(t,e){try{if(206===e.status)return e;const n=t.headers.get(\"range\");if(!n)throw new s(\"no-range-header\");const r=function(t){const e=t.trim().toLowerCase();if(!e.startsWith(\"bytes=\"))throw new s(\"unit-must-be-bytes\",{normalizedRangeHeader:e});if(e.includes(\",\"))throw new s(\"single-range-only\",{normalizedRangeHeader:e});const n=/(\\d*)-(\\d*)/.exec(e);if(!n||!n[1]&&!n[2])throw new s(\"invalid-range-values\",{normalizedRangeHeader:e});return{start:\"\"===n[1]?void 0:Number(n[1]),end:\"\"===n[2]?void 0:Number(n[2])}}(n),i=await e.blob(),a=function(t,e,n){const r=t.size;if(n&&n>r||e&&e<0)throw new s(\"range-not-satisfiable\",{size:r,end:n,start:e});let i,a;return void 0!==e&&void 0!==n?(i=e,a=n+1):void 0!==e&&void 0===n?(i=e,a=r):void 0!==n&&void 0===e&&(i=r-n,a=r),{start:i,end:a}}(i,r.start,r.end),o=i.slice(a.start,a.end),c=o.size,h=new Response(o,{status:206,statusText:\"Partial Content\",headers:e.headers});return h.headers.set(\"Content-Length\",String(c)),h.headers.set(\"Content-Range\",`bytes ${a.start}-${a.end-1}/${i.size}`),h}catch(t){return new Response(\"\",{status:416,statusText:\"Range Not Satisfiable\"})}}function $(t,e){const s=e();return t.waitUntil(s),s}try{self[\"workbox:precaching:6.5.4\"]&&_()}catch(t){}function z(t){if(!t)throw new s(\"add-to-cache-list-unexpected-type\",{entry:t});if(\"string\"==typeof t){const e=new URL(t,location.href);return{cacheKey:e.href,url:e.href}}const{revision:e,url:n}=t;if(!n)throw new s(\"add-to-cache-list-unexpected-type\",{entry:t});if(!e){const t=new URL(n,location.href);return{cacheKey:t.href,url:t.href}}const r=new URL(n,location.href),i=new URL(n,location.href);return r.searchParams.set(\"__WB_REVISION__\",e),{cacheKey:r.href,url:i.href}}class G{constructor(){this.updatedURLs=[],this.notUpdatedURLs=[],this.handlerWillStart=async({request:t,state:e})=>{e&&(e.originalRequest=t)},this.cachedResponseWillBeUsed=async({event:t,state:e,cachedResponse:s})=>{if(\"install\"===t.type&&e&&e.originalRequest&&e.originalRequest instanceof Request){const t=e.originalRequest.url;s?this.notUpdatedURLs.push(t):this.updatedURLs.push(t)}return s}}}class V{constructor({precacheController:t}){this.cacheKeyWillBeUsed=async({request:t,params:e})=>{const s=(null==e?void 0:e.cacheKey)||this.W.getCacheKeyForURL(t.url);return s?new Request(s,{headers:t.headers}):t},this.W=t}}let J,Q;async function X(t,e){let n=null;if(t.url){n=new URL(t.url).origin}if(n!==self.location.origin)throw new s(\"cross-origin-copy-response\",{origin:n});const r=t.clone(),i={headers:new Headers(r.headers),status:r.status,statusText:r.statusText},a=e?e(i):i,o=function(){if(void 0===J){const t=new Response(\"\");if(\"body\"in t)try{new Response(t.body),J=!0}catch(t){J=!1}J=!1}return J}()?r.body:await r.blob();return new Response(o,a)}class Y extends R{constructor(t={}){t.cacheName=w(t.cacheName),super(t),this.j=!1!==t.fallbackToNetwork,this.plugins.push(Y.copyRedirectedCacheableResponsesPlugin)}async U(t,e){const s=await e.cacheMatch(t);return s||(e.event&&\"install\"===e.event.type?await this.S(t,e):await this.K(t,e))}async K(t,e){let n;const r=e.params||{};if(!this.j)throw new s(\"missing-precache-entry\",{cacheName:this.cacheName,url:t.url});{const s=r.integrity,i=t.integrity,a=!i||i===s;n=await e.fetch(new Request(t,{integrity:\"no-cors\"!==t.mode?i||s:void 0})),s&&a&&\"no-cors\"!==t.mode&&(this.A(),await e.cachePut(t,n.clone()))}return n}async S(t,e){this.A();const n=await e.fetch(t);if(!await e.cachePut(t,n.clone()))throw new s(\"bad-precaching-response\",{url:t.url,status:n.status});return n}A(){let t=null,e=0;for(const[s,n]of this.plugins.entries())n!==Y.copyRedirectedCacheableResponsesPlugin&&(n===Y.defaultPrecacheCacheabilityPlugin&&(t=s),n.cacheWillUpdate&&e++);0===e?this.plugins.push(Y.defaultPrecacheCacheabilityPlugin):e>1&&null!==t&&this.plugins.splice(t,1)}}Y.defaultPrecacheCacheabilityPlugin={cacheWillUpdate:async({response:t})=>!t||t.status>=400?null:t},Y.copyRedirectedCacheableResponsesPlugin={cacheWillUpdate:async({response:t})=>t.redirected?await X(t):t};class Z{constructor({cacheName:t,plugins:e=[],fallbackToNetwork:s=!0}={}){this.F=new Map,this.H=new Map,this.$=new Map,this.u=new Y({cacheName:w(t),plugins:[...e,new V({precacheController:this})],fallbackToNetwork:s}),this.install=this.install.bind(this),this.activate=this.activate.bind(this)}get strategy(){return this.u}precache(t){this.addToCacheList(t),this.G||(self.addEventListener(\"install\",this.install),self.addEventListener(\"activate\",this.activate),this.G=!0)}addToCacheList(t){const e=[];for(const n of t){\"string\"==typeof n?e.push(n):n&&void 0===n.revision&&e.push(n.url);const{cacheKey:t,url:r}=z(n),i=\"string\"!=typeof n&&n.revision?\"reload\":\"default\";if(this.F.has(r)&&this.F.get(r)!==t)throw new s(\"add-to-cache-list-conflicting-entries\",{firstEntry:this.F.get(r),secondEntry:t});if(\"string\"!=typeof n&&n.integrity){if(this.$.has(t)&&this.$.get(t)!==n.integrity)throw new s(\"add-to-cache-list-conflicting-integrities\",{url:r});this.$.set(t,n.integrity)}if(this.F.set(r,t),this.H.set(r,i),e.length>0){const t=`Workbox is precaching URLs without revision info: ${e.join(\", \")}\\nThis is generally NOT safe. Learn more at https://bit.ly/wb-precache`;console.warn(t)}}}install(t){return $(t,(async()=>{const e=new G;this.strategy.plugins.push(e);for(const[e,s]of this.F){const n=this.$.get(s),r=this.H.get(e),i=new Request(e,{integrity:n,cache:r,credentials:\"same-origin\"});await Promise.all(this.strategy.handleAll({params:{cacheKey:s},request:i,event:t}))}const{updatedURLs:s,notUpdatedURLs:n}=e;return{updatedURLs:s,notUpdatedURLs:n}}))}activate(t){return $(t,(async()=>{const t=await self.caches.open(this.strategy.cacheName),e=await t.keys(),s=new Set(this.F.values()),n=[];for(const r of e)s.has(r.url)||(await t.delete(r),n.push(r.url));return{deletedURLs:n}}))}getURLsToCacheKeys(){return this.F}getCachedURLs(){return[...this.F.keys()]}getCacheKeyForURL(t){const e=new URL(t,location.href);return this.F.get(e.href)}getIntegrityForCacheKey(t){return this.$.get(t)}async matchPrecache(t){const e=t instanceof Request?t.url:t,s=this.getCacheKeyForURL(e);if(s){return(await self.caches.open(this.strategy.cacheName)).match(s)}}createHandlerBoundToURL(t){const e=this.getCacheKeyForURL(t);if(!e)throw new s(\"non-precached-url\",{url:t});return s=>(s.request=new Request(t),s.params=Object.assign({cacheKey:e},s.params),this.strategy.handle(s))}}const tt=()=>(Q||(Q=new Z),Q);class et extends r{constructor(t,e){super((({request:s})=>{const n=t.getURLsToCacheKeys();for(const r of function*(t,{ignoreURLParametersMatching:e=[/^utm_/,/^fbclid$/],directoryIndex:s=\"index.html\",cleanURLs:n=!0,urlManipulation:r}={}){const i=new URL(t,location.href);i.hash=\"\",yield i.href;const a=function(t,e=[]){for(const s of[...t.searchParams.keys()])e.some((t=>t.test(s)))&&t.searchParams.delete(s);return t}(i,e);if(yield a.href,s&&a.pathname.endsWith(\"/\")){const t=new URL(a.href);t.pathname+=s,yield t.href}if(n){const t=new URL(a.href);t.pathname+=\".html\",yield t.href}if(r){const t=r({url:i});for(const e of t)yield e.href}}(s.url,e)){const e=n.get(r);if(e){return{cacheKey:e,integrity:t.getIntegrityForCacheKey(e)}}}}),t.strategy)}}t.CacheFirst=class extends R{async U(t,e){let n,r=await e.cacheMatch(t);if(!r)try{r=await e.fetchAndCachePut(t)}catch(t){t instanceof Error&&(n=t)}if(!r)throw new s(\"no-response\",{url:t.url,error:n});return r}},t.ExpirationPlugin=class{constructor(t={}){this.cachedResponseWillBeUsed=async({event:t,request:e,cacheName:s,cachedResponse:n})=>{if(!n)return null;const r=this.V(n),i=this.J(s);b(i.expireEntries());const a=i.updateTimestamp(e.url);if(t)try{t.waitUntil(a)}catch(t){}return r?n:null},this.cacheDidUpdate=async({cacheName:t,request:e})=>{const s=this.J(t);await s.updateTimestamp(e.url),await s.expireEntries()},this.X=t,this.B=t.maxAgeSeconds,this.Y=new Map,t.purgeOnQuotaError&&function(t){g.add(t)}((()=>this.deleteCacheAndMetadata()))}J(t){if(t===d())throw new s(\"expire-custom-caches-only\");let e=this.Y.get(t);return e||(e=new F(t,this.X),this.Y.set(t,e)),e}V(t){if(!this.B)return!0;const e=this.Z(t);if(null===e)return!0;return e>=Date.now()-1e3*this.B}Z(t){if(!t.headers.has(\"date\"))return null;const e=t.headers.get(\"date\"),s=new Date(e).getTime();return isNaN(s)?null:s}async deleteCacheAndMetadata(){for(const[t,e]of this.Y)await self.caches.delete(t),await e.delete();this.Y=new Map}},t.NetworkFirst=class extends R{constructor(t={}){super(t),this.plugins.some((t=>\"cacheWillUpdate\"in t))||this.plugins.unshift(u),this.tt=t.networkTimeoutSeconds||0}async U(t,e){const n=[],r=[];let i;if(this.tt){const{id:s,promise:a}=this.et({request:t,logs:n,handler:e});i=s,r.push(a)}const a=this.st({timeoutId:i,request:t,logs:n,handler:e});r.push(a);const o=await e.waitUntil((async()=>await e.waitUntil(Promise.race(r))||await a)());if(!o)throw new s(\"no-response\",{url:t.url});return o}et({request:t,logs:e,handler:s}){let n;return{promise:new Promise((e=>{n=setTimeout((async()=>{e(await s.cacheMatch(t))}),1e3*this.tt)})),id:n}}async st({timeoutId:t,request:e,logs:s,handler:n}){let r,i;try{i=await n.fetchAndCachePut(e)}catch(t){t instanceof Error&&(r=t)}return t&&clearTimeout(t),!r&&i||(i=await n.cacheMatch(e)),i}},t.RangeRequestsPlugin=class{constructor(){this.cachedResponseWillBeUsed=async({request:t,cachedResponse:e})=>e&&t.headers.has(\"range\")?await H(t,e):e}},t.StaleWhileRevalidate=class extends R{constructor(t={}){super(t),this.plugins.some((t=>\"cacheWillUpdate\"in t))||this.plugins.unshift(u)}async U(t,e){const n=e.fetchAndCachePut(t).catch((()=>{}));e.waitUntil(n);let r,i=await e.cacheMatch(t);if(i);else try{i=await n}catch(t){t instanceof Error&&(r=t)}if(!i)throw new s(\"no-response\",{url:t.url,error:r});return i}},t.cleanupOutdatedCaches=function(){self.addEventListener(\"activate\",(t=>{const e=w();t.waitUntil((async(t,e=\"-precache-\")=>{const s=(await self.caches.keys()).filter((s=>s.includes(e)&&s.includes(self.registration.scope)&&s!==t));return await Promise.all(s.map((t=>self.caches.delete(t)))),s})(e).then((t=>{})))}))},t.clientsClaim=function(){self.addEventListener(\"activate\",(()=>self.clients.claim()))},t.precacheAndRoute=function(t,e){!function(t){tt().precache(t)}(t),function(t){const e=tt();h(new et(e,t))}(e)},t.registerRoute=h}));\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\scripts\\analyze-bundle.js","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":14,"column":22,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":14,"endColumn":46},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":15,"column":12,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":15,"endColumn":25},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":16,"column":14,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":16,"endColumn":29},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":39,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":39,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1142,1185],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":49,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":49,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1468,1551],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":50,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":50,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1557,1635],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":68,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":68,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2065,2116],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":74,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":74,"endColumn":15},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":75,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":75,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2281,2319],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":91,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":91,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2831,2878],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":93,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":93,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2940,2967],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":95,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":95,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2986,3066],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":97,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":97,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3088,3137],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":111,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":111,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3421,3471],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":117,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":117,"endColumn":15},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":118,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":118,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3644,3686],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":132,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":132,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4103,4176],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":145,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":145,"endColumn":17},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":155,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":155,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4908,4974],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":157,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":157,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5024,5088],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":159,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":159,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5107,5191],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":161,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":161,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5213,5290],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":175,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":175,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5549,5599],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":181,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":181,"endColumn":15},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":182,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":182,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5766,5805],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":195,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":195,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6285,6331],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":197,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":197,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6376,6475],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":199,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":199,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6494,6575],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":201,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":201,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6597,6645],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":215,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":215,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6953,7016],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":274,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":274,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9030,9080],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":276,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":276,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9131,9202],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":277,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":277,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9208,9248],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":278,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":278,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9254,9297],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":288,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":288,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9411,9459],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'recommendations' is assigned a value but never used.","line":297,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":297,"endColumn":24},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":299,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":299,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9812,9857],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":302,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":302,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9899,9977],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":305,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":305,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9990,10095],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":36,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Bundle Analyzer Script\r\n * \r\n * This script analyzes the Next.js bundle to identify large dependencies\r\n * and opportunities for optimization.\r\n * \r\n * Usage:\r\n *   node scripts/analyze-bundle.js\r\n * \r\n * Or use the provided npm script:\r\n *   npm run analyze-bundle\r\n */\r\n\r\nconst { execSync } = require('child_process');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\n\r\n// Configuration\r\nconst BUNDLE_REPORT_DIR = path.join(process.cwd(), '.next/analyze');\r\nconst BUNDLE_REPORT_HTML = path.join(BUNDLE_REPORT_DIR, 'bundle-report.html');\r\nconst UNUSED_DEPS_REPORT = path.join(process.cwd(), 'reports/unused-dependencies.json');\r\nconst SIZE_THRESHOLD_KB = 100; // Report dependencies larger than this threshold\r\n\r\n// Ensure the report directory exists\r\nif (!fs.existsSync(BUNDLE_REPORT_DIR)) {\r\n  fs.mkdirSync(BUNDLE_REPORT_DIR, { recursive: true });\r\n}\r\n\r\n// Ensure the reports directory exists\r\nconst reportsDir = path.join(process.cwd(), 'reports');\r\nif (!fs.existsSync(reportsDir)) {\r\n  fs.mkdirSync(reportsDir, { recursive: true });\r\n}\r\n\r\n/**\r\n * Run the Next.js bundle analyzer\r\n */\r\nfunction analyzeBundleSize() {\r\n  console.log('📊 Analyzing bundle size...');\r\n  \r\n  try {\r\n    // Set environment variables for Next.js bundle analyzer\r\n    process.env.ANALYZE = 'true';\r\n    process.env.BUNDLE_ANALYZE = 'browser';\r\n    \r\n    // Build the Next.js application with bundle analyzer\r\n    execSync('next build', { stdio: 'inherit' });\r\n    \r\n    console.log(`\\n✅ Bundle analysis complete. Report saved to ${BUNDLE_REPORT_HTML}`);\r\n    console.log('   Open this file in your browser to view the detailed report.');\r\n    \r\n    // Copy the report to a more accessible location\r\n    if (fs.existsSync('.next/analyze/client.html')) {\r\n      fs.copyFileSync('.next/analyze/client.html', BUNDLE_REPORT_HTML);\r\n    }\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('❌ Failed to analyze bundle:', error.message);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Find unused dependencies in the project\r\n */\r\nfunction findUnusedDependencies() {\r\n  console.log('\\n🔍 Finding unused dependencies...');\r\n  \r\n  try {\r\n    // Install depcheck if not already installed\r\n    try {\r\n      execSync('npx depcheck --version', { stdio: 'ignore' });\r\n    } catch (e) {\r\n      console.log('Installing depcheck...');\r\n      execSync('npm install -g depcheck', { stdio: 'inherit' });\r\n    }\r\n    \r\n    // Run depcheck and capture the output\r\n    const depcheckOutput = execSync('npx depcheck --json', { encoding: 'utf8' });\r\n    const depcheckResult = JSON.parse(depcheckOutput);\r\n    \r\n    // Save the result to a file\r\n    fs.writeFileSync(\r\n      UNUSED_DEPS_REPORT,\r\n      JSON.stringify(depcheckResult, null, 2)\r\n    );\r\n    \r\n    // Display the unused dependencies\r\n    if (depcheckResult.dependencies.length > 0) {\r\n      console.log('\\n⚠️ Unused dependencies found:');\r\n      depcheckResult.dependencies.forEach(dep => {\r\n        console.log(`   - ${dep}`);\r\n      });\r\n      console.log(`\\n   Consider removing these dependencies to reduce bundle size.`);\r\n    } else {\r\n      console.log('\\n✅ No unused dependencies found.');\r\n    }\r\n    \r\n    return depcheckResult.dependencies;\r\n  } catch (error) {\r\n    console.error('❌ Failed to find unused dependencies:', error.message);\r\n    return [];\r\n  }\r\n}\r\n\r\n/**\r\n * Analyze the package.json to find large dependencies\r\n */\r\nfunction analyzeDependencySizes() {\r\n  console.log('\\n📏 Analyzing dependency sizes...');\r\n  \r\n  try {\r\n    // Install package-size if not already installed\r\n    try {\r\n      execSync('npx package-size --version', { stdio: 'ignore' });\r\n    } catch (e) {\r\n      console.log('Installing package-size...');\r\n      execSync('npm install -g package-size', { stdio: 'inherit' });\r\n    }\r\n    \r\n    // Get the list of dependencies from package.json\r\n    const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));\r\n    const dependencies = {\r\n      ...packageJson.dependencies,\r\n      ...packageJson.devDependencies\r\n    };\r\n    \r\n    // Get the size of each dependency\r\n    const dependencySizes = [];\r\n    \r\n    console.log('\\n   Checking dependency sizes (this may take a while)...');\r\n    \r\n    for (const [name, version] of Object.entries(dependencies)) {\r\n      try {\r\n        const sizeOutput = execSync(`npx package-size ${name} --json`, { encoding: 'utf8' });\r\n        const sizeInfo = JSON.parse(sizeOutput);\r\n        \r\n        // Convert to KB\r\n        const sizeKB = Math.round(sizeInfo.size / 1024);\r\n        \r\n        if (sizeKB > SIZE_THRESHOLD_KB) {\r\n          dependencySizes.push({ name, version, sizeKB });\r\n        }\r\n      } catch (e) {\r\n        // Skip dependencies that can't be analyzed\r\n      }\r\n    }\r\n    \r\n    // Sort by size (largest first)\r\n    dependencySizes.sort((a, b) => b.sizeKB - a.sizeKB);\r\n    \r\n    // Display the large dependencies\r\n    if (dependencySizes.length > 0) {\r\n      console.log(`\\n⚠️ Large dependencies (>${SIZE_THRESHOLD_KB}KB):`);\r\n      dependencySizes.forEach(dep => {\r\n        console.log(`   - ${dep.name}@${dep.version}: ${dep.sizeKB}KB`);\r\n      });\r\n      console.log('\\n   Consider alternatives or code splitting for these dependencies.');\r\n    } else {\r\n      console.log(`\\n✅ No dependencies larger than ${SIZE_THRESHOLD_KB}KB found.`);\r\n    }\r\n    \r\n    return dependencySizes;\r\n  } catch (error) {\r\n    console.error('❌ Failed to analyze dependency sizes:', error.message);\r\n    return [];\r\n  }\r\n}\r\n\r\n/**\r\n * Find duplicate packages in node_modules\r\n */\r\nfunction findDuplicatePackages() {\r\n  console.log('\\n🔄 Finding duplicate packages...');\r\n  \r\n  try {\r\n    // Install npm-check if not already installed\r\n    try {\r\n      execSync('npx npm-check --version', { stdio: 'ignore' });\r\n    } catch (e) {\r\n      console.log('Installing npm-check...');\r\n      execSync('npm install -g npm-check', { stdio: 'inherit' });\r\n    }\r\n    \r\n    // Run npm-check and capture the output\r\n    const npmCheckOutput = execSync('npx npm-check --skip-unused --json', { encoding: 'utf8' });\r\n    const npmCheckResult = JSON.parse(npmCheckOutput);\r\n    \r\n    // Find packages with duplicates\r\n    const duplicates = npmCheckResult.filter(pkg => pkg.duplicated);\r\n    \r\n    // Display the duplicate packages\r\n    if (duplicates.length > 0) {\r\n      console.log('\\n⚠️ Duplicate packages found:');\r\n      duplicates.forEach(pkg => {\r\n        console.log(`   - ${pkg.moduleName}: ${pkg.installed} (duplicates: ${pkg.duplicated.join(', ')})`);\r\n      });\r\n      console.log('\\n   Consider deduplicating these packages to reduce bundle size.');\r\n    } else {\r\n      console.log('\\n✅ No duplicate packages found.');\r\n    }\r\n    \r\n    return duplicates;\r\n  } catch (error) {\r\n    console.error('❌ Failed to find duplicate packages:', error.message);\r\n    return [];\r\n  }\r\n}\r\n\r\n/**\r\n * Generate optimization recommendations based on the analysis\r\n */\r\nfunction generateRecommendations(unusedDeps, largeDeps, duplicates) {\r\n  console.log('\\n📝 Generating optimization recommendations...');\r\n  \r\n  const recommendations = [];\r\n  \r\n  // Recommendations for unused dependencies\r\n  if (unusedDeps.length > 0) {\r\n    recommendations.push({\r\n      title: 'Remove unused dependencies',\r\n      description: `Remove ${unusedDeps.length} unused dependencies to reduce bundle size.`,\r\n      action: `npm uninstall ${unusedDeps.join(' ')}`,\r\n      impact: 'Medium'\r\n    });\r\n  }\r\n  \r\n  // Recommendations for large dependencies\r\n  if (largeDeps.length > 0) {\r\n    largeDeps.forEach(dep => {\r\n      recommendations.push({\r\n        title: `Optimize ${dep.name} usage`,\r\n        description: `${dep.name} is ${dep.sizeKB}KB in size. Consider code splitting or finding a lighter alternative.`,\r\n        action: `Implement dynamic import for ${dep.name} or replace with a lighter alternative.`,\r\n        impact: 'High'\r\n      });\r\n    });\r\n  }\r\n  \r\n  // Recommendations for duplicate packages\r\n  if (duplicates.length > 0) {\r\n    recommendations.push({\r\n      title: 'Deduplicate packages',\r\n      description: `Deduplicate ${duplicates.length} packages to reduce bundle size.`,\r\n      action: 'Run \"npm dedupe\" to deduplicate packages.',\r\n      impact: 'Medium'\r\n    });\r\n  }\r\n  \r\n  // General recommendations\r\n  recommendations.push({\r\n    title: 'Implement code splitting',\r\n    description: 'Use dynamic imports to split code into smaller chunks that can be loaded on demand.',\r\n    action: 'Identify large components and convert them to use dynamic imports.',\r\n    impact: 'High'\r\n  });\r\n  \r\n  recommendations.push({\r\n    title: 'Optimize images',\r\n    description: 'Use Next.js Image component to automatically optimize images.',\r\n    action: 'Replace <img> tags with Next.js <Image> component.',\r\n    impact: 'High'\r\n  });\r\n  \r\n  recommendations.push({\r\n    title: 'Implement tree shaking',\r\n    description: 'Ensure your code is tree-shakable to eliminate dead code.',\r\n    action: 'Use ES modules and avoid side effects in module imports.',\r\n    impact: 'Medium'\r\n  });\r\n  \r\n  // Display the recommendations\r\n  console.log('\\n🚀 Optimization recommendations:');\r\n  recommendations.forEach((rec, index) => {\r\n    console.log(`\\n   ${index + 1}. ${rec.title} (Impact: ${rec.impact})`);\r\n    console.log(`      ${rec.description}`);\r\n    console.log(`      Action: ${rec.action}`);\r\n  });\r\n  \r\n  return recommendations;\r\n}\r\n\r\n/**\r\n * Main function to run the analysis\r\n */\r\nfunction main() {\r\n  console.log('🔍 Starting bundle analysis...\\n');\r\n  \r\n  // Run the analyses\r\n  const bundleAnalysisSuccess = analyzeBundleSize();\r\n  const unusedDeps = findUnusedDependencies();\r\n  const largeDeps = analyzeDependencySizes();\r\n  const duplicates = findDuplicatePackages();\r\n  \r\n  // Generate recommendations\r\n  const recommendations = generateRecommendations(unusedDeps, largeDeps, duplicates);\r\n  \r\n  console.log('\\n✅ Bundle analysis complete!');\r\n  \r\n  if (bundleAnalysisSuccess) {\r\n    console.log(`\\n   View the detailed bundle report at: ${BUNDLE_REPORT_HTML}`);\r\n  }\r\n  \r\n  console.log('\\n   Follow the optimization recommendations to improve your bundle size and performance.');\r\n}\r\n\r\n// Run the main function\r\nmain();\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\scripts\\audit-components.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":160,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":160,"endColumn":12,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7399,7519],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as fs from 'fs';\r\nimport * as path from 'path';\r\n// import * as ts from 'typescript'; // TypeScript AST parsing is complex for this, regex might be simpler for now\r\n\r\ninterface ComponentAudit {\r\n  path: string;\r\n  issues: string[];\r\n  type: 'presentational' | 'container' | 'unknown' | 'pageOrLayout';\r\n  hasPropInterface: boolean;\r\n  hasMemo: boolean;\r\n  hasDataFetchingHooks: boolean;\r\n  hasMutationHooks: boolean;\r\n  hasDirectSupabaseCall: boolean;\r\n  hasWindowCall: boolean;\r\n}\r\n\r\nconst projectRoot = path.resolve(__dirname, '..');\r\nconst componentsDir = path.join(projectRoot, 'components');\r\nconst containersDir = path.join(projectRoot, 'containers');\r\nconst appDir = path.join(projectRoot, 'app'); // Include app directory for pages/layouts\r\n\r\n// Function to find all .tsx files, excluding .test.tsx and .stories.tsx\r\nconst findCodeFiles = (dir: string): string[] => {\r\n  let results: string[] = [];\r\n  const list = fs.readdirSync(dir);\r\n  list.forEach(file => {\r\n    const filePath = path.join(dir, file);\r\n    const stat = fs.statSync(filePath);\r\n    if (stat && stat.isDirectory()) {\r\n      // Exclude common non-component dirs, adjust as needed\r\n      if (!['node_modules', '.next', 'public', 'scripts', 'reports', '.github', 'docs'].includes(file)) {\r\n        results = results.concat(findCodeFiles(filePath));\r\n      }\r\n    } else if (filePath.endsWith('.tsx') && !filePath.endsWith('.test.tsx') && !filePath.endsWith('.spec.tsx') && !filePath.endsWith('.stories.tsx')) {\r\n      results.push(filePath);\r\n    }\r\n  });\r\n  return results;\r\n};\r\n\r\n\r\nconst allRelevantFiles = [\r\n    ...findCodeFiles(componentsDir), \r\n    ...findCodeFiles(containersDir),\r\n    ...findCodeFiles(appDir) // Add files from app directory\r\n];\r\n\r\n\r\n// Regexes\r\nconst clientComponentRegex = /^\\s*['\"]use client['\"]/;\r\nconst dataFetchingHookRegex = /use(Tasks|Profile|Reflecties|MySpecialists|MyPatients|Insights|TaskLogs|RecentLogs|Task|SupabaseQuery)/; // Focused on query hooks\r\nconst mutationHookRegex = /use(UpsertTask|DeleteTask|UpdateProfile|AddTaskLog|UpdateTaskLog|DeleteTaskLog|UpsertReflectie|DeleteReflectie|AddSpecialistPatientRelation|DeleteSpecialistPatientRelation)/;\r\nconst directSupabaseCallRegex = /\\.from\\s*\\(\\s*['\"].*['\"]\\s*\\)\\s*\\.\\s*(select|insert|update|delete|rpc|upload|download)/;\r\nconst windowCallRegex = /window\\.(alert|location|confirm|prompt|localStorage|sessionStorage)/;\r\nconst propsInterfaceRegex = /interface\\s+\\w+Props/;\r\nconst reactMemoRegex = /React\\.memo\\s*\\(|memo\\s*\\(/;\r\n\r\n\r\nfunction auditComponentFile(filePath: string): ComponentAudit {\r\n  const content = fs.readFileSync(filePath, 'utf8');\r\n  const relativePath = path.relative(projectRoot, filePath).replace(/\\\\/g, '/');\r\n  const issues: string[] = [];\r\n  \r\n  let type: ComponentAudit['type'] = 'unknown';\r\n  const isClient = clientComponentRegex.test(content);\r\n  const hasDataHooks = dataFetchingHookRegex.test(content);\r\n  const hasMutationHooks = mutationHookRegex.test(content);\r\n  const hasSupabaseDirect = directSupabaseCallRegex.test(content);\r\n\r\n  if (relativePath.startsWith('app/') && (relativePath.endsWith('/page.tsx') || relativePath.endsWith('/layout.tsx'))) {\r\n    type = 'pageOrLayout';\r\n  } else if (relativePath.includes('/containers/') || relativePath.endsWith('Container.tsx')) {\r\n    type = 'container';\r\n  } else if (isClient && !hasDataHooks && !hasMutationHooks && !hasSupabaseDirect) {\r\n    // If it's a client component without direct data logic, assume presentational for now\r\n    type = 'presentational';\r\n  } else if (!isClient && !hasDataHooks && !hasMutationHooks && !hasSupabaseDirect) {\r\n    // If not 'use client' and no data logic, could be a Server Component (presentational by nature)\r\n    type = 'presentational';\r\n  }\r\n\r\n\r\n  if (type === 'presentational' && (hasDataHooks || hasMutationHooks || hasSupabaseDirect)) {\r\n    issues.push('Presentational component seems to contain data fetching/mutation logic.');\r\n  }\r\n  if (type === 'container' && !(hasDataHooks || hasMutationHooks || hasSupabaseDirect) && isClient) {\r\n    // A client container without data logic might be okay if it only manages complex local UI state.\r\n    // This rule might need refinement.\r\n    // issues.push('Container component does not seem to use data fetching/mutation hooks.');\r\n  }\r\n  \r\n  const hasProps = propsInterfaceRegex.test(content);\r\n  if (isClient && !hasProps && type !== 'pageOrLayout' && !relativePath.endsWith('Client.tsx')) { // Client components (not pages/layouts) usually have props\r\n     // issues.push('Potentially missing Props interface for a client component.');\r\n  }\r\n\r\n  const hasMemo = reactMemoRegex.test(content);\r\n  if (type === 'presentational' && !hasMemo) {\r\n    issues.push('Presentational component could benefit from React.memo.');\r\n  }\r\n\r\n  const hasWindowCalls = windowCallRegex.test(content);\r\n  if (hasWindowCalls) {\r\n    issues.push('Component uses window global (alert, location, etc.). Consider abstracting to service or context.');\r\n  }\r\n  \r\n  return {\r\n    path: relativePath,\r\n    issues,\r\n    type,\r\n    hasPropInterface: hasProps,\r\n    hasMemo,\r\n    hasDataFetchingHooks: hasDataHooks,\r\n    hasMutationHooks: hasMutationHooks,\r\n    hasDirectSupabaseCall: hasSupabaseDirect,\r\n    hasWindowCall: hasWindowCalls,\r\n  };\r\n}\r\n\r\nconst allAudits = allRelevantFiles.map(auditComponentFile);\r\n\r\n// Generate report\r\nlet markdownReport = '# Component Pattern Audit Report\\n\\n';\r\nmarkdownReport += `_Generated on ${new Date().toISOString()}_\\n\\n`;\r\nmarkdownReport += `Total files audited: ${allAudits.length}\\n`;\r\nconst componentsWithIssues = allAudits.filter(a => a.issues.length > 0);\r\nmarkdownReport += `Files with potential issues: ${componentsWithIssues.length}\\n\\n`;\r\n\r\nmarkdownReport += '## Files with Potential Issues\\n\\n';\r\nif (componentsWithIssues.length === 0) {\r\n  markdownReport += 'No major pattern issues found based on current heuristics.\\n';\r\n} else {\r\n  for (const audit of componentsWithIssues) {\r\n    markdownReport += `### \\`${audit.path}\\`\\n\\n`;\r\n    markdownReport += `- Detected Type: **${audit.type}**\\n`;\r\n    markdownReport += '- Issues:\\n';\r\n    for (const issue of audit.issues) {\r\n      markdownReport += `  - ${issue}\\n`;\r\n    }\r\n    markdownReport += '\\n';\r\n  }\r\n}\r\n\r\nmarkdownReport += '\\n## Heuristics Used:\\n';\r\nmarkdownReport += '- **Container**: Path includes `/containers/` or ends with `Container.tsx`.\\n';\r\nmarkdownReport += '- **Presentational**: Is `\\'use client\\'` but no data/mutation hooks or direct Supabase calls detected; OR is not `\\'use client\\'` and no data logic (assumed Server Component).\\n';\r\nmarkdownReport += '- **Page/Layout**: Path starts with `app/` and ends with `/page.tsx` or `/layout.tsx`.\\n';\r\nmarkdownReport += '- **Data Fetching**: Uses common query hook names (e.g., `useTasks`, `useProfile`).\\n';\r\nmarkdownReport += '- **Mutations**: Uses common mutation hook names (e.g., `useUpsertTask`).\\n';\r\nmarkdownReport += '- **Direct Supabase**: Contains `.from(...).select(...)` etc.\\n';\r\nmarkdownReport += '- **Window Calls**: Contains `window.alert`, `window.location`, etc.\\n';\r\nmarkdownReport += '- **React.memo**: Checks for `React.memo(` or `memo(`.\\n';\r\n\r\n\r\nconst reportsDir = path.join(__dirname, '..', 'reports');\r\nif (!fs.existsSync(reportsDir)) {\r\n  fs.mkdirSync(reportsDir, { recursive: true });\r\n}\r\nfs.writeFileSync(path.join(reportsDir, 'component-pattern-audit.md'), markdownReport);\r\nconsole.log(`Component pattern audit complete. Report saved to ${path.join(reportsDir, 'component-pattern-audit.md')}`);\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\scripts\\auto-fix-system.js","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":26,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":26,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":93,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":93,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'diagnostics' should be typed.","line":93,"column":25,"nodeType":"Identifier","messageId":"missingArgType","endLine":93,"endColumn":36},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":94,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":94,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2376,2422],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":112,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":112,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3023,3061],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":114,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":114,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3125,3184],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":120,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":120,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'sortedProblems' should be typed.","line":120,"column":25,"nodeType":"Identifier","messageId":"missingArgType","endLine":120,"endColumn":39},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":121,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":121,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3277,3331],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":127,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":127,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3478,3533],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":131,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":131,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3571,3645],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":141,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":141,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'problems' should be typed.","line":141,"column":22,"nodeType":"Identifier","messageId":"missingArgType","endLine":141,"endColumn":30},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":147,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":147,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4056,4103],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":155,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":155,"endColumn":21},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":156,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":156,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4322,4374],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":161,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":161,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'problems' should be typed.","line":161,"column":23,"nodeType":"Identifier","messageId":"missingArgType","endLine":161,"endColumn":31},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":178,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":178,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5119,5187],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":181,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":181,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5233,5296],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":186,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":186,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'problems' should be typed.","line":186,"column":24,"nodeType":"Identifier","messageId":"missingArgType","endLine":186,"endColumn":32},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":200,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":200,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6089,6152],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":205,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":205,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6226,6294],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":210,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":210,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'problems' should be typed.","line":210,"column":24,"nodeType":"Identifier","messageId":"missingArgType","endLine":210,"endColumn":32},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":231,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":231,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6993,7047],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":234,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":234,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7093,7158],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":239,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":239,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'problems' should be typed.","line":239,"column":30,"nodeType":"Identifier","messageId":"missingArgType","endLine":239,"endColumn":38},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":260,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":260,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7865,7924],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":263,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":263,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7970,8044],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":268,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":268,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'problems' should be typed.","line":268,"column":30,"nodeType":"Identifier","messageId":"missingArgType","endLine":268,"endColumn":38},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":280,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":280,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8655,8712],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":283,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":283,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8758,8828],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":288,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":288,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'problems' should be typed.","line":288,"column":26,"nodeType":"Identifier","messageId":"missingArgType","endLine":288,"endColumn":34},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":291,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":291,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8986,9074],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":292,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":292,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9082,9122],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":296,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":296,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'problems' should be typed.","line":296,"column":27,"nodeType":"Identifier","messageId":"missingArgType","endLine":296,"endColumn":35},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":299,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":299,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9287,9366],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":300,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":300,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9374,9414],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":304,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":304,"endColumn":23},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":305,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":305,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9462,9494],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":306,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":306,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9500,9559],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":307,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":307,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9565,9629],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":310,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":310,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9681,9733],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":311,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":311,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9739,9806],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":312,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":312,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9812,9872],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":313,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":313,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9878,9933],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":314,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":314,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9939,10002],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":317,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":317,"endColumn":30},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":318,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":318,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10050,10104],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":335,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":335,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10725,10787],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":336,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":336,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":337,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":337,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10818,10878],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":352,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":352,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11295,11348],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":353,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":353,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":354,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":354,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11379,11430],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":370,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":370,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":371,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":371,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11837,11926],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":397,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":397,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12922,12994],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":401,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":401,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13022,13078],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":402,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":402,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13084,13143],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":416,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":416,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13512,13559],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":417,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":417,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13565,13643],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":68,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\r\n\r\n/**\r\n * FibroGuardian Auto-Fix System\r\n * Automatisch oplossen van ESLint/TypeScript problemen\r\n */\r\n\r\nimport { execSync } from 'child_process';\r\nimport { promises as fs } from 'fs';\r\nimport path from 'path';\r\n\r\nimport { ESLint } from 'eslint';\r\n\r\nclass AutoFixSystem {\r\n  constructor() {\r\n    this.eslint = new ESLint({ \r\n      fix: true,\r\n      cache: true,\r\n      cacheLocation: '.eslintcache'\r\n    });\r\n    this.fixedFiles = new Set();\r\n    this.problemsByType = new Map();\r\n    this.autoFixRules = this.initializeAutoFixRules();\r\n  }\r\n\r\n  initializeAutoFixRules() {\r\n    return {\r\n      // Import/Export problemen\r\n      'import/order': {\r\n        autofix: true,\r\n        command: 'eslint --fix',\r\n        priority: 1\r\n      },\r\n      'unused-imports/no-unused-imports': {\r\n        autofix: true,\r\n        command: 'eslint --fix',\r\n        priority: 1\r\n      },\r\n      'import/no-named-as-default': {\r\n        autofix: false,\r\n        handler: this.fixNamedAsDefault.bind(this),\r\n        priority: 2\r\n      },\r\n\r\n      // TypeScript problemen\r\n      '@typescript-eslint/no-unused-vars': {\r\n        autofix: false,\r\n        handler: this.fixUnusedVars.bind(this),\r\n        priority: 2\r\n      },\r\n      '@typescript-eslint/explicit-module-boundary-types': {\r\n        autofix: false,\r\n        handler: this.addReturnTypes.bind(this),\r\n        priority: 3\r\n      },\r\n      '@typescript-eslint/no-explicit-any': {\r\n        autofix: false,\r\n        handler: this.fixExplicitAny.bind(this),\r\n        priority: 3\r\n      },\r\n\r\n      // Tailwind problemen\r\n      'tailwindcss/classnames-order': {\r\n        autofix: true,\r\n        command: 'eslint --fix',\r\n        priority: 1\r\n      },\r\n      'tailwindcss/enforces-shorthand': {\r\n        autofix: true,\r\n        command: 'eslint --fix',\r\n        priority: 1\r\n      },\r\n      'tailwindcss/migration-from-tailwind-2': {\r\n        autofix: false,\r\n        handler: this.fixTailwindMigration.bind(this),\r\n        priority: 2\r\n      },\r\n\r\n      // Console en code quality\r\n      'no-console': {\r\n        autofix: false,\r\n        handler: this.fixConsoleStatements.bind(this),\r\n        priority: 2\r\n      },\r\n      'react-hooks/exhaustive-deps': {\r\n        autofix: false,\r\n        handler: this.fixReactHookDeps.bind(this),\r\n        priority: 3\r\n      }\r\n    };\r\n  }\r\n\r\n  async analyzeProblems(diagnostics) {\r\n    console.log('🔍 Analyseren van problemen...');\r\n    \r\n    for (const problem of diagnostics) {\r\n      const ruleId = problem.code?.value || problem.code;\r\n      if (!this.problemsByType.has(ruleId)) {\r\n        this.problemsByType.set(ruleId, []);\r\n      }\r\n      this.problemsByType.get(ruleId).push(problem);\r\n    }\r\n\r\n    // Sorteer problemen op prioriteit\r\n    const sortedProblems = Array.from(this.problemsByType.entries())\r\n      .sort(([a], [b]) => {\r\n        const priorityA = this.autoFixRules[a]?.priority || 999;\r\n        const priorityB = this.autoFixRules[b]?.priority || 999;\r\n        return priorityA - priorityB;\r\n      });\r\n\r\n    console.log(`📊 Gevonden problemen:`);\r\n    for (const [ruleId, problems] of sortedProblems) {\r\n      console.log(`  - ${ruleId}: ${problems.length} problemen`);\r\n    }\r\n\r\n    return sortedProblems;\r\n  }\r\n\r\n  async autoFixProblems(sortedProblems) {\r\n    console.log('\\n🔧 Starten met automatische fixes...');\r\n    \r\n    for (const [ruleId, problems] of sortedProblems) {\r\n      const rule = this.autoFixRules[ruleId];\r\n      \r\n      if (!rule) {\r\n        console.log(`⚠️  Geen regel gevonden voor: ${ruleId}`);\r\n        continue;\r\n      }\r\n\r\n      console.log(`\\n🎯 Oplossen van ${ruleId} (${problems.length} problemen)`);\r\n\r\n      if (rule.autofix && rule.command) {\r\n        await this.runESLintFix(problems);\r\n      } else if (rule.handler) {\r\n        await rule.handler(problems);\r\n      }\r\n    }\r\n  }\r\n\r\n  async runESLintFix(problems) {\r\n    const files = [...new Set(problems.map(p => p.resource))];\r\n    \r\n    for (const file of files) {\r\n      try {\r\n        const relativePath = path.relative(process.cwd(), file);\r\n        console.log(`  ⚡ ESLint fix: ${relativePath}`);\r\n        \r\n        execSync(`npx eslint \"${relativePath}\" --fix`, { \r\n          stdio: 'pipe',\r\n          cwd: process.cwd()\r\n        });\r\n        \r\n        this.fixedFiles.add(file);\r\n      } catch (error) {\r\n        console.log(`  ❌ ESLint fix gefaald voor: ${file}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  async fixUnusedVars(problems) {\r\n    for (const problem of problems) {\r\n      try {\r\n        const content = await fs.readFile(problem.resource, 'utf8');\r\n        const lines = content.split('\\n');\r\n        const line = lines[problem.startLineNumber - 1];\r\n        \r\n        // Voeg underscore toe aan ongebruikte variabelen\r\n        const varName = problem.message.match(/'([^']+)'/)?.[1];\r\n        if (varName && !varName.startsWith('_')) {\r\n          const newLine = line.replace(\r\n            new RegExp(`\\\\b${varName}\\\\b`), \r\n            `_${varName}`\r\n          );\r\n          lines[problem.startLineNumber - 1] = newLine;\r\n          \r\n          await fs.writeFile(problem.resource, lines.join('\\n'));\r\n          console.log(`  ✅ Ongebruikte var gefix: ${varName} -> _${varName}`);\r\n        }\r\n      } catch (error) {\r\n        console.log(`  ❌ Kon unused var niet fixen: ${error.message}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  async addReturnTypes(problems) {\r\n    for (const problem of problems) {\r\n      try {\r\n        const content = await fs.readFile(problem.resource, 'utf8');\r\n        const lines = content.split('\\n');\r\n        const line = lines[problem.startLineNumber - 1];\r\n        \r\n        // Simpele return type toevoeging voor React componenten\r\n        if (line.includes('export') && (line.includes('function') || line.includes('=>'))) {\r\n          if (line.includes('React') || problem.resource.includes('.tsx')) {\r\n            const newLine = line.replace(/(\\s*{\\s*$)/, ': JSX.Element $1');\r\n            if (newLine !== line) {\r\n              lines[problem.startLineNumber - 1] = newLine;\r\n              await fs.writeFile(problem.resource, lines.join('\\n'));\r\n              console.log(`  ✅ Return type toegevoegd voor React component`);\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.log(`  ❌ Kon return type niet toevoegen: ${error.message}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  async fixExplicitAny(problems) {\r\n    const anyReplacements = {\r\n      'any': 'unknown',\r\n      'any[]': 'unknown[]',\r\n      'Array<any>': 'Array<unknown>'\r\n    };\r\n\r\n    for (const problem of problems) {\r\n      try {\r\n        const content = await fs.readFile(problem.resource, 'utf8');\r\n        let newContent = content;\r\n        \r\n        for (const [oldType, newType] of Object.entries(anyReplacements)) {\r\n          newContent = newContent.replace(\r\n            new RegExp(`\\\\b${oldType}\\\\b`, 'g'), \r\n            newType\r\n          );\r\n        }\r\n        \r\n        if (newContent !== content) {\r\n          await fs.writeFile(problem.resource, newContent);\r\n          console.log(`  ✅ Explicit any vervangen met unknown`);\r\n        }\r\n      } catch (error) {\r\n        console.log(`  ❌ Kon explicit any niet fixen: ${error.message}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  async fixTailwindMigration(problems) {\r\n    const v2toV3Mapping = {\r\n      'flex-grow': 'grow',\r\n      'flex-shrink': 'shrink',\r\n      'flex-shrink-0': 'shrink-0'\r\n    };\r\n\r\n    for (const problem of problems) {\r\n      try {\r\n        const content = await fs.readFile(problem.resource, 'utf8');\r\n        let newContent = content;\r\n        \r\n        for (const [oldClass, newClass] of Object.entries(v2toV3Mapping)) {\r\n          newContent = newContent.replace(\r\n            new RegExp(`\\\\b${oldClass}\\\\b`, 'g'),\r\n            newClass\r\n          );\r\n        }\r\n        \r\n        if (newContent !== content) {\r\n          await fs.writeFile(problem.resource, newContent);\r\n          console.log(`  ✅ Tailwind v2 naar v3 migratie uitgevoerd`);\r\n        }\r\n      } catch (error) {\r\n        console.log(`  ❌ Kon Tailwind migratie niet uitvoeren: ${error.message}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  async fixConsoleStatements(problems) {\r\n    for (const problem of problems) {\r\n      try {\r\n        const content = await fs.readFile(problem.resource, 'utf8');\r\n        const lines = content.split('\\n');\r\n        const line = lines[problem.startLineNumber - 1];\r\n        \r\n        // Vervang console.log met logger waar mogelijk\r\n        if (line.includes('console.log')) {\r\n          const newLine = line.replace('console.log', '// console.log');\r\n          lines[problem.startLineNumber - 1] = newLine;\r\n          await fs.writeFile(problem.resource, lines.join('\\n'));\r\n          console.log(`  ✅ Console statement uitgecommentarieerd`);\r\n        }\r\n      } catch (error) {\r\n        console.log(`  ❌ Kon console statement niet fixen: ${error.message}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  async fixReactHookDeps(problems) {\r\n    // Deze is complex - voorlopig alleen loggen\r\n    for (const problem of problems) {\r\n      console.log(`  ⚠️  React Hook dependency issue in: ${path.basename(problem.resource)}`);\r\n      console.log(`      ${problem.message}`);\r\n    }\r\n  }\r\n\r\n  async fixNamedAsDefault(problems) {\r\n    // Deze vereist handmatige review - voorlopig alleen loggen\r\n    for (const problem of problems) {\r\n      console.log(`  ⚠️  Named import issue in: ${path.basename(problem.resource)}`);\r\n      console.log(`      ${problem.message}`);\r\n    }\r\n  }\r\n\r\n  async generateReport() {\r\n    console.log('\\n📋 Fix Report:');\r\n    console.log(`✅ Bestanden gefixt: ${this.fixedFiles.size}`);\r\n    console.log(`🔧 Regels toegepast: ${this.problemsByType.size}`);\r\n    \r\n    // Genereer verbeteringssuggesties\r\n    console.log('\\n💡 Aanbevelingen voor verbetering:');\r\n    console.log('1. Configureer Prettier voor consistente formatting');\r\n    console.log('2. Voeg pre-commit hooks toe met lint-staged');\r\n    console.log('3. Configureer VS Code auto-fix on save');\r\n    console.log('4. Implementeer strikte TypeScript configuratie');\r\n  }\r\n\r\n  async setupPreventiveSystem() {\r\n    console.log('\\n🛡️  Setting up preventive system...');\r\n    \r\n    // Maak .vscode/settings.json voor auto-fix\r\n    const vscodeSettings = {\r\n      \"editor.codeActionsOnSave\": {\r\n        \"source.fixAll.eslint\": true,\r\n        \"source.organizeImports\": true\r\n      },\r\n      \"editor.formatOnSave\": true,\r\n      \"typescript.preferences.useAliasesForRenames\": false,\r\n      \"eslint.workingDirectories\": [\".\"],\r\n      \"eslint.validate\": [\"javascript\", \"typescript\", \"javascriptreact\", \"typescriptreact\"]\r\n    };\r\n\r\n    try {\r\n      await fs.mkdir('.vscode', { recursive: true });\r\n      await fs.writeFile('.vscode/settings.json', JSON.stringify(vscodeSettings, null, 2));\r\n      console.log('✅ VS Code auto-fix instellingen geconfigureerd');\r\n    } catch (error) {\r\n      console.log('❌ Kon VS Code instellingen niet configureren');\r\n    }\r\n\r\n    // Maak lint-staged configuratie\r\n    const lintStagedConfig = {\r\n      \"*.{js,jsx,ts,tsx}\": [\r\n        \"eslint --fix\",\r\n        \"prettier --write\"\r\n      ]\r\n    };\r\n\r\n    try {\r\n      const packageJson = JSON.parse(await fs.readFile('package.json', 'utf8'));\r\n      packageJson['lint-staged'] = lintStagedConfig;\r\n      await fs.writeFile('package.json', JSON.stringify(packageJson, null, 2));\r\n      console.log('✅ Lint-staged configuratie toegevoegd');\r\n    } catch (error) {\r\n      console.log('❌ Kon lint-staged niet configureren');\r\n    }\r\n  }\r\n}\r\n\r\n// Hoofdfunctie\r\nasync function main() {\r\n  const autoFixer = new AutoFixSystem();\r\n  \r\n  try {\r\n    // Lees de diagnostics uit het geüploade bestand of genereer ze\r\n    let diagnostics = [];\r\n    \r\n    try {\r\n      const diagnosticsContent = await fs.readFile('reports/eslint-diagnostics.json', 'utf8');\r\n      diagnostics = JSON.parse(diagnosticsContent);\r\n    } catch (error) {\r\n      console.log('⚠️ Geen diagnostics bestand gevonden, genereren van ESLint diagnostics...');\r\n      \r\n      // Run ESLint om diagnostics te genereren\r\n      try {\r\n        execSync('npx eslint . --ext .ts,.tsx,.js,.jsx --format json > reports/eslint-diagnostics.json', {\r\n          stdio: 'pipe'\r\n        });\r\n        \r\n        const diagnosticsContent = await fs.readFile('reports/eslint-diagnostics.json', 'utf8');\r\n        const eslintResults = JSON.parse(diagnosticsContent);\r\n        \r\n        // Convert ESLint results to diagnostics format\r\n        for (const result of eslintResults) {\r\n          for (const message of result.messages) {\r\n            diagnostics.push({\r\n              resource: result.filePath,\r\n              code: message.ruleId,\r\n              message: message.message,\r\n              startLineNumber: message.line,\r\n              startColumn: message.column,\r\n              endLineNumber: message.endLine || message.line,\r\n              endColumn: message.endColumn || message.column\r\n            });\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.log('⚠️ Kon geen ESLint diagnostics genereren:', error.message);\r\n      }\r\n    }\r\n    \r\n    console.log('🚀 FibroGuardian Auto-Fix System gestart');\r\n    console.log(`📁 Gevonden ${diagnostics.length} problemen`);\r\n    \r\n    // Analyseer problemen\r\n    const sortedProblems = await autoFixer.analyzeProblems(diagnostics);\r\n    \r\n    // Fix problemen automatisch\r\n    await autoFixer.autoFixProblems(sortedProblems);\r\n    \r\n    // Setup preventief systeem\r\n    await autoFixer.setupPreventiveSystem();\r\n    \r\n    // Genereer rapport\r\n    await autoFixer.generateReport();\r\n    \r\n    console.log('\\n🎉 Auto-fix systeem voltooid!');\r\n    console.log('💡 Run dit script regelmatig of integreer in je CI/CD pipeline');\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error:', error.message);\r\n    process.exit(1);\r\n  }\r\n}\r\n\r\nmain().catch(console.error);\r\n\r\nexport { AutoFixSystem };\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\scripts\\check-admin-profile.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":25,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":25,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1115,1170],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":29,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":29,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1239,1280],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":41,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":41,"endColumn":12,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1635,1712],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":46,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":46,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1849,1889],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":47,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":47,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1895,1940],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":52,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":52,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2147,2246],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createSupabaseAdminClient } from '@/lib/supabase-server';\r\n// dotenv loading will now be handled by the tsx --env-file flag\r\n\r\nasync function checkAdminProfile(userId) {\r\n  // Environment variables should be loaded by tsx before this script runs.\r\n  const supabaseAdmin = createSupabaseAdminClient();\r\n\r\n  try {\r\n    const { data, error } = await supabaseAdmin\r\n      .from('profiles')\r\n      .select('*')\r\n      .eq('id', userId)\r\n      .single(); // .single() is crucial here, it expects exactly one row or throws an error.\r\n\r\n    if (error) {\r\n      console.error('Error fetching admin profile from Supabase:', error);\r\n      // PGRST116 means \"Failed to parse JSON response from the server\" or \"JSON object requested, multiple (or no) rows returned\"\r\n      // This specific error code is key to the problem.\r\n      return { error: `Supabase error: ${error.message} (Code: ${error.code})` };\r\n    }\r\n\r\n    if (!data) {\r\n      // This case should ideally be caught by .single() if no rows are found, resulting in an error with code PGRST116.\r\n      // However, an explicit check is good practice.\r\n      console.log('Admin profile not found for ID:', userId);\r\n      return { message: 'Admin profile not found' };\r\n    }\r\n\r\n    console.log('Admin profile data:', data);\r\n    return { data: data };\r\n  } catch (e) {\r\n    // Catch any other unexpected errors during the process\r\n    console.error('Unexpected error in checkAdminProfile function:', e);\r\n    return { error: `Unexpected error: ${e.message}` };\r\n  }\r\n}\r\n\r\n// This is the admin user ID you provided\r\nconst adminUserId = 'd4211a43-87da-4324-a6ac-5c88a65c7022';\r\n\r\nconsole.log(`Attempting to fetch profile for admin user ID: ${adminUserId}`);\r\n\r\ncheckAdminProfile(adminUserId)\r\n  .then(result => {\r\n    // Pretty print the JSON output for better readability in the terminal\r\n    console.log(\"Script execution result:\");\r\n    console.log(JSON.stringify(result, null, 2));\r\n  })\r\n  .catch(scriptError => {\r\n    // Catch errors from the promise chain itself (e.g., if checkAdminProfile rejects unexpectedly)\r\n    console.error(\"Error during script execution:\", scriptError);\r\n    console.log(JSON.stringify({ error: `Script execution failed: ${scriptError.message}` }, null, 2));\r\n  });\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\scripts\\check-memory-leaks.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":141,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":141,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5396,5465],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":232,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":232,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8674,8751],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":233,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":233,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8755,8849],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Memory Leak Detection Script\r\n * \r\n * This script analyzes React components for potential memory leaks by:\r\n * 1. Checking for missing useEffect cleanup functions\r\n * 2. Identifying event listeners that aren't properly removed\r\n * 3. Detecting state updates in unmounted components\r\n * 4. Finding circular references in state or props\r\n */\r\n\r\nimport fs from 'fs';\r\nimport path from 'path';\r\n\r\nimport * as glob from 'glob';\r\n\r\n// Configuration\r\nconst CONTAINERS_DIR = path.join(process.cwd(), 'containers');\r\nconst COMPONENTS_DIR = path.join(process.cwd(), 'components');\r\nconst REPORT_FILE = path.join(process.cwd(), 'reports', 'memory-leak-report.md');\r\n\r\n// Patterns to look for\r\nconst MEMORY_LEAK_PATTERNS = {\r\n  MISSING_CLEANUP: /useEffect\\(\\s*\\(\\s*\\)\\s*=>\\s*\\{(?!\\s*return)/g,\r\n  EVENT_LISTENER: /addEventListener|on\\w+\\s*=/g,\r\n  REMOVE_LISTENER: /removeEventListener/g,\r\n  SET_STATE_WITHOUT_CHECK: /set\\w+\\s*\\(/g,\r\n  IS_MOUNTED_CHECK: /isMounted|mounted\\.current/g,\r\n  CIRCULAR_REFERENCE: /useRef\\(\\s*\\{\\s*.*\\s*\\}\\s*\\)/g,\r\n};\r\n\r\n/**\r\n * Parse a file and check for potential memory leaks\r\n * @param {string} filePath - Path to the file to check\r\n * @returns {Array} - Array of potential memory leak issues\r\n */\r\nfunction checkFileForMemoryLeaks(filePath) {\r\n  const issues = [];\r\n  const content = fs.readFileSync(filePath, 'utf8');\r\n  \r\n  // Simple pattern matching for quick checks\r\n  for (const [type, pattern] of Object.entries(MEMORY_LEAK_PATTERNS)) {\r\n    const matches = content.match(pattern);\r\n    if (matches) {\r\n      if (type === 'MISSING_CLEANUP') {\r\n        // Check if there are useEffect hooks without cleanup\r\n        const useEffectCount = (content.match(/useEffect/g) || []).length;\r\n        const returnCount = (content.match(/useEffect\\(\\s*\\(\\s*\\)\\s*=>\\s*\\{[\\s\\S]*?return\\s+/g) || []).length;\r\n        \r\n        if (useEffectCount > returnCount) {\r\n          issues.push({\r\n            type: 'MISSING_CLEANUP',\r\n            message: `Missing cleanup in useEffect (${useEffectCount - returnCount} instances)`,\r\n            line: findLineNumber(content, 'useEffect'),\r\n          });\r\n        }\r\n      } else if (type === 'EVENT_LISTENER') {\r\n        // Check if event listeners are added without being removed\r\n        const addListenerCount = (content.match(MEMORY_LEAK_PATTERNS.EVENT_LISTENER) || []).length;\r\n        const removeListenerCount = (content.match(MEMORY_LEAK_PATTERNS.REMOVE_LISTENER) || []).length;\r\n        \r\n        if (addListenerCount > removeListenerCount) {\r\n          issues.push({\r\n            type: 'EVENT_LISTENER',\r\n            message: `Event listeners may not be properly removed (${addListenerCount - removeListenerCount} instances)`,\r\n            line: findLineNumber(content, 'addEventListener'),\r\n          });\r\n        }\r\n      } else if (type === 'SET_STATE_WITHOUT_CHECK') {\r\n        // Check if setState is called without checking if component is mounted\r\n        const setStateCount = (content.match(MEMORY_LEAK_PATTERNS.SET_STATE_WITHOUT_CHECK) || []).length;\r\n        const isMountedCheckCount = (content.match(MEMORY_LEAK_PATTERNS.IS_MOUNTED_CHECK) || []).length;\r\n        \r\n        if (setStateCount > 0 && isMountedCheckCount === 0 && content.includes('async')) {\r\n          issues.push({\r\n            type: 'SET_STATE_WITHOUT_CHECK',\r\n            message: 'setState may be called after component unmount in async functions',\r\n            line: findLineNumber(content, 'set'),\r\n          });\r\n        }\r\n      } else if (type === 'CIRCULAR_REFERENCE') {\r\n        issues.push({\r\n          type: 'CIRCULAR_REFERENCE',\r\n          message: 'Potential circular reference in useRef',\r\n          line: findLineNumber(content, 'useRef'),\r\n        });\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Check for setTimeout/setInterval without clearTimeout/clearInterval\r\n  if (content.includes('setTimeout') || content.includes('setInterval')) {\r\n    const hasSetTimeout = content.includes('setTimeout');\r\n    const hasSetInterval = content.includes('setInterval');\r\n    const hasClearTimeout = content.includes('clearTimeout');\r\n    const hasClearInterval = content.includes('clearInterval');\r\n    \r\n    if (hasSetTimeout && !hasClearTimeout) {\r\n      issues.push({\r\n        type: 'TIMER_NOT_CLEARED',\r\n        message: 'setTimeout is used without clearTimeout',\r\n        line: findLineNumber(content, 'setTimeout'),\r\n      });\r\n    }\r\n    \r\n    if (hasSetInterval && !hasClearInterval) {\r\n      issues.push({\r\n        type: 'TIMER_NOT_CLEARED',\r\n        message: 'setInterval is used without clearInterval',\r\n        line: findLineNumber(content, 'setInterval'),\r\n      });\r\n    }\r\n  }\r\n  \r\n  return issues;\r\n}\r\n\r\n/**\r\n * Find the line number of a pattern in a string\r\n * @param {string} content - The content to search in\r\n * @param {string} pattern - The pattern to search for\r\n * @returns {number} - The line number\r\n */\r\nfunction findLineNumber(content, pattern) {\r\n  const lines = content.split('\\n');\r\n  for (let i = 0; i < lines.length; i++) {\r\n    if (lines[i].includes(pattern)) {\r\n      return i + 1;\r\n    }\r\n  }\r\n  return 0;\r\n}\r\n\r\n/**\r\n * Check all container components for memory leaks\r\n */\r\nfunction checkContainers() {\r\n  const containerFiles = glob.sync(`${CONTAINERS_DIR}/**/*.{tsx,jsx}`);\r\n  const componentFiles = glob.sync(`${COMPONENTS_DIR}/**/*.{tsx,jsx}`);\r\n  const allFiles = [...containerFiles, ...componentFiles];\r\n  \r\n  console.log(`Checking ${allFiles.length} files for memory leaks...`);\r\n  \r\n  const results = {};\r\n  let totalIssues = 0;\r\n  \r\n  for (const file of allFiles) {\r\n    const issues = checkFileForMemoryLeaks(file);\r\n    if (issues.length > 0) {\r\n      results[file] = issues;\r\n      totalIssues += issues.length;\r\n    }\r\n  }\r\n  \r\n  // Generate report\r\n  const reportDir = path.dirname(REPORT_FILE);\r\n  if (!fs.existsSync(reportDir)) {\r\n    fs.mkdirSync(reportDir, { recursive: true });\r\n  }\r\n  \r\n  let report = `# Memory Leak Analysis Report\\n\\n`;\r\n  report += `Generated on: ${new Date().toLocaleString()}\\n\\n`;\r\n  report += `## Summary\\n\\n`;\r\n  report += `- Total files checked: ${allFiles.length}\\n`;\r\n  report += `- Files with potential issues: ${Object.keys(results).length}\\n`;\r\n  report += `- Total potential issues: ${totalIssues}\\n\\n`;\r\n  \r\n  if (totalIssues > 0) {\r\n    report += `## Detailed Findings\\n\\n`;\r\n    \r\n    for (const [file, issues] of Object.entries(results)) {\r\n      const relativePath = path.relative(process.cwd(), file);\r\n      report += `### ${relativePath}\\n\\n`;\r\n      \r\n      for (const issue of issues) {\r\n        report += `- **${issue.type}**: ${issue.message} (line ${issue.line})\\n`;\r\n      }\r\n      \r\n      report += `\\n`;\r\n    }\r\n    \r\n    report += `## Recommendations\\n\\n`;\r\n    report += `1. **Add cleanup functions to useEffect hooks**:\\n`;\r\n    report += `   \\`\\`\\`jsx\\n`;\r\n    report += `   useEffect(() => {\\n`;\r\n    report += `     const subscription = someAPI.subscribe();\\n`;\r\n    report += `     return () => {\\n`;\r\n    report += `       subscription.unsubscribe();\\n`;\r\n    report += `     };\\n`;\r\n    report += `   }, []);\\n`;\r\n    report += `   \\`\\`\\`\\n\\n`;\r\n    \r\n    report += `2. **Use a mounted ref to prevent state updates after unmount**:\\n`;\r\n    report += `   \\`\\`\\`jsx\\n`;\r\n    report += `   const isMounted = useRef(true);\\n`;\r\n    report += `   useEffect(() => {\\n`;\r\n    report += `     return () => {\\n`;\r\n    report += `       isMounted.current = false;\\n`;\r\n    report += `     };\\n`;\r\n    report += `   }, []);\\n\\n`;\r\n    report += `   // Later in async functions\\n`;\r\n    report += `   if (isMounted.current) {\\n`;\r\n    report += `     setState(newValue);\\n`;\r\n    report += `   }\\n`;\r\n    report += `   \\`\\`\\`\\n\\n`;\r\n    \r\n    report += `3. **Always clean up event listeners**:\\n`;\r\n    report += `   \\`\\`\\`jsx\\n`;\r\n    report += `   useEffect(() => {\\n`;\r\n    report += `     window.addEventListener('resize', handleResize);\\n`;\r\n    report += `     return () => {\\n`;\r\n    report += `       window.removeEventListener('resize', handleResize);\\n`;\r\n    report += `     };\\n`;\r\n    report += `   }, []);\\n`;\r\n    report += `   \\`\\`\\`\\n\\n`;\r\n    \r\n    report += `4. **Clear timers**:\\n`;\r\n    report += `   \\`\\`\\`jsx\\n`;\r\n    report += `   useEffect(() => {\\n`;\r\n    report += `     const timerId = setTimeout(callback, 1000);\\n`;\r\n    report += `     return () => {\\n`;\r\n    report += `       clearTimeout(timerId);\\n`;\r\n    report += `     };\\n`;\r\n    report += `   }, []);\\n`;\r\n    report += `   \\`\\`\\`\\n\\n`;\r\n  } else {\r\n    report += `## No issues found\\n\\n`;\r\n    report += `No potential memory leaks were detected in the codebase. Great job!\\n\\n`;\r\n  }\r\n  \r\n  fs.writeFileSync(REPORT_FILE, report);\r\n  \r\n  console.log(`Memory leak analysis complete. Report saved to ${REPORT_FILE}`);\r\n  console.log(`Found ${totalIssues} potential issues in ${Object.keys(results).length} files.`);\r\n  \r\n  return { totalIssues, filesWithIssues: Object.keys(results).length };\r\n}\r\n\r\n// Run the check\r\ncheckContainers();\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\scripts\\cline-setup.js","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'execAsync' is assigned a value but never used.","line":13,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'stripJsonComments' is defined but never used.","line":19,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":27},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":69,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":69,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1829,1939],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":95,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":95,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2384,2464],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":107,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":107,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2691,2762],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":108,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":108,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2768,2828],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":109,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":109,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2834,2915],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":110,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":110,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2921,2972],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":111,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":111,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2978,3059],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":133,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":133,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3552,3625],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":138,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":138,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3725,3806],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":190,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":190,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5650,5754],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":221,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":221,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6906,6979],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":223,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":223,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6991,7123],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":238,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":238,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7527,7616],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":239,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":239,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7624,7729],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":241,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":241,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7751,7820],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":252,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":252,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7996,8073],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":264,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":264,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8298,8380],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":286,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":286,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8887,8959],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":287,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":287,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":288,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":288,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8990,9068],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":309,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":309,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9667,9735],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":310,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":310,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":311,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":311,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9766,9840],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":343,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":343,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10665,10759],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":353,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":353,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10945,11026],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":359,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":359,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":361,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":361,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11264,11343],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":370,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":370,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11617,11694],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":374,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":374,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11722,11801],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":384,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":384,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12008,12086],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":391,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":391,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":392,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":392,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12337,12438],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":397,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":397,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12627,12746],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":398,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":398,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12752,12836],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":400,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":400,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12848,12928],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":410,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":410,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13108,13748],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":38,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Cline + Claude 3.7 Setup and Testing Script\r\n * \r\n * This script helps with setting up and testing the Cline integration\r\n * with Claude 3.7 for FibroGuardian Pro.\r\n */\r\n\r\nimport { exec } from 'child_process';\r\nimport { promises as fs } from 'fs';\r\nimport path from 'path';\r\nimport { promisify } from 'util';\r\n\r\nconst execAsync = promisify(exec);\r\n\r\n/**\r\n * Strip comments from JSON string and handle special cases\r\n * This allows us to parse JSON with comments (JSONC) and other special syntax\r\n */\r\nfunction stripJsonComments(jsonString) {\r\n  // Remove single-line comments (// ...)\r\n  let result = jsonString.replace(/\\/\\/.*$/gm, '');\r\n  \r\n  // Remove multi-line comments (/* ... */)\r\n  result = result.replace(/\\/\\*[\\s\\S]*?\\*\\//g, '');\r\n  \r\n  // Handle special cases like template literals in JSON\r\n  // Escape template literals (${...}) to prevent JSON parsing errors\r\n  result = result.replace(/\\${([^}]*)}/g, '\"\\\\${$1}\"');\r\n  \r\n  // Fix any trailing commas in arrays or objects\r\n  result = result.replace(/,(\\s*[\\]}])/g, '$1');\r\n  \r\n  return result;\r\n}\r\n\r\n// Configuration\r\nconst CONFIG = {\r\n  clineDir: '.cline',\r\n  vscodeDir: '.vscode',\r\n  promptsDir: '.cline/prompts',\r\n  watchersDir: '.cline/watchers',\r\n  contextDir: '.cline/context',\r\n  commandsDir: '.cline/commands',\r\n  notificationsDir: '.cline/notifications',\r\n  settingsFile: '.vscode/settings.json',\r\n  clineSettingsFile: '.cline/settings.json',\r\n};\r\n\r\n// Colors for console output\r\nconst COLORS = {\r\n  reset: '\\x1b[0m',\r\n  bright: '\\x1b[1m',\r\n  dim: '\\x1b[2m',\r\n  red: '\\x1b[31m',\r\n  green: '\\x1b[32m',\r\n  yellow: '\\x1b[33m',\r\n  blue: '\\x1b[34m',\r\n  magenta: '\\x1b[35m',\r\n  cyan: '\\x1b[36m',\r\n};\r\n\r\n/**\r\n * Main function to run the script\r\n */\r\nasync function main() {\r\n  const args = process.argv.slice(2);\r\n  const command = args[0] || 'help';\r\n\r\n  console.log(`${COLORS.bright}${COLORS.cyan}🤖 FibroGuardian Pro - Cline + Claude 3.7 Setup${COLORS.reset}\\n`);\r\n\r\n  switch (command) {\r\n    case 'setup':\r\n      await setupCline();\r\n      break;\r\n    case 'test':\r\n      await testCline();\r\n      break;\r\n    case 'reset':\r\n      await resetNotifications();\r\n      break;\r\n    case 'context':\r\n      await regenerateContext();\r\n      break;\r\n    case 'help':\r\n    default:\r\n      showHelp();\r\n      break;\r\n  }\r\n}\r\n\r\n/**\r\n * Setup Cline directories and configuration\r\n */\r\nasync function setupCline() {\r\n  console.log(`${COLORS.bright}Setting up Cline integration...${COLORS.reset}\\n`);\r\n\r\n  try {\r\n    // Create directories\r\n    await createDirectories();\r\n    \r\n    // Check if VS Code settings exist\r\n    await updateVSCodeSettings();\r\n    \r\n    // Check if API key is set\r\n    await checkAPIKey();\r\n    \r\n    console.log(`\\n${COLORS.green}✅ Cline setup complete!${COLORS.reset}`);\r\n    console.log(`\\n${COLORS.yellow}Next steps:${COLORS.reset}`);\r\n    console.log(`1. Make sure your Claude API key is set in ${CONFIG.settingsFile}`);\r\n    console.log(`2. Restart VS Code to apply changes`);\r\n    console.log(`3. Run 'node scripts/cline-setup.js test' to test the integration`);\r\n  } catch (error) {\r\n    console.error(`${COLORS.red}❌ Error setting up Cline: ${error.message}${COLORS.reset}`);\r\n  }\r\n}\r\n\r\n/**\r\n * Create necessary directories\r\n */\r\nasync function createDirectories() {\r\n  const directories = [\r\n    CONFIG.clineDir,\r\n    CONFIG.promptsDir,\r\n    CONFIG.watchersDir,\r\n    CONFIG.contextDir,\r\n    CONFIG.commandsDir,\r\n    CONFIG.notificationsDir,\r\n  ];\r\n\r\n  for (const dir of directories) {\r\n    try {\r\n      await fs.mkdir(dir, { recursive: true });\r\n      console.log(`${COLORS.green}✓ Created directory: ${dir}${COLORS.reset}`);\r\n    } catch (error) {\r\n      if (error.code !== 'EEXIST') {\r\n        throw error;\r\n      }\r\n      console.log(`${COLORS.yellow}⚠ Directory already exists: ${dir}${COLORS.reset}`);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Update VS Code settings with Cline configuration\r\n */\r\nasync function updateVSCodeSettings() {\r\n  try {\r\n    // Create .cline directory if it doesn't exist\r\n    await fs.mkdir(CONFIG.clineDir, { recursive: true });\r\n    \r\n    // Create Cline settings file\r\n    const clineSettings = {\r\n      \"cline.apiKey\": \"your_claude_api_key\",\r\n      \"cline.model\": \"claude-3-7-sonnet-20250219\",\r\n      \"cline.maxTokens\": 8192,\r\n      \"cline.temperature\": 0.1,\r\n      \"cline.systemPrompt\": \"You are an expert FibroGuardian Pro developer with deep knowledge of Supabase, Next.js, TypeScript, and healthcare applications. Always consider database schema, type safety, and clinical best practices.\",\r\n      \r\n      \"cline.customInstructions\": [\r\n        \"Always use the typed Supabase client from 'hooks/useTypedSupabase'\",\r\n        \"Generate Zod schemas for any new database tables\",\r\n        \"Consider clinical safety and GDPR compliance in all recommendations\",\r\n        \"Optimize for fibromyalgia patient experience (low energy, pain management)\",\r\n        \"Use the established container/presentational pattern\",\r\n        \"Include proper error handling and loading states\",\r\n        \"Generate appropriate RLS policies for new tables\"\r\n      ],\r\n      \r\n      \"cline.contextFiles\": [\r\n        \"types/database.ts\",\r\n        \"types/zod-schemas.ts\", \r\n        \"hooks/useTypedSupabase.ts\",\r\n        \"utils/supabase/client.ts\",\r\n        \"README.md\"\r\n      ],\r\n      \r\n      \"cline.watchFiles\": [\r\n        \"supabase/migrations/*.sql\",\r\n        \"types/database.ts\",\r\n        \"types/zod-schemas.ts\"\r\n      ],\r\n      \r\n      \"cline.autoRunCommands\": [\r\n        \"npm run db:types\",\r\n        \"npm run db:validate\"\r\n      ]\r\n    };\r\n    \r\n    await fs.writeFile(CONFIG.clineSettingsFile, JSON.stringify(clineSettings, null, 2), 'utf8');\r\n    console.log(`${COLORS.green}✓ Created Cline settings file: ${CONFIG.clineSettingsFile}${COLORS.reset}`);\r\n    \r\n    // Create a README file to explain how to use the settings\r\n    const readmeContent = `# Cline Configuration for FibroGuardian Pro\r\n\r\nThis directory contains configuration files for the Cline + Claude 3.7 integration.\r\n\r\n## How to Use\r\n\r\n1. Copy the settings from \\`settings.json\\` to your VS Code settings.\r\n2. Set your Claude API key in the VS Code settings.\r\n3. Restart VS Code to apply the changes.\r\n\r\n## Files\r\n\r\n- \\`settings.json\\`: Contains the Cline configuration settings.\r\n- \\`prompts/\\`: Contains domain-specific prompts for FibroGuardian.\r\n- \\`watchers/\\`: Contains schema watchers that detect database changes.\r\n- \\`context/\\`: Contains context providers for Claude 3.7.\r\n- \\`commands/\\`: Contains auto-commands for automated tasks.\r\n- \\`notifications/\\`: Directory for Cline notifications.\r\n\r\n## Commands\r\n\r\n- \\`npm run cline:setup\\`: Setup Cline integration.\r\n- \\`npm run cline:test\\`: Test Cline integration.\r\n- \\`npm run cline:reset\\`: Reset Cline notifications.\r\n- \\`npm run cline:context\\`: Regenerate Cline context.\r\n`;\r\n    \r\n    await fs.writeFile(path.join(CONFIG.clineDir, 'README.md'), readmeContent, 'utf8');\r\n    console.log(`${COLORS.green}✓ Created Cline README file${COLORS.reset}`);\r\n    \r\n    console.log(`${COLORS.yellow}⚠ Please copy the settings from ${CONFIG.clineSettingsFile} to your VS Code settings.${COLORS.reset}`);\r\n  } catch (error) {\r\n    throw new Error(`Failed to update VS Code settings: ${error.message}`);\r\n  }\r\n}\r\n\r\n/**\r\n * Check if Claude API key is set\r\n */\r\nasync function checkAPIKey() {\r\n  try {\r\n    const settingsContent = await fs.readFile(CONFIG.clineSettingsFile, 'utf8');\r\n    const settings = JSON.parse(settingsContent);\r\n    \r\n    if (settings[\"cline.apiKey\"] === 'your_claude_api_key') {\r\n      console.log(`${COLORS.yellow}⚠ Claude API key not set in Cline settings${COLORS.reset}`);\r\n      console.log(`${COLORS.yellow}⚠ Please update the API key in ${CONFIG.clineSettingsFile}${COLORS.reset}`);\r\n    } else {\r\n      console.log(`${COLORS.green}✓ Claude API key is set${COLORS.reset}`);\r\n    }\r\n  } catch (error) {\r\n    throw new Error(`Failed to check API key: ${error.message}`);\r\n  }\r\n}\r\n\r\n/**\r\n * Test Cline integration\r\n */\r\nasync function testCline() {\r\n  console.log(`${COLORS.bright}Testing Cline integration...${COLORS.reset}\\n`);\r\n\r\n  try {\r\n    // Check if directories exist\r\n    await checkDirectories();\r\n    \r\n    // Check if files exist\r\n    await checkFiles();\r\n    \r\n    // Create test notification\r\n    await createTestNotification();\r\n    \r\n    console.log(`\\n${COLORS.green}✅ Cline integration test complete!${COLORS.reset}`);\r\n  } catch (error) {\r\n    console.error(`${COLORS.red}❌ Error testing Cline integration: ${error.message}${COLORS.reset}`);\r\n  }\r\n}\r\n\r\n/**\r\n * Check if required directories exist\r\n */\r\nasync function checkDirectories() {\r\n  const directories = [\r\n    CONFIG.clineDir,\r\n    CONFIG.promptsDir,\r\n    CONFIG.watchersDir,\r\n    CONFIG.contextDir,\r\n    CONFIG.commandsDir,\r\n    CONFIG.notificationsDir,\r\n  ];\r\n\r\n  for (const dir of directories) {\r\n    try {\r\n      await fs.access(dir, fs.constants.F_OK);\r\n      console.log(`${COLORS.green}✓ Directory exists: ${dir}${COLORS.reset}`);\r\n    } catch (error) {\r\n      console.log(`${COLORS.red}✗ Directory does not exist: ${dir}${COLORS.reset}`);\r\n      throw new Error(`Directory ${dir} does not exist. Run 'node scripts/cline-setup.js setup' to create it.`);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Check if required files exist\r\n */\r\nasync function checkFiles() {\r\n  const files = [\r\n    CONFIG.settingsFile,\r\n    path.join(CONFIG.promptsDir, 'fibroguardian-context.md'),\r\n    path.join(CONFIG.watchersDir, 'schema-watcher.ts'),\r\n    path.join(CONFIG.contextDir, 'claude-context-provider.ts'),\r\n    path.join(CONFIG.commandsDir, 'auto-commands.ts'),\r\n  ];\r\n\r\n  for (const file of files) {\r\n    try {\r\n      await fs.access(file, fs.constants.F_OK);\r\n      console.log(`${COLORS.green}✓ File exists: ${file}${COLORS.reset}`);\r\n    } catch (error) {\r\n      console.log(`${COLORS.red}✗ File does not exist: ${file}${COLORS.reset}`);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Create a test notification\r\n */\r\nasync function createTestNotification() {\r\n  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\r\n  const notificationFile = path.join(CONFIG.notificationsDir, `test-notification-${timestamp}.md`);\r\n  \r\n  const notificationContent = `\r\n# 🧪 Test Notification\r\n\r\nThis is a test notification to verify that the Cline integration is working correctly.\r\n\r\n**Timestamp**: ${new Date().toISOString()}\r\n\r\n## Test Data\r\n- Project: FibroGuardian Pro\r\n- Integration: Cline + Claude 3.7\r\n- Status: Testing\r\n\r\n## Next Steps\r\n1. Check that this notification appears in Cline\r\n2. Verify that Claude 3.7 can access the project context\r\n3. Test schema watching functionality\r\n`;\r\n\r\n  try {\r\n    await fs.writeFile(notificationFile, notificationContent, 'utf8');\r\n    console.log(`${COLORS.green}✓ Created test notification: ${notificationFile}${COLORS.reset}`);\r\n  } catch (error) {\r\n    throw new Error(`Failed to create test notification: ${error.message}`);\r\n  }\r\n}\r\n\r\n/**\r\n * Reset notifications\r\n */\r\nasync function resetNotifications() {\r\n  console.log(`${COLORS.bright}Resetting Cline notifications...${COLORS.reset}\\n`);\r\n\r\n  try {\r\n    // Check if notifications directory exists\r\n    try {\r\n      await fs.access(CONFIG.notificationsDir, fs.constants.F_OK);\r\n    } catch (error) {\r\n      await fs.mkdir(CONFIG.notificationsDir, { recursive: true });\r\n      console.log(`${COLORS.green}✓ Created notifications directory${COLORS.reset}`);\r\n      return;\r\n    }\r\n    \r\n    // Delete all notification files\r\n    const files = await fs.readdir(CONFIG.notificationsDir);\r\n    for (const file of files) {\r\n      if (file.endsWith('.md')) {\r\n        await fs.unlink(path.join(CONFIG.notificationsDir, file));\r\n        console.log(`${COLORS.green}✓ Deleted notification: ${file}${COLORS.reset}`);\r\n      }\r\n    }\r\n    \r\n    console.log(`\\n${COLORS.green}✅ Notifications reset complete!${COLORS.reset}`);\r\n  } catch (error) {\r\n    console.error(`${COLORS.red}❌ Error resetting notifications: ${error.message}${COLORS.reset}`);\r\n  }\r\n}\r\n\r\n/**\r\n * Regenerate context\r\n */\r\nasync function regenerateContext() {\r\n  console.log(`${COLORS.bright}Regenerating Cline context...${COLORS.reset}\\n`);\r\n\r\n  try {\r\n    // Check if context provider exists\r\n    const contextProviderFile = path.join(CONFIG.contextDir, 'claude-context-provider.ts');\r\n    try {\r\n      await fs.access(contextProviderFile, fs.constants.F_OK);\r\n    } catch (error) {\r\n      console.log(`${COLORS.red}✗ Context provider does not exist: ${contextProviderFile}${COLORS.reset}`);\r\n      throw new Error(`Context provider ${contextProviderFile} does not exist. Run 'node scripts/cline-setup.js setup' to create it.`);\r\n    }\r\n    \r\n    // Execute context provider\r\n    console.log(`${COLORS.yellow}⚠ This would normally execute the context provider to regenerate context${COLORS.reset}`);\r\n    console.log(`${COLORS.yellow}⚠ For now, this is just a placeholder${COLORS.reset}`);\r\n    \r\n    console.log(`\\n${COLORS.green}✅ Context regeneration complete!${COLORS.reset}`);\r\n  } catch (error) {\r\n    console.error(`${COLORS.red}❌ Error regenerating context: ${error.message}${COLORS.reset}`);\r\n  }\r\n}\r\n\r\n/**\r\n * Show help\r\n */\r\nfunction showHelp() {\r\n  console.log(`\r\n${COLORS.bright}Usage:${COLORS.reset}\r\n  node scripts/cline-setup.js [command]\r\n\r\n${COLORS.bright}Commands:${COLORS.reset}\r\n  setup     Setup Cline integration\r\n  test      Test Cline integration\r\n  reset     Reset Cline notifications\r\n  context   Regenerate Cline context\r\n  help      Show this help message\r\n\r\n${COLORS.bright}Examples:${COLORS.reset}\r\n  node scripts/cline-setup.js setup    # Setup Cline integration\r\n  node scripts/cline-setup.js test     # Test Cline integration\r\n  node scripts/cline-setup.js reset    # Reset Cline notifications\r\n  node scripts/cline-setup.js context  # Regenerate Cline context\r\n  `);\r\n}\r\n\r\n// Run the script\r\nmain().catch(error => {\r\n  console.error(`${COLORS.red}❌ Error: ${error.message}${COLORS.reset}`);\r\n  process.exit(1);\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\scripts\\find-dead-code.js","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":1,"column":22,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":1,"endColumn":46},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":2,"column":12,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":2,"endColumn":25},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":3,"column":14,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":3,"endColumn":29},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":13,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":13,"endColumn":12,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[335,393],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":32,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":32,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1003,1076],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":34,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":34,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1094,1183],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":42,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":42,"endColumn":12,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1393,1456],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":60,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":60,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2031,2115],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":62,"column":6,"nodeType":"MemberExpression","messageId":"unexpected","endLine":62,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2134,2228],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":69,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":69,"endColumn":12,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2351,2435],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":85,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":85,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3269,3337],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":87,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":87,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3355,3403],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":91,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":91,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3505,3608],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":94,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":94,"endColumn":12,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3615,3719],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const { execSync } = require('child_process');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\n\r\nconst reportsDir = path.join(__dirname, '..', 'reports');\r\n\r\n// Ensure reports directory exists\r\nif (!fs.existsSync(reportsDir)) {\r\n  fs.mkdirSync(reportsDir, { recursive: true });\r\n}\r\n\r\n// Run ts-prune to find unused exports\r\nconsole.log('Running ts-prune to find unused exports...');\r\ntry {\r\n  // ts-prune might exit with non-zero code if unused exports are found,\r\n  // so we catch the error but still process stdout if available.\r\n  let tsPruneOutput = '';\r\n  try {\r\n    tsPruneOutput = execSync('npx ts-prune -p tsconfig.json', { encoding: 'utf8' }); // Specify tsconfig\r\n  } catch (e) {\r\n    if (e.stdout) {\r\n      tsPruneOutput = e.stdout.toString();\r\n    } else {\r\n      console.error('ts-prune execution failed with no output:', e.message);\r\n    }\r\n  }\r\n  if (tsPruneOutput) {\r\n    fs.writeFileSync(\r\n      path.join(reportsDir, 'unused-exports.txt'),\r\n      tsPruneOutput\r\n    );\r\n    console.log('Unused exports report saved to reports/unused-exports.txt');\r\n  } else {\r\n    console.log('No unused exports found by ts-prune or ts-prune failed to produce output.');\r\n  }\r\n} catch (error) {\r\n  // This outer catch is for unexpected errors during the process itself\r\n  console.error('Error running ts-prune process:', error);\r\n}\r\n\r\n// Run depcheck to find unused dependencies\r\nconsole.log('Running depcheck to find unused dependencies...');\r\ntry {\r\n  // depcheck might exit with non-zero code if issues are found.\r\n  let depcheckOutput = '';\r\n  try {\r\n    depcheckOutput = execSync('npx depcheck --json', { encoding: 'utf8' });\r\n  } catch (e) {\r\n     if (e.stdout) {\r\n      depcheckOutput = e.stdout.toString(); // depcheck outputs JSON error details to stdout on error\r\n    } else {\r\n      console.error('depcheck execution failed with no output:', e.message);\r\n    }\r\n  }\r\n  if (depcheckOutput) {\r\n    fs.writeFileSync(\r\n      path.join(reportsDir, 'unused-dependencies.json'),\r\n      depcheckOutput\r\n    );\r\n    console.log('Unused dependencies report saved to reports/unused-dependencies.json');\r\n  } else {\r\n     console.log('No unused dependencies found by depcheck or depcheck failed to produce output.');\r\n  }\r\n} catch (error) {\r\n  console.error('Error running depcheck process:', error);\r\n}\r\n\r\n// Find console.log statements\r\nconsole.log('Finding console.log statements (excluding node_modules and .next)...');\r\ntry {\r\n  // Using a more robust grep command if available, or a simpler one as fallback\r\n  // This command might vary based on OS (Linux/macOS vs Windows)\r\n  // For cross-platform, a Node.js based search would be better, but grep is common.\r\n  // The grep command provided in the plan might not work on all systems or without adjustments.\r\n  // A simple Node.js alternative would be to read all files and regex match.\r\n  // For now, assuming a POSIX-like environment where grep is available.\r\n  const grepCommand = \"grep -r --exclude-dir=node_modules --exclude-dir=.next --include='*.{ts,tsx,js,jsx}' 'console\\\\.log' . || true\";\r\n  const grepOutput = execSync(grepCommand, { encoding: 'utf8' });\r\n  \r\n  if (grepOutput.trim()) {\r\n    fs.writeFileSync(\r\n      path.join(reportsDir, 'console-logs.txt'),\r\n      grepOutput\r\n    );\r\n    console.log('Console.log report saved to reports/console-logs.txt');\r\n  } else {\r\n    console.log('No console.log statements found.');\r\n  }\r\n} catch (error) {\r\n  console.error('Error finding console.log statements:', error.message);\r\n  console.log(\"Note: 'grep' command might not be available or might behave differently on your system.\");\r\n}\r\n\r\nconsole.log('Code audit scripts complete. Reports are in the reports/ directory if issues were found.');\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\scripts\\fix-typescript.js","messages":[{"ruleId":"import/no-named-as-default","severity":1,"message":"Using exported name 'glob' as identifier for default import.","line":11,"column":8,"nodeType":"ImportDefaultSpecifier","endLine":11,"endColumn":12},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":14,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":14,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[309,361],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"import/no-named-as-default-member","severity":1,"message":"Caution: `glob` also has a named export `sync`. Check if you meant to write `import {sync} from 'glob'` instead.","line":17,"column":17,"nodeType":"MemberExpression","endLine":17,"endColumn":26},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":26,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":26,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[554,620],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":42,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":42,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1099,1148],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":54,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":54,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1686,1747],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":66,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":66,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2127,2205],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":74,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":74,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2476,2539],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":82,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":82,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2784,2833],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":97,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":97,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3425,3481],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":107,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":107,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3705,3767],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":111,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":111,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3785,3829],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":112,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":112,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3833,3901],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":116,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":116,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3982,4046],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":118,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":118,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4106,4155],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":122,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":122,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4306,4369],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":123,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":123,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4375,4436],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\r\n\r\n/**\r\n * TypeScript Fixer - Automatisch oplossen van TypeScript problemen\r\n * Onderdeel van het FibroGuardian Auto-Fix System\r\n */\r\n\r\nimport { execSync } from 'child_process';\r\nimport { promises as fs } from 'fs';\r\n\r\nimport glob from 'glob';\r\n\r\nasync function fixTypeScriptIssues() {\r\n  console.log('🔍 Scanning for TypeScript issues...');\r\n\r\n  // Get all TypeScript files\r\n  const files = glob.sync('**/*.{ts,tsx}', {\r\n    ignore: [\r\n      'node_modules/**',\r\n      '.next/**',\r\n      'dist/**',\r\n      '*.d.ts'\r\n    ]\r\n  });\r\n\r\n  console.log(`📁 Found ${files.length} TypeScript files to check`);\r\n\r\n  let fixedFiles = 0;\r\n  let fixedIssues = 0;\r\n\r\n  for (const file of files) {\r\n    try {\r\n      let content = await fs.readFile(file, 'utf8');\r\n      let fileChanged = false;\r\n      let fileIssues = 0;\r\n\r\n      // Fix 1: Add React import for JSX files\r\n      if (file.endsWith('.tsx') && !content.includes('import React') && content.includes('<')) {\r\n        content = `import React from 'react';\\n\\n${content}`;\r\n        fileChanged = true;\r\n        fileIssues++;\r\n        console.log(`  ✅ Added React import to ${file}`);\r\n      }\r\n\r\n      // Fix 2: Add return types for React components\r\n      const componentMatches = content.match(/(export\\s+(?:default\\s+)?function\\s+\\w+\\s*\\([^)]*\\))\\s*{/g);\r\n      if (componentMatches && file.endsWith('.tsx')) {\r\n        for (const match of componentMatches) {\r\n          if (!match.includes(':')) {\r\n            const newDeclaration = match.replace(/(\\)\\s*){/, '): JSX.Element {');\r\n            content = content.replace(match, newDeclaration);\r\n            fileChanged = true;\r\n            fileIssues++;\r\n            console.log(`  ✅ Added return type to component in ${file}`);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Fix 3: Replace 'any' with 'unknown'\r\n      const anyCount = (content.match(/:\\s*any\\b/g) || []).length;\r\n      if (anyCount > 0) {\r\n        content = content.replace(/:\\s*any\\b/g, ': unknown');\r\n        content = content.replace(/Array<any>/g, 'Array<unknown>');\r\n        fileChanged = true;\r\n        fileIssues += anyCount;\r\n        console.log(`  ✅ Replaced ${anyCount} 'any' types with 'unknown' in ${file}`);\r\n      }\r\n\r\n      // Fix 4: Add missing imports for common types\r\n      if (content.includes('JSX.Element') && !content.includes('import React')) {\r\n        content = `import React from 'react';\\n${content}`;\r\n        fileChanged = true;\r\n        fileIssues++;\r\n        console.log(`  ✅ Added React import for JSX usage in ${file}`);\r\n      }\r\n\r\n      // Fix 5: Fix common Promise handling issues\r\n      if (content.includes('Promise<any>')) {\r\n        content = content.replace(/Promise<any>/g, 'Promise<unknown>');\r\n        fileChanged = true;\r\n        fileIssues++;\r\n        console.log(`  ✅ Fixed Promise<any> in ${file}`);\r\n      }\r\n\r\n      // Fix 6: Fix event handler types\r\n      if (content.includes('(e: any)') && (content.includes('onClick') || content.includes('onChange'))) {\r\n        content = content.replace(/(onClick|onChange)={\\s*\\(\\s*e\\s*:\\s*any\\s*\\)\\s*=>/g,\r\n          (match) => {\r\n            if (match.includes('onClick')) {\r\n              return match.replace('e: any', 'e: React.MouseEvent');\r\n            } else {\r\n              return match.replace('e: any', 'e: React.ChangeEvent<HTMLInputElement>');\r\n            }\r\n          });\r\n        fileChanged = true;\r\n        fileIssues++;\r\n        console.log(`  ✅ Fixed event handler types in ${file}`);\r\n      }\r\n\r\n      // Save changes if file was modified\r\n      if (fileChanged) {\r\n        await fs.writeFile(file, content);\r\n        fixedFiles++;\r\n        fixedIssues += fileIssues;\r\n      }\r\n    } catch (error) {\r\n      console.log(`  ❌ Error processing ${file}: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  console.log('\\n📊 TypeScript Fix Summary:');\r\n  console.log(`✅ Fixed ${fixedIssues} issues in ${fixedFiles} files`);\r\n\r\n  // Run TypeScript check to see if there are remaining issues\r\n  try {\r\n    console.log('\\n🔍 Checking for remaining TypeScript issues...');\r\n    execSync('npx tsc --noEmit', { stdio: 'pipe' });\r\n    console.log('✅ No TypeScript errors remaining!');\r\n  } catch (error) {\r\n    const errorOutput = error.stdout.toString();\r\n    const errorCount = (errorOutput.match(/error TS\\d+/g) || []).length;\r\n    console.log(`⚠️ ${errorCount} TypeScript errors still remain`);\r\n    console.log('Run \"npx tsc --noEmit\" to see detailed errors');\r\n  }\r\n}\r\n\r\n// Run the fixer\r\nfixTypeScriptIssues().catch(error => {\r\n  console.error('❌ Error:', error.message);\r\n  process.exit(1);\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\scripts\\generate-jsdoc.js","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":1,"column":12,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":1,"endColumn":25},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":2,"column":14,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":2,"endColumn":29},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":14,"nodeType":"CallExpression","endLine":2,"endColumn":29,"fix":{"range":[56,56],"text":"\n"}},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":3,"column":14,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":3,"endColumn":29},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":177,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":177,"endColumn":12,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6463,6575],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"const fs = require('fs');\r\nconst path = require('path');\r\nconst glob = require('glob');\r\n// @typescript-eslint/parser is a dev dependency, ensure it's installed\r\n// For simplicity, this script uses regex for JSDoc presence, not full AST parsing for content.\r\n// Full AST parsing for JSDoc content validation is more complex.\r\n\r\n// Configuratie\r\nconst projectRoot = path.resolve(__dirname, '..');\r\nconst dirsToScan = [\r\n  'hooks',\r\n  'utils',\r\n  'lib',\r\n  'components', \r\n  'containers',\r\n  'context',\r\n  'app', // Scan app directory for pages/layouts if needed\r\n];\r\n\r\n// JSDoc template (simplified for detection, actual content varies)\r\nconst jsdocBlockRegex = /\\/\\*\\*[\\s\\S]*?\\*\\//; // Detects if a JSDoc block exists before an export\r\n\r\n// Functie om TSX/TS files te scannen\r\nfunction scanFiles() {\r\n  const files = [];\r\n  dirsToScan.forEach(dir => {\r\n    const dirPath = path.join(projectRoot, dir);\r\n    if (!fs.existsSync(dirPath)) {\r\n      console.warn(`Directory to scan for JSDoc not found: ${dirPath}`);\r\n      return;\r\n    }\r\n    const pattern = path.join(dirPath, '**/*.{ts,tsx}');\r\n    const dirFiles = glob.sync(pattern, {\r\n      ignore: [\r\n        '**/*.d.ts', \r\n        '**/*.test.ts', \r\n        '**/*.test.tsx', \r\n        '**/*.spec.ts', \r\n        '**/*.spec.tsx',\r\n        '**/*.stories.tsx',\r\n        '**/node_modules/**',\r\n        '**/.next/**',\r\n        // Exclude specific files if necessary\r\n        path.join(projectRoot, 'lib', 'supabase.ts'), // Often just client exports\r\n        path.join(projectRoot, 'lib', 'react-query-provider.tsx'),\r\n      ],\r\n    });\r\n    files.push(...dirFiles);\r\n  });\r\n  return files;\r\n}\r\n\r\n// Functie om JSDoc van een functie, component, of hook te analyseren\r\nfunction analyzeFileForJSDoc(filePath) {\r\n  const content = fs.readFileSync(filePath, 'utf8');\r\n  const relativePath = path.relative(projectRoot, filePath).replace(/\\\\/g, '/');\r\n  \r\n  // Find all exported named functions, consts (arrow functions/components), and classes\r\n  const exportRegex = /export\\s+(async\\s+)?(function\\s+(\\w+)|const\\s+(\\w+)\\s*[:=]|class\\s+(\\w+))/g;\r\n  let match;\r\n  const foundExports = [];\r\n  let lastIndex = 0;\r\n\r\n  while ((match = exportRegex.exec(content)) !== null) {\r\n    const exportName = match[3] || match[4] || match[5]; // Function name, const name, or class name\r\n    const exportStartIndex = match.index;\r\n    \r\n    // Look for JSDoc block immediately preceding the export\r\n    const contentBeforeExport = content.substring(lastIndex, exportStartIndex);\r\n    const precedingCommentMatch = jsdocBlockRegex.exec(contentBeforeExport.trimRight());\r\n    const hasJSDoc = !!precedingCommentMatch;\r\n\r\n    let type = 'function'; // Default type\r\n    if (exportName.startsWith('use')) {\r\n      type = 'hook';\r\n    } else if (exportName[0] === exportName[0].toUpperCase() && !exportName.endsWith('Provider') && !exportName.endsWith('Context')) {\r\n      // Heuristic: PascalCase and not a Provider/Context is likely a component\r\n      if (filePath.includes('/components/') || filePath.includes('/containers/')) {\r\n        type = 'component';\r\n      }\r\n    } else if (exportName.endsWith('Provider') || exportName.endsWith('Context')) {\r\n      type = 'context';\r\n    } else if (filePath.includes('/utils/') || filePath.includes('/lib/')) {\r\n      type = 'util';\r\n    }\r\n    \r\n    foundExports.push({ name: exportName, type, hasJSDoc });\r\n    lastIndex = exportRegex.lastIndex;\r\n  }\r\n  \r\n  return {\r\n    path: relativePath,\r\n    exports: foundExports,\r\n  };\r\n}\r\n\r\n// Genereer rapport\r\nfunction generateReport(results) {\r\n  let report = '# JSDoc Coverage Report\\n\\n';\r\n  report += `_Generated on ${new Date().toISOString()}_\\n\\n`;\r\n  \r\n  const totalExports = results.reduce((sum, file) => sum + file.exports.length, 0);\r\n  const exportsWithJSDoc = results.reduce((sum, file) => \r\n    sum + file.exports.filter(exp => exp.hasJSDoc).length, 0);\r\n  \r\n  const coveragePercentage = totalExports === 0 ? 0 : \r\n    ((exportsWithJSDoc / totalExports) * 100).toFixed(1);\r\n  \r\n  report += `## Summary\\n\\n`;\r\n  report += `- Total exports analyzed: ${totalExports}\\n`;\r\n  report += `- Exports with JSDoc: ${exportsWithJSDoc}\\n`;\r\n  report += `- Coverage: **${coveragePercentage}%**\\n\\n`;\r\n  \r\n  const dirStats = {};\r\n  dirsToScan.forEach(dir => {\r\n    dirStats[dir] = { total: 0, withJSDoc: 0, files: [] };\r\n  });\r\n\r\n  results.forEach(fileResult => {\r\n    const dirKey = dirsToScan.find(dir => fileResult.path.startsWith(dir + '/'));\r\n    if (dirKey) {\r\n      dirStats[dirKey].total += fileResult.exports.length;\r\n      dirStats[dirKey].withJSDoc += fileResult.exports.filter(exp => exp.hasJSDoc).length;\r\n      if (fileResult.exports.some(exp => !exp.hasJSDoc)) {\r\n        dirStats[dirKey].files.push(fileResult);\r\n      }\r\n    }\r\n  });\r\n  \r\n  report += `## Coverage by Directory\\n\\n`;\r\n  Object.entries(dirStats).forEach(([dir, stats]) => {\r\n    if (stats.total === 0) return;\r\n    const dirCoveragePercentage = ((stats.withJSDoc / stats.total) * 100).toFixed(1);\r\n    report += `- **${dir}**: ${dirCoveragePercentage}% (${stats.withJSDoc}/${stats.total})\\n`;\r\n  });\r\n  \r\n  report += `\\n## Files/Exports Missing JSDoc\\n\\n`;\r\n  let missingCount = 0;\r\n  Object.entries(dirStats).forEach(([dir, stats]) => {\r\n    if (stats.files.length > 0) {\r\n      report += `### Directory: \\`${dir}\\`\\n\\n`;\r\n      stats.files.forEach(fileResult => {\r\n        const missingInFile = fileResult.exports.filter(exp => !exp.hasJSDoc);\r\n        if (missingInFile.length > 0) {\r\n          report += `  - **File:** \\`${fileResult.path}\\`\\n`;\r\n          missingInFile.forEach(exp => {\r\n            report += `    - \\`${exp.name}\\` (type: ${exp.type})\\n`;\r\n            missingCount++;\r\n          });\r\n          report += '\\n';\r\n        }\r\n      });\r\n    }\r\n  });\r\n\r\n  if (missingCount === 0 && totalExports > 0) {\r\n    report += \"All found exports appear to have JSDoc comments. Manual verification recommended.\\n\";\r\n  } else if (totalExports === 0) {\r\n    report += \"No exports found to analyze.\\n\";\r\n  }\r\n  \r\n  return report;\r\n}\r\n\r\n// Voer script uit\r\nconst filesToScan = scanFiles();\r\nconst analysisResults = filesToScan.map(analyzeFileForJSDoc);\r\nconst reportContent = generateReport(analysisResults);\r\n\r\nconst reportsDir = path.join(projectRoot, 'reports');\r\nif (!fs.existsSync(reportsDir)) {\r\n  fs.mkdirSync(reportsDir, { recursive: true });\r\n}\r\nconst reportPath = path.join(reportsDir, 'jsdoc-coverage.md');\r\nfs.writeFileSync(reportPath, reportContent);\r\n\r\nconsole.log(`JSDoc coverage report generated at ${path.relative(projectRoot, reportPath).replace(/\\\\/g, '/')}`);\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\scripts\\generate-refactoring-inventory.js","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":1,"column":12,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":1,"endColumn":25},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":2,"column":14,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":2,"endColumn":29},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":14,"nodeType":"CallExpression","endLine":2,"endColumn":29,"fix":{"range":[56,56],"text":"\n"}},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":3,"column":14,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":3,"endColumn":29},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":160,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":160,"endColumn":12,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7534,7663],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"const fs = require('fs');\r\nconst path = require('path');\r\nconst glob = require('glob');\r\n\r\n// Base directory for components\r\nconst componentsDir = path.join(__dirname, '..', 'components');\r\nconst containersDir = path.join(__dirname, '..', 'containers'); // Also check containers\r\n\r\n// Function to find all .tsx files, excluding .test.tsx and .stories.tsx\r\nconst findComponentFiles = (dir) => {\r\n  return glob.sync(path.join(dir, '**/*.tsx'), {\r\n    ignore: ['**/*.test.tsx', '**/*.stories.tsx', '**/*.spec.tsx'],\r\n  });\r\n};\r\n\r\nconst componentFiles = [...findComponentFiles(componentsDir), ...findComponentFiles(containersDir)];\r\n\r\n// Uitzondering voor al gerefactorde componenten of pure presentational components\r\n// Add names of components that are already refactored or are known to be purely presentational\r\nconst alreadyRefactoredOrPresentational = [\r\n  'ReflectiesList', // Presentational, container is ReflectiesListContainer\r\n  'ReflectiesListContainer',\r\n  'SpecialistCard', // Presentational\r\n  'SpecialistsListContainer',\r\n  'DailyPlanner', // Presentational, container is DailyPlannerContainer\r\n  'DailyPlannerContainer',\r\n  'TasksPageContainer', // Container, uses TaskList (presentational)\r\n  'ConditionalRender', // UI utility\r\n  'NotificationList', // UI utility\r\n  'AlertMessage', // UI utility\r\n  'SkeletonLoader', // UI utility\r\n  'SkipLink', // UI utility\r\n  'TaskCard', // Presentational, used by TaskList and DailyPlanner\r\n  'TaskList', // Presentational, used by TasksPageContainer\r\n  // Add other components as they are refactored or confirmed presentational\r\n];\r\n\r\n// Regexes om client components en data fetching/state te detecteren\r\nconst clientComponentRegex = /^\\s*['\"]use client['\"]/;\r\nconst dataFetchingRegex = /use(Query|Mutation|Supabase|Tasks|Profile|Reflecties|MySpecialists|MyPatients|Insights|TaskLogs|RecentLogs|Task|UpsertTask|DeleteTask|UpdateProfile|AddTaskLog|UpdateTaskLog|DeleteTaskLog|UpsertReflectie|DeleteReflectie|AddSpecialistPatientRelation|DeleteSpecialistPatientRelation)/i;\r\nconst stateRegex = /useState|useReducer/;\r\nconst directSupabaseCallRegex = /\\.from\\s*\\(\\s*['\"].*['\"]\\s*\\)\\s*\\.\\s*(select|insert|update|delete|rpc|upload|download)/;\r\nconst windowAlertRegex = /window\\.alert\\s*\\(/;\r\nconst windowLocationReloadRegex = /window\\.location\\.reload\\s*\\(\\)/;\r\n\r\n\r\n// Resultaten opslaan\r\nconst componentsNeedingRefactoring = [];\r\n\r\ncomponentFiles.forEach(file => {\r\n  const componentName = path.basename(file, '.tsx');\r\n  const relativePath = path.relative(path.join(__dirname, '..'), file).replace(/\\\\/g, '/');\r\n\r\n  // Sla al gerefactorde/presentational componenten over\r\n  if (alreadyRefactoredOrPresentational.includes(componentName)) {\r\n    return;\r\n  }\r\n  \r\n  const content = fs.readFileSync(file, 'utf8');\r\n  \r\n  const isClientComponent = clientComponentRegex.test(content);\r\n  const hasDataFetchingHook = dataFetchingRegex.test(content);\r\n  const hasDirectSupabaseCall = directSupabaseCallRegex.test(content);\r\n  const hasStateManagement = stateRegex.test(content);\r\n  const usesWindowAlert = windowAlertRegex.test(content);\r\n  const usesWindowLocationReload = windowLocationReloadRegex.test(content);\r\n\r\n  let priority = 'LOW';\r\n  let reason = [];\r\n  let needsContainer = false;\r\n\r\n  if (hasDataFetchingHook || hasDirectSupabaseCall) {\r\n    priority = 'HIGH';\r\n    reason.push('Bevat data fetching/directe Supabase calls.');\r\n    needsContainer = true;\r\n  } else if (isClientComponent && hasStateManagement) {\r\n    priority = 'MEDIUM';\r\n    reason.push('Client component met state management.');\r\n    // needsContainer might be true if state is complex and related to data\r\n  } else if (isClientComponent) {\r\n    priority = 'LOW'; // Client component, but no obvious data/state logic found by regex\r\n    reason.push('Client component, handmatige check nodig.');\r\n  } else {\r\n    // Likely a server component or simple presentational component not matching 'use client'\r\n    // These generally don't need refactoring in the context of this plan (moving client logic to containers)\r\n    return; \r\n  }\r\n\r\n  if (usesWindowAlert) {\r\n    reason.push('Gebruikt window.alert().');\r\n    if (priority === 'LOW') priority = 'MEDIUM'; // Escalate priority\r\n  }\r\n  if (usesWindowLocationReload) {\r\n    reason.push('Gebruikt window.location.reload().');\r\n    if (priority === 'LOW') priority = 'MEDIUM'; // Escalate priority\r\n  }\r\n  \r\n  if (reason.length > 0) {\r\n    componentsNeedingRefactoring.push({\r\n      path: relativePath,\r\n      name: componentName,\r\n      priority,\r\n      needsContainer,\r\n      reason: reason.join(' '),\r\n    });\r\n  }\r\n});\r\n\r\n// Sorteer op prioriteit\r\ncomponentsNeedingRefactoring.sort((a, b) => {\r\n  const priorityOrder = { HIGH: 0, MEDIUM: 1, LOW: 2 };\r\n  return priorityOrder[a.priority] - priorityOrder[b.priority];\r\n});\r\n\r\n// Output markdown\r\nconst highPriority = componentsNeedingRefactoring.filter(c => c.priority === 'HIGH');\r\nconst mediumPriority = componentsNeedingRefactoring.filter(c => c.priority === 'MEDIUM');\r\nconst lowPriority = componentsNeedingRefactoring.filter(c => c.priority === 'LOW');\r\n\r\nconst generateMarkdownList = (list, title) => {\r\n  if (list.length === 0) return `\\n### ${title}\\n\\nGeen componenten in deze categorie.\\n`;\r\n  return `\\n### ${title}\\n\\n${list.map(c => \r\n    `- [ ] **${c.name}** (${c.path})\\n  - Reden: ${c.reason}${c.needsContainer ? '\\n  - Actie: Maak Container + Presentational componenten.' : ''}`\r\n  ).join('\\n')}\\n`;\r\n};\r\n\r\nconst markdown = `# Component Refactoring Inventory\r\n\r\nDit document bevat een geprioriteerde lijst van componenten die gerefactord moeten worden.\r\nDe focus ligt op het verplaatsen van data fetching en complexe state naar Container componenten,\r\nen het standaardiseren van UI feedback (notificaties, error handling).\r\n\r\n${generateMarkdownList(highPriority, 'Hoge Prioriteit (Data Fetching / Directe DB Calls / Kritieke UI Issues)')}\r\n${generateMarkdownList(mediumPriority, 'Gemiddelde Prioriteit (Client Componenten met State / UI Issues)')}\r\n${generateMarkdownList(lowPriority, 'Lage Prioriteit (Client Componenten - Handmatige Check Nodig)')}\r\n\r\n## Refactoring Instructies\r\n\r\nVoor componenten die een Container + Presentational split nodig hebben:\r\n\r\n1.  **Maak een Container component** (bv. in een nieuwe \\`containers/\\` map of naast het presentational component):\r\n    *   Verantwoordelijk voor data fetching (met React Query hooks) en state management.\r\n    *   Gebruikt \\`ConditionalRender\\` voor loading/error/empty states.\r\n    *   Definieert alle event handlers en callbacks.\r\n    *   Rendert het Presentational component en geeft alle benodigde data en functies als props door.\r\n2.  **Refactor het oorspronkelijke component naar een Presentational component:**\r\n    *   Verwijder alle data fetching, directe Supabase calls, en complexe state logica.\r\n    *   Accepteert alleen props en is verantwoordelijk voor de UI rendering.\r\n    *   Gebruik \\`React.memo\\` voor optimalisatie indien zinvol.\r\n3.  **Update de parent componenten** om de nieuwe Container component te gebruiken.\r\n\r\nVoor andere refactorings (bv. vervangen \\`window.alert\\`, \\`window.location.reload\\`):\r\n*   Gebruik \\`useNotification()\\` voor gebruikersfeedback.\r\n*   Gebruik \\`queryClient.invalidateQueries()\\` na mutaties om data te verversen i.p.v. \\`window.location.reload()\\`.\r\n`;\r\n\r\nconst outputPath = path.join(__dirname, '..', 'utils', 'refactoring-inventory.md');\r\nfs.mkdirSync(path.dirname(outputPath), { recursive: true }); // Ensure utils directory exists\r\nfs.writeFileSync(outputPath, markdown);\r\nconsole.log(`Refactoring inventory gegenereerd op ${path.relative(path.join(__dirname, '..'), outputPath).replace(/\\\\/g, '/')}`);\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\scripts\\generate-test-templates.js","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":1,"column":12,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":1,"endColumn":25},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":2,"column":14,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":2,"endColumn":29},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":14,"nodeType":"CallExpression","endLine":2,"endColumn":29,"fix":{"range":[56,56],"text":"\n"}},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":3,"column":14,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":3,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'componentDir' is assigned a value but never used.","line":46,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":21},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":179,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":179,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7328,7403],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":185,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":185,"endColumn":12,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7516,7588],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":186,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":186,"endColumn":12,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7590,7668],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":188,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":188,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7714,7795],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":1,"fixableWarningCount":0,"source":"const fs = require('fs');\r\nconst path = require('path');\r\nconst glob = require('glob');\r\n\r\nconst projectRoot = path.resolve(__dirname, '..');\r\n\r\n// Directories to scan for components\r\nconst dirsToScan = [\r\n  path.join(projectRoot, 'components'),\r\n  path.join(projectRoot, 'containers'),\r\n  // Add other directories like 'app' if you want to generate tests for page components\r\n  // path.join(projectRoot, 'app'), \r\n];\r\n\r\n// Function to find all .tsx files, excluding .d.ts, .test.tsx, .stories.tsx, .spec.tsx\r\nconst findComponentFiles = (dir) => {\r\n  return glob.sync(path.join(dir, '**/*.tsx'), {\r\n    ignore: ['**/*.d.ts', '**/*.test.tsx', '**/*.stories.tsx', '**/*.spec.tsx'],\r\n  });\r\n};\r\n\r\nlet allComponentFiles = [];\r\ndirsToScan.forEach(dir => {\r\n  if (fs.existsSync(dir)) {\r\n    allComponentFiles = allComponentFiles.concat(findComponentFiles(dir));\r\n  } else {\r\n    console.warn(`Directory not found, skipping: ${dir}`);\r\n  }\r\n});\r\n\r\n// Filter out components that already have a test file\r\nconst componentsWithoutTests = allComponentFiles.filter(file => {\r\n  const testFileJs = file.replace('.tsx', '.test.js');\r\n  const testFileTsx = file.replace('.tsx', '.test.tsx');\r\n  const testFileSpecJs = file.replace('.tsx', '.spec.js');\r\n  const testFileSpecTsx = file.replace('.tsx', '.spec.tsx');\r\n  return !fs.existsSync(testFileJs) && !fs.existsSync(testFileTsx) &&\r\n         !fs.existsSync(testFileSpecJs) && !fs.existsSync(testFileSpecTsx);\r\n});\r\n\r\n// Genereer test templates\r\ncomponentsWithoutTests.forEach(componentFile => {\r\n  const componentName = path.basename(componentFile, '.tsx');\r\n  // Place test file next to the component file\r\n  const testFile = componentFile.replace('.tsx', '.test.tsx'); \r\n  const componentDir = path.dirname(componentFile);\r\n  const relativePathToComponent = `./${componentName}`; // Relative import from test file to component\r\n\r\n  // Determine if it's likely a container or presentational based on name/path\r\n  const isContainer = componentName.includes('Container') || componentFile.includes('/containers/');\r\n  const isPresentational = !isContainer; // Simple heuristic\r\n\r\n  // Determine relative paths for common imports from the test file's location\r\n  // This needs to be robust if test files are in a central __tests__ folder.\r\n  // For now, assuming test file is co-located or in a __tests__ subfolder.\r\n  // A more robust solution would calculate relative paths from testFile to projectRoot/lib etc.\r\n  \r\n  // For co-located tests, these paths might need adjustment if your structure is different\r\n  // e.g., if lib is at root, path.relative(path.dirname(testFile), path.join(projectRoot, 'lib/QueryClientConfig'))\r\n  const queryClientConfigPath = '@/lib/QueryClientConfig'; // Using alias\r\n  const notificationContextPath = '@/context/NotificationContext'; // Using alias\r\n\r\n  const testTemplate = `import { render, screen${isContainer ? ', waitFor' : ''} } from '@testing-library/react';\r\nimport userEvent from '@testing-library/user-event';\r\nimport ${componentName} from '${relativePathToComponent}';\r\n${isContainer ? 'import { QueryClient, QueryClientProvider } from \\'@tanstack/react-query\\';' : ''}\r\n${isContainer ? `import { queryClient } from '${queryClientConfigPath}';` : ''}\r\n${isContainer ? `import { NotificationProvider } from '${notificationContextPath}';` : ''}\r\n\r\ndescribe('${componentName}', () => {\r\n  ${isContainer ? \r\n  `const TestWrapper = ({ children }: { children: React.ReactNode }) => (\r\n    <QueryClientProvider client={new QueryClient()}> {/* Use new QueryClient for test isolation */}\r\n      <NotificationProvider>\r\n        {children}\r\n      </NotificationProvider>\r\n    </QueryClientProvider>\r\n  );` : \r\n  `const defaultProps = {\r\n    // TODO: Populate with default/mock props for ${componentName}\r\n    // Example:\r\n    // propName: 'mockValue',\r\n  };\r\n\r\n  const renderComponent = (props = {}) => {\r\n    return render(<${componentName} {...defaultProps} {...props} />);\r\n  };`\r\n  }\r\n  \r\n  it('renders correctly', async () => {\r\n    ${isContainer ? \r\n    `render(<${componentName} />, { wrapper: TestWrapper });\r\n    // TODO: Add assertions for container initial state or loading state\r\n    // Example:\r\n    // expect(screen.getByRole('status', { name: /loading/i })).toBeInTheDocument();\r\n    // await waitFor(() => expect(screen.queryByRole('status', { name: /loading/i })).not.toBeInTheDocument());` \r\n    : \r\n    `renderComponent();\r\n    // TODO: Add assertions for presentational component\r\n    // Example:\r\n    // expect(screen.getByText(/some text from ${componentName}/i)).toBeInTheDocument();`\r\n    }\r\n  });\r\n  \r\n  ${isPresentational ? \r\n  `it('handles user interactions correctly', async () => {\r\n    const user = userEvent.setup();\r\n    // Example: mock a prop function\r\n    // const mockOnClick = jest.fn();\r\n    // renderComponent({ onClickProp: mockOnClick });\r\n    \r\n    // const button = screen.getByRole('button', { name: /click me/i });\r\n    // await user.click(button);\r\n    // expect(mockOnClick).toHaveBeenCalledTimes(1);\r\n    \r\n    // TODO: Add specific interaction tests for ${componentName}\r\n  });` \r\n  : \r\n  `it('fetches and displays data correctly (if applicable)', async () => {\r\n    // Mock your data fetching hooks (e.g., useTasks, useProfile) if this container fetches data\r\n    // jest.mock('@/hooks/useSupabaseQuery', () => ({\r\n    //   ...jest.requireActual('@/hooks/useSupabaseQuery'), // Import and retain default behavior\r\n    //   useSpecificHook: jest.fn().mockReturnValue({\r\n    //     data: [{ id: '1', name: 'Mock Data' }],\r\n    //     isLoading: false,\r\n    //     isError: false,\r\n    //     error: null,\r\n    //   }),\r\n    // }));\r\n\r\n    render(<${componentName} />, { wrapper: TestWrapper });\r\n    \r\n    // TODO: Test data loading and display\r\n    // Example:\r\n    // await waitFor(() => {\r\n    //   expect(screen.getByText(/Mock Data/i)).toBeInTheDocument();\r\n    // });\r\n  });\r\n\r\n  it('handles mutations and notifications correctly (if applicable)', async () => {\r\n    // const user = userEvent.setup();\r\n    // Mock your mutation hooks (e.g., useUpsertTask)\r\n    // jest.mock('@/hooks/useMutations', () => ({\r\n    //   ...jest.requireActual('@/hooks/useMutations'),\r\n    //   useSpecificMutation: jest.fn().mockReturnValue({\r\n    //     mutate: jest.fn((data, { onSuccess }) => onSuccess()), // Simulate success\r\n    //     isPending: false,\r\n    //   }),\r\n    // }));\r\n    // const mockAddNotification = jest.fn();\r\n    // jest.mock('@/context/NotificationContext', () => ({\r\n    //   ...jest.requireActual('@/context/NotificationContext'),\r\n    //   useNotification: () => ({ addNotification: mockAddNotification }),\r\n    // }));\r\n\r\n    render(<${componentName} />, { wrapper: TestWrapper });\r\n\r\n    // TODO: Simulate action that triggers mutation\r\n    // Example:\r\n    // const submitButton = screen.getByRole('button', { name: /submit/i });\r\n    // await user.click(submitButton);\r\n\r\n    // await waitFor(() => {\r\n    //   expect(mockAddNotification).toHaveBeenCalledWith('success', expect.any(String));\r\n    // });\r\n  });`\r\n  }\r\n});\r\n`;\r\n  \r\n  // Schrijf test file\r\n  try {\r\n    // Ensure directory exists\r\n    const testDir = path.dirname(testFile);\r\n    if (!fs.existsSync(testDir)) {\r\n      fs.mkdirSync(testDir, { recursive: true });\r\n    }\r\n    fs.writeFileSync(testFile, testTemplate);\r\n    console.log(`Generated test template for ${componentName} at ${testFile}`);\r\n  } catch (err) {\r\n    console.error(`Failed to write test template for ${componentFile}:`, err);\r\n  }\r\n});\r\n\r\nconsole.log(`\\nProcessed ${allComponentFiles.length} component files.`);\r\nconsole.log(`Generated ${componentsWithoutTests.length} new test templates.`);\r\nif (componentsWithoutTests.length > 0) {\r\n  console.log(\"Please review and complete the TODOs in the generated test files.\");\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\scripts\\load-testing.js","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":1,"column":20,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":1,"endColumn":41},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":1,"column":20,"nodeType":"CallExpression","endLine":1,"endColumn":41,"fix":{"range":[41,41],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`autocannon` import should occur after import of `path`","line":1,"column":20,"nodeType":"CallExpression","endLine":1,"endColumn":41,"fix":{"range":[0,101],"text":"const fs = require('fs');\r\nconst path = require('path');\r\nconst autocannon = require('autocannon');\r\n"}},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":2,"column":12,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":2,"endColumn":25},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":3,"column":14,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":3,"endColumn":29},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":92,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":92,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3823,4013],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":102,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":102,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4288,4325],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":112,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":112,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4753,4803],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":115,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":115,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4889,4932],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":116,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":116,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4938,4979],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":117,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":117,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4985,5128],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":118,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":118,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5134,5161],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":119,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":119,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5167,5209],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":120,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":120,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5215,5276],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":121,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":121,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5282,5389],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":122,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":122,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5395,5426],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":123,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":123,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5432,5488],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":124,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":124,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5494,5590],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":125,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":125,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5596,5708],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":126,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":126,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5714,5751],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":127,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":127,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5757,5831],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":128,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":128,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5837,5914],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":129,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":129,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5920,5956],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":130,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":130,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5962,5997],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":131,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":131,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6003,6042],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":141,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":141,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6428,6554],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":145,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":145,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6640,6758],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":150,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":150,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6910,7043],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":154,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":154,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7126,7220],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":159,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":159,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7283,7343],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":161,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":161,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7365,7454],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":26,"fixableErrorCount":2,"fixableWarningCount":0,"source":"const autocannon = require('autocannon');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\n\r\n// Configuratie voor load test\r\nconst config = {\r\n  title: 'FibroGuardian Pro Load Test',\r\n  url: process.env.LOAD_TEST_URL || 'http://localhost:3000', // Standaard naar localhost\r\n  connections: parseInt(process.env.LOAD_TEST_CONNECTIONS || '50', 10), // Aantal gelijktijdige verbindingen\r\n  pipelining: parseInt(process.env.LOAD_TEST_PIPELINING || '1', 10),    // Aantal gelijktijdige requests per verbinding\r\n  duration: parseInt(process.env.LOAD_TEST_DURATION || '30', 10),     // Test duur in seconden\r\n  timeout: parseInt(process.env.LOAD_TEST_TIMEOUT || '10', 10), // Timeout per request in seconden\r\n  workers: parseInt(process.env.LOAD_TEST_WORKERS || '1', 10), // Aantal worker threads\r\n  scenarios: [\r\n    {\r\n      name: 'Homepage_GET',\r\n      weight: 20, \r\n      requests: [ { method: 'GET', path: '/', headers: { 'accept': 'text/html' } } ]\r\n    },\r\n    {\r\n      name: 'PricingPage_GET',\r\n      weight: 10,\r\n      requests: [ { method: 'GET', path: '/pricing', headers: { 'accept': 'text/html' } } ]\r\n    },\r\n    // Voeg hier meer geauthenticeerde scenario's toe zodra auth cookie mechanisme is geïmplementeerd\r\n    // Voorbeeld: Dashboard (vereist authCookie)\r\n    // {\r\n    //   name: 'Dashboard_GET_Auth',\r\n    //   weight: 30,\r\n    //   requests: [ { method: 'GET', path: '/dashboard', headers: { 'accept': 'text/html', 'cookie': '{{ authCookie }}' } } ]\r\n    // },\r\n    // Voorbeeld: API Tasks (vereist authCookie)\r\n    // {\r\n    //   name: 'TasksAPI_GET_Auth',\r\n    //   weight: 25,\r\n    //   requests: [ { method: 'GET', path: '/api/tasks', headers: { 'accept': 'application/json', 'cookie': '{{ authCookie }}' } } ]\r\n    // },\r\n    // Voorbeeld: API Create Task Log (vereist authCookie en randomTaskId)\r\n    // {\r\n    //   name: 'CreateTaskLog_POST_Auth',\r\n    //   weight: 15,\r\n    //   requests: [\r\n    //     {\r\n    //       method: 'POST',\r\n    //       path: '/api/task-logs',\r\n    //       headers: { 'content-type': 'application/json', 'cookie': '{{ authCookie }}' },\r\n    //       body: JSON.stringify({ /* ... mock body ... */ })\r\n    //     }\r\n    //   ]\r\n    // }\r\n  ]\r\n};\r\n\r\n// Placeholder voor functies die dynamische data voorbereiden\r\n// Deze moeten door het team worden geïmplementeerd om daadwerkelijke cookies/IDs te verkrijgen.\r\nasync function getAuthCookiePlaceholder() {\r\n  console.warn('Placeholder getAuthCookiePlaceholder: Using dummy auth cookie. Implement actual login for realistic tests.');\r\n  // Voorbeeld: return 'sb-access-token=DUMMY_TOKEN; sb-refresh-token=DUMMY_REFRESH_TOKEN;';\r\n  return 'my-dummy-auth-cookie=true;'; \r\n}\r\n\r\nasync function getRandomTaskIdsPlaceholder(count = 1) {\r\n  console.warn('Placeholder getRandomTaskIdsPlaceholder: Using dummy task ID. Implement actual task ID fetching.');\r\n  return Array(count).fill('dummy-task-id-for-loadtest');\r\n}\r\n\r\nasync function runLoadTest() {\r\n  const authCookie = await getAuthCookiePlaceholder();\r\n  const taskIds = await getRandomTaskIdsPlaceholder();\r\n  \r\n  const preparedScenarios = config.scenarios.map(scenario => ({\r\n    ...scenario,\r\n    requests: scenario.requests.map(req => {\r\n      let body = req.body;\r\n      let headers = {...req.headers};\r\n      \r\n      if (headers.cookie && headers.cookie.includes('{{ authCookie }}')) {\r\n        headers.cookie = headers.cookie.replace('{{ authCookie }}', authCookie);\r\n      }\r\n      \r\n      if (body && typeof body === 'string') {\r\n        if (body.includes('{{ randomTaskId }}') && taskIds.length > 0) {\r\n          const randomId = taskIds[Math.floor(Math.random() * taskIds.length)];\r\n          body = body.replace(new RegExp('{{ randomTaskId }}', 'g'), randomId);\r\n        }\r\n      }\r\n      \r\n      return { ...req, headers, body };\r\n    })\r\n  }));\r\n  \r\n  console.log(`Starting load test on ${config.url} with ${config.connections} connections, ${config.pipelining} pipelining, for ${config.duration} seconds using ${config.workers} worker(s).`);\r\n  \r\n  const instance = autocannon({\r\n    ...config, // Spread de hoofdconfiguratie\r\n    scenarios: preparedScenarios, // Gebruik de voorbereide scenario's\r\n  });\r\n  \r\n  autocannon.track(instance, { renderProgressBar: true });\r\n  \r\n  instance.on('done', (results) => {\r\n    console.log('\\nLoad test complete.');\r\n    \r\n    const reportDir = path.join(__dirname, '../reports/load-tests');\r\n    if (!fs.existsSync(reportDir)) {\r\n      fs.mkdirSync(reportDir, { recursive: true });\r\n    }\r\n    \r\n    const timestamp = new Date().toISOString().replace(/:/g, '-').replace(/\\..+/, '');\r\n    const reportPath = path.join(reportDir, `load-test-results-${timestamp}.json`);\r\n    fs.writeFileSync(reportPath, JSON.stringify(results, null, 2));\r\n    console.log(`Full report saved to ${reportPath}`);\r\n    \r\n    const { latency, requests, throughput, errors, timeouts } = results;\r\n    console.log(`\\n--- Load Test Summary ---`);\r\n    console.log(`Target URL: ${config.url}`);\r\n    console.log(`Duration: ${config.duration}s, Connections: ${config.connections}, Pipelining: ${config.pipelining}, Workers: ${config.workers}`);\r\n    console.log(`\\nRequests:`);\r\n    console.log(`  Total: ${requests.total}`);\r\n    console.log(`  Average RPS: ${requests.average.toFixed(2)}`);\r\n    console.log(`  Min RPS: ${requests.min}, Max RPS: ${requests.max}, StdDev: ${requests.stddev.toFixed(2)}`);\r\n    console.log(`\\nLatency (ms):`);\r\n    console.log(`  Average: ${latency.average.toFixed(2)}`);\r\n    console.log(`  Min: ${latency.min}, Max: ${latency.max}, StdDev: ${latency.stddev.toFixed(2)}`);\r\n    console.log(`  p50: ${latency.p50.toFixed(2)}, p90: ${latency.p90.toFixed(2)}, p99: ${latency.p99.toFixed(2)}`);\r\n    console.log(`\\nThroughput (bytes):`);\r\n    console.log(`  Total: ${(throughput.total / (1024*1024)).toFixed(2)} MB`);\r\n    console.log(`  Average BPS: ${(throughput.average / 1024).toFixed(2)} KB/s`);\r\n    console.log(`\\nErrors & Timeouts:`);\r\n    console.log(`  Errors: ${errors}`);\r\n    console.log(`  Timeouts: ${timeouts}`);\r\n    \r\n    // Definieer acceptabele drempels\r\n    const maxAcceptableAvgLatency = 500; // ms\r\n    const minAcceptableRPS = 20; // rps (afhankelijk van verwacht verkeer)\r\n    const maxAcceptableErrorRate = 0.01; // 1%\r\n    const maxAcceptableTimeouts = config.connections * 0.05; // Max 5% timeouts\r\n\r\n    let passed = true;\r\n    if (latency.average > maxAcceptableAvgLatency) {\r\n      console.log(`\\n❌ FAILED: Average latency (${latency.average.toFixed(2)}ms) exceeds threshold (${maxAcceptableAvgLatency}ms)`);\r\n      passed = false;\r\n    }\r\n    if (requests.average < minAcceptableRPS) {\r\n      console.log(`\\n❌ FAILED: Requests per second (${requests.average.toFixed(2)}) below threshold (${minAcceptableRPS})`);\r\n      passed = false;\r\n    }\r\n    const currentErrorRate = errors / requests.total || 0;\r\n    if (currentErrorRate > maxAcceptableErrorRate) {\r\n      console.log(`\\n❌ FAILED: Error rate (${(currentErrorRate * 100).toFixed(2)}%) exceeds threshold (${maxAcceptableErrorRate * 100}%)`);\r\n      passed = false;\r\n    }\r\n    if (timeouts > maxAcceptableTimeouts) {\r\n      console.log(`\\n❌ FAILED: Timeouts (${timeouts}) exceed threshold (${maxAcceptableTimeouts})`);\r\n      passed = false;\r\n    }\r\n    \r\n    if (passed) {\r\n      console.log('\\n✅ Load test PASSED all defined thresholds.');\r\n    } else {\r\n      console.log('\\n⚠️ Load test FAILED some defined thresholds. Review report for details.');\r\n      // process.exit(1); // Optioneel: laat script falen in CI\r\n    }\r\n  });\r\n\r\n  instance.on('error', (err) => {\r\n    console.error('Autocannon instance error:', err);\r\n  });\r\n}\r\n\r\n// Voer de test uit\r\nrunLoadTest().catch(err => {\r\n  console.error('Failed to run load test:', err);\r\n  process.exit(1);\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\scripts\\optimize-database.js","messages":[{"ruleId":"import/no-named-as-default-member","severity":1,"message":"Caution: `dotenv` also has a named export `config`. Check if you meant to write `import {config} from 'dotenv'` instead.","line":15,"column":1,"nodeType":"MemberExpression","endLine":15,"endColumn":14},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":71,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":71,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2008,2054],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":84,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":84,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2521,2598],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":98,"column":19,"nodeType":"MemberExpression","messageId":"unexpected","endLine":98,"endColumn":30,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3203,3263],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":101,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":101,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3324,3379],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":108,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":108,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3674,3734],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":116,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":116,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3979,4048],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":121,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":121,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4087,4135],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":139,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":139,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4643,4697],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":145,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":145,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4814,4868],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":158,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":158,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5134,5178],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'data' is assigned a value but never used.","line":177,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":177,"endColumn":23},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":185,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":185,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5934,5975],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":193,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":193,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6203,6251],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":195,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":195,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6310,6340],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":199,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":199,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6368,6423],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":211,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":211,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6663,6713],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":230,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":230,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7189,7234],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":239,"column":19,"nodeType":"MemberExpression","messageId":"unexpected","endLine":239,"endColumn":30,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7678,7734],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":242,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":242,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7795,7846],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":249,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":249,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8147,8203],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":258,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":258,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8471,8517],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":260,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":260,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8577,8607],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":264,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":264,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8635,8695],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":274,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":274,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8862,8966],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":286,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":286,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9200,9261],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Database Optimization Script\r\n * \r\n * This script applies database optimizations and ensures the database is in sync with the codebase.\r\n * It runs the migration scripts and performs additional optimizations.\r\n */\r\n\r\nimport fs from 'fs';\r\nimport path from 'path';\r\n\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport dotenv from 'dotenv';\r\n\r\n// Load environment variables\r\ndotenv.config({ path: '.env.local' });\r\n\r\n// Create Supabase client\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\r\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\r\n\r\nif (!supabaseUrl || !supabaseServiceKey) {\r\n  console.error('Error: Missing Supabase URL or service role key in environment variables.');\r\n  process.exit(1);\r\n}\r\n\r\nconst supabase = createClient(supabaseUrl, supabaseServiceKey);\r\n\r\n// Check if we're in production mode\r\nconst isProduction = process.env.NODE_ENV === 'production';\r\n\r\n/**\r\n * Execute a SQL statement directly using the Supabase REST API\r\n * @param {string} sql - SQL statement to execute\r\n * @returns {Promise<void>}\r\n */\r\nasync function executeSql(sql) {\r\n  try {\r\n    // Use the Supabase REST API to execute the SQL statement\r\n    const response = await fetch(`${supabaseUrl}/rest/v1/`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${supabaseServiceKey}`,\r\n        'apikey': supabaseServiceKey,\r\n        'Prefer': 'return=minimal'\r\n      },\r\n      body: JSON.stringify({\r\n        query: sql\r\n      })\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      throw new Error(`Error executing SQL: ${errorText}`);\r\n    }\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.warn(`Warning: Error executing SQL: ${error.message}`);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Run a SQL migration file\r\n * @param {string} filePath - Path to the SQL file\r\n * @returns {Promise<void>}\r\n */\r\nasync function runMigration(filePath) {\r\n  try {\r\n    console.log(`Running migration: ${filePath}`);\r\n    const sql = fs.readFileSync(filePath, 'utf8');\r\n    \r\n    // Split the SQL file into individual statements\r\n    const statements = sql\r\n      .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\r\n      .replace(/--.*$/gm, '') // Remove single-line comments\r\n      .split(';')\r\n      .filter(statement => statement.trim() !== '');\r\n    \r\n    // Execute each statement\r\n    for (const statement of statements) {\r\n      if (statement.trim()) {\r\n        console.log(`Executing statement: ${statement.trim().substring(0, 100)}...`);\r\n        \r\n        if (isProduction) {\r\n          // In production mode, actually execute the SQL\r\n          try {\r\n            // Try to execute the statement directly\r\n            try {\r\n              const { error } = await supabase.rpc('exec_sql', { sql: statement.trim() });\r\n              \r\n              if (error) {\r\n                console.warn(`Warning: Error executing statement via RPC: ${error.message}`);\r\n                // If the RPC method fails, try direct REST API\r\n                const success = await executeSql(statement.trim());\r\n                if (success) {\r\n                  console.log(`Statement executed successfully via REST API`);\r\n                }\r\n              } else {\r\n                console.log(`Statement executed successfully via RPC`);\r\n              }\r\n            } catch (rpcErr) {\r\n              console.warn(`Warning: RPC execution failed: ${rpcErr.message}`);\r\n              // Try direct REST API as fallback\r\n              const success = await executeSql(statement.trim());\r\n              if (success) {\r\n                console.log(`Statement executed successfully via REST API`);\r\n              }\r\n            }\r\n          } catch (err) {\r\n            console.warn(`Warning: Error executing statement: ${err.message}`);\r\n          }\r\n        } else {\r\n          // In development mode, just log what would happen\r\n          console.log(`Statement would be executed in production environment`);\r\n        }\r\n      }\r\n    }\r\n    \r\n    console.log(`Migration completed: ${filePath}`);\r\n  } catch (error) {\r\n    console.error(`Error running migration ${filePath}: ${error.message}`);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Run all migration files in the migrations directory\r\n * @returns {Promise<void>}\r\n */\r\nasync function runMigrations() {\r\n  try {\r\n    const migrationsDir = path.join(process.cwd(), 'database', 'migrations');\r\n    const files = fs.readdirSync(migrationsDir)\r\n      .filter(file => file.endsWith('.sql'))\r\n      .sort(); // Sort to ensure migrations run in order\r\n    \r\n    console.log(`Found ${files.length} migration files.`);\r\n    \r\n    for (const file of files) {\r\n      await runMigration(path.join(migrationsDir, file));\r\n    }\r\n    \r\n    console.log('All migrations completed successfully.');\r\n  } catch (error) {\r\n    console.error(`Error running migrations: ${error.message}`);\r\n    process.exit(1);\r\n  }\r\n}\r\n\r\n/**\r\n * Verify database schema matches TypeScript types\r\n * @returns {Promise<void>}\r\n */\r\nasync function verifyDatabaseSchema() {\r\n  try {\r\n    console.log('Verifying database schema...');\r\n    \r\n    // List the expected tables based on our migrations\r\n    const expectedTables = [\r\n      'profiles',\r\n      'tasks',\r\n      'task_logs',\r\n      'reflecties',\r\n      'specialist_patienten',\r\n      'inzichten',\r\n      'abonnementen',\r\n      'expert_knowledge',\r\n      'ai_recommendations'\r\n    ];\r\n    \r\n    if (isProduction) {\r\n      // In production mode, actually check the tables\r\n      for (const tableName of expectedTables) {\r\n        try {\r\n          const { data, error } = await supabase\r\n            .from(tableName)\r\n            .select('count(*)')\r\n            .limit(1);\r\n          \r\n          if (error) {\r\n            console.warn(`Warning: Table ${tableName} might not exist: ${error.message}`);\r\n          } else {\r\n            console.log(`Table ${tableName} exists`);\r\n          }\r\n        } catch (err) {\r\n          console.warn(`Warning: Error checking table ${tableName}: ${err.message}`);\r\n        }\r\n      }\r\n    } else {\r\n      // In development mode, just list the expected tables\r\n      console.log('Expected tables in the database:');\r\n      for (const tableName of expectedTables) {\r\n        console.log(`- ${tableName}`);\r\n      }\r\n    }\r\n    \r\n    console.log('Database schema verification completed.');\r\n  } catch (error) {\r\n    console.error(`Error verifying database schema: ${error.message}`);\r\n  }\r\n}\r\n\r\n/**\r\n * Optimize database performance\r\n * @returns {Promise<void>}\r\n */\r\nasync function optimizeDatabasePerformance() {\r\n  try {\r\n    console.log('Optimizing database performance...');\r\n    \r\n    // List the expected tables that would be analyzed\r\n    const tablesToAnalyze = [\r\n      'profiles',\r\n      'tasks',\r\n      'task_logs',\r\n      'reflecties',\r\n      'specialist_patienten',\r\n      'inzichten',\r\n      'abonnementen',\r\n      'expert_knowledge',\r\n      'ai_recommendations'\r\n    ];\r\n    \r\n    if (isProduction) {\r\n      // In production mode, actually analyze the tables\r\n      for (const tableName of tablesToAnalyze) {\r\n          try {\r\n            console.log(`Analyzing table: ${tableName}`);\r\n            try {\r\n              const { error } = await supabase.rpc('exec_sql', { sql: `ANALYZE ${tableName}` });\r\n              \r\n              if (error) {\r\n                console.warn(`Warning: Error analyzing table via RPC: ${error.message}`);\r\n                // If the RPC method fails, try direct REST API\r\n                const success = await executeSql(`ANALYZE ${tableName}`);\r\n                if (success) {\r\n                  console.log(`Table ${tableName} analyzed via REST API`);\r\n                }\r\n              } else {\r\n                console.log(`Table ${tableName} analyzed via RPC`);\r\n              }\r\n            } catch (rpcErr) {\r\n              console.warn(`Warning: RPC execution failed: ${rpcErr.message}`);\r\n              // Try direct REST API as fallback\r\n              const success = await executeSql(`ANALYZE ${tableName}`);\r\n              if (success) {\r\n                console.log(`Table ${tableName} analyzed via REST API`);\r\n              }\r\n            }\r\n          } catch (err) {\r\n            console.warn(`Warning: Error analyzing table ${tableName}: ${err.message}`);\r\n          }\r\n      }\r\n    } else {\r\n      // In development mode, just list the tables that would be analyzed\r\n      console.log('Tables that would be analyzed:');\r\n      for (const tableName of tablesToAnalyze) {\r\n        console.log(`- ${tableName}`);\r\n      }\r\n    }\r\n    \r\n    console.log('Database performance optimization completed.');\r\n  } catch (error) {\r\n    console.error(`Error optimizing database performance: ${error.message}`);\r\n  }\r\n}\r\n\r\n/**\r\n * Main function\r\n */\r\nasync function main() {\r\n  console.log(`Starting database optimization in ${isProduction ? 'PRODUCTION' : 'DEVELOPMENT'} mode...`);\r\n  \r\n  try {\r\n    // Run migrations\r\n    await runMigrations();\r\n    \r\n    // Verify database schema\r\n    await verifyDatabaseSchema();\r\n    \r\n    // Optimize database performance\r\n    await optimizeDatabasePerformance();\r\n    \r\n    console.log('Database optimization completed successfully.');\r\n  } catch (error) {\r\n    console.error(`Error during database optimization: ${error.message}`);\r\n    process.exit(1);\r\n  }\r\n}\r\n\r\n// Run the main function\r\nmain();\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\scripts\\optimize-images.js","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":1,"column":12,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":1,"endColumn":25},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":2,"column":14,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":2,"endColumn":29},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":14,"nodeType":"CallExpression","endLine":2,"endColumn":29,"fix":{"range":[65,65],"text":"\n"}},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":3,"column":15,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":3,"endColumn":31},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":4,"column":22,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":4,"endColumn":37},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":5,"column":14,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":5,"endColumn":29},{"ruleId":"import/order","severity":2,"message":"`glob` import should occur before import of `sharp`","line":5,"column":14,"nodeType":"CallExpression","endLine":5,"endColumn":29,"fix":{"range":[67,170],"text":"const glob = require('glob');\r\nconst sharp = require('sharp');\r\nconst { optimize } = require('svgo');\r\n"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":162,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":162,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7041,7096],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":177,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":177,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7623,7690],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":184,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":184,"endColumn":15},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":193,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":193,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8302,8719],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":205,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":205,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9094,9140],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":206,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":206,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9144,9201],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":207,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":207,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9205,9292],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":208,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":208,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9296,9373],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":209,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":209,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9377,9477],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":213,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":213,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9561,9612],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":214,"column":25,"nodeType":"MemberExpression","messageId":"unexpected","endLine":214,"endColumn":36},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":224,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":224,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10040,10143],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":2,"fixableWarningCount":0,"source":"const fs = require('fs').promises;\r\nconst path = require('path');\r\nconst sharp = require('sharp');\r\nconst { optimize } = require('svgo');\r\nconst glob = require('glob');\r\n\r\nconst PUBLIC_DIR = path.join(__dirname, '..', 'public');\r\nconst MAX_DIMENSION = 2048;\r\nconst ICON_MAX_DIMENSION_NO_RESIZE = 256; // Icons smaller than this won't be resized down.\r\n\r\nconst sharpOptions = {\r\n  jpeg: { quality: 80, progressive: true },\r\n  png: { compressionLevel: 8, quality: 80, palette: true }, // Added palette for potential indexed color benefits\r\n  webp: { quality: 80, effort: 4 }, // effort 0-6, higher is slower but better\r\n  gif: { effort: 4 }, // effort 0-10\r\n};\r\n\r\nconst svgoOptions = {\r\n  plugins: [\r\n    { name: 'removeDoctype', active: true },\r\n    { name: 'removeXMLProcInst', active: true },\r\n    { name: 'removeComments', active: true },\r\n    { name: 'removeMetadata', active: true },\r\n    { name: 'removeEditorsNSData', active: true },\r\n    { name: 'cleanupAttrs', active: true },\r\n    { name: 'mergeStyles', active: true },\r\n    { name: 'inlineStyles', active: true },\r\n    { name: 'minifyStyles', active: true },\r\n    { name: 'cleanupIDs', active: true },\r\n    { name: 'removeUselessDefs', active: true },\r\n    { name: 'cleanupNumericValues', active: true },\r\n    { name: 'convertColors', active: true },\r\n    { name: 'removeUnknownsAndDefaults', active: true },\r\n    { name: 'removeNonInheritableGroupAttrs', active: true },\r\n    { name: 'removeUselessStrokeAndFill', active: true },\r\n    { name: 'removeViewBox', active: false }, // Keep viewBox for scalability\r\n    { name: 'cleanupEnableBackground', active: true },\r\n    { name: 'removeHiddenElems', active: true },\r\n    { name: 'removeEmptyText', active: true },\r\n    { name: 'convertShapeToPath', active: true },\r\n    { name: 'convertEllipseToCircle', active: true },\r\n    { name: 'moveElemsAttrsToGroup', active: true },\r\n    { name: 'moveGroupAttrsToElems', active: true },\r\n    { name: 'collapseGroups', active: true },\r\n    { name: 'convertPathData', active: true },\r\n    { name: 'convertTransform', active: true },\r\n    { name: 'removeEmptyAttrs', active: true },\r\n    { name: 'removeEmptyContainers', active: true },\r\n    { name: 'mergePaths', active: true },\r\n    { name: 'removeUnusedNS', active: true },\r\n    { name: 'sortDefsChildren', active: true },\r\n    { name: 'removeTitle', active: true },\r\n    { name: 'removeDesc', active: true },\r\n  ],\r\n};\r\n\r\nasync function getFileSize(filePath) {\r\n  const stats = await fs.stat(filePath);\r\n  return stats.size;\r\n}\r\n\r\nasync function optimizeImage(filePath) {\r\n  const originalSize = await getFileSize(filePath);\r\n  const ext = path.extname(filePath).toLowerCase();\r\n  const baseName = path.basename(filePath, ext);\r\n  const dirName = path.dirname(filePath);\r\n\r\n  let report = {\r\n    file: path.relative(PUBLIC_DIR, filePath),\r\n    originalSize,\r\n    newSize: originalSize,\r\n    originalResolution: '',\r\n    newResolution: '',\r\n    formatConvertedTo: null,\r\n    error: null,\r\n  };\r\n\r\n  try {\r\n    if (ext === '.svg') {\r\n      const svgContent = await fs.readFile(filePath, 'utf-8');\r\n      const result = optimize(svgContent, { ...svgoOptions, path: filePath });\r\n      if (result.data) {\r\n        await fs.writeFile(filePath, result.data);\r\n        report.newSize = Buffer.byteLength(result.data, 'utf-8');\r\n      } else {\r\n        throw new Error('SVGO optimization returned no data.');\r\n      }\r\n    } else if (['.png', '.jpg', '.jpeg', '.webp', '.gif', '.avif', '.tiff'].includes(ext)) {\r\n      const image = sharp(filePath);\r\n      const metadata = await image.metadata();\r\n      report.originalResolution = `${metadata.width}x${metadata.height}`;\r\n      report.newResolution = report.originalResolution;\r\n\r\n      let needsResize = false;\r\n      let targetWidth = metadata.width;\r\n      let targetHeight = metadata.height;\r\n\r\n      const isIcon = filePath.includes(path.sep + 'icons' + path.sep) || \r\n                     baseName.includes('favicon') || \r\n                     baseName.includes('apple-touch-icon') ||\r\n                     baseName.includes('logo');\r\n\r\n      if (!isIcon || (metadata.width > ICON_MAX_DIMENSION_NO_RESIZE || metadata.height > ICON_MAX_DIMENSION_NO_RESIZE)) {\r\n        if (metadata.width > MAX_DIMENSION || metadata.height > MAX_DIMENSION) {\r\n          needsResize = true;\r\n          if (metadata.width >= metadata.height) {\r\n            targetWidth = MAX_DIMENSION;\r\n            targetHeight = null; // sharp will maintain aspect ratio\r\n          } else {\r\n            targetHeight = MAX_DIMENSION;\r\n            targetWidth = null;\r\n          }\r\n        }\r\n      }\r\n      \r\n      let sharpInstance = image;\r\n      if (needsResize) {\r\n        sharpInstance = sharpInstance.resize(targetWidth, targetHeight, { fit: 'inside', withoutEnlargement: true });\r\n        // Get new dimensions after resize for report\r\n        const tempResizedBuffer = await sharpInstance.toBuffer(); // Avoids writing to disk just for metadata\r\n        const resizedMetadata = await sharp(tempResizedBuffer).metadata();\r\n        report.newResolution = `${resizedMetadata.width}x${resizedMetadata.height}`;\r\n      }\r\n\r\n      // Convert to WebP (except for favicons and apple-touch-icon which often need to be PNG)\r\n      const outputPath = path.join(dirName, `${baseName}.webp`);\r\n      if (ext !== '.webp' && !baseName.includes('favicon') && !baseName.includes('apple-touch-icon') && ext !== '.ico') {\r\n        await sharpInstance.webp(sharpOptions.webp).toFile(outputPath);\r\n        report.newSize = await getFileSize(outputPath);\r\n        report.formatConvertedTo = 'webp';\r\n        // Remove original file if conversion was successful and different name\r\n        if (filePath !== outputPath) {\r\n            try { await fs.unlink(filePath); } catch (e) { console.warn(`Could not delete original ${filePath} after webp conversion: ${e.message}`);}\r\n        }\r\n      } else { // Optimize original format if not converting to webp or if it's already webp\r\n        let optimizedBuffer;\r\n        if (ext === '.png') optimizedBuffer = await sharpInstance.png(sharpOptions.png).toBuffer();\r\n        else if (ext === '.jpg' || ext === '.jpeg') optimizedBuffer = await sharpInstance.jpeg(sharpOptions.jpeg).toBuffer();\r\n        else if (ext === '.webp') optimizedBuffer = await sharpInstance.webp(sharpOptions.webp).toBuffer();\r\n        else if (ext === '.gif') optimizedBuffer = await sharpInstance.gif(sharpOptions.gif).toBuffer();\r\n        // Add other formats if needed (AVIF, TIFF)\r\n        \r\n        if (optimizedBuffer) {\r\n          await fs.writeFile(filePath, optimizedBuffer);\r\n          report.newSize = Buffer.byteLength(optimizedBuffer);\r\n        }\r\n      }\r\n    } else if (ext === '.ico') {\r\n      report.error = 'ICO optimization not supported by this script.';\r\n    } else {\r\n      // Not an image type we handle\r\n      return null;\r\n    }\r\n  } catch (err) {\r\n    console.error(`Error optimizing ${filePath}:`, err);\r\n    report.error = err.message;\r\n  }\r\n  return report;\r\n}\r\n\r\nasync function main() {\r\n  console.log(`Scanning for images in ${PUBLIC_DIR}...`);\r\n  const imagePaths = glob.sync(`${PUBLIC_DIR}/**/*.{png,jpg,jpeg,webp,svg,gif,avif,tiff}`, {\r\n    nodir: true,\r\n    ignore: [`${PUBLIC_DIR}/**/*.test.*`, `${PUBLIC_DIR}/**/*.spec.*`], // Exclude test files\r\n  });\r\n  \r\n  // Handle potential double extension like .png.png\r\n  const cleanedImagePaths = imagePaths.map(p => {\r\n    if (p.endsWith('.png.png')) return p.substring(0, p.length - 4);\r\n    return p;\r\n  });\r\n  // Filter out duplicates after cleaning\r\n  const uniqueImagePaths = [...new Set(cleanedImagePaths)];\r\n\r\n\r\n  console.log(`Found ${uniqueImagePaths.length} images to process.`);\r\n  const reports = [];\r\n\r\n  for (const imagePath of uniqueImagePaths) {\r\n    // Check if file exists before processing, especially after cleaning double extensions\r\n    try {\r\n        await fs.access(imagePath);\r\n    } catch (e) {\r\n        console.warn(`Skipping ${imagePath} as it does not exist (possibly due to extension cleaning).`);\r\n        continue;\r\n    }\r\n    const report = await optimizeImage(imagePath);\r\n    if (report) {\r\n      reports.push(report);\r\n      const saving = report.originalSize - report.newSize;\r\n      const savingPercent = ((saving / report.originalSize) * 100).toFixed(2);\r\n      console.log(\r\n        `Processed: ${report.file} | ${report.originalResolution} -> ${report.newResolution || report.originalResolution} | ${(report.originalSize / 1024).toFixed(1)}KB -> ${(report.newSize / 1024).toFixed(1)}KB | Saved: ${(saving / 1024).toFixed(1)}KB (${savingPercent}%) ${report.formatConvertedTo ? `(-> ${report.formatConvertedTo})` : ''} ${report.error ? `| ERROR: ${report.error}` : ''}`\r\n      );\r\n    }\r\n  }\r\n\r\n  // Generate summary report\r\n  const totalOriginalSize = reports.reduce((sum, r) => sum + r.originalSize, 0);\r\n  const totalNewSize = reports.reduce((sum, r) => sum + r.newSize, 0);\r\n  const totalSaving = totalOriginalSize - totalNewSize;\r\n  const overallSavingPercent = totalOriginalSize > 0 ? ((totalSaving / totalOriginalSize) * 100).toFixed(2) : 0;\r\n\r\n  console.log(`\\n--- Optimization Summary ---`);\r\n  console.log(`Total images processed: ${reports.length}`);\r\n  console.log(`Total original size: ${(totalOriginalSize / (1024*1024)).toFixed(2)} MB`);\r\n  console.log(`Total new size: ${(totalNewSize / (1024*1024)).toFixed(2)} MB`);\r\n  console.log(`Total saved: ${(totalSaving / (1024*1024)).toFixed(2)} MB (${overallSavingPercent}%)`);\r\n\r\n  const errors = reports.filter(r => r.error);\r\n  if (errors.length > 0) {\r\n    console.log(`\\n--- Errors (${errors.length}) ---`);\r\n    errors.forEach(r => console.log(`${r.file}: ${r.error}`));\r\n  }\r\n\r\n  // Save detailed report to a file\r\n  const reportDir = path.join(__dirname, '..', 'reports');\r\n    if (!fs.existsSync(reportDir)){\r\n        await fs.mkdir(reportDir, { recursive: true });\r\n    }\r\n  const reportFilePath = path.join(reportDir, 'image-optimization-report.json');\r\n  await fs.writeFile(reportFilePath, JSON.stringify(reports, null, 2));\r\n  console.log(`\\nDetailed report saved to ${path.relative(path.join(__dirname, '..'), reportFilePath)}`);\r\n}\r\n\r\nmain().catch(console.error);\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\scripts\\realtime-fixer.js","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":30,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":30,"endColumn":22},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":32,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":32,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[737,784],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":38,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":38,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":39,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":39,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[880,943],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":53,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":53,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1240,1287],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":54,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":54,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1293,1340],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":55,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":55,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1346,1384],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":56,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":56,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1390,1443],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":59,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":59,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":71,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":71,"endColumn":21},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":72,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":72,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1795,1852],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":78,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":78,"endColumn":29},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":117,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":117,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3176,3229],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":118,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":118,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":119,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":119,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3260,3312],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":123,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":123,"endColumn":19},{"ruleId":"import/no-named-as-default-member","severity":1,"message":"Caution: `chokidar` also has a named export `watch`. Check if you meant to write `import {watch} from 'chokidar'` instead.","line":124,"column":21,"nodeType":"MemberExpression","endLine":124,"endColumn":35},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":158,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":158,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'filePath' should be typed.","line":158,"column":25,"nodeType":"Identifier","messageId":"missingArgType","endLine":158,"endColumn":33},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":172,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":172,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":189,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":189,"endColumn":16},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'filePath' should be typed.","line":189,"column":17,"nodeType":"Identifier","messageId":"missingArgType","endLine":189,"endColumn":25},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":194,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":194,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4971,5039],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":205,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":205,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5486,5544],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":211,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":211,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5687,5734],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":213,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":213,"endColumn":21},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":223,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":223,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6060,6104],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":227,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":227,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6146,6210],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":231,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":231,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'filePath' should be typed.","line":231,"column":26,"nodeType":"Identifier","messageId":"missingArgType","endLine":231,"endColumn":34},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":272,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":272,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7792,7840],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":282,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":282,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8007,8063],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":286,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":286,"endColumn":30},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":287,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":287,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8118,8166],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":295,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":295,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8350,8400],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":296,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":296,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":297,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":297,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8431,8499],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":306,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":306,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8699,8754],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":307,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":307,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":308,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":308,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8785,8846],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":312,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":312,"endColumn":13},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":314,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":314,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8962,9004],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":315,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":315,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9010,9058],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":316,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":316,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9064,9120],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":317,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":317,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9126,9188],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":318,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":318,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9194,9301],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":321,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":321,"endColumn":22},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":339,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":339,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9774,9821],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":340,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":340,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":341,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":341,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9852,9899],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":345,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":345,"endColumn":31},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":368,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":368,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10845,10893],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":369,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":369,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":370,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":370,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10924,10983],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":382,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":382,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11169,11239],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":386,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":386,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11363,11436],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":391,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":391,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11499,11541],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":57,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\r\n\r\n/**\r\n * Real-time Code Fixer - Voorkomt opstapeling van problemen\r\n * Integreert met VS Code, Cline en Claude voor instant fixes\r\n */\r\n\r\nimport { execSync } from 'child_process';\r\nimport { promises as fs } from 'fs';\r\nimport path from 'path';\r\n\r\nimport chokidar from 'chokidar';\r\nimport { ESLint } from 'eslint';\r\n\r\nclass RealtimeFixer {\r\n  constructor() {\r\n    this.eslint = new ESLint({ fix: true });\r\n    this.isProcessing = false;\r\n    this.pendingFixes = new Set();\r\n    this.fixQueue = [];\r\n    this.stats = {\r\n      filesFixed: 0,\r\n      problemsFixed: 0,\r\n      startTime: Date.now()\r\n    };\r\n    \r\n    this.setupSignalHandlers();\r\n  }\r\n\r\n  setupSignalHandlers() {\r\n    process.on('SIGINT', () => {\r\n      console.log('\\n🛑 Stopping realtime fixer...');\r\n      this.printStats();\r\n      process.exit(0);\r\n    });\r\n  }\r\n\r\n  async initialize() {\r\n    console.log('🚀 Initializing FibroGuardian Realtime Fixer...');\r\n    \r\n    // Check dependencies\r\n    await this.checkDependencies();\r\n    \r\n    // Setup ESLint configuration\r\n    await this.optimizeESLintConfig();\r\n    \r\n    // Setup file watcher\r\n    this.setupFileWatcher();\r\n    \r\n    // Initial cleanup\r\n    await this.performInitialCleanup();\r\n    \r\n    console.log('✅ Realtime fixer is now active!');\r\n    console.log('📁 Watching for file changes...');\r\n    console.log('🔧 Auto-fixing enabled');\r\n    console.log('📊 Use Ctrl+C to see stats and exit\\n');\r\n  }\r\n\r\n  async checkDependencies() {\r\n    const requiredPackages = [\r\n      'eslint',\r\n      '@typescript-eslint/eslint-plugin',\r\n      'eslint-plugin-tailwindcss',\r\n      'eslint-plugin-unused-imports',\r\n      'prettier'\r\n    ];\r\n\r\n    for (const pkg of requiredPackages) {\r\n      try {\r\n        await import(pkg);\r\n      } catch (error) {\r\n        console.log(`⚠️  Installing missing dependency: ${pkg}`);\r\n        execSync(`npm install ${pkg} --save-dev`, { stdio: 'inherit' });\r\n      }\r\n    }\r\n  }\r\n\r\n  async optimizeESLintConfig() {\r\n    const eslintConfig = {\r\n      extends: [\r\n        'next/core-web-vitals',\r\n        '@typescript-eslint/recommended'\r\n      ],\r\n      plugins: [\r\n        '@typescript-eslint',\r\n        'unused-imports',\r\n        'tailwindcss'\r\n      ],\r\n      rules: {\r\n        // Auto-fixable rules\r\n        'import/order': ['error', {\r\n          groups: ['builtin', 'external', 'internal', 'parent', 'sibling'],\r\n          'newlines-between': 'always'\r\n        }],\r\n        'unused-imports/no-unused-imports': 'error',\r\n        'tailwindcss/classnames-order': 'error',\r\n        'tailwindcss/enforces-shorthand': 'error',\r\n        \r\n        // Waarschuwingen voor handmatige review\r\n        '@typescript-eslint/no-unused-vars': 'warn',\r\n        '@typescript-eslint/explicit-module-boundary-types': 'warn',\r\n        'no-console': 'warn',\r\n        \r\n        // Uitgeschakeld voor ontwikkeling\r\n        '@typescript-eslint/no-explicit-any': 'off'\r\n      },\r\n      settings: {\r\n        tailwindcss: {\r\n          callees: ['cn', 'cva'],\r\n          config: 'tailwind.config.js'\r\n        }\r\n      }\r\n    };\r\n\r\n    try {\r\n      await fs.writeFile('.eslintrc.json', JSON.stringify(eslintConfig, null, 2));\r\n      console.log('✅ ESLint configuratie geoptimaliseerd');\r\n    } catch (error) {\r\n      console.log('⚠️  Kon ESLint config niet schrijven');\r\n    }\r\n  }\r\n\r\n  setupFileWatcher() {\r\n    const watcher = chokidar.watch([\r\n      'app/**/*.{ts,tsx,js,jsx}',\r\n      'components/**/*.{ts,tsx,js,jsx}',\r\n      'hooks/**/*.{ts,tsx,js,jsx}',\r\n      'utils/**/*.{ts,tsx,js,jsx}',\r\n      'lib/**/*.{ts,tsx,js,jsx}',\r\n      'types/**/*.{ts,tsx,js,jsx}'\r\n    ], {\r\n      ignored: [\r\n        'node_modules/**',\r\n        '.next/**',\r\n        '*.d.ts',\r\n        'dist/**'\r\n      ],\r\n      persistent: true,\r\n      awaitWriteFinish: {\r\n        stabilityThreshold: 300,\r\n        pollInterval: 100\r\n      }\r\n    });\r\n\r\n    watcher.on('change', async (filePath) => {\r\n      if (!this.isProcessing) {\r\n        await this.queueFileForFix(filePath);\r\n      }\r\n    });\r\n\r\n    watcher.on('add', async (filePath) => {\r\n      await this.queueFileForFix(filePath);\r\n    });\r\n\r\n    this.watcher = watcher;\r\n  }\r\n\r\n  async queueFileForFix(filePath) {\r\n    if (this.pendingFixes.has(filePath)) {\r\n      return;\r\n    }\r\n\r\n    this.pendingFixes.add(filePath);\r\n    this.fixQueue.push(filePath);\r\n\r\n    // Debounce - process queue after short delay\r\n    setTimeout(() => {\r\n      this.processFixQueue();\r\n    }, 500);\r\n  }\r\n\r\n  async processFixQueue() {\r\n    if (this.isProcessing || this.fixQueue.length === 0) {\r\n      return;\r\n    }\r\n\r\n    this.isProcessing = true;\r\n    const filesToProcess = [...this.fixQueue];\r\n    this.fixQueue = [];\r\n\r\n    for (const filePath of filesToProcess) {\r\n      await this.fixFile(filePath);\r\n      this.pendingFixes.delete(filePath);\r\n    }\r\n\r\n    this.isProcessing = false;\r\n  }\r\n\r\n  async fixFile(filePath) {\r\n    try {\r\n      const startTime = Date.now();\r\n      let hasChanges = false;\r\n\r\n      console.log(`🔧 Fixing: ${path.relative(process.cwd(), filePath)}`);\r\n\r\n      // 1. ESLint auto-fix\r\n      const eslintResults = await this.eslint.lintFiles([filePath]);\r\n      if (eslintResults.length > 0 && eslintResults[0].output) {\r\n        await fs.writeFile(filePath, eslintResults[0].output);\r\n        hasChanges = true;\r\n        \r\n        const problemsFixed = eslintResults[0].fixableErrorCount + eslintResults[0].fixableWarningCount;\r\n        this.stats.problemsFixed += problemsFixed;\r\n        \r\n        console.log(`  ✅ ESLint fixed ${problemsFixed} problems`);\r\n      }\r\n\r\n      // 2. Prettier formatting\r\n      try {\r\n        execSync(`npx prettier --write \"${filePath}\"`, { stdio: 'pipe' });\r\n        console.log(`  ✅ Prettier formatting applied`);\r\n        hasChanges = true;\r\n      } catch (error) {\r\n        // Prettier errors are usually not critical\r\n      }\r\n\r\n      // 3. Custom fixes voor TypeScript\r\n      await this.applyCustomFixes(filePath);\r\n\r\n      if (hasChanges) {\r\n        this.stats.filesFixed++;\r\n        const duration = Date.now() - startTime;\r\n        console.log(`  ⚡ Fixed in ${duration}ms\\n`);\r\n      }\r\n\r\n    } catch (error) {\r\n      console.log(`  ❌ Error fixing ${filePath}: ${error.message}\\n`);\r\n    }\r\n  }\r\n\r\n  async applyCustomFixes(filePath) {\r\n    try {\r\n      let content = await fs.readFile(filePath, 'utf8');\r\n      let hasChanges = false;\r\n\r\n      // Fix common TypeScript issues\r\n      const fixes = [\r\n        // Voeg React import toe als nodig\r\n        {\r\n          pattern: /^(?!.*import.*React).*export.*function.*\\(.*\\).*JSX\\.Element/m,\r\n          replacement: (match) => `import React from 'react';\\n\\n${match}`,\r\n          description: 'Add React import'\r\n        },\r\n        \r\n        // Fix ongebruikte imports\r\n        {\r\n          pattern: /import\\s+{\\s*([^}]+)\\s*}\\s+from\\s+['\"][^'\"]+['\"];?\\s*\\n/g,\r\n          replacement: (match, imports) => {\r\n            // Simpele check - verwijder imports die niet in de code gebruikt worden\r\n            const importList = imports.split(',').map(i => i.trim());\r\n            const usedImports = importList.filter(imp => {\r\n              const varName = imp.replace(/\\s+as\\s+\\w+/, '').trim();\r\n              return content.includes(varName);\r\n            });\r\n            \r\n            if (usedImports.length === 0) {\r\n              return '';\r\n            } else if (usedImports.length !== importList.length) {\r\n              return match.replace(imports, usedImports.join(', '));\r\n            }\r\n            return match;\r\n          },\r\n          description: 'Remove unused imports'\r\n        }\r\n      ];\r\n\r\n      for (const fix of fixes) {\r\n        const originalContent = content;\r\n        content = content.replace(fix.pattern, fix.replacement);\r\n        \r\n        if (content !== originalContent) {\r\n          console.log(`  🔧 Applied: ${fix.description}`);\r\n          hasChanges = true;\r\n        }\r\n      }\r\n\r\n      if (hasChanges) {\r\n        await fs.writeFile(filePath, content);\r\n      }\r\n\r\n    } catch (error) {\r\n      console.log(`  ⚠️  Custom fix error: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async performInitialCleanup() {\r\n    console.log('🧹 Performing initial cleanup...');\r\n    \r\n    try {\r\n      // Run ESLint on all files\r\n      execSync('npx eslint . --ext .ts,.tsx,.js,.jsx --fix', { \r\n        stdio: 'pipe',\r\n        timeout: 30000 \r\n      });\r\n      console.log('✅ Initial ESLint cleanup completed');\r\n    } catch (error) {\r\n      console.log('⚠️  Initial cleanup had some issues (this is normal)');\r\n    }\r\n\r\n    // Run Prettier on all files\r\n    try {\r\n      execSync('npx prettier --write \"**/*.{ts,tsx,js,jsx,json,css,md}\"', { \r\n        stdio: 'pipe',\r\n        timeout: 30000 \r\n      });\r\n      console.log('✅ Initial Prettier formatting completed');\r\n    } catch (error) {\r\n      console.log('⚠️  Prettier had some issues (this is normal)');\r\n    }\r\n  }\r\n\r\n  printStats() {\r\n    const duration = Math.round((Date.now() - this.stats.startTime) / 1000);\r\n    console.log('\\n📊 Realtime Fixer Stats:');\r\n    console.log(`⏱️  Runtime: ${duration} seconds`);\r\n    console.log(`📁 Files fixed: ${this.stats.filesFixed}`);\r\n    console.log(`🔧 Problems fixed: ${this.stats.problemsFixed}`);\r\n    console.log(`⚡ Average: ${(this.stats.problemsFixed / Math.max(duration, 1)).toFixed(2)} problems/second`);\r\n  }\r\n\r\n  async setupGitHooks() {\r\n    const preCommitHook = `#!/bin/sh\r\n# FibroGuardian pre-commit hook\r\necho \"🔍 Running pre-commit checks...\"\r\n\r\n# Run eslint with auto-fix\r\nnpx lint-staged\r\n\r\n# Run type check\r\nnpx tsc --noEmit\r\n\r\necho \"✅ Pre-commit checks passed!\"\r\n`;\r\n\r\n    try {\r\n      await fs.mkdir('.git/hooks', { recursive: true });\r\n      await fs.writeFile('.git/hooks/pre-commit', preCommitHook);\r\n      await fs.chmod('.git/hooks/pre-commit', '755');\r\n      console.log('✅ Git pre-commit hook installed');\r\n    } catch (error) {\r\n      console.log('⚠️  Could not install git hooks');\r\n    }\r\n  }\r\n\r\n  async setupVSCodeIntegration() {\r\n    const vscodeSettings = {\r\n      \"editor.codeActionsOnSave\": {\r\n        \"source.fixAll.eslint\": true,\r\n        \"source.organizeImports\": true,\r\n        \"source.removeUnusedImports\": true\r\n      },\r\n      \"editor.formatOnSave\": true,\r\n      \"editor.formatOnPaste\": true,\r\n      \"typescript.preferences.useAliasesForRenames\": false,\r\n      \"eslint.workingDirectories\": [\".\"],\r\n      \"eslint.validate\": [\"javascript\", \"typescript\", \"javascriptreact\", \"typescriptreact\"],\r\n      \"eslint.run\": \"onType\",\r\n      \"eslint.autoFixOnSave\": true,\r\n      \"files.trimTrailingWhitespace\": true,\r\n      \"files.insertFinalNewline\": true,\r\n      \"typescript.suggest.autoImports\": true,\r\n      \"javascript.suggest.autoImports\": true\r\n    };\r\n\r\n    try {\r\n      await fs.mkdir('.vscode', { recursive: true });\r\n      await fs.writeFile('.vscode/settings.json', JSON.stringify(vscodeSettings, null, 2));\r\n      console.log('✅ VS Code integration configured');\r\n    } catch (error) {\r\n      console.log('⚠️  Could not configure VS Code integration');\r\n    }\r\n  }\r\n}\r\n\r\n// CLI Interface\r\nasync function main() {\r\n  const fixer = new RealtimeFixer();\r\n  \r\n  const args = process.argv.slice(2);\r\n  \r\n  if (args.includes('--setup')) {\r\n    console.log('🔧 Setting up FibroGuardian development environment...');\r\n    await fixer.setupVSCodeIntegration();\r\n    await fixer.setupGitHooks();\r\n    await fixer.optimizeESLintConfig();\r\n    console.log('✅ Setup completed! Run without --setup to start watching.');\r\n    return;\r\n  }\r\n\r\n  if (args.includes('--fix-now')) {\r\n    console.log('🚀 Running one-time fix...');\r\n    await fixer.performInitialCleanup();\r\n    fixer.printStats();\r\n    return;\r\n  }\r\n\r\n  // Start realtime watching\r\n  await fixer.initialize();\r\n  \r\n  // Keep process alive\r\n  process.stdin.resume();\r\n}\r\n\r\nif (process.argv[1] === import.meta.url) {\r\n  main().catch(console.error);\r\n}\r\n\r\nexport { RealtimeFixer };\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\tailwind.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\tests\\LazyImage.spec.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":34,"fix":{"range":[33,33],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":57,"fix":{"range":[91,91],"text":"\n"}},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":26,"column":12,"nodeType":"JSXOpeningElement","endLine":26,"endColumn":30},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":59,"column":27,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":59,"endColumn":65},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":82,"column":27,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":82,"endColumn":65}],"suppressedMessages":[{"ruleId":"jsx-a11y/alt-text","severity":2,"message":"img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","line":26,"column":12,"nodeType":"JSXOpeningElement","endLine":26,"endColumn":30,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import { useState } from 'react';\r\nimport { render, screen } from '@testing-library/react';\r\nimport '@testing-library/jest-dom';\r\nimport LazyImage from '@/components/common/LazyImage';\r\n\r\n// Mock React's useState\r\njest.mock('react', () => ({\r\n  ...jest.requireActual('react'),\r\n  useState: jest.fn()\r\n}));\r\n\r\n// Mock the IntersectionObserver\r\nconst mockIntersectionObserver = jest.fn();\r\nmockIntersectionObserver.mockReturnValue({\r\n  observe: jest.fn(),\r\n  unobserve: jest.fn(),\r\n  disconnect: jest.fn(),\r\n});\r\nwindow.IntersectionObserver = mockIntersectionObserver;\r\n\r\n// Mock next/image\r\njest.mock('next/image', () => ({\r\n  __esModule: true,\r\n  default: (props: any) => {\r\n    // eslint-disable-next-line jsx-a11y/alt-text\r\n    return <img {...props} />;\r\n  },\r\n}));\r\n\r\n// Mock react-intersection-observer\r\njest.mock('react-intersection-observer', () => ({\r\n  useInView: jest.fn()\r\n}));\r\n\r\ndescribe('LazyImage Component', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it('renders with correct props', () => {\r\n    render(\r\n      <LazyImage\r\n        src=\"/test-image.jpg\"\r\n        alt=\"Test image\"\r\n        width={200}\r\n        height={150}\r\n      />\r\n    );\r\n\r\n    // Initially, the image should not be visible (not in view)\r\n    expect(screen.queryByAltText('Test image')).not.toBeInTheDocument();\r\n    \r\n    // The loading placeholder should be visible\r\n    expect(screen.getByLabelText(/Loading image: Test image/i)).toBeInTheDocument();\r\n  });\r\n\r\n  it('renders image when in view', async () => {\r\n    // Mock the useInView hook to return inView as true\r\n    const useInViewMock = require('react-intersection-observer').useInView as jest.Mock;\r\n    useInViewMock.mockReturnValue({ ref: jest.fn(), inView: true });\r\n\r\n    const { container } = render(\r\n      <LazyImage\r\n        src=\"/test-image.jpg\"\r\n        alt=\"Test image\"\r\n        width={200}\r\n        height={150}\r\n      />\r\n    );\r\n\r\n    // Since we're mocking the inView value, we should see the image element\r\n    // but it might not be found by alt text due to how Next/Image works in tests\r\n    expect(container.querySelector('img')).not.toBeNull();\r\n  });\r\n\r\n  it('uses low quality image placeholder when provided', () => {\r\n    // Setup useState mock to track calls\r\n    const useStateMock = useState as jest.Mock;\r\n    useStateMock.mockImplementation((init) => [init, jest.fn()]);\r\n    \r\n    // Mock the useInView hook to return inView as true\r\n    const useInViewMock = require('react-intersection-observer').useInView as jest.Mock;\r\n    useInViewMock.mockReturnValue({ ref: jest.fn(), inView: true });\r\n\r\n    // Render the component with a low quality source\r\n    render(\r\n      <LazyImage\r\n        src=\"/test-image.jpg\"\r\n        lowQualitySrc=\"/test-image-low.jpg\"\r\n        alt=\"Test image\"\r\n        width={200}\r\n        height={150}\r\n      />\r\n    );\r\n\r\n    // Verify that useState was called with the lowQualitySrc at some point\r\n    // This is checking implementation details, but it's a way to test the behavior\r\n    expect(useStateMock).toHaveBeenCalledWith('/test-image-low.jpg');\r\n  });\r\n\r\n  it('shows loading component when provided', () => {\r\n    render(\r\n      <LazyImage\r\n        src=\"/test-image.jpg\"\r\n        alt=\"Test image\"\r\n        width={200}\r\n        height={150}\r\n        loadingComponent={<div data-testid=\"custom-loader\">Loading...</div>}\r\n      />\r\n    );\r\n\r\n    // The custom loading component should be visible\r\n    expect(screen.getByTestId('custom-loader')).toBeInTheDocument();\r\n  });\r\n\r\n  it('applies CSS variables for dimensions', () => {\r\n    render(\r\n      <LazyImage\r\n        src=\"/test-image.jpg\"\r\n        alt=\"Test image\"\r\n        width={200}\r\n        height={150}\r\n      />\r\n    );\r\n\r\n    // The container should have the lazy-image-container class\r\n    const container = screen.getByLabelText(/Loading image: Test image/i).parentElement;\r\n    expect(container).toHaveClass('lazy-image-container');\r\n  });\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\tests\\TaskExecutionContainer.spec.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":27,"fix":{"range":[26,26],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":77,"fix":{"range":[104,104],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@/components/auth/AuthProvider` import should occur before import of `@/containers/tasks/TaskExecutionContainer`","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":63,"fix":{"range":[143,425],"text":"import { AuthProvider } from '@/components/auth/AuthProvider';\r\nimport TaskExecutionContainer from '@/containers/tasks/TaskExecutionContainer';\r\nimport { NotificationProvider } from '@/context/NotificationContext';\r\nimport { ReactQueryProvider } from '@/lib/react-query-provider';\r\n"}},{"ruleId":"import/no-named-as-default-member","severity":1,"message":"Caution: `React` also has a named export `createElement`. Check if you meant to write `import {createElement} from 'react'` instead.","line":68,"column":66,"nodeType":"MemberExpression","endLine":68,"endColumn":85},{"ruleId":"import/no-named-as-default-member","severity":1,"message":"Caution: `React` also has a named export `createElement`. Check if you meant to write `import {createElement} from 'react'` instead.","line":78,"column":74,"nodeType":"MemberExpression","endLine":78,"endColumn":93}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":3,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\r\nimport '@testing-library/jest-dom';\r\nimport TaskExecutionContainer from '@/containers/tasks/TaskExecutionContainer';\r\nimport { NotificationProvider } from '@/context/NotificationContext';\r\nimport { ReactQueryProvider } from '@/lib/react-query-provider';\r\nimport { AuthProvider } from '@/components/auth/AuthProvider';\r\n\r\n// Mock the Next.js router\r\njest.mock('next/navigation', () => {\r\n  return {\r\n    useRouter: () => ({\r\n      push: jest.fn(),\r\n      back: jest.fn(),\r\n      forward: jest.fn(),\r\n      refresh: jest.fn(),\r\n      replace: jest.fn(),\r\n      prefetch: jest.fn()\r\n    }),\r\n    usePathname: () => '/taken/123/start'\r\n  };\r\n});\r\n\r\n// Mock the hooks\r\njest.mock('@/hooks/useMutations', () => ({\r\n  useAddTaskLog: () => ({\r\n    mutate: jest.fn((data, options) => {\r\n      options.onSuccess({ id: 'mock-log-id' });\r\n    }),\r\n    isPending: false,\r\n    error: null\r\n  }),\r\n  useUpdateTaskLog: () => ({\r\n    mutate: jest.fn((data, options) => {\r\n      options.onSuccess();\r\n    }),\r\n    isPending: false,\r\n    error: null\r\n  })\r\n}));\r\n\r\njest.mock('@/hooks/useSupabaseQuery', () => ({\r\n  useTask: () => ({\r\n    data: {\r\n      id: 'mock-task-id',\r\n      titel: 'Test Taak',\r\n      beschrijving: 'Dit is een test taak',\r\n      duur: 30,\r\n      type: 'taak',\r\n      user_id: 'mock-user-id',\r\n      herhaal_patroon: 'eenmalig',\r\n      created_at: new Date(),\r\n      updated_at: new Date()\r\n    },\r\n    isLoading: false,\r\n    error: null,\r\n    isError: false\r\n  })\r\n}));\r\n\r\n// Mock the auth context\r\njest.mock('@/components/auth/AuthProvider', () => ({\r\n  useAuth: () => ({\r\n    user: { id: 'mock-user-id' },\r\n    signOut: jest.fn(),\r\n    isLoading: false\r\n  }),\r\n  AuthProvider: ({ children }: { children: React.ReactNode }) => React.createElement('div', null, children)\r\n}));\r\n\r\n// Mock the notification context\r\njest.mock('@/context/NotificationContext', () => ({\r\n  useNotification: () => ({\r\n    addNotification: jest.fn(),\r\n    notifications: [],\r\n    removeNotification: jest.fn()\r\n  }),\r\n  NotificationProvider: ({ children }: { children: React.ReactNode }) => React.createElement('div', null, children)\r\n}));\r\n\r\ndescribe('TaskExecutionContainer Component', () => {\r\n  it('renders the task execution container correctly', () => {\r\n    render(\r\n      <ReactQueryProvider>\r\n        <AuthProvider>\r\n          <NotificationProvider>\r\n            <TaskExecutionContainer taskId=\"mock-task-id\" />\r\n          </NotificationProvider>\r\n        </AuthProvider>\r\n      </ReactQueryProvider>\r\n    );\r\n    \r\n    // Check if the task title is displayed\r\n    expect(screen.getByText('Test Taak')).toBeInTheDocument();\r\n  });\r\n\r\n  it('handles starting and stopping a task', async () => {\r\n    render(\r\n      <ReactQueryProvider>\r\n        <AuthProvider>\r\n          <NotificationProvider>\r\n            <TaskExecutionContainer taskId=\"mock-task-id\" />\r\n          </NotificationProvider>\r\n        </AuthProvider>\r\n      </ReactQueryProvider>\r\n    );\r\n    \r\n    // Find and click the start button\r\n    const startButton = screen.getByRole('button', { name: /start/i });\r\n    fireEvent.click(startButton);\r\n    \r\n    // Check if the stop button appears\r\n    await waitFor(() => {\r\n      expect(screen.getByRole('button', { name: /stop/i })).toBeInTheDocument();\r\n    });\r\n    \r\n    // Click the stop button\r\n    const stopButton = screen.getByRole('button', { name: /stop/i });\r\n    fireEvent.click(stopButton);\r\n    \r\n    // Check if the feedback modal appears\r\n    await waitFor(() => {\r\n      expect(screen.getByText(/hoe voel je je/i)).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  it('handles submitting feedback after task completion', async () => {\r\n    render(\r\n      <ReactQueryProvider>\r\n        <AuthProvider>\r\n          <NotificationProvider>\r\n            <TaskExecutionContainer taskId=\"mock-task-id\" />\r\n          </NotificationProvider>\r\n        </AuthProvider>\r\n      </ReactQueryProvider>\r\n    );\r\n    \r\n    // Start and stop the task\r\n    const startButton = screen.getByRole('button', { name: /start/i });\r\n    fireEvent.click(startButton);\r\n    \r\n    await waitFor(() => {\r\n      expect(screen.getByRole('button', { name: /stop/i })).toBeInTheDocument();\r\n    });\r\n    \r\n    const stopButton = screen.getByRole('button', { name: /stop/i });\r\n    fireEvent.click(stopButton);\r\n    \r\n    // Fill in the feedback form\r\n    await waitFor(() => {\r\n      expect(screen.getByText(/hoe voel je je/i)).toBeInTheDocument();\r\n    });\r\n    \r\n    // Find and interact with the feedback form elements\r\n    const painScoreInput = screen.getByLabelText(/pijnscore/i);\r\n    fireEvent.change(painScoreInput, { target: { value: '7' } });\r\n    \r\n    const fatigueScoreInput = screen.getByLabelText(/vermoeidheidsscore/i);\r\n    fireEvent.change(fatigueScoreInput, { target: { value: '8' } });\r\n    \r\n    const moodSelect = screen.getByLabelText(/stemming/i);\r\n    fireEvent.change(moodSelect, { target: { value: 'goed' } });\r\n    \r\n    const noteInput = screen.getByLabelText(/notitie/i);\r\n    fireEvent.change(noteInput, { target: { value: 'Dit was een goede oefening' } });\r\n    \r\n    // Submit the feedback\r\n    const submitButton = screen.getByRole('button', { name: /opslaan/i });\r\n    fireEvent.click(submitButton);\r\n    \r\n    // Check if the feedback was submitted successfully\r\n    await waitFor(() => {\r\n      // This would typically check for a success message or redirection\r\n      // For now, we'll just check that the feedback modal is no longer visible\r\n      expect(screen.queryByText(/hoe voel je je/i)).not.toBeInTheDocument();\r\n    });\r\n  });\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\tests\\authForm.spec.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":27,"fix":{"range":[26,26],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":77,"fix":{"range":[104,104],"text":"\n"}},{"ruleId":"import/no-named-as-default-member","severity":1,"message":"Caution: `React` also has a named export `createElement`. Check if you meant to write `import {createElement} from 'react'` instead.","line":63,"column":74,"nodeType":"MemberExpression","endLine":63,"endColumn":93},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":192,"column":28,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":192,"endColumn":60},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":234,"column":28,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":234,"endColumn":60}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\r\nimport '@testing-library/jest-dom';\r\nimport AuthForm from '@/components/auth/AuthForm';\r\nimport { NotificationProvider } from '@/context/NotificationContext';\r\nimport { ReactQueryProvider } from '@/lib/react-query-provider';\r\n\r\n// Mock the Next.js router\r\nconst mockPush = jest.fn();\r\njest.mock('next/navigation', () => {\r\n  return {\r\n    useRouter: () => ({\r\n      push: mockPush,\r\n      back: jest.fn(),\r\n      forward: jest.fn(),\r\n      refresh: jest.fn(),\r\n      replace: jest.fn(),\r\n      prefetch: jest.fn()\r\n    }),\r\n    usePathname: () => '/auth/login'\r\n  };\r\n});\r\n\r\n// Mock the Supabase client\r\njest.mock('@/lib/supabase-client', () => ({\r\n  getSupabaseBrowserClient: jest.fn().mockReturnValue({\r\n    auth: {\r\n      signInWithPassword: jest.fn().mockImplementation(({ email, password }) => {\r\n        if (email === 'test@example.com' && password === 'password123') {\r\n          return Promise.resolve({\r\n            data: { user: { id: 'test-user-id' } },\r\n            error: null\r\n          });\r\n        }\r\n        return Promise.resolve({\r\n          data: { user: null },\r\n          error: { message: 'Invalid login credentials' }\r\n        });\r\n      }),\r\n      signUp: jest.fn().mockImplementation(({ email, password }) => {\r\n        if (email && password) {\r\n          return Promise.resolve({\r\n            data: { user: { id: 'new-user-id' } },\r\n            error: null\r\n          });\r\n        }\r\n        return Promise.resolve({\r\n          data: { user: null },\r\n          error: { message: 'Registration failed' }\r\n        });\r\n      })\r\n    }\r\n  })\r\n}));\r\n\r\n// Mock the notification context\r\njest.mock('@/context/NotificationContext', () => ({\r\n  useNotification: () => ({\r\n    addNotification: jest.fn(),\r\n    notifications: [],\r\n    removeNotification: jest.fn()\r\n  }),\r\n  NotificationProvider: ({ children }: { children: React.ReactNode }) => React.createElement('div', null, children)\r\n}));\r\n\r\ndescribe('AuthForm Component', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it('renders login mode correctly', () => {\r\n    render(\r\n      <ReactQueryProvider>\r\n        <NotificationProvider>\r\n          <AuthForm initialIsLogin={true} />\r\n        </NotificationProvider>\r\n      </ReactQueryProvider>\r\n    );\r\n    // Check for the heading that contains \"Inloggen\"\r\n    expect(screen.getByRole('heading', { name: /Inloggen/i })).toBeInTheDocument();\r\n    // Check for the submit button with text \"Inloggen\"\r\n    expect(screen.getByRole('button', { name: /^Inloggen$/i })).toBeInTheDocument();\r\n    // Check that the switch mode button contains text about registration\r\n    expect(screen.getByText(/Nog geen account\\? Registreer hier/i)).toBeInTheDocument();\r\n  });\r\n\r\n  it('renders registration mode correctly', () => {\r\n    render(\r\n      <ReactQueryProvider>\r\n        <NotificationProvider>\r\n          <AuthForm initialIsLogin={false} />\r\n        </NotificationProvider>\r\n      </ReactQueryProvider>\r\n    );\r\n    // Check for the heading that contains \"Registreren\"\r\n    expect(screen.getByRole('heading', { name: /Registreren/i })).toBeInTheDocument();\r\n    // Check for the submit button with text \"Registreren\"\r\n    expect(screen.getByRole('button', { name: /^Registreren$/i })).toBeInTheDocument();\r\n    // Check that the switch mode button contains text about login\r\n    expect(screen.getByText(/Al een account\\? Log hier in/i)).toBeInTheDocument();\r\n  });\r\n\r\n  it('switches between login and registration modes', () => {\r\n    render(\r\n      <ReactQueryProvider>\r\n        <NotificationProvider>\r\n          <AuthForm initialIsLogin={true} />\r\n        </NotificationProvider>\r\n      </ReactQueryProvider>\r\n    );\r\n    \r\n    // Initially in login mode\r\n    expect(screen.getByRole('heading', { name: /Inloggen/i })).toBeInTheDocument();\r\n    \r\n    // Click the switch mode button\r\n    fireEvent.click(screen.getByText(/Nog geen account\\? Registreer hier/i));\r\n    \r\n    // Now in registration mode\r\n    expect(screen.getByRole('heading', { name: /Registreren/i })).toBeInTheDocument();\r\n    \r\n    // Click the switch mode button again\r\n    fireEvent.click(screen.getByText(/Al een account\\? Log hier in/i));\r\n    \r\n    // Back to login mode\r\n    expect(screen.getByRole('heading', { name: /Inloggen/i })).toBeInTheDocument();\r\n  });\r\n\r\n  it('validates form fields in login mode', async () => {\r\n    render(\r\n      <ReactQueryProvider>\r\n        <NotificationProvider>\r\n          <AuthForm initialIsLogin={true} />\r\n        </NotificationProvider>\r\n      </ReactQueryProvider>\r\n    );\r\n    \r\n    // Submit the form without filling in any fields\r\n    fireEvent.click(screen.getByRole('button', { name: /^Inloggen$/i }));\r\n    \r\n    // Check for validation error messages\r\n    await waitFor(() => {\r\n      expect(screen.getByText(/E-mail is verplicht/i)).toBeInTheDocument();\r\n      expect(screen.getByText(/Wachtwoord is verplicht/i)).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  it('validates form fields in registration mode', async () => {\r\n    render(\r\n      <ReactQueryProvider>\r\n        <NotificationProvider>\r\n          <AuthForm initialIsLogin={false} />\r\n        </NotificationProvider>\r\n      </ReactQueryProvider>\r\n    );\r\n    \r\n    // Submit the form without filling in any fields\r\n    fireEvent.click(screen.getByRole('button', { name: /^Registreren$/i }));\r\n    \r\n    // Check for validation error messages\r\n    await waitFor(() => {\r\n      expect(screen.getByText(/Voornaam is verplicht/i)).toBeInTheDocument();\r\n      expect(screen.getByText(/Achternaam is verplicht/i)).toBeInTheDocument();\r\n      expect(screen.getByText(/E-mail is verplicht/i)).toBeInTheDocument();\r\n      expect(screen.getByText(/Wachtwoord is verplicht/i)).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  it('submits login form with valid credentials', async () => {\r\n    render(\r\n      <ReactQueryProvider>\r\n        <NotificationProvider>\r\n          <AuthForm initialIsLogin={true} />\r\n        </NotificationProvider>\r\n      </ReactQueryProvider>\r\n    );\r\n    \r\n    // Fill in the form\r\n    fireEvent.change(screen.getByLabelText(/E-mailadres/i), {\r\n      target: { value: 'test@example.com' }\r\n    });\r\n    \r\n    fireEvent.change(screen.getByLabelText(/Wachtwoord/i), {\r\n      target: { value: 'password123' }\r\n    });\r\n    \r\n    // Submit the form\r\n    fireEvent.click(screen.getByRole('button', { name: /^Inloggen$/i }));\r\n    \r\n    // Check that the login function was called with the correct credentials\r\n    // Note: We're not checking for navigation since AuthProvider handles that now\r\n    await waitFor(() => {\r\n      const mockSupabase = require('@/lib/supabase-client').getSupabaseBrowserClient();\r\n      expect(mockSupabase.auth.signInWithPassword).toHaveBeenCalledWith({\r\n        email: 'test@example.com',\r\n        password: 'password123'\r\n      });\r\n    });\r\n  });\r\n\r\n  it('submits registration form with valid data', async () => {\r\n    render(\r\n      <ReactQueryProvider>\r\n        <NotificationProvider>\r\n          <AuthForm initialIsLogin={false} />\r\n        </NotificationProvider>\r\n      </ReactQueryProvider>\r\n    );\r\n    \r\n    // Fill in the form\r\n    fireEvent.change(screen.getByLabelText(/Voornaam/i), {\r\n      target: { value: 'Test' }\r\n    });\r\n    \r\n    fireEvent.change(screen.getByLabelText(/Achternaam/i), {\r\n      target: { value: 'User' }\r\n    });\r\n    \r\n    fireEvent.change(screen.getByLabelText(/E-mailadres/i), {\r\n      target: { value: 'newuser@example.com' }\r\n    });\r\n    \r\n    fireEvent.change(screen.getByLabelText(/Wachtwoord/i), {\r\n      target: { value: 'password123' }\r\n    });\r\n    \r\n    // Select user type (now using radio buttons)\r\n    fireEvent.click(screen.getByLabelText(/Patiënt/i));\r\n    \r\n    // Submit the form\r\n    fireEvent.click(screen.getByRole('button', { name: /^Registreren$/i }));\r\n    \r\n    // Check that the registration function was called with correct data\r\n    await waitFor(() => {\r\n      const mockSupabase = require('@/lib/supabase-client').getSupabaseBrowserClient();\r\n      expect(mockSupabase.auth.signUp).toHaveBeenCalledWith({\r\n        email: 'newuser@example.com',\r\n        password: 'password123',\r\n        options: {\r\n          emailRedirectTo: expect.any(String),\r\n          data: {\r\n            voornaam: 'Test',\r\n            achternaam: 'User',\r\n            type: 'patient'\r\n          }\r\n        }\r\n      });\r\n    });\r\n  });\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\tests\\reflectie.spec.ts","messages":[{"ruleId":"import/order","severity":2,"message":"`@/types` import should occur before import of `@/utils/ai`","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":37,"fix":{"range":[0,93],"text":"import { Reflectie } from '@/types';\r\nimport { validateReflectieWithAI } from '@/utils/ai';\r\n"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { validateReflectieWithAI } from '@/utils/ai';\r\nimport { Reflectie } from '@/types';\r\n\r\ndescribe('Reflectie Validation', () => {\r\n  it('should validate reflectie with high pain score', async () => {\r\n    const reflectie: Partial<Reflectie> = {\r\n      datum: new Date('2025-05-19'),\r\n      notitie: 'Vandaag voel ik me redelijk goed.',\r\n      stemming: 'goed',\r\n      pijn_score: 16, // High pain score\r\n      vermoeidheid_score: 8\r\n    };\r\n\r\n    const result = await validateReflectieWithAI(reflectie);\r\n    expect(result).toContain('pijnscore is hoog');\r\n  });\r\n\r\n  it('should validate reflectie with high fatigue score', async () => {\r\n    const reflectie: Partial<Reflectie> = {\r\n      datum: new Date('2025-05-19'),\r\n      notitie: 'Vandaag voel ik me redelijk goed.',\r\n      stemming: 'goed',\r\n      pijn_score: 8,\r\n      vermoeidheid_score: 16 // High fatigue score\r\n    };\r\n\r\n    const result = await validateReflectieWithAI(reflectie);\r\n    expect(result).toContain('vermoeidheidsscore is hoog');\r\n  });\r\n\r\n  it('should return the correct data', async () => {\r\n    const reflectie: Partial<Reflectie> = {\r\n      datum: new Date('2025-05-19'),\r\n      notitie: 'Vandaag voel ik me goed.',\r\n      stemming: 'goed',\r\n      pijn_score: 3,\r\n      vermoeidheid_score: 4\r\n    };\r\n\r\n    const result = await validateReflectieWithAI(reflectie);\r\n    // The positive notitie takes precedence over the low pain/fatigue scores in the current implementation\r\n    expect(result).toContain('overwegend positief');\r\n  });\r\n\r\n  it('should validate reflectie with negative text content', async () => {\r\n    const reflectie: Partial<Reflectie> = {\r\n      datum: new Date('2025-05-19'),\r\n      notitie: 'Ik voel me vandaag slecht, moe en gefrustreerd. Alles is moeilijk en ik ben uitgeput.',\r\n      stemming: 'slecht',\r\n      pijn_score: 10,\r\n      vermoeidheid_score: 10\r\n    };\r\n\r\n    const result = await validateReflectieWithAI(reflectie);\r\n    expect(result).toContain('negatieve woorden');\r\n  });\r\n\r\n  it('should validate reflectie with positive text content', async () => {\r\n    const reflectie: Partial<Reflectie> = {\r\n      datum: new Date('2025-05-19'),\r\n      notitie: 'Ik voel me vandaag goed, energiek en blij. Alles gaat soepel en ik ben tevreden.',\r\n      stemming: 'goed',\r\n      pijn_score: 5,\r\n      vermoeidheid_score: 5\r\n    };\r\n\r\n    const result = await validateReflectieWithAI(reflectie);\r\n    expect(result).toContain('overwegend positief');\r\n  });\r\n\r\n  // Nieuwe tests voor edge cases\r\n  it('should handle empty notitie gracefully', async () => {\r\n    const reflectie: Partial<Reflectie> = {\r\n      datum: new Date('2025-05-19'),\r\n      notitie: '',\r\n      stemming: 'neutraal',\r\n      pijn_score: 10,\r\n      vermoeidheid_score: 10\r\n    };\r\n\r\n    const result = await validateReflectieWithAI(reflectie);\r\n    expect(result).toBeTruthy(); // Verwacht een niet-lege string\r\n    expect(typeof result).toBe('string');\r\n  });\r\n\r\n  it('should handle extreme values correctly', async () => {\r\n    const reflectie: Partial<Reflectie> = {\r\n      datum: new Date('2025-05-19'),\r\n      notitie: 'Een normale dag vandaag.',\r\n      stemming: 'neutraal',\r\n      pijn_score: 20, // Maximum waarde\r\n      vermoeidheid_score: 20 // Maximum waarde\r\n    };\r\n\r\n    const result = await validateReflectieWithAI(reflectie);\r\n    expect(result).toContain('pijnscore is hoog');\r\n    expect(result).toContain('vermoeidheidsscore is hoog');\r\n  });\r\n\r\n  it('should handle mixed signals appropriately', async () => {\r\n    const reflectie: Partial<Reflectie> = {\r\n      datum: new Date('2025-05-19'),\r\n      notitie: 'Ik voel me vandaag goed, energiek en blij, ondanks de pijn.',\r\n      stemming: 'goed',\r\n      pijn_score: 18, // Hoge pijn\r\n      vermoeidheid_score: 5 // Lage vermoeidheid\r\n    };\r\n\r\n    const result = await validateReflectieWithAI(reflectie);\r\n    // Verwacht dat zowel de positieve notitie als de hoge pijnscore worden opgemerkt\r\n    expect(result).toContain('pijnscore is hoog');\r\n    expect(result).toMatch(/positief|goed/i);\r\n  });\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\tests\\task-logs.spec.ts","messages":[{"ruleId":"import/order","severity":2,"message":"`@/types` import should occur before import of `@/utils/task-validation`","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":41,"fix":{"range":[0,104],"text":"import { Task, TaskLog } from '@/types';\r\nimport { validateLogWithAI } from '@/utils/task-validation';\r\n"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { validateLogWithAI } from '@/utils/task-validation';\r\nimport { Task, TaskLog } from '@/types';\r\n\r\n// Mock the logger to prevent test output pollution\r\njest.mock('@/lib/monitoring/logger', () => ({\r\n  logger: {\r\n    debug: jest.fn(),\r\n    error: jest.fn()\r\n  }\r\n}));\r\n\r\ndescribe('Task Log AI Validation', () => {\r\n  // Helper function to create a basic task log object for testing\r\n  const createTestTaskLog = (overrides: Partial<TaskLog> = {}): Partial<TaskLog> & { user_id: string } => {\r\n    return {\r\n      user_id: 'test-user-id',\r\n      task_id: 'test-task-id',\r\n      start_tijd: new Date().toISOString(),\r\n      energie_voor: 10,\r\n      energie_na: 5,\r\n      pijn_score: 5,\r\n      vermoeidheid_score: 5,\r\n      ...overrides\r\n    };\r\n  };\r\n\r\n  // Helper function to create a basic task object for testing\r\n  const createTestTask = (overrides: Partial<Task> = {}): Partial<Task> => {\r\n    return {\r\n      id: 'test-task-id',\r\n      titel: 'Test Taak',\r\n      type: 'taak',\r\n      duur: 30,\r\n      ...overrides\r\n    };\r\n  };\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  test('should validate task log with high pain score', async () => {\r\n    const taskLog = createTestTaskLog({\r\n      pijn_score: 18,\r\n      vermoeidheid_score: 5\r\n    });\r\n\r\n    const task = createTestTask();\r\n\r\n    const result = await validateLogWithAI(taskLog, task);\r\n    \r\n    expect(result).toContain('Hoge pijn');\r\n    expect(result).toContain('Overweeg aanpassingen');\r\n  });\r\n\r\n  test('should validate task log with high fatigue score', async () => {\r\n    const taskLog = createTestTaskLog({\r\n      pijn_score: 5,\r\n      vermoeidheid_score: 18\r\n    });\r\n\r\n    const task = createTestTask();\r\n\r\n    const result = await validateLogWithAI(taskLog, task);\r\n    \r\n    expect(result).toContain('Hoge vermoeidheid');\r\n    expect(result).toContain('Overweeg aanpassingen');\r\n  });\r\n\r\n  test('should validate task log with both high pain and fatigue scores', async () => {\r\n    const taskLog = createTestTaskLog({\r\n      pijn_score: 18,\r\n      vermoeidheid_score: 18\r\n    });\r\n\r\n    const task = createTestTask();\r\n\r\n    const result = await validateLogWithAI(taskLog, task);\r\n    \r\n    expect(result).toContain('Hoge pijn');\r\n    expect(result).toContain('vermoeidheid');\r\n    expect(result).toContain('Overweeg aanpassingen');\r\n  });\r\n\r\n  test('should validate task log with high energy difference', async () => {\r\n    const taskLog = createTestTaskLog({\r\n      energie_voor: 20,\r\n      energie_na: 5\r\n    });\r\n\r\n    const task = createTestTask();\r\n\r\n    const result = await validateLogWithAI(taskLog, task);\r\n    \r\n    expect(result).toContain('veel energie te kosten');\r\n    expect(result).toContain('Overweeg de duur of intensiteit aan te passen');\r\n  });\r\n\r\n  test('should validate task log with moderate energy difference', async () => {\r\n    const taskLog = createTestTaskLog({\r\n      energie_voor: 15,\r\n      energie_na: 8\r\n    });\r\n\r\n    const task = createTestTask();\r\n\r\n    const result = await validateLogWithAI(taskLog, task);\r\n    \r\n    expect(result).toContain('kost behoorlijk wat energie');\r\n    expect(result).toContain('Houd dit in de gaten');\r\n  });\r\n\r\n  test('should suggest splitting long tasks with significant energy cost', async () => {\r\n    const taskLog = createTestTaskLog({\r\n      energie_voor: 15,\r\n      energie_na: 8\r\n    });\r\n\r\n    const task = createTestTask({\r\n      duur: 45\r\n    });\r\n\r\n    const result = await validateLogWithAI(taskLog, task);\r\n    \r\n    expect(result).toContain('op te delen in kortere sessies');\r\n  });\r\n\r\n  test('should return default message for normal logs', async () => {\r\n    const taskLog = createTestTaskLog({\r\n      pijn_score: 3,\r\n      vermoeidheid_score: 3,\r\n      energie_voor: 10,\r\n      energie_na: 8\r\n    });\r\n\r\n    const task = createTestTask();\r\n\r\n    const result = await validateLogWithAI(taskLog, task);\r\n    \r\n    expect(result).toContain('succesvol verwerkt');\r\n    expect(result).toContain('Blijf uw symptomen monitoren');\r\n  });\r\n\r\n  test('should handle errors gracefully', async () => {\r\n    // Use incomplete objects instead of null to test error handling more realistically\r\n    const invalidLog = { user_id: 'test-user' } as any; // Missing required fields\r\n    const invalidTask = {} as any; // Empty task object\r\n    \r\n    const result = await validateLogWithAI(invalidLog, invalidTask);\r\n    \r\n    expect(result).toContain('Log succesvol verwerkt');\r\n    expect(result).toContain('Onvoldoende gegevens voor analyse');\r\n    \r\n    // Test with undefined values\r\n    const resultWithUndefined = await validateLogWithAI(undefined as any, undefined as any);\r\n    expect(resultWithUndefined).toContain('Log succesvol verwerkt');\r\n    \r\n    // Test with malformed data that would cause runtime errors\r\n    const malformedLog = { \r\n      user_id: 'test-user',\r\n      pijn_score: 'not-a-number', // Should be a number\r\n      energie_voor: null,\r\n      energie_na: undefined\r\n    } as any;\r\n    const resultWithMalformed = await validateLogWithAI(malformedLog, invalidTask);\r\n    expect(resultWithMalformed).toContain('Log succesvol verwerkt');\r\n  });\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\types\\ai.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\types\\core.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\types\\database.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\types\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\types\\query.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TError' is defined but never used.","line":11,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":48}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { QueryKey, UseQueryOptions, UseQueryResult } from '@tanstack/react-query'; // UseMutationOptions removed\r\n\r\nimport { ErrorResponse } from './core'; // Using ErrorResponse from core types\r\n\r\n// Consistent return type for query hooks\r\n// Includes all properties from UseQueryResult for full functionality\r\nexport type QueryHookResult<TData, TError = ErrorResponse> = UseQueryResult<TData, TError>;\r\n\r\n// Specific type for Supabase query functions used within useSupabaseQuery\r\n// Ensures the queryFn returns TData or throws an error compatible with TError\r\nexport type SupabaseQueryFunction<TData, TError = ErrorResponse> = () => Promise<TData>;\r\n\r\n// Type for options passed to the generic useSupabaseQuery hook\r\nexport type SupabaseQueryHookOptions<\r\n  TQueryFnData = unknown, // Data type returned by queryFn\r\n  TError = ErrorResponse,       // Error type\r\n  TData = TQueryFnData,   // Data type returned by useQuery (after select, etc.)\r\n  TQueryKey extends QueryKey = QueryKey // Type of the query key\r\n> = Omit<UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>, 'queryKey' | 'queryFn'>;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\types\\subscription.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\utils\\accessibility.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":6,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":6,"endColumn":11},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":11,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":11,"endColumn":13},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":16,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":16,"endColumn":15},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":23,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":23,"endColumn":8},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":29,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":29,"endColumn":13},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":34,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":34,"endColumn":11},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":42,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":42,"endColumn":15},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":48,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":48,"endColumn":9},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":53,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":53,"endColumn":17},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":59,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":59,"endColumn":13},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":67,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":67,"endColumn":10},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":100,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":100,"endColumn":58}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// utils/accessibility.ts\r\nimport { useRef, useEffect } from 'react'; // React import verwijderd\r\n\r\n// Helper voor correcte ARIA attributen\r\nexport const ariaProps = {\r\n  button: (expanded: boolean) => ({\r\n    'aria-expanded': expanded.toString(), \r\n    'role': 'button',\r\n  }),\r\n  \r\n  checkbox: (checked: boolean) => ({\r\n    'aria-checked': checked, \r\n    'role': 'checkbox',\r\n  }),\r\n  \r\n  liveRegion: (atomic: boolean = true, relevant?: 'additions' | 'removals' | 'text' | 'all', busy?: boolean) => ({\r\n    'aria-live': 'polite' as 'polite' | 'assertive' | 'off', \r\n    'aria-atomic': atomic.toString(),\r\n    ...(relevant && { 'aria-relevant': relevant }),\r\n    ...(busy !== undefined && { 'aria-busy': busy.toString() }),\r\n  }),\r\n\r\n  tab: (selected: boolean, controlsPanelId: string) => ({\r\n    'role': 'tab',\r\n    'aria-selected': selected.toString(),\r\n    'aria-controls': controlsPanelId,\r\n  }),\r\n\r\n  tabPanel: (labelledByTabId: string) => ({\r\n    'role': 'tabpanel',\r\n    'aria-labelledby': labelledByTabId,\r\n  }),\r\n  \r\n  dialog: (isOpen: boolean, titleId: string, describedById?: string) => ({\r\n    'role': 'dialog',\r\n    'aria-modal': isOpen.toString(),\r\n    'aria-labelledby': titleId,\r\n    ...(describedById && { 'aria-describedby': describedById }),\r\n    'aria-hidden': (!isOpen).toString(),\r\n  }),\r\n  \r\n  menuButton: (isOpen: boolean, controlsMenuId: string) => ({\r\n    'aria-haspopup': 'true' as 'true' | 'false' | 'menu' | 'listbox' | 'tree' | 'grid' | 'dialog',\r\n    'aria-expanded': isOpen.toString(),\r\n    'aria-controls': controlsMenuId,\r\n  }),\r\n\r\n  menu: (labelledByButtonId: string) => ({\r\n    'role': 'menu',\r\n    'aria-labelledby': labelledByButtonId,\r\n  }),\r\n  \r\n  sortableItem: (isDragging: boolean) => ({\r\n    'role': 'option',\r\n    'aria-grabbed': isDragging.toString() as 'true' | 'false',\r\n    'tabIndex': 0,\r\n  }),\r\n  \r\n  progress: (value: number, max: number = 100, min: number = 0, valueText?: string) => ({\r\n    'role': 'progressbar',\r\n    'aria-valuenow': value,\r\n    'aria-valuemin': min,\r\n    'aria-valuemax': max,\r\n    ...(valueText && { 'aria-valuetext': valueText }),\r\n  }),\r\n  \r\n  alert: () => ({ \r\n    'role': 'alert',\r\n    'aria-live': 'assertive', // Type assertion verwijderd, 'assertive' is een geldige waarde\r\n    'aria-atomic': 'true',\r\n  }),\r\n};\r\n\r\n// Icon button helper\r\n// interface IconButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\r\n//   icon: ReactNode;\r\n//   label: string; \r\n// }\r\n\r\n// export function IconButton({ \r\n//   icon, \r\n//   label,\r\n//   className,\r\n//   ...rest\r\n// }: IconButtonProps): JSX.Element {\r\n//   return (\r\n//     <button type=\"button\" aria-label={label} className={className} {...rest}>\r\n//       {icon}\r\n//       <span className=\"sr-only\">{label}</span>\r\n//     </button>\r\n//   );\r\n// }\r\n\r\n// Screen reader only tekst\r\n// export function SROnly({ children }: { children: ReactNode }): JSX.Element {\r\n//   return <span className=\"sr-only\">{children}</span>;\r\n// }\r\n\r\n// Focus management hook\r\nexport function useFocusManagement<T extends HTMLElement>(shouldFocus: boolean) {\r\n  const elementRef = useRef<T>(null);\r\n  \r\n  useEffect(() => {\r\n    if (shouldFocus && elementRef.current) {\r\n      elementRef.current.focus();\r\n    }\r\n  }, [shouldFocus]);\r\n  \r\n  return elementRef;\r\n}\r\n\r\n// Example FocusTrap component (optional, hook can be used directly)\r\n// interface FocusTrapComponentProps {\r\n//   isActive: boolean;\r\n//   children: React.ReactNode;\r\n//   onEscape?: () => void;\r\n// }\r\n// export function FocusTrapComponent({ isActive, children, onEscape }: FocusTrapComponentProps): JSX.Element {\r\n//   const containerRef = useRef<HTMLDivElement>(null);\r\n//   useFocusTrap(containerRef, isActive, onEscape);\r\n\r\n//   return <div ref={containerRef} tabIndex={-1}>{children}</div>;\r\n// }\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\utils\\ai-insights.ts","messages":[{"ruleId":"import/order","severity":2,"message":"`@/types` import should occur before import of `@/types/ai`","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":46,"fix":{"range":[190,278],"text":"import { Reflectie, TaskLog } from '@/types';\r\nimport { AIInsight } from '@/types/ai';\r\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'profile' is assigned a value but never used.","line":36,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'taskLogs' is defined but never used. Allowed unused args must match /^_/u.","line":127,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":127,"endColumn":11},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":238,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":238,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8092,8095],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8092,8095],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'eveningTasks' is assigned a value but never used.","line":440,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":440,"endColumn":21}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { logger } from '@/lib/monitoring/logger';\r\nimport { getSupabaseBrowserClient } from '@/lib/supabase-client';\r\nimport { getSupabaseRouteHandlerClient } from '@/lib/supabase-server';\r\nimport { AIInsight } from '@/types/ai';\r\nimport { Reflectie, TaskLog } from '@/types';\r\n\r\n/**\r\n * Interface for AI insights generation parameters\r\n */\r\nexport interface AIInsightsParams {\r\n  patientIds: string[];\r\n  insightType: string;\r\n  timeframe: string;\r\n  limit: number;\r\n}\r\n\r\n/**\r\n * Generate AI insights based on patient data\r\n * \r\n * @param params - Parameters for insights generation\r\n * @returns Array of AI insights\r\n */\r\nexport async function generateAIInsights(params: AIInsightsParams): Promise<AIInsight[]> {\r\n  try {\r\n    const { patientIds, insightType, timeframe, limit } = params;\r\n    const supabase = typeof window === 'undefined' \r\n      ? getSupabaseRouteHandlerClient() \r\n      : getSupabaseBrowserClient();\r\n    \r\n    // Array to store all insights\r\n    const insights: AIInsight[] = [];\r\n    \r\n    // Process each patient\r\n    for (const patientId of patientIds) {\r\n      // Fetch patient profile\r\n      const { data: profile, error: profileError } = await supabase\r\n        .from('profiles')\r\n        .select('*')\r\n        .eq('id', patientId)\r\n        .single();\r\n      \r\n      if (profileError) {\r\n        logger.error(`Error fetching profile for patient ${patientId}:`, profileError);\r\n        continue;\r\n      }\r\n      \r\n      // Calculate date range based on timeframe\r\n      const endDate = new Date();\r\n      const startDate = new Date();\r\n      \r\n      switch (timeframe) {\r\n        case 'week':\r\n          startDate.setDate(endDate.getDate() - 7);\r\n          break;\r\n        case 'month':\r\n          startDate.setMonth(endDate.getMonth() - 1);\r\n          break;\r\n        case 'quarter':\r\n          startDate.setMonth(endDate.getMonth() - 3);\r\n          break;\r\n        case 'year':\r\n          startDate.setFullYear(endDate.getFullYear() - 1);\r\n          break;\r\n      }\r\n      \r\n      // Fetch reflections for the patient\r\n      const { data: reflections, error: reflectionsError } = await supabase\r\n        .from('reflecties')\r\n        .select('*')\r\n        .eq('user_id', patientId)\r\n        .gte('created_at', startDate.toISOString())\r\n        .lte('created_at', endDate.toISOString())\r\n        .order('created_at', { ascending: false });\r\n      \r\n      if (reflectionsError) {\r\n        logger.error(`Error fetching reflections for patient ${patientId}:`, reflectionsError);\r\n        continue;\r\n      }\r\n      \r\n      // Fetch task logs for the patient\r\n      const { data: taskLogs, error: taskLogsError } = await supabase\r\n        .from('task_logs')\r\n        .select('*, tasks(titel, type)')\r\n        .eq('user_id', patientId)\r\n        .gte('created_at', startDate.toISOString())\r\n        .lte('created_at', endDate.toISOString())\r\n        .order('created_at', { ascending: false });\r\n      \r\n      if (taskLogsError) {\r\n        logger.error(`Error fetching task logs for patient ${patientId}:`, taskLogsError);\r\n        continue;\r\n      }\r\n      \r\n      // Generate insights based on the data and insight type\r\n      if (insightType === 'all' || insightType === 'symptom_patterns') {\r\n        const symptomPatterns = generateSymptomPatternInsights(patientId, reflections, taskLogs);\r\n        insights.push(...symptomPatterns);\r\n      }\r\n      \r\n      if (insightType === 'all' || insightType === 'treatment_efficacy') {\r\n        const treatmentEfficacy = generateTreatmentEfficacyInsights(patientId, reflections, taskLogs);\r\n        insights.push(...treatmentEfficacy);\r\n      }\r\n      \r\n      if (insightType === 'all' || insightType === 'activity_correlation') {\r\n        const activityCorrelation = generateActivityCorrelationInsights(patientId, reflections, taskLogs);\r\n        insights.push(...activityCorrelation);\r\n      }\r\n    }\r\n    \r\n    // Sort insights by confidence (highest first) and limit the results\r\n    return insights\r\n      .sort((a, b) => (b.confidence || 0) - (a.confidence || 0))\r\n      .slice(0, limit);\r\n  } catch (error) {\r\n    logger.error('Error generating AI insights:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\n/**\r\n * Generate insights about symptom patterns\r\n */\r\nfunction generateSymptomPatternInsights(\r\n  patientId: string,\r\n  reflections: Reflectie[],\r\n  taskLogs: TaskLog[]\r\n): AIInsight[] {\r\n  const insights: AIInsight[] = [];\r\n  \r\n  // Check if we have enough data\r\n  if (reflections.length < 5) {\r\n    return insights;\r\n  }\r\n  \r\n  // Analyze pain scores\r\n  const painScores = reflections\r\n    .filter(r => r.pijn_score !== undefined && r.pijn_score !== null)\r\n    .map(r => ({ score: r.pijn_score, date: new Date(r.created_at) }))\r\n    .sort((a, b) => a.date.getTime() - b.date.getTime());\r\n  \r\n  if (painScores.length >= 5) {\r\n    // Calculate trend\r\n    let increasing = 0;\r\n    let decreasing = 0;\r\n    \r\n    for (let i = 1; i < painScores.length; i++) {\r\n      const diff = painScores[i].score - painScores[i-1].score;\r\n      if (diff > 1) increasing++;\r\n      else if (diff < -1) decreasing++;\r\n    }\r\n    \r\n    // Determine pattern type\r\n    if (increasing > painScores.length / 3) {\r\n      insights.push({\r\n        userId: patientId,\r\n        title: 'Toenemende pijnklachten',\r\n        description: 'De pijnscores vertonen een stijgende trend over de afgelopen periode. Dit kan wijzen op een verslechtering van de symptomen.',\r\n        insightType: 'warning',\r\n        relevantData: {\r\n          painScores: painScores\r\n        },\r\n        suggestedActions: [\r\n          'Bespreek de toenemende pijn met de patiënt',\r\n          'Overweeg aanpassing van het behandelplan',\r\n          'Controleer of er triggers zijn voor de toenemende pijn'\r\n        ],\r\n        confidence: 0.85\r\n      });\r\n    } else if (decreasing > painScores.length / 3) {\r\n      insights.push({\r\n        userId: patientId,\r\n        title: 'Afnemende pijnklachten',\r\n        description: 'De pijnscores vertonen een dalende trend over de afgelopen periode. Dit wijst op een verbetering van de symptomen.',\r\n        insightType: 'trend',\r\n        relevantData: {\r\n          painScores: painScores\r\n        },\r\n        suggestedActions: [\r\n          'Bespreek de afnemende pijn met de patiënt',\r\n          'Identificeer welke interventies mogelijk hebben bijgedragen aan de verbetering',\r\n          'Overweeg om succesvolle elementen van het behandelplan te versterken'\r\n        ],\r\n        confidence: 0.8\r\n      });\r\n    }\r\n  }\r\n  \r\n  // Analyze fatigue scores\r\n  const fatigueScores = reflections\r\n    .filter(r => r.vermoeidheid_score !== undefined && r.vermoeidheid_score !== null)\r\n    .map(r => ({ score: r.vermoeidheid_score, date: new Date(r.created_at) }))\r\n    .sort((a, b) => a.date.getTime() - b.date.getTime());\r\n  \r\n  if (fatigueScores.length >= 5) {\r\n    // Calculate average fatigue\r\n    const avgFatigue = fatigueScores.reduce((sum, item) => sum + item.score, 0) / fatigueScores.length;\r\n    \r\n    if (avgFatigue > 15) {\r\n      insights.push({\r\n        userId: patientId,\r\n        title: 'Hoge vermoeidheidsscores',\r\n        description: 'De gemiddelde vermoeidheidsscore is hoog over de afgelopen periode. Dit kan impact hebben op dagelijks functioneren.',\r\n        insightType: 'warning',\r\n        relevantData: {\r\n          fatigueScores: fatigueScores,\r\n          avgFatigue: avgFatigue\r\n        },\r\n        suggestedActions: [\r\n          'Bespreek energiemanagement met de patiënt',\r\n          'Overweeg aanpassing van het behandelplan',\r\n          'Controleer slaapkwaliteit en andere factoren die vermoeidheid kunnen beïnvloeden'\r\n        ],\r\n        confidence: 0.8\r\n      });\r\n    }\r\n  }\r\n  \r\n  return insights;\r\n}\r\n\r\n/**\r\n * Generate insights about treatment efficacy\r\n */\r\nfunction generateTreatmentEfficacyInsights(\r\n  patientId: string,\r\n  reflections: Reflectie[],\r\n  taskLogs: TaskLog[]\r\n): AIInsight[] {\r\n  const insights: AIInsight[] = [];\r\n  \r\n  // Check if we have enough data\r\n  if (taskLogs.length < 10) {\r\n    return insights;\r\n  }\r\n  \r\n  // Group task logs by task type\r\n  const tasksByType: Record<string, any[]> = {};\r\n  \r\n  taskLogs.forEach(log => {\r\n    const taskType = log.tasks?.type || 'unknown';\r\n    if (!tasksByType[taskType]) {\r\n      tasksByType[taskType] = [];\r\n    }\r\n    tasksByType[taskType].push(log);\r\n  });\r\n  \r\n  // Analyze each task type with enough data\r\n  Object.entries(tasksByType).forEach(([taskType, logs]) => {\r\n    if (logs.length < 5) return;\r\n    \r\n    // Calculate average pain and fatigue scores before and after tasks\r\n    const painBefore = logs\r\n      .filter(log => log.pijn_score_voor !== undefined && log.pijn_score_voor !== null)\r\n      .map(log => log.pijn_score_voor);\r\n    \r\n    const painAfter = logs\r\n      .filter(log => log.pijn_score !== undefined && log.pijn_score !== null)\r\n      .map(log => log.pijn_score);\r\n    \r\n    const fatigueBefore = logs\r\n      .filter(log => log.vermoeidheid_score_voor !== undefined && log.vermoeidheid_score_voor !== null)\r\n      .map(log => log.vermoeidheid_score_voor);\r\n    \r\n    const fatigueAfter = logs\r\n      .filter(log => log.vermoeidheid_score !== undefined && log.vermoeidheid_score !== null)\r\n      .map(log => log.vermoeidheid_score);\r\n    \r\n    // Only analyze if we have enough before/after data\r\n    if (painBefore.length >= 5 && painAfter.length >= 5) {\r\n      const avgPainBefore = painBefore.reduce((sum, score) => sum + score, 0) / painBefore.length;\r\n      const avgPainAfter = painAfter.reduce((sum, score) => sum + score, 0) / painAfter.length;\r\n      const painDiff = avgPainAfter - avgPainBefore;\r\n      \r\n      if (Math.abs(painDiff) >= 2) {\r\n        insights.push({\r\n          userId: patientId,\r\n          title: painDiff < 0 \r\n            ? `${taskType} taken verminderen pijn` \r\n            : `${taskType} taken verhogen pijn`,\r\n          description: painDiff < 0\r\n            ? `Taken van het type '${taskType}' lijken de pijn te verminderen. De gemiddelde pijnscore daalt met ${Math.abs(painDiff).toFixed(1)} punten na deze taken.`\r\n            : `Taken van het type '${taskType}' lijken de pijn te verhogen. De gemiddelde pijnscore stijgt met ${painDiff.toFixed(1)} punten na deze taken.`,\r\n          insightType: painDiff < 0 ? 'correlation' : 'warning',\r\n          relevantData: {\r\n            taskType: taskType,\r\n            avgPainBefore: avgPainBefore,\r\n            avgPainAfter: avgPainAfter,\r\n            painDiff: painDiff\r\n          },\r\n          suggestedActions: painDiff < 0\r\n            ? [\r\n                `Moedig meer ${taskType} taken aan`,\r\n                'Bespreek de positieve effecten met de patiënt',\r\n                'Overweeg vergelijkbare taken toe te voegen aan het behandelplan'\r\n              ]\r\n            : [\r\n                `Evalueer de intensiteit van ${taskType} taken`,\r\n                'Bespreek mogelijke aanpassingen om de taken minder belastend te maken',\r\n                'Overweeg alternatieve taken met vergelijkbare doelen'\r\n              ],\r\n          confidence: 0.75\r\n        });\r\n      }\r\n    }\r\n    \r\n    if (fatigueBefore.length >= 5 && fatigueAfter.length >= 5) {\r\n      const avgFatigueBefore = fatigueBefore.reduce((sum, score) => sum + score, 0) / fatigueBefore.length;\r\n      const avgFatigueAfter = fatigueAfter.reduce((sum, score) => sum + score, 0) / fatigueAfter.length;\r\n      const fatigueDiff = avgFatigueAfter - avgFatigueBefore;\r\n      \r\n      if (Math.abs(fatigueDiff) >= 2) {\r\n        insights.push({\r\n          userId: patientId,\r\n          title: fatigueDiff < 0 \r\n            ? `${taskType} taken verminderen vermoeidheid` \r\n            : `${taskType} taken verhogen vermoeidheid`,\r\n          description: fatigueDiff < 0\r\n            ? `Taken van het type '${taskType}' lijken de vermoeidheid te verminderen. De gemiddelde vermoeidheidsscore daalt met ${Math.abs(fatigueDiff).toFixed(1)} punten na deze taken.`\r\n            : `Taken van het type '${taskType}' lijken de vermoeidheid te verhogen. De gemiddelde vermoeidheidsscore stijgt met ${fatigueDiff.toFixed(1)} punten na deze taken.`,\r\n          insightType: fatigueDiff < 0 ? 'correlation' : 'warning',\r\n          relevantData: {\r\n            taskType: taskType,\r\n            avgFatigueBefore: avgFatigueBefore,\r\n            avgFatigueAfter: avgFatigueAfter,\r\n            fatigueDiff: fatigueDiff\r\n          },\r\n          suggestedActions: fatigueDiff < 0\r\n            ? [\r\n                `Moedig meer ${taskType} taken aan`,\r\n                'Bespreek de positieve effecten met de patiënt',\r\n                'Overweeg vergelijkbare taken toe te voegen aan het behandelplan'\r\n              ]\r\n            : [\r\n                `Evalueer de intensiteit van ${taskType} taken`,\r\n                'Bespreek mogelijke aanpassingen om de taken minder belastend te maken',\r\n                'Overweeg alternatieve taken met vergelijkbare doelen'\r\n              ],\r\n          confidence: 0.75\r\n        });\r\n      }\r\n    }\r\n  });\r\n  \r\n  return insights;\r\n}\r\n\r\n/**\r\n * Generate insights about activity correlation with symptoms\r\n */\r\nfunction generateActivityCorrelationInsights(\r\n  patientId: string,\r\n  reflections: Reflectie[],\r\n  taskLogs: TaskLog[]\r\n): AIInsight[] {\r\n  const insights: AIInsight[] = [];\r\n  \r\n  // Check if we have enough data\r\n  if (taskLogs.length < 10 || reflections.length < 5) {\r\n    return insights;\r\n  }\r\n  \r\n  // Analyze correlation between task duration and symptoms\r\n  const tasksWithDuration = taskLogs.filter(log => \r\n    log.eind_tijd !== null && \r\n    log.start_tijd !== null && \r\n    log.pijn_score !== null\r\n  );\r\n  \r\n  if (tasksWithDuration.length >= 5) {\r\n    // Calculate durations\r\n    const tasksWithMetrics = tasksWithDuration.map(log => {\r\n      const start = new Date(log.start_tijd);\r\n      const end = new Date(log.eind_tijd);\r\n      const durationMinutes = (end.getTime() - start.getTime()) / (1000 * 60);\r\n      \r\n      return {\r\n        duration: durationMinutes,\r\n        painScore: log.pijn_score,\r\n        fatigueScore: log.vermoeidheid_score,\r\n        taskType: log.tasks?.type || 'unknown',\r\n        log\r\n      };\r\n    });\r\n    \r\n    // Check for correlation between duration and pain\r\n    const longTasks = tasksWithMetrics.filter(t => t.duration > 30);\r\n    const shortTasks = tasksWithMetrics.filter(t => t.duration <= 30);\r\n    \r\n    if (longTasks.length >= 3 && shortTasks.length >= 3) {\r\n      const avgPainLong = longTasks.reduce((sum, t) => sum + t.painScore, 0) / longTasks.length;\r\n      const avgPainShort = shortTasks.reduce((sum, t) => sum + t.painScore, 0) / shortTasks.length;\r\n      \r\n      const painDiff = avgPainLong - avgPainShort;\r\n      \r\n      if (Math.abs(painDiff) >= 2) {\r\n        insights.push({\r\n          userId: patientId,\r\n          title: painDiff > 0 \r\n            ? 'Langere activiteiten verhogen pijn' \r\n            : 'Kortere activiteiten verlagen pijn',\r\n          description: painDiff > 0\r\n            ? 'Langere activiteiten (>30 min) lijken samen te hangen met hogere pijnscores. Overweeg om activiteiten op te delen in kortere sessies.'\r\n            : 'Kortere activiteiten (≤30 min) lijken samen te hangen met lagere pijnscores. Dit is een positief patroon om voort te zetten.',\r\n          insightType: painDiff > 0 ? 'warning' : 'correlation',\r\n          relevantData: {\r\n            avgPainLong: avgPainLong,\r\n            avgPainShort: avgPainShort,\r\n            painDiff: painDiff,\r\n            longTasksCount: longTasks.length,\r\n            shortTasksCount: shortTasks.length\r\n          },\r\n          suggestedActions: painDiff > 0\r\n            ? [\r\n                'Deel langere activiteiten op in kortere sessies',\r\n                'Plan vaker pauzes in',\r\n                'Wissel activiteiten af'\r\n              ]\r\n            : [\r\n                'Blijf activiteiten opdelen in kortere sessies',\r\n                'Houd dit patroon aan'\r\n              ],\r\n          confidence: 0.8\r\n        });\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Analyze time of day correlation\r\n  const morningTasks = taskLogs.filter(log => {\r\n    const time = new Date(log.start_tijd);\r\n    return time.getHours() < 12;\r\n  });\r\n  \r\n  const afternoonTasks = taskLogs.filter(log => {\r\n    const time = new Date(log.start_tijd);\r\n    return time.getHours() >= 12 && time.getHours() < 18;\r\n  });\r\n  \r\n  const eveningTasks = taskLogs.filter(log => {\r\n    const time = new Date(log.start_tijd);\r\n    return time.getHours() >= 18;\r\n  });\r\n  \r\n  if (morningTasks.length >= 3 && afternoonTasks.length >= 3) {\r\n    const avgPainMorning = morningTasks\r\n      .filter(log => log.pijn_score !== null)\r\n      .reduce((sum, log) => sum + log.pijn_score, 0) / morningTasks.length;\r\n    \r\n    const avgPainAfternoon = afternoonTasks\r\n      .filter(log => log.pijn_score !== null)\r\n      .reduce((sum, log) => sum + log.pijn_score, 0) / afternoonTasks.length;\r\n    \r\n    const painDiff = avgPainMorning - avgPainAfternoon;\r\n    \r\n    if (Math.abs(painDiff) >= 2) {\r\n      insights.push({\r\n        userId: patientId,\r\n        title: painDiff < 0 \r\n          ? 'Ochtendactiviteiten geven minder pijn' \r\n          : 'Middagactiviteiten geven minder pijn',\r\n        description: painDiff < 0\r\n          ? 'Activiteiten in de ochtend lijken samen te hangen met lagere pijnscores dan activiteiten in de middag.'\r\n          : 'Activiteiten in de middag lijken samen te hangen met lagere pijnscores dan activiteiten in de ochtend.',\r\n        insightType: 'correlation',\r\n          relevantData: {\r\n            avgPainMorning: avgPainMorning,\r\n            avgPainAfternoon: avgPainAfternoon,\r\n            painDiff: painDiff\r\n          },\r\n        suggestedActions: painDiff < 0\r\n          ? [\r\n              'Plan meer activiteiten in de ochtend',\r\n              'Bespreek dit patroon met de patiënt'\r\n            ]\r\n          : [\r\n              'Plan meer activiteiten in de middag',\r\n              'Bespreek dit patroon met de patiënt'\r\n            ],\r\n        confidence: 0.7\r\n      });\r\n    }\r\n  }\r\n  \r\n  return insights;\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\utils\\ai-service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'profile' is defined but never used. Allowed unused args must match /^_/u.","line":277,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":277,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'timeframe' is defined but never used. Allowed unused args must match /^_/u.","line":433,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":433,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logger } from '@/lib/monitoring/logger';\r\nimport { getSupabaseBrowserClient } from '@/lib/supabase-client';\r\nimport { \r\n  Reflectie, \r\n  TaskLog,\r\n  Profile\r\n} from '@/types';\r\nimport { \r\n  AIAnalysisRequest, \r\n  AIAnalysisResponse, \r\n  AIInsight, \r\n  SymptomPattern,\r\n  TaskSuggestion\r\n} from '@/types/ai';\r\n\r\n/**\r\n * Enhanced AI service for FibroGuardian Pro\r\n * Provides intelligent analysis of user data, pattern recognition,\r\n * and personalized recommendations\r\n */\r\nexport class AIService {\r\n  /**\r\n   * Validates a reflection using AI-based analysis of text and scores.\r\n   * \r\n   * This function analyzes the reflection's text content (notitie), mood (stemming),\r\n   * pain score (pijn_score), and fatigue score (vermoeidheid_score) to generate\r\n   * personalized feedback for the user.\r\n   * \r\n   * @param reflectie - The reflection data to analyze\r\n   * @returns A validation message with personalized feedback\r\n   */\r\n  static async validateReflectie(reflectie: Partial<Reflectie>): Promise<string> {\r\n    try {\r\n      // Enhanced word lists for better analysis\r\n      const negatieveWoorden = [\r\n        'slecht', 'moe', 'uitgeput', 'pijn', 'depressief', 'angstig', 'verdrietig', 'teleurgesteld',\r\n        'gefrustreerd', 'boos', 'geïrriteerd', 'hopeloos', 'eenzaam', 'gestrest', 'gespannen',\r\n        'onrustig', 'onzeker', 'bang', 'somber', 'zwaar', 'moeilijk', 'zwak', 'ellendig'\r\n      ];\r\n      \r\n      const positieveWoorden = [\r\n        'goed', 'beter', 'gelukkig', 'tevreden', 'rustig', 'energiek', 'blij', 'dankbaar',\r\n        'ontspannen', 'sterk', 'hoopvol', 'gemotiveerd', 'trots', 'opgewekt', 'positief',\r\n        'kalm', 'vrolijk', 'enthousiast', 'optimistisch', 'vitaal', 'fit', 'opgewekt'\r\n      ];\r\n      \r\n      let validationMessage = 'Bedankt voor uw reflectie. Regelmatig reflecteren helpt om inzicht te krijgen in uw patronen.';\r\n      let issuesFound = 0;\r\n      let positiveAspects = 0;\r\n\r\n      // Analysis of the note\r\n      if (reflectie.notitie) {\r\n        const notitie = reflectie.notitie.toLowerCase();\r\n        \r\n        // Improved analysis with word frequency and context\r\n        const negatiefAantal = negatieveWoorden.filter(woord => {\r\n          // Check for whole words, not parts of words\r\n          const regex = new RegExp(`\\\\b${woord}\\\\b`, 'i');\r\n          return regex.test(notitie);\r\n        }).length;\r\n        \r\n        const positiefAantal = positieveWoorden.filter(woord => {\r\n          const regex = new RegExp(`\\\\b${woord}\\\\b`, 'i');\r\n          return regex.test(notitie);\r\n        }).length;\r\n        \r\n        // Weighted analysis based on word frequency and length of the note\r\n        const woordenTotaal = notitie.split(/\\s+/).length;\r\n        const negatiefRatio = woordenTotaal > 0 ? negatiefAantal / woordenTotaal : 0;\r\n        const positiefRatio = woordenTotaal > 0 ? positiefAantal / woordenTotaal : 0;\r\n        \r\n        // Improved thresholds for better detection\r\n        if ((negatiefAantal > positiefAantal + 1 && negatiefAantal >= 2) || negatiefRatio > 0.15) {\r\n          validationMessage = 'Uw reflectie bevat meerdere negatieve woorden. Overweeg om contact op te nemen met uw zorgverlener als u zich regelmatig zo voelt.';\r\n          issuesFound++;\r\n        } else if ((positiefAantal > negatiefAantal + 1 && positiefAantal >= 2) || positiefRatio > 0.15) {\r\n          validationMessage = 'Uw reflectie is overwegend positief! Dit is een goed teken voor uw welzijn. Blijf doen wat goed voor u werkt.';\r\n          positiveAspects++;\r\n        }\r\n      }\r\n      \r\n      // Analysis of the mood\r\n      if (reflectie.stemming) {\r\n        const stemmingLower = reflectie.stemming.toLowerCase();\r\n        \r\n        // More extensive mood categories\r\n        const negatiefStemmingen = ['slecht', 'zeer slecht', 'depressief', 'erg moe', 'somber', 'angstig', 'gespannen', 'onrustig'];\r\n        const positiefStemmingen = ['goed', 'zeer goed', 'uitstekend', 'energiek', 'blij', 'ontspannen', 'tevreden', 'optimistisch'];\r\n        \r\n        if (negatiefStemmingen.includes(stemmingLower)) {\r\n          if (issuesFound > 0) {\r\n            validationMessage += \" Ook uw aangegeven stemming is negatief.\";\r\n          } else {\r\n            validationMessage = 'U geeft aan dat u zich niet goed voelt. Overweeg om contact op te nemen met uw zorgverlener als dit aanhoudt.';\r\n          }\r\n          issuesFound++;\r\n        } else if (positiefStemmingen.includes(stemmingLower)) {\r\n          if (issuesFound === 0) {\r\n            validationMessage = positiveAspects > 0 \r\n              ? validationMessage \r\n              : 'U geeft aan dat u zich goed voelt. Dat is positief! Probeer te onthouden wat u vandaag heeft gedaan, zodat u dit kunt herhalen.';\r\n            positiveAspects++;\r\n          }\r\n        }\r\n      }\r\n      \r\n      // Analysis of pain and fatigue scores\r\n      if (reflectie.pijn_score !== undefined && reflectie.pijn_score > 15) {\r\n        if (issuesFound > 0) {\r\n          validationMessage += \" Uw pijnscore is ook hoog.\";\r\n        } else {\r\n          validationMessage = 'Uw pijnscore is hoog. Overweeg om contact op te nemen met uw zorgverlener als dit aanhoudt.';\r\n        }\r\n        issuesFound++;\r\n      }\r\n      \r\n      if (reflectie.vermoeidheid_score !== undefined && reflectie.vermoeidheid_score > 15) {\r\n        if (issuesFound > 0) {\r\n          validationMessage += \" Uw vermoeidheidsscore is ook hoog.\";\r\n        } else {\r\n          validationMessage = 'Uw vermoeidheidsscore is hoog. Overweeg om contact op te nemen met uw zorgverlener als dit aanhoudt.';\r\n        }\r\n        issuesFound++;\r\n      }\r\n      \r\n      // Positive feedback for low scores\r\n      if (reflectie.pijn_score !== undefined && reflectie.pijn_score < 5 && \r\n          reflectie.vermoeidheid_score !== undefined && reflectie.vermoeidheid_score < 5) {\r\n        if (issuesFound === 0) {\r\n          validationMessage = positiveAspects > 0 \r\n            ? validationMessage \r\n            : 'Uw pijn- en vermoeidheidsscores zijn laag. Dat is positief! Probeer te onthouden wat u vandaag heeft gedaan, zodat u dit kunt herhalen.';\r\n          positiveAspects++;\r\n        }\r\n      }\r\n        \r\n      return validationMessage;\r\n    } catch (error) {\r\n      logger.error('Fout bij AI validatie van reflectie:', error);\r\n      return 'Reflectie opgeslagen. AI analyse kon niet worden voltooid.';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Analyzes user data to generate personalized insights and recommendations\r\n   * \r\n   * @param request - The analysis request parameters\r\n   * @returns AI analysis response with insights and recommendations\r\n   */\r\n  static async analyzeUserData(request: AIAnalysisRequest): Promise<AIAnalysisResponse> {\r\n    try {\r\n      const startTime = performance.now();\r\n      const supabase = getSupabaseBrowserClient();\r\n      const { userId, analysisType, timeframe = 'week', includeData = {} } = request;\r\n      \r\n      // Fetch user profile if needed\r\n      let profile: Profile | null = null;\r\n      if (includeData.profile) {\r\n        const { data: profileData, error: profileError } = await supabase\r\n          .from('profiles')\r\n          .select('*')\r\n          .eq('id', userId)\r\n          .single();\r\n          \r\n        if (profileError) {\r\n          logger.error('Error fetching profile for AI analysis:', profileError);\r\n        } else {\r\n          profile = profileData as unknown as Profile;\r\n        }\r\n      }\r\n      \r\n      // Fetch task logs if needed\r\n      let taskLogs: TaskLog[] = [];\r\n      if (includeData.taskLogs) {\r\n        // Calculate date range based on timeframe\r\n        const endDate = new Date();\r\n        const startDate = new Date();\r\n        \r\n        switch (timeframe) {\r\n          case 'day':\r\n            startDate.setDate(endDate.getDate() - 1);\r\n            break;\r\n          case 'week':\r\n            startDate.setDate(endDate.getDate() - 7);\r\n            break;\r\n          case 'month':\r\n            startDate.setMonth(endDate.getMonth() - 1);\r\n            break;\r\n        }\r\n        \r\n        const { data: logsData, error: logsError } = await supabase\r\n          .from('task_logs')\r\n          .select('*, tasks(titel, type)')\r\n          .eq('user_id', userId)\r\n          .gte('created_at', startDate.toISOString())\r\n          .lte('created_at', endDate.toISOString())\r\n          .order('created_at', { ascending: false });\r\n          \r\n        if (logsError) {\r\n          logger.error('Error fetching task logs for AI analysis:', logsError);\r\n        } else {\r\n          taskLogs = logsData as unknown as TaskLog[];\r\n        }\r\n      }\r\n      \r\n      // Fetch reflections if needed\r\n      let reflecties: Reflectie[] = [];\r\n      if (includeData.reflecties) {\r\n        // Calculate date range based on timeframe\r\n        const endDate = new Date();\r\n        const startDate = new Date();\r\n        \r\n        switch (timeframe) {\r\n          case 'day':\r\n            startDate.setDate(endDate.getDate() - 1);\r\n            break;\r\n          case 'week':\r\n            startDate.setDate(endDate.getDate() - 7);\r\n            break;\r\n          case 'month':\r\n            startDate.setMonth(endDate.getMonth() - 1);\r\n            break;\r\n        }\r\n        \r\n        const { data: reflectiesData, error: reflectiesError } = await supabase\r\n          .from('reflecties')\r\n          .select('*')\r\n          .eq('user_id', userId)\r\n          .gte('created_at', startDate.toISOString())\r\n          .lte('created_at', endDate.toISOString())\r\n          .order('created_at', { ascending: false });\r\n          \r\n        if (reflectiesError) {\r\n          logger.error('Error fetching reflections for AI analysis:', reflectiesError);\r\n        } else {\r\n          reflecties = reflectiesData as unknown as Reflectie[];\r\n        }\r\n      }\r\n      \r\n      // Process the data based on analysis type\r\n      const results: AIAnalysisResponse['results'] = {};\r\n      \r\n      switch (analysisType) {\r\n        case 'task_suggestion':\r\n          results.taskSuggestions = await this.generateTaskSuggestions(userId, taskLogs, reflecties, profile);\r\n          break;\r\n        case 'symptom_pattern':\r\n          results.symptomPatterns = await this.detectSymptomPatterns(userId, taskLogs, reflecties, timeframe);\r\n          break;\r\n        case 'insight_generation':\r\n          results.insights = await this.generateInsights(userId, taskLogs, reflecties, timeframe);\r\n          break;\r\n      }\r\n      \r\n      const endTime = performance.now();\r\n      \r\n      return {\r\n        userId,\r\n        analysisType,\r\n        results,\r\n        processingTime: endTime - startTime,\r\n        timestamp: new Date()\r\n      };\r\n    } catch (error) {\r\n      logger.error('Error in AI analysis:', error);\r\n      throw new Error('AI analysis failed: ' + (error instanceof Error ? error.message : String(error)));\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Generates task suggestions based on user data\r\n   */\r\n  private static async generateTaskSuggestions(\r\n    userId: string,\r\n    taskLogs: TaskLog[],\r\n    reflecties: Reflectie[],\r\n    profile: Profile | null\r\n  ): Promise<TaskSuggestion[]> {\r\n    const suggestions: TaskSuggestion[] = [];\r\n    \r\n    // Check if we have enough data\r\n    if (taskLogs.length === 0 && reflecties.length === 0) {\r\n      return suggestions;\r\n    }\r\n    \r\n    // Analyze pain and fatigue patterns\r\n    const highPainDays = reflecties.filter(r => r.pijn_score !== undefined && r.pijn_score > 12).length;\r\n    const highFatigueDays = reflecties.filter(r => r.vermoeidheid_score !== undefined && r.vermoeidheid_score > 12).length;\r\n    \r\n    // Suggest tasks based on patterns\r\n    if (highPainDays > reflecties.length / 3) {\r\n      // High pain pattern detected\r\n      suggestions.push({\r\n        suggestedTask: {\r\n          type: 'taak',\r\n          titel: 'Ontspanningsoefeningen',\r\n          beschrijving: 'Korte ontspanningsoefeningen om pijnklachten te verminderen',\r\n          duur: 15,\r\n          herhaal_patroon: 'dagelijks',\r\n          metingen: ['pijn_score', 'stemming'],\r\n        },\r\n        reasoning: 'U heeft de afgelopen periode regelmatig hoge pijnscores gerapporteerd. Ontspanningsoefeningen kunnen helpen om pijnklachten te verminderen.',\r\n        confidence: 0.85,\r\n        basedOnPatterns: ['Hoge pijnscores in reflecties', 'Patroon van pijnklachten']\r\n      });\r\n    }\r\n    \r\n    if (highFatigueDays > reflecties.length / 3) {\r\n      // High fatigue pattern detected\r\n      suggestions.push({\r\n        suggestedTask: {\r\n          type: 'taak',\r\n          titel: 'Energiemanagement',\r\n          beschrijving: 'Plan activiteiten en rustmomenten om energie te verdelen over de dag',\r\n          duur: 10,\r\n          herhaal_patroon: 'dagelijks',\r\n          metingen: ['energie_voor', 'energie_na'],\r\n        },\r\n        reasoning: 'U heeft de afgelopen periode regelmatig hoge vermoeidheidsscores gerapporteerd. Energiemanagement kan helpen om uw energie beter te verdelen.',\r\n        confidence: 0.8,\r\n        basedOnPatterns: ['Hoge vermoeidheidsscores in reflecties', 'Patroon van vermoeidheid']\r\n      });\r\n    }\r\n    \r\n    // If no specific suggestions, add a generic one\r\n    if (suggestions.length === 0) {\r\n      suggestions.push({\r\n        suggestedTask: {\r\n          type: 'taak',\r\n          titel: 'Dagelijkse reflectie',\r\n          beschrijving: 'Neem een moment om te reflecteren op uw dag en noteer hoe u zich voelt',\r\n          duur: 5,\r\n          herhaal_patroon: 'dagelijks',\r\n          metingen: ['stemming', 'pijn_score', 'vermoeidheid_score'],\r\n        },\r\n        reasoning: 'Regelmatige reflectie helpt bij het herkennen van patronen en het verbeteren van zelfmanagement.',\r\n        confidence: 0.7,\r\n        basedOnPatterns: ['Algemene aanbeveling voor fibromyalgiepatiënten']\r\n      });\r\n    }\r\n    \r\n    return suggestions;\r\n  }\r\n  \r\n  /**\r\n   * Detects symptom patterns in user data\r\n   */\r\n  private static async detectSymptomPatterns(\r\n    userId: string,\r\n    taskLogs: TaskLog[],\r\n    reflecties: Reflectie[],\r\n    timeframe: 'day' | 'week' | 'month'\r\n  ): Promise<SymptomPattern[]> {\r\n    const patterns: SymptomPattern[] = [];\r\n    \r\n    // Check if we have enough data\r\n    if (reflecties.length < 3) {\r\n      return patterns;\r\n    }\r\n    \r\n    // Analyze pain scores\r\n    if (reflecties.some(r => r.pijn_score !== undefined)) {\r\n      const painScores = reflecties\r\n        .filter(r => r.pijn_score !== undefined)\r\n        .map(r => ({ score: r.pijn_score as number, date: new Date(r.datum) }))\r\n        .sort((a, b) => a.date.getTime() - b.date.getTime());\r\n      \r\n      if (painScores.length >= 3) {\r\n        // Calculate trend\r\n        let increasing = 0;\r\n        let decreasing = 0;\r\n        let fluctuating = 0;\r\n        \r\n        for (let i = 1; i < painScores.length; i++) {\r\n          const diff = painScores[i].score - painScores[i-1].score;\r\n          if (diff > 2) increasing++;\r\n          else if (diff < -2) decreasing++;\r\n          else fluctuating++;\r\n        }\r\n        \r\n        // Determine pattern type\r\n        let patternType: 'increasing' | 'decreasing' | 'fluctuating' | 'stable' = 'stable';\r\n        let severity: 'mild' | 'moderate' | 'severe' = 'mild';\r\n        let description = '';\r\n        \r\n        if (increasing > decreasing && increasing > fluctuating) {\r\n          patternType = 'increasing';\r\n          description = 'Uw pijnscores vertonen een stijgende trend over de afgelopen periode.';\r\n        } else if (decreasing > increasing && decreasing > fluctuating) {\r\n          patternType = 'decreasing';\r\n          description = 'Uw pijnscores vertonen een dalende trend over de afgelopen periode.';\r\n        } else if (fluctuating > 0) {\r\n          patternType = 'fluctuating';\r\n          description = 'Uw pijnscores fluctueren over de afgelopen periode.';\r\n        } else {\r\n          description = 'Uw pijnscores zijn relatief stabiel over de afgelopen periode.';\r\n        }\r\n        \r\n        // Determine severity\r\n        const avgPain = painScores.reduce((sum, item) => sum + item.score, 0) / painScores.length;\r\n        if (avgPain > 15) {\r\n          severity = 'severe';\r\n          description += ' De gemiddelde pijnscore is hoog.';\r\n        } else if (avgPain > 10) {\r\n          severity = 'moderate';\r\n          description += ' De gemiddelde pijnscore is matig.';\r\n        } else {\r\n          description += ' De gemiddelde pijnscore is mild.';\r\n        }\r\n        \r\n        patterns.push({\r\n          userId,\r\n          patternType,\r\n          symptomType: 'pain',\r\n          severity,\r\n          timeframe,\r\n          description,\r\n          confidence: 0.8\r\n        });\r\n      }\r\n    }\r\n    \r\n    return patterns;\r\n  }\r\n  \r\n  /**\r\n   * Generates insights based on user data\r\n   */\r\n  private static async generateInsights(\r\n    userId: string,\r\n    taskLogs: TaskLog[],\r\n    reflecties: Reflectie[],\r\n    timeframe: 'day' | 'week' | 'month'\r\n  ): Promise<AIInsight[]> {\r\n    const insights: AIInsight[] = [];\r\n    \r\n    // Check if we have enough data\r\n    if (taskLogs.length === 0 && reflecties.length === 0) {\r\n      return insights;\r\n    }\r\n    \r\n    // Analyze correlation between task duration and pain/fatigue\r\n    if (taskLogs.length >= 5) {\r\n      const tasksWithDuration = taskLogs.filter(log => \r\n        log.eind_tijd !== null && \r\n        log.start_tijd !== null && \r\n        log.pijn_score !== null\r\n      );\r\n      \r\n      if (tasksWithDuration.length >= 3) {\r\n        // Calculate durations\r\n        const tasksWithMetrics = tasksWithDuration.map(log => {\r\n          const start = new Date(log.start_tijd);\r\n          const end = new Date(log.eind_tijd as string);\r\n          const durationMinutes = (end.getTime() - start.getTime()) / (1000 * 60);\r\n          \r\n          return {\r\n            duration: durationMinutes,\r\n            painScore: log.pijn_score as number,\r\n            fatigueScore: log.vermoeidheid_score as number,\r\n            log\r\n          };\r\n        });\r\n        \r\n        // Check for correlation between duration and pain\r\n        const longTasks = tasksWithMetrics.filter(t => t.duration > 30);\r\n        const shortTasks = tasksWithMetrics.filter(t => t.duration <= 30);\r\n        \r\n        if (longTasks.length >= 2 && shortTasks.length >= 2) {\r\n          const avgPainLong = longTasks.reduce((sum, t) => sum + t.painScore, 0) / longTasks.length;\r\n          const avgPainShort = shortTasks.reduce((sum, t) => sum + t.painScore, 0) / shortTasks.length;\r\n          \r\n          const painDiff = avgPainLong - avgPainShort;\r\n          \r\n          if (Math.abs(painDiff) >= 2) {\r\n            const insightType: 'correlation' | 'trend' | 'recommendation' | 'warning' = \r\n              painDiff > 0 ? 'warning' : 'correlation';\r\n            \r\n            const description = painDiff > 0 \r\n              ? 'Langere activiteiten (>30 min) lijken samen te hangen met hogere pijnscores. Overweeg om activiteiten op te delen in kortere sessies.'\r\n              : 'Kortere activiteiten (≤30 min) lijken samen te hangen met lagere pijnscores. Dit is een positief patroon om voort te zetten.';\r\n            \r\n            insights.push({\r\n              userId,\r\n              title: painDiff > 0 ? 'Pijn en activiteitsduur' : 'Positief effect van kortere activiteiten',\r\n              description,\r\n              insightType,\r\n              relevantData: {\r\n                taskLogs: tasksWithDuration\r\n              },\r\n              suggestedActions: painDiff > 0 \r\n                ? ['Deel langere activiteiten op in kortere sessies', 'Plan vaker pauzes in', 'Wissel activiteiten af'] \r\n                : ['Blijf activiteiten opdelen in kortere sessies', 'Houd dit patroon aan'],\r\n              confidence: 0.75\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    return insights;\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\utils\\ai.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\utils\\api-validation.ts","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":46,"fix":{"range":[45,45],"text":"\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ReflectieFormData' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":27},{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'ReflectieFormData' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":27,"fix":{"range":[55,74],"text":""}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TaskLog' is defined but never used.","line":2,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":36},{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'TaskLog' is defined but never used.","line":2,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":36,"fix":{"range":[73,82],"text":""}}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":3,"fixableWarningCount":0,"source":"import { z, ZodError, ZodSchema } from 'zod';\r\nimport { ReflectieFormData, TaskLog } from '@/types';\r\n\r\n/**\r\n * Validates and sanitizes API input data using Zod schemas.\r\n * This function provides a consistent way to validate and sanitize input data\r\n * across all API routes, with detailed error messages.\r\n * \r\n * @param data The unknown input data to validate\r\n * @param schema The Zod schema to validate against\r\n * @returns An object with either the validated data or an error message\r\n * \r\n * @example\r\n * // Define a schema\r\n * const userSchema = z.object({\r\n *   name: z.string().min(2).max(50),\r\n *   email: z.string().email(),\r\n *   age: z.number().int().positive().optional()\r\n * });\r\n * \r\n * // Validate input\r\n * const { data, error } = validateAndSanitizeApiInput(req.body, userSchema);\r\n * if (error) {\r\n *   return NextResponse.json(formatApiError(400, error), { status: 400 });\r\n * }\r\n * // Use validated data\r\n * const user = data;\r\n */\r\nexport function validateAndSanitizeApiInput<T>(\r\n  data: unknown, \r\n  schema: ZodSchema<T>\r\n): { data: T | null; error: string | null } {\r\n  try {\r\n    const validatedData = schema.parse(data);\r\n    return { data: validatedData, error: null };\r\n  } catch (error) {\r\n    if (error instanceof ZodError) {\r\n      const errorMessage = error.errors.map(e => \r\n        `${e.path.join('.') || 'input'}: ${e.message}`\r\n      ).join('; ');\r\n      return { data: null, error: errorMessage };\r\n    }\r\n    // Catch other unexpected errors\r\n    console.error(\"Validation error (non-Zod):\", error);\r\n    return { data: null, error: 'Invalid input data due to an unexpected error.' };\r\n  }\r\n}\r\n\r\n/**\r\n * Common Zod schemas for reuse across the application\r\n */\r\nexport const commonSchemas = {\r\n  /**\r\n   * Schema for validating date strings in ISO format (YYYY-MM-DD)\r\n   */\r\n  isoDateString: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, {\r\n    message: \"Date must be in ISO format (YYYY-MM-DD)\"\r\n  }),\r\n\r\n  /**\r\n   * Schema for validating score ranges (0-20)\r\n   */\r\n  scoreRange: z.number().int().min(0).max(20).optional(),\r\n\r\n  /**\r\n   * Schema for validating UUIDs\r\n   */\r\n  uuid: z.string().uuid({\r\n    message: \"Invalid UUID format\"\r\n  }),\r\n\r\n  /**\r\n   * Schema for validating email addresses\r\n   */\r\n  email: z.string().email({\r\n    message: \"Invalid email address\"\r\n  }),\r\n\r\n  /**\r\n   * Schema for validating pagination parameters\r\n   */\r\n  pagination: z.object({\r\n    limit: z.number().int().positive().default(20),\r\n    offset: z.number().int().nonnegative().default(0)\r\n  }).optional()\r\n};\r\n\r\n/**\r\n * Specific schemas for different API endpoints\r\n */\r\nexport const apiSchemas = {\r\n  /**\r\n   * Schema for validating reflectie input\r\n   */\r\n  reflectie: z.object({\r\n    datum: commonSchemas.isoDateString,\r\n    stemming: z.string().optional(),\r\n    notitie: z.string().optional(),\r\n    pijn_score: commonSchemas.scoreRange,\r\n    vermoeidheid_score: commonSchemas.scoreRange\r\n  }),\r\n\r\n  /**\r\n   * Schema for validating task log input\r\n   */\r\n  taskLog: z.object({\r\n    task_id: commonSchemas.uuid,\r\n    start_tijd: z.string().datetime({\r\n      message: \"Start tijd moet een geldige ISO datetime string zijn\"\r\n    }),\r\n    eind_tijd: z.string().datetime({\r\n      message: \"Eind tijd moet een geldige ISO datetime string zijn\"\r\n    }).optional(),\r\n    energie_voor: commonSchemas.scoreRange,\r\n    energie_na: commonSchemas.scoreRange,\r\n    pijn_score: commonSchemas.scoreRange,\r\n    vermoeidheid_score: commonSchemas.scoreRange,\r\n    stemming: z.string().optional(),\r\n    hartslag: z.number().int().positive().optional(),\r\n    notitie: z.string().optional()\r\n  }),\r\n  \r\n  /**\r\n   * Schema for validating task log creation (minimal required fields)\r\n   */\r\n  taskLogCreate: z.object({\r\n    task_id: commonSchemas.uuid,\r\n    start_tijd: z.string().datetime({\r\n      message: \"Start tijd moet een geldige ISO datetime string zijn\"\r\n    }),\r\n    energie_voor: commonSchemas.scoreRange.optional()\r\n  })\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\utils\\changelog.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":101,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":101,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3251,3310],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Changelog System for FibroGuardian Pro\r\n * \r\n * This module provides a structured way to track changes to the system,\r\n * including features, improvements, bugfixes, and optimizations.\r\n * It helps maintain a clear history of modifications and their impact.\r\n */\r\n\r\nexport type ChangeCategory = 'ai' | 'frontend' | 'backend' | 'security' | 'performance' | 'ux' | 'database';\r\nexport type ChangeType = 'feature' | 'improvement' | 'bugfix' | 'optimization' | 'refactor' | 'security';\r\nexport type ChangeImpact = 'low' | 'medium' | 'high' | 'critical';\r\n\r\nexport interface ChangelogEntry {\r\n  version: string;\r\n  timestamp: Date;\r\n  category: ChangeCategory;\r\n  type: ChangeType;\r\n  description: string;\r\n  impact: ChangeImpact;\r\n  tested: boolean;\r\n  rollbackPlan?: string;\r\n  author?: string;\r\n  prNumber?: number;\r\n  relatedIssues?: string[];\r\n}\r\n\r\n/**\r\n * The main changelog array containing all changes to the system\r\n */\r\nexport const changelog: ChangelogEntry[] = [\r\n  {\r\n    version: '2.0.0',\r\n    timestamp: new Date('2025-05-22T11:00:00'),\r\n    category: 'ai',\r\n    type: 'feature',\r\n    description: 'Geïmplementeerd modulaire AI-architectuur met AI Assistant, Recommendations en Knowledge Management',\r\n    impact: 'high',\r\n    tested: true,\r\n    rollbackPlan: 'Terug naar v1.5.2 AI-service',\r\n    author: 'AI Team',\r\n    relatedIssues: ['AI-001', 'AI-002', 'AI-003']\r\n  },\r\n  {\r\n    version: '2.0.0',\r\n    timestamp: new Date('2025-05-22T11:30:00'),\r\n    category: 'frontend',\r\n    type: 'feature',\r\n    description: 'Specialist Intelligence Dashboard toegevoegd met predictieve analyses en behandeleffectiviteit',\r\n    impact: 'high',\r\n    tested: true,\r\n    rollbackPlan: 'Verwijder dashboard componenten en routes',\r\n    author: 'Frontend Team',\r\n    relatedIssues: ['FE-042', 'AI-004']\r\n  },\r\n  {\r\n    version: '2.0.0',\r\n    timestamp: new Date('2025-05-22T10:15:00'),\r\n    category: 'backend',\r\n    type: 'feature',\r\n    description: 'AI Recommendations API endpoints geïmplementeerd met Zod validatie',\r\n    impact: 'medium',\r\n    tested: true,\r\n    rollbackPlan: 'Verwijder API routes en database tabellen',\r\n    author: 'Backend Team',\r\n    relatedIssues: ['BE-078', 'AI-005']\r\n  },\r\n  {\r\n    version: '2.0.0',\r\n    timestamp: new Date('2025-05-22T09:45:00'),\r\n    category: 'database',\r\n    type: 'feature',\r\n    description: 'Nieuwe database tabellen voor expert_knowledge en ai_recommendations',\r\n    impact: 'high',\r\n    tested: true,\r\n    rollbackPlan: 'Uitvoeren van rollback migratie script',\r\n    author: 'Database Team',\r\n    relatedIssues: ['DB-034', 'AI-006']\r\n  },\r\n  {\r\n    version: '2.0.0',\r\n    timestamp: new Date('2025-05-22T10:30:00'),\r\n    category: 'security',\r\n    type: 'improvement',\r\n    description: 'Row Level Security policies toegevoegd voor AI-gerelateerde tabellen',\r\n    impact: 'high',\r\n    tested: true,\r\n    rollbackPlan: 'Verwijder RLS policies',\r\n    author: 'Security Team',\r\n    relatedIssues: ['SEC-012', 'DB-035']\r\n  }\r\n];\r\n\r\n/**\r\n * Add a new entry to the changelog\r\n * @param entry The changelog entry to add\r\n */\r\nexport function addChangelogEntry(entry: ChangelogEntry): void {\r\n  changelog.push(entry);\r\n  \r\n  // In a real implementation, this would save to a database or file\r\n  console.log(`Added changelog entry: ${entry.description}`);\r\n}\r\n\r\n/**\r\n * Get all changelog entries for a specific version\r\n * @param version The version to filter by\r\n * @returns Array of changelog entries for the specified version\r\n */\r\nexport function getChangelogForVersion(version: string): ChangelogEntry[] {\r\n  return changelog.filter(entry => entry.version === version);\r\n}\r\n\r\n/**\r\n * Get all changelog entries for a specific category\r\n * @param category The category to filter by\r\n * @returns Array of changelog entries for the specified category\r\n */\r\nexport function getChangelogByCategory(category: ChangeCategory): ChangelogEntry[] {\r\n  return changelog.filter(entry => entry.category === category);\r\n}\r\n\r\n/**\r\n * Get all changelog entries with a specific impact level or higher\r\n * @param minImpact The minimum impact level to filter by\r\n * @returns Array of changelog entries with the specified impact level or higher\r\n */\r\nexport function getChangelogByImpact(minImpact: ChangeImpact): ChangelogEntry[] {\r\n  const impactLevels: Record<ChangeImpact, number> = {\r\n    'low': 1,\r\n    'medium': 2,\r\n    'high': 3,\r\n    'critical': 4\r\n  };\r\n  \r\n  const minImpactLevel = impactLevels[minImpact];\r\n  \r\n  return changelog.filter(entry => impactLevels[entry.impact] >= minImpactLevel);\r\n}\r\n\r\n/**\r\n * Format a changelog entry for display\r\n * @param entry The changelog entry to format\r\n * @returns Formatted string representation of the changelog entry\r\n */\r\nexport function formatChangelogEntry(entry: ChangelogEntry): string {\r\n  const date = entry.timestamp.toLocaleDateString('nl-NL', {\r\n    year: 'numeric',\r\n    month: 'long',\r\n    day: 'numeric'\r\n  });\r\n  \r\n  const time = entry.timestamp.toLocaleTimeString('nl-NL', {\r\n    hour: '2-digit',\r\n    minute: '2-digit'\r\n  });\r\n  \r\n  const impactBadge = {\r\n    'low': '🟢',\r\n    'medium': '🟡',\r\n    'high': '🟠',\r\n    'critical': '🔴'\r\n  }[entry.impact];\r\n  \r\n  const typeBadge = {\r\n    'feature': '✨',\r\n    'improvement': '⚡',\r\n    'bugfix': '🐛',\r\n    'optimization': '🚀',\r\n    'refactor': '♻️',\r\n    'security': '🔒'\r\n  }[entry.type];\r\n  \r\n  return `${impactBadge} ${typeBadge} [${entry.version}] ${date} ${time} - ${entry.description}`;\r\n}\r\n\r\n/**\r\n * Generate a full changelog report\r\n * @param sortByDate Whether to sort entries by date (default: true)\r\n * @returns Formatted string containing the full changelog\r\n */\r\nexport function generateChangelogReport(sortByDate = true): string {\r\n  const entries = [...changelog];\r\n  \r\n  if (sortByDate) {\r\n    entries.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\r\n  }\r\n  \r\n  const formattedEntries = entries.map(formatChangelogEntry);\r\n  \r\n  return `# FibroGuardian Pro Changelog\\n\\n${formattedEntries.join('\\n')}`;\r\n}\r\n\r\n/**\r\n * Check if a rollback is possible for a specific version\r\n * @param version The version to check\r\n * @returns True if all entries for the version have rollback plans\r\n */\r\nexport function canRollbackVersion(version: string): boolean {\r\n  const versionEntries = getChangelogForVersion(version);\r\n  \r\n  if (versionEntries.length === 0) {\r\n    return false;\r\n  }\r\n  \r\n  return versionEntries.every(entry => !!entry.rollbackPlan);\r\n}\r\n\r\n/**\r\n * Generate a rollback plan for a specific version\r\n * @param version The version to generate a rollback plan for\r\n * @returns Formatted string containing the rollback plan\r\n */\r\nexport function generateRollbackPlan(version: string): string {\r\n  const versionEntries = getChangelogForVersion(version);\r\n  \r\n  if (versionEntries.length === 0) {\r\n    return `No entries found for version ${version}`;\r\n  }\r\n  \r\n  if (!canRollbackVersion(version)) {\r\n    return `Cannot generate rollback plan for version ${version} - some entries are missing rollback plans`;\r\n  }\r\n  \r\n  // Sort entries in reverse order of impact\r\n  const sortedEntries = [...versionEntries].sort((a, b) => {\r\n    const impactLevels: Record<ChangeImpact, number> = {\r\n      'low': 1,\r\n      'medium': 2,\r\n      'high': 3,\r\n      'critical': 4\r\n    };\r\n    \r\n    return impactLevels[b.impact] - impactLevels[a.impact];\r\n  });\r\n  \r\n  const rollbackSteps = sortedEntries.map((entry, index) => {\r\n    return `${index + 1}. ${entry.description}\\n   - ${entry.rollbackPlan}`;\r\n  });\r\n  \r\n  return `# Rollback Plan for Version ${version}\\n\\n${rollbackSteps.join('\\n\\n')}`;\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\utils\\email-templates.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'data' should be typed with a non-any type.","line":41,"column":3,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":41,"endColumn":12},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":41,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1200,1203],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1200,1203],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1985,1988],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1985,1988],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// utils/email-templates.ts\r\n\r\n// Definieer een interface voor de data die elke template verwacht\r\n// Dit helpt bij type-safety wanneer je de templates gebruikt.\r\nexport interface WelcomeEmailData {\r\n  firstName: string;\r\n  userType: 'patient' | 'specialist';\r\n  dashboardUrl: string;\r\n  supportEmail: string;\r\n  logoUrl: string;\r\n  companyName: string;\r\n  year: number;\r\n  preferencesUrl: string;\r\n  privacyUrl: string;\r\n}\r\n\r\n// Voeg hier interfaces toe voor andere email data types\r\n// export interface OnboardingTaskEmailData { ... }\r\n// export interface SpecialistInvitationEmailData { ... }\r\n\r\nexport enum EmailTemplate {\r\n  WELCOME = 'welcome',\r\n  // ONBOARDING_TASK = 'onboarding_task',\r\n  // ONBOARDING_SYMPTOM = 'onboarding_symptom',\r\n  // SPECIALIST_INVITATION = 'specialist_invitation',\r\n  // SUBSCRIPTION_CONFIRMATION = 'subscription_confirmation',\r\n  // SUBSCRIPTION_RENEWAL = 'subscription_renewal',\r\n  // FEATURE_ANNOUNCEMENT = 'feature_announcement',\r\n}\r\n\r\nexport interface EmailContent {\r\n  html: string;\r\n  text: string;\r\n}\r\n\r\n/**\r\n * Genereert HTML en tekst voor e-mails op basis van een template en data\r\n */\r\nexport function getEmailContent(\r\n  template: EmailTemplate,\r\n  data: any // Gebruik 'any' voor nu, of een union type van alle specifieke data interfaces\r\n): EmailContent {\r\n  switch (template) {\r\n    case EmailTemplate.WELCOME:\r\n      // Type guard om zeker te zijn dat data het juiste formaat heeft\r\n      if (isWelcomeEmailData(data)) {\r\n        return generateWelcomeEmail(data);\r\n      }\r\n      throw new Error(`Ongeldige data voor WELCOME template.`);\r\n    // Voeg hier cases toe voor andere templates\r\n    // case EmailTemplate.ONBOARDING_TASK:\r\n    //   return generateOnboardingTaskEmail(data as OnboardingTaskEmailData);\r\n    default:\r\n      console.error(`Onbekende e-mailtemplate: ${template}`);\r\n      throw new Error(`Onbekende e-mailtemplate: ${template}`);\r\n  }\r\n}\r\n\r\n// Type guard voor WelcomeEmailData\r\nfunction isWelcomeEmailData(data: any): data is WelcomeEmailData {\r\n  return (\r\n    typeof data.firstName === 'string' &&\r\n    (data.userType === 'patient' || data.userType === 'specialist') &&\r\n    typeof data.dashboardUrl === 'string' &&\r\n    typeof data.supportEmail === 'string' &&\r\n    typeof data.logoUrl === 'string' &&\r\n    typeof data.companyName === 'string' &&\r\n    typeof data.year === 'number' &&\r\n    typeof data.preferencesUrl === 'string' &&\r\n    typeof data.privacyUrl === 'string'\r\n  );\r\n}\r\n\r\n\r\nfunction generateWelcomeEmail(data: WelcomeEmailData): EmailContent {\r\n  const { \r\n    firstName, userType, dashboardUrl, supportEmail, \r\n    logoUrl, companyName, year, preferencesUrl, privacyUrl \r\n  } = data;\r\n  \r\n  const patientTips = `\r\n    <li><strong>Voltooi je profiel:</strong> Zorg dat je profiel compleet is voor de beste ervaring.</li>\r\n    <li><strong>Maak je eerste taak aan:</strong> Begin met het plannen van activiteiten en het bijhouden van symptomen.</li>\r\n    <li><strong>Verbind met een specialist:</strong> Nodig je zorgverlener uit om je voortgang te volgen.</li>\r\n  `;\r\n  const specialistTips = `\r\n    <li><strong>Voltooi je praktijkprofiel:</strong> Zorg dat je praktijkgegevens compleet zijn.</li>\r\n    <li><strong>Nodig patiënten uit:</strong> Begin met het uitnodigen van patiënten om je te verbinden.</li>\r\n    <li><strong>Verken de dashboards:</strong> Ontdek hoe je patiëntgegevens kunt monitoren en analyseren.</li>\r\n  `;\r\n\r\n  const html = `\r\n<!DOCTYPE html>\r\n<html lang=\"nl\">\r\n<head>\r\n  <meta charset=\"utf-8\">\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n  <title>Welkom bij ${companyName}</title>\r\n  <style>\r\n    body { font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"; line-height: 1.6; color: #374151; background-color: #f9fafb; margin: 0; padding: 0; }\r\n    .email-container { max-width: 600px; margin: 40px auto; padding: 20px; background-color: #ffffff; border: 1px solid #e5e7eb; border-radius: 8px; }\r\n    .header { text-align: center; margin-bottom: 30px; padding-bottom: 20px; border-bottom: 1px solid #e5e7eb;}\r\n    .logo { max-width: 180px; height: auto; }\r\n    h1 { color: #4f46e5; font-size: 24px; margin-top: 0; }\r\n    p { margin-bottom: 16px; font-size: 16px; }\r\n    ul { margin-bottom: 16px; padding-left: 20px; }\r\n    li { margin-bottom: 8px; }\r\n    .button-container { text-align: center; margin: 30px 0; }\r\n    .button { display: inline-block; background-color: #4f46e5; color: white !important; text-decoration: none; padding: 12px 25px; border-radius: 6px; font-weight: 600; font-size: 16px; }\r\n    .footer { margin-top: 40px; font-size: 12px; color: #6b7280; text-align: center; padding-top: 20px; border-top: 1px solid #e5e7eb; }\r\n    .footer a { color: #4f46e5; text-decoration: none; }\r\n  </style>\r\n</head>\r\n<body>\r\n  <div class=\"email-container\">\r\n    <div class=\"header\">\r\n      <img src=\"${logoUrl}\" alt=\"${companyName} Logo\" class=\"logo\">\r\n    </div>\r\n    \r\n    <h1>Welkom bij ${companyName}, ${firstName}!</h1>\r\n    \r\n    <p>Bedankt voor het aanmaken van je account. We zijn blij dat je hebt gekozen voor ${companyName} om ${\r\n      userType === 'patient' \r\n        ? 'je fibromyalgie symptomen te beheren.' \r\n        : 'je patiënten met fibromyalgie te begeleiden.'\r\n    }</p>\r\n    \r\n    <p>Hier zijn enkele snelle tips om je op weg te helpen:</p>\r\n    \r\n    <ul>\r\n      ${userType === 'patient' ? patientTips : specialistTips}\r\n    </ul>\r\n    \r\n    <div class=\"button-container\">\r\n      <a href=\"${dashboardUrl}\" class=\"button\">Ga naar je Dashboard</a>\r\n    </div>\r\n    \r\n    <p>Als je vragen hebt, aarzel dan niet om contact op te nemen met ons ondersteuningsteam via <a href=\"mailto:${supportEmail}\">${supportEmail}</a>.</p>\r\n    \r\n    <p>Met vriendelijke groet,<br>\r\n    Het ${companyName} Team</p>\r\n    \r\n    <div class=\"footer\">\r\n      <p>© ${year} ${companyName}. Alle rechten voorbehouden.</p>\r\n      <p>Je ontvangt deze e-mail omdat je een account hebt aangemaakt bij ${companyName}.</p>\r\n      <p><a href=\"${preferencesUrl}\">E-mailvoorkeuren beheren</a> | <a href=\"${privacyUrl}\">Privacybeleid</a></p>\r\n    </div>\r\n  </div>\r\n</body>\r\n</html>`;\r\n  \r\n  const text = `\r\nWelkom bij ${companyName}, ${firstName}!\r\n\r\nBedankt voor het aanmaken van je account. We zijn blij dat je hebt gekozen voor ${companyName} om ${\r\n  userType === 'patient' \r\n    ? 'je fibromyalgie symptomen te beheren.' \r\n    : 'je patiënten met fibromyalgie te begeleiden.'\r\n}\r\n\r\nHier zijn enkele snelle tips om je op weg te helpen:\r\n${userType === 'patient' ? \r\n  `- Voltooi je profiel\\n- Maak je eerste taak aan\\n- Verbind met een specialist` : \r\n  `- Voltooi je praktijkprofiel\\n- Nodig patiënten uit\\n- Verken de dashboards`\r\n}\r\n\r\nGa naar je Dashboard: ${dashboardUrl}\r\n\r\nAls je vragen hebt, neem contact op via ${supportEmail}.\r\n\r\nMet vriendelijke groet,\r\nHet ${companyName} Team\r\n\r\n© ${year} ${companyName}. Alle rechten voorbehouden.\r\nE-mailvoorkeuren: ${preferencesUrl} | Privacy: ${privacyUrl}\r\n  `;\r\n  \r\n  return { html, text };\r\n}\r\n\r\n// Implementeer hier de andere generate...Email functies\r\n// function generateOnboardingTaskEmail(data: OnboardingTaskEmailData): EmailContent { ... }\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\utils\\error-handling.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\utils\\memoize.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\utils\\schemas\\aiSchemas.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\utils\\schemas\\taskSchema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\utils\\service-worker.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":9,"column":44,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":9,"endColumn":46},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":25,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":25,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[732,801],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":29,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":29,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[898,956],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":39,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":39,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1212,1263],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":43,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":43,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1426,1486],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":54,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":54,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1756,1822],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":77,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":77,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2401,2458],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":98,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":98,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2907,2961],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":111,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":111,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3446,3525],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":125,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":125,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3852,3890],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":130,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":130,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3956,3995],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":348,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":348,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10161,10224],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":365,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":365,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10669,10728],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":373,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":373,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10922,10990],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Service Worker Registration Utility\r\n * \r\n * This utility handles the registration and management of the service worker\r\n * for offline support and caching in FibroGuardian Pro.\r\n */\r\n\r\n// Check if service workers are supported\r\nexport const isServiceWorkerSupported = () => {\r\n  return 'serviceWorker' in navigator;\r\n};\r\n\r\n// Register the service worker\r\nexport const registerServiceWorker = async (): Promise<ServiceWorkerRegistration | null> => {\r\n  if (!isServiceWorkerSupported()) {\r\n    console.warn('Service workers are not supported in this browser.');\r\n    return null;\r\n  }\r\n  \r\n  try {\r\n    const registration = await navigator.serviceWorker.register('/service-worker.js', {\r\n      scope: '/'\r\n    });\r\n    \r\n    console.log('Service Worker registered successfully:', registration);\r\n    \r\n    // Check if there's a waiting service worker\r\n    if (registration.waiting) {\r\n      console.log('New Service Worker is waiting to activate.');\r\n      notifyUserOfUpdate(registration);\r\n    }\r\n    \r\n    // Listen for new service workers\r\n    registration.addEventListener('updatefound', () => {\r\n      const newWorker = registration.installing;\r\n      \r\n      if (!newWorker) return;\r\n      \r\n      console.log('New Service Worker is installing...');\r\n      \r\n      newWorker.addEventListener('statechange', () => {\r\n        if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\r\n          console.log('New Service Worker is installed and waiting.');\r\n          notifyUserOfUpdate(registration);\r\n        }\r\n      });\r\n    });\r\n    \r\n    // Listen for controller changes\r\n    let refreshing = false;\r\n    navigator.serviceWorker.addEventListener('controllerchange', () => {\r\n      if (refreshing) return;\r\n      \r\n      console.log('New Service Worker is activated, reloading page...');\r\n      refreshing = true;\r\n      window.location.reload();\r\n    });\r\n    \r\n    return registration;\r\n  } catch (error) {\r\n    console.error('Service Worker registration failed:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// Unregister all service workers\r\nexport const unregisterServiceWorkers = async (): Promise<boolean> => {\r\n  if (!isServiceWorkerSupported()) {\r\n    return false;\r\n  }\r\n  \r\n  try {\r\n    const registrations = await navigator.serviceWorker.getRegistrations();\r\n    \r\n    for (const registration of registrations) {\r\n      await registration.unregister();\r\n      console.log('Service Worker unregistered successfully.');\r\n    }\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Service Worker unregistration failed:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Update the service worker\r\nexport const updateServiceWorker = async (): Promise<void> => {\r\n  if (!isServiceWorkerSupported()) {\r\n    return;\r\n  }\r\n  \r\n  try {\r\n    const registration = await navigator.serviceWorker.ready;\r\n    \r\n    // Check for updates\r\n    await registration.update();\r\n    console.log('Service Worker update check completed.');\r\n  } catch (error) {\r\n    console.error('Service Worker update check failed:', error);\r\n  }\r\n};\r\n\r\n// Notify the user of a service worker update\r\nconst notifyUserOfUpdate = (registration: ServiceWorkerRegistration): void => {\r\n  // Create a custom event that can be listened to by the application\r\n  const event = new CustomEvent('serviceWorkerUpdateReady', { detail: registration });\r\n  window.dispatchEvent(event);\r\n  \r\n  // You could also show a notification or UI element here\r\n  console.log('New version of the application is available. Refresh to update.');\r\n};\r\n\r\n// Check if the user is online\r\nexport const isOnline = (): boolean => {\r\n  return navigator.onLine;\r\n};\r\n\r\n// Listen for online/offline events\r\nexport const setupOnlineOfflineListeners = (\r\n  onOnline: () => void = () => {},\r\n  onOffline: () => void = () => {}\r\n): () => void => {\r\n  const handleOnline = () => {\r\n    console.log('Application is online.');\r\n    onOnline();\r\n  };\r\n  \r\n  const handleOffline = () => {\r\n    console.log('Application is offline.');\r\n    onOffline();\r\n  };\r\n  \r\n  window.addEventListener('online', handleOnline);\r\n  window.addEventListener('offline', handleOffline);\r\n  \r\n  // Return a cleanup function\r\n  return () => {\r\n    window.removeEventListener('online', handleOnline);\r\n    window.removeEventListener('offline', handleOffline);\r\n  };\r\n};\r\n\r\n// Define types for offline data\r\nexport interface OfflineData {\r\n  [key: string]: unknown;\r\n}\r\n\r\n// Store data in IndexedDB for offline use\r\nexport const storeOfflineData = async (\r\n  storeName: string,\r\n  data: OfflineData,\r\n  id?: string\r\n): Promise<string> => {\r\n  return new Promise((resolve, reject) => {\r\n    const dbName = 'fibroguardian-offline-db';\r\n    const request = indexedDB.open(dbName, 1);\r\n    \r\n    request.onerror = () => {\r\n      reject(new Error('Failed to open IndexedDB.'));\r\n    };\r\n    \r\n    request.onupgradeneeded = (event) => {\r\n      const db = (event.target as IDBOpenDBRequest).result;\r\n      \r\n      if (!db.objectStoreNames.contains(storeName)) {\r\n        db.createObjectStore(storeName, { keyPath: 'id' });\r\n      }\r\n    };\r\n    \r\n    request.onsuccess = (event) => {\r\n      const db = (event.target as IDBOpenDBRequest).result;\r\n      const transaction = db.transaction(storeName, 'readwrite');\r\n      const store = transaction.objectStore(storeName);\r\n      \r\n      // Generate a unique ID if not provided\r\n      const itemId = id || `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\r\n      \r\n      const item = {\r\n        id: itemId,\r\n        data,\r\n        timestamp: Date.now()\r\n      };\r\n      \r\n      const storeRequest = store.put(item);\r\n      \r\n      storeRequest.onerror = () => {\r\n        reject(new Error('Failed to store data in IndexedDB.'));\r\n      };\r\n      \r\n      storeRequest.onsuccess = () => {\r\n        resolve(itemId);\r\n      };\r\n      \r\n      transaction.oncomplete = () => {\r\n        db.close();\r\n      };\r\n    };\r\n  });\r\n};\r\n\r\n// Retrieve data from IndexedDB\r\nexport const getOfflineData = async (\r\n  storeName: string,\r\n  id: string\r\n): Promise<OfflineData | null> => {\r\n  return new Promise((resolve, reject) => {\r\n    const dbName = 'fibroguardian-offline-db';\r\n    const request = indexedDB.open(dbName, 1);\r\n    \r\n    request.onerror = () => {\r\n      reject(new Error('Failed to open IndexedDB.'));\r\n    };\r\n    \r\n    request.onsuccess = (event) => {\r\n      const db = (event.target as IDBOpenDBRequest).result;\r\n      \r\n      if (!db.objectStoreNames.contains(storeName)) {\r\n        resolve(null);\r\n        return;\r\n      }\r\n      \r\n      const transaction = db.transaction(storeName, 'readonly');\r\n      const store = transaction.objectStore(storeName);\r\n      const getRequest = store.get(id);\r\n      \r\n      getRequest.onerror = () => {\r\n        reject(new Error('Failed to retrieve data from IndexedDB.'));\r\n      };\r\n      \r\n      getRequest.onsuccess = (event) => {\r\n        const result = (event.target as IDBRequest).result;\r\n        resolve(result ? result.data : null);\r\n      };\r\n      \r\n      transaction.oncomplete = () => {\r\n        db.close();\r\n      };\r\n    };\r\n  });\r\n};\r\n\r\n// Get all offline data from a store\r\nexport const getAllOfflineData = async (\r\n  storeName: string\r\n): Promise<OfflineData[]> => {\r\n  return new Promise((resolve, reject) => {\r\n    const dbName = 'fibroguardian-offline-db';\r\n    const request = indexedDB.open(dbName, 1);\r\n    \r\n    request.onerror = () => {\r\n      reject(new Error('Failed to open IndexedDB.'));\r\n    };\r\n    \r\n    request.onsuccess = (event) => {\r\n      const db = (event.target as IDBOpenDBRequest).result;\r\n      \r\n      if (!db.objectStoreNames.contains(storeName)) {\r\n        resolve([]);\r\n        return;\r\n      }\r\n      \r\n      const transaction = db.transaction(storeName, 'readonly');\r\n      const store = transaction.objectStore(storeName);\r\n      const getAllRequest = store.getAll();\r\n      \r\n      getAllRequest.onerror = () => {\r\n        reject(new Error('Failed to retrieve data from IndexedDB.'));\r\n      };\r\n      \r\n      getAllRequest.onsuccess = (event) => {\r\n        const results = (event.target as IDBRequest).result;\r\n        resolve(results.map((item: { data: OfflineData }) => item.data));\r\n      };\r\n      \r\n      transaction.oncomplete = () => {\r\n        db.close();\r\n      };\r\n    };\r\n  });\r\n};\r\n\r\n// Delete data from IndexedDB\r\nexport const deleteOfflineData = async (\r\n  storeName: string,\r\n  id: string\r\n): Promise<boolean> => {\r\n  return new Promise((resolve, reject) => {\r\n    const dbName = 'fibroguardian-offline-db';\r\n    const request = indexedDB.open(dbName, 1);\r\n    \r\n    request.onerror = () => {\r\n      reject(new Error('Failed to open IndexedDB.'));\r\n    };\r\n    \r\n    request.onsuccess = (event) => {\r\n      const db = (event.target as IDBOpenDBRequest).result;\r\n      \r\n      if (!db.objectStoreNames.contains(storeName)) {\r\n        resolve(false);\r\n        return;\r\n      }\r\n      \r\n      const transaction = db.transaction(storeName, 'readwrite');\r\n      const store = transaction.objectStore(storeName);\r\n      const deleteRequest = store.delete(id);\r\n      \r\n      deleteRequest.onerror = () => {\r\n        reject(new Error('Failed to delete data from IndexedDB.'));\r\n      };\r\n      \r\n      deleteRequest.onsuccess = () => {\r\n        resolve(true);\r\n      };\r\n      \r\n      transaction.oncomplete = () => {\r\n        db.close();\r\n      };\r\n    };\r\n  });\r\n};\r\n\r\n// Extend ServiceWorkerRegistration interface to include sync property\r\ninterface ExtendedServiceWorkerRegistration extends ServiceWorkerRegistration {\r\n  sync?: {\r\n    register(tag: string): Promise<void>;\r\n  };\r\n}\r\n\r\n// Trigger a background sync\r\nexport const triggerBackgroundSync = async (\r\n  syncTag: string\r\n): Promise<boolean> => {\r\n  if (!isServiceWorkerSupported() || !('SyncManager' in window)) {\r\n    console.warn('Background Sync is not supported in this browser.');\r\n    return false;\r\n  }\r\n  \r\n  try {\r\n    const registration = await navigator.serviceWorker.ready as ExtendedServiceWorkerRegistration;\r\n    \r\n    if (!registration.sync) {\r\n      console.warn('Background Sync API is not available.');\r\n      return false;\r\n    }\r\n    \r\n    await registration.sync.register(syncTag);\r\n    console.log(`Background Sync registered with tag: ${syncTag}`);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Failed to register Background Sync:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Initialize the service worker and offline support\r\nexport const initializeOfflineSupport = async (): Promise<void> => {\r\n  // Register the service worker\r\n  await registerServiceWorker();\r\n  \r\n  // Setup online/offline listeners\r\n  setupOnlineOfflineListeners(\r\n    // Online callback\r\n    () => {\r\n      console.log('Application is back online. Syncing data...');\r\n      \r\n      // Trigger background syncs\r\n      triggerBackgroundSync('sync-reflecties');\r\n      triggerBackgroundSync('sync-task-logs');\r\n    },\r\n    // Offline callback\r\n    () => {\r\n      console.log('Application is offline. Data will be stored locally.');\r\n    }\r\n  );\r\n  \r\n  // Check for updates periodically\r\n  setInterval(() => {\r\n    updateServiceWorker();\r\n  }, 60 * 60 * 1000); // Check every hour\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\utils\\task-validation.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":13,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":13,"endColumn":40}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Task, TaskLog } from '@/types';\r\n\r\n/**\r\n * AI validation service for task logs\r\n * \r\n * This service analyzes task logs and provides personalized insights based on the data.\r\n * It uses rule-based analysis for now, but could be extended to use external AI services.\r\n * \r\n * @param log - The task log to validate\r\n * @param task - The associated task\r\n * @returns A validation message or null if validation fails\r\n */\r\nexport async function validateLogWithAI(log: Partial<TaskLog> & { user_id: string }, task: Partial<Task>) {\r\n  try {\r\n    if (!log || !task) {\r\n      return 'Log succesvol verwerkt. (Onvoldoende gegevens voor analyse)';\r\n    }\r\n    \r\n    // Extract key metrics for analysis\r\n    const painScore = log.pijn_score ?? 0;\r\n    const fatigueScore = log.vermoeidheid_score ?? 0;\r\n    const energyBefore = log.energie_voor ?? 0;\r\n    const energyAfter = log.energie_na ?? 0;\r\n    const energyDifference = energyBefore - energyAfter;\r\n    const taskType = task.type || 'activiteit';\r\n    const taskTitle = task.titel || 'onbekende activiteit';\r\n    const taskDuration = task.duur || 0;\r\n    \r\n    // Log the analysis for debugging and future improvements\r\n    console.debug('AI Validation Analysis', {\r\n      user_id: log.user_id,\r\n      task_id: log.task_id,\r\n      metrics: { painScore, fatigueScore, energyBefore, energyAfter, energyDifference, taskDuration },\r\n      taskInfo: { taskType, taskTitle }\r\n    });\r\n    \r\n    // Analyze patterns and generate insights\r\n    const insights = [];\r\n    \r\n    // High pain and fatigue warning\r\n    if (painScore > 15 && fatigueScore > 15) {\r\n      insights.push(`Opgelet: Hoge pijn (${painScore}/20) en vermoeidheid (${fatigueScore}/20) na \"${taskTitle}\". Overweeg aanpassingen.`);\r\n    } else if (painScore > 15) {\r\n      insights.push(`Opgelet: Hoge pijn (${painScore}/20) na \"${taskTitle}\". Overweeg aanpassingen.`);\r\n    } else if (fatigueScore > 15) {\r\n      insights.push(`Opgelet: Hoge vermoeidheid (${fatigueScore}/20) na \"${taskTitle}\". Overweeg aanpassingen.`);\r\n    }\r\n    \r\n    // Energy expenditure analysis\r\n    if (energyDifference > 8) {\r\n      insights.push(`Deze ${taskType} (\"${taskTitle}\") lijkt veel energie te kosten (verschil: ${energyDifference}). Overweeg de duur of intensiteit aan te passen.`);\r\n    } else if (energyDifference > 5) {\r\n      insights.push(`Deze ${taskType} (\"${taskTitle}\") kost behoorlijk wat energie (verschil: ${energyDifference}). Houd dit in de gaten.`);\r\n    }\r\n    \r\n    // Duration vs energy analysis\r\n    if (taskDuration > 30 && energyDifference > 5) {\r\n      insights.push(`Overweeg om \"${taskTitle}\" op te delen in kortere sessies om energieverlies te beperken.`);\r\n    }\r\n    \r\n    // Return combined insights or default message\r\n    if (insights.length > 0) {\r\n      return insights.join(' ');\r\n    }\r\n    \r\n    // Default validation if no specific flags\r\n    return `Log voor \"${taskTitle}\" succesvol verwerkt. Blijf uw symptomen monitoren.`;\r\n  } catch (error) {\r\n    console.error('Fout bij AI validatie van log:', error, { \r\n      user_id: log?.user_id || 'unknown', \r\n      task_id: log?.task_id || 'unknown' \r\n    });\r\n    return 'Log succesvol verwerkt. (Fout bij genereren van inzichten)';\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nick\\Desktop\\FibroGuardian\\utils\\validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
