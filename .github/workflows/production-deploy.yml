name: Production Deployment Pipeline

on:
  workflow_dispatch: # Handmatig triggeren met inputs
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0, zonder "v")'
        required: true
        type: string
      release_notes:
        description: 'Release notes for this deployment (Markdown format)'
        required: true
        type: string
      run_migrations:
        description: 'Run database migrations (true/false)'
        type: boolean
        default: true
      notify_team:
        description: 'Notify team via Slack (true/false)'
        type: boolean
        default: true

jobs:
  validate_inputs_and_branch:
    name: Validate Inputs & Branch
    runs-on: ubuntu-latest
    outputs:
      version_tag: v${{ github.event.inputs.version }} # Voeg 'v' toe voor de tag
      release_notes: ${{ github.event.inputs.release_notes }}
      run_migrations: ${{ github.event.inputs.run_migrations }}
      notify_team: ${{ github.event.inputs.notify_team }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Gebruik v4

      - name: Check if on main branch
        if: github.ref_name != 'main' # Controleer of de workflow wordt uitgevoerd op de 'main' branch
        run: |
          echo "::error::Production deployments must be run from the 'main' branch. Current branch: ${{ github.ref_name }}"
          exit 1
      
      - name: Validate version format (e.g., 1.0.0)
        # Regex voor SemVer: major.minor.patch eventueel met -prerelease+buildmetadata
        # Voor nu een simpele check: N.N.N
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?(\+[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$ ]]; then
            echo "::error::Version format is invalid. Expected format like 1.0.0 or 1.2.3-beta.1. Received: $VERSION"
            exit 1
          fi
          echo "Version format validated: $VERSION"

      - name: Check for existing tag
        run: |
          VERSION_TAG="v${{ github.event.inputs.version }}"
          if git rev-parse "$VERSION_TAG" >/dev/null 2>&1; then
            echo "::error::Tag $VERSION_TAG already exists. Please use a new version number."
            exit 1
          fi
          echo "Tag $VERSION_TAG is new."

  test_and_lint: # Samengevoegd voor efficiëntie
    name: Test, Lint & Type Check
    runs-on: ubuntu-latest
    needs: validate_inputs_and_branch
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Of de versie gespecificeerd in package.json engines
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linting
        run: npm run lint
      
      - name: Run type check
        run: npm run type-check
      
      - name: Run tests with coverage
        run: npm run test -- --coverage 
        # De coverage check zelf kan hier of in een aparte job.
        # Voorbeeld: npx jest --coverage --coverageReporters="json-summary" && node ./scripts/check-coverage.js
        # Waarbij check-coverage.js de coverage/coverage-summary.json leest en faalt indien nodig.

  build_application:
    name: Build Application
    needs: test_and_lint
    runs-on: ubuntu-latest
    outputs:
      artifact_name: build-artifacts-${{ needs.validate_inputs_and_branch.outputs.version_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_APP_VERSION: ${{ needs.validate_inputs_and_branch.outputs.version_tag }}
          # Zorg dat productie environment variabelen hier beschikbaar zijn indien nodig voor de build
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL_PROD }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY_PROD }}
          # STRIPE_SECRET_KEY is niet nodig voor de client build
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY_PROD }}

      - name: Compress build artifacts
        run: tar -czvf ${{ needs.validate_inputs_and_branch.outputs.version_tag }}_build.tar.gz .next public # Inclusief public map voor PWA assets
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.validate_inputs_and_branch.outputs.version_tag }}-build-artifact # Unieke naam
          path: ${{ needs.validate_inputs_and_branch.outputs.version_tag }}_build.tar.gz

  notify_pre_deployment:
    name: Notify Pre-Deployment
    runs-on: ubuntu-latest
    needs: build_application
    if: ${{ needs.validate_inputs_and_branch.outputs.notify_team == 'true' }} # String 'true' vergelijking
    steps:
      - name: Send Slack Notification
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{
            "text": "🚀 *Production Deployment Started*\n*Version:* ${{ needs.validate_inputs_and_branch.outputs.version_tag }}\n*Release Notes:*\n${{ needs.validate_inputs_and_branch.outputs.release_notes }}\n*Deployment initiated by:* ${{ github.actor }}\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Workflow>"
          }' ${{ secrets.SLACK_WEBHOOK_URL_PROD }} # Gebruik een specifieke webhook voor productie alerts

  deploy_to_production:
    name: Deploy to Production Environment
    needs: notify_pre_deployment # Wacht op notificatie (of direct op build_application als notify optioneel is)
    runs-on: ubuntu-latest
    environment: 
      name: production
      url: https://fibroguardian.be # Update met de daadwerkelijke productie URL
    steps:
      - name: Checkout code (nodig voor Dockerfile als die niet in artifact zit)
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build_application.outputs.artifact_name }} # Gebruik output van build job
      
      - name: Extract build artifacts
        run: tar -xzvf ${{ needs.validate_inputs_and_branch.outputs.version_tag }}_build.tar.gz
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4 # Gebruik v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: eu-central-1 # Of je productie regio
      
      - name: Run database migrations
        if: ${{ needs.validate_inputs_and_branch.outputs.run_migrations == 'true' }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN_PROD }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD_PROD }} # Voor directe db connectie indien nodig
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID_PROD }}
        run: |
          echo "Attempting to install Supabase CLI..."
          npm install -g supabase@latest
          echo "Supabase CLI installed."
          echo "Running database migrations for project ${{ env.SUPABASE_PROJECT_ID }}..."
          # Voorbeeld: supabase link --project-ref ${{ env.SUPABASE_PROJECT_ID }} (als je lokaal werkt)
          # Voor CI, direct db push (zorg dat de CLI is geconfigureerd of gebruik access token)
          # Het is veiliger om migraties via een management console of een specifieke migration tool te doen
          # dan direct vanuit CI met een algemeen access token.
          # Voor nu, aanname dat `supabase db push` werkt met een service role key of access token.
          # Let op: `supabase db push` kan destructief zijn als de lokale state niet overeenkomt.
          # Overweeg `supabase migration up` als je een migration-gebaseerde workflow hebt.
          supabase db push --db-url "postgresql://postgres:${{ env.SUPABASE_DB_PASSWORD }}@db.${{ env.SUPABASE_PROJECT_ID }}.supabase.co:5432/postgres"
          echo "Database migrations attempted."
      
      - name: Deploy to AWS ECS (Example)
        # Dit is een complex voorbeeld en vereist een Dockerfile in je repo
        # en een bestaande ECR repo, ECS cluster, service, en task definition.
        # Vereenvoudig of pas aan naar je deployment provider (bv. Vercel, Netlify, Fly.io)
        env:
          ECR_REPOSITORY_NAME: fibroguardian-pro-app # Naam van je ECR repository
          ECS_CLUSTER_NAME: fibroguardian-production-cluster
          ECS_SERVICE_NAME: fibroguardian-production-service
          # ECS_TASK_DEFINITION_FAMILY: fibroguardian-production-taskdef # Familie, niet ARN
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID_PROD }}
          AWS_REGION: eu-central-1 # Stel de regio hier expliciet in of haal uit een secret
        run: |
          IMAGE_TAG="${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY_NAME }}:${{ needs.validate_inputs_and_branch.outputs.version_tag }}"
          
          echo "Logging in to Amazon ECR..."
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          
          echo "Building Docker image: $IMAGE_TAG"
          docker build -t $IMAGE_TAG . 
          
          echo "Pushing Docker image to ECR: $IMAGE_TAG"
          docker push $IMAGE_TAG
          
          echo "Updating ECS service ${{ env.ECS_SERVICE_NAME }} in cluster ${{ env.ECS_CLUSTER_NAME }} to use image $IMAGE_TAG"
          # Dit vereist dat je task definition image placeholder gebruikt of een nieuwe revisie maakt.
          # Voorbeeld: aws ecs update-service --cluster ${{ env.ECS_CLUSTER_NAME }} --service ${{ env.ECS_SERVICE_NAME }} --task-definition ${{ env.ECS_TASK_DEFINITION_FAMILY }} --force-new-deployment
          # Een betere aanpak is om een nieuwe task definition revisie te registreren met de nieuwe image,
          # en dan de service te updaten om die revisie te gebruiken.
          echo "ECS deployment step needs to be fully implemented based on your setup."

      - name: Create CloudFront Invalidation (if using CloudFront)
        if: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_PROD != '' }} # Alleen als ID is geconfigureerd
        run: |
          echo "Creating CloudFront invalidation for distribution ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_PROD }}"
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_PROD }} --paths "/*"
          echo "CloudFront invalidation created."

  post_deployment_checks_and_release:
    name: Post-Deployment Checks & Release
    needs: deploy_to_production
    runs-on: ubuntu-latest
    steps:
      - name: Run Health Checks
        run: |
          echo "Waiting for deployment to stabilize (e.g., 60 seconds)..."
          sleep 60 
          echo "Performing health check on production URL: https://fibroguardian.be" # Update URL
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://fibroguardian.be) # Update URL
          if [ "$STATUS_CODE" -ne 200 ]; then
            echo "::error::Health check failed for homepage! Status: $STATUS_CODE"
            # exit 1 # Maak dit een harde fail indien gewenst
          else
            echo "Homepage health check passed (Status: $STATUS_CODE)."
          fi
          # Voeg meer checks toe voor kritieke API endpoints of pagina's
      
      - name: Create GitHub Release Tag
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate_inputs_and_branch.outputs.version_tag }}
          release_name: Release ${{ needs.validate_inputs_and_branch.outputs.version_tag }}
          body: ${{ needs.validate_inputs_and_branch.outputs.release_notes }}
          draft: false
          prerelease: false # Zet op true als het een beta/RC is

      - name: Notify Team of Success
        if: ${{ success() && needs.validate_inputs_and_branch.outputs.notify_team == 'true' }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{
            "text": "✅ *Production Deployment Successful*\n*Version:* ${{ needs.validate_inputs_and_branch.outputs.version_tag }}\n*Environment:* Production\n*URL:* https://fibroguardian.be\n*Release Notes:*\n${{ needs.validate_inputs_and_branch.outputs.release_notes }}\n<${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.validate_inputs_and_branch.outputs.version_tag }}|View Release>"
          }' ${{ secrets.SLACK_WEBHOOK_URL_PROD }}
      
      - name: Notify Team of Failure
        if: ${{ failure() && needs.validate_inputs_and_branch.outputs.notify_team == 'true' }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{
            "text": "❌ *Production Deployment Failed*\n*Version:* ${{ needs.validate_inputs_and_branch.outputs.version_tag }}\n*Please check the GitHub Actions logs for details:*\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Workflow>"
          }' ${{ secrets.SLACK_WEBHOOK_URL_PROD }}
